name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested arrays,\n/// which\
  \ is similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the array,\n\
  /// and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2,\
  \ 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n\
  /// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst:\
  \ [[Int]], x: Int) -> [(Int, Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    if lst.isEmpty {\n        return [] as [(Int, Int)]\n    }\n  \
    \  var row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ cols_rev = [Int]()\n    var i = 0\n    for row in lst {\n        if row.contains(x)\
    \ {\n            rows.append(i)\n            cols.append(row.indexOf(x))\n   \
    \         cols_rev.append(row.lastIndexOf(x))\n        }\n        i += 1\n   \
    \ }\n    rows.sort()\n    cols.sort()\n    cols_rev.sort()\n    var result = [(0,\
    \ 0)]\n    for _ in 0..<rows.count {\n        result.append((rows[_], cols[_]))\n\
    \    }\n    return result", "    var coords = [(Int, Int)]()\n    var row = [Int]()\n\
    \    var col = [Int]()\n    var rowLen = 0\n    var colLen = 0\n    for row in\
    \ lst {\n        rowLen += 1\n        for col in row {\n            colLen +=\
    \ 1\n            if col == x {\n                coords.append((rowLen, colLen))\n\
    \            }\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return coords", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var cols\
    \ = [Int]()\n    var col = 0\n    for row in lst {\n        if row.contains(x)\
    \ {\n            rows.append((row, cols))\n        }\n        cols.append(col)\n\
    \        col++\n    }\n    rows.sortInPlace()\n    for row in rows {\n       \
    \ row.sortInPlace()\n    }\n    return rows", "    var row = [Int]()\n    var\
    \ coords = [(Int, Int)]()\n    for row in lst {\n        coords = coords.sorted()\n\
    \        coords = coords.reversed()\n        if coords.contains((x, 0)) {\n  \
    \          return coords.map { coord -> (Int, Int) in\n                return\
    \ (coord, row.count)\n            }\n        }\n    }\n    return []", "    var\
    \ result = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, v))\n        \
    \    }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty {\n        return [] as! [(Int, Int)]\n\
    \    }\n    var row = [Int]()\n    var column = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for column in row {\n            if column\
    \ == x {\n                result.append((row, column))\n            }\n      \
    \  }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var cols = [Int]()\n\
    \    var col = [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n \
    \       cols = row\n        cols = cols.sorted()\n        for col in cols {\n\
    \            if col == x {\n                rows.append((i, col))\n          \
    \  }\n        }\n        i += 1\n    }\n    return rows", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var rows = [[(Int, Int)]]()\n    var row =\
    \ [Int]()\n    var cols = [Int]()\n    var col = 0\n    var rowIdx = 0\n    for\
    \ row in lst {\n        if row.contains(x) {\n            rows.append(row)\n \
    \       }\n    }\n    for row in rows {\n        row.sort(by: {$0 < $1})\n   \
    \     row.sort(by: {$1 > $1})\n        for col in row {\n            cols.append(col)\n\
    \        }\n    }\n    for col in cols {\n        row.sort(by: {$0 < $1})\n  \
    \      row.sort(by: {$1 > $1})\n        rows.append(row)\n    }\n    return rows",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        var rowResult =\
    \ [(Int, Int)]()\n        for column in row {\n            if column == x {\n\
    \                rowResult.append((column, row))\n            }\n        }\n \
    \       result = result.sorted(by: { $0.0 < $1.0 }).append(rowResult).sorted(by:\
    \ { $0.0 < $1.0 })\n    }\n    return result", "    var coords = [(Int, Int)]()\n\
    \    for row in lst {\n        for (i, v) in row.enumerated() {\n            if\
    \ v == x {\n                coords.append((i, v))\n            }\n        }\n\
    \    }\n    coords.sortInPlace()\n    coords.sortInPlace{ $0.1 < $1.1 }\n    return\
    \ coords", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ row_index = 0\n    var col_index = 0\n    var i = 0\n    for row in lst {\n\
    \        for col in row {\n            if col == x {\n                rows.append(row_index)\n\
    \                cols.append(col_index)\n            }\n            col_index\
    \ += 1\n        }\n        col_index = 0\n        row_index += 1\n    }\n    rows.sortInPlace()\n\
    \    cols.sortInPlace()\n    var result = [((Int, Int), Int)]()\n    for row in\
    \ rows {\n        for col in cols {\n            result.append((row, col))\n \
    \       }\n    }\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n   \
    \ for row in lst {\n        i += 1\n        if i == x {\n            break\n \
    \       }\n    }\n    if i == x {\n        return [(i, 0)]\n    }\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \        for col in row {\n            i += 1\n            if i == x {\n     \
    \           break\n            }\n        }\n    }\n    return [(i, 0)]", "  \
    \  if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var rowIdx\
    \ = 0\n    var colIdx = 0\n    var rowIdxMax = lst.count\n    var colIdxMax =\
    \ lst[0].count\n    var rowIdxMin = rowIdxMax\n    var colIdxMin = colIdxMax\n\
    \    var rowIdxMax = rowIdxMax\n    var colIdxMax = colIdxMax\n    var rowIdxMin\
    \ = rowIdxMax\n    var colIdxMin = colIdxMax\n    var rowIdxMax = rowIdxMax\n\
    \    var colIdxMax = colIdxMax\n    var rowIdxMin = rowIdxMax\n    var colIdxMin\
    \ = colIdxMax\n    var rowIdxMax = rowIdxMax\n    var colIdxMax = colIdxMax\n\
    \    var rowIdxMin = rowIdxMax\n    var colIdxMin = colIdxMax\n    var rowIdxMax\
    \ = rowIdxMax\n    var colIdxMax = colIdxMax\n    var rowIdxMin = rowIdxMax\n\
    \    var colIdxMin = colIdxMax\n    var rowIdxMax = rowIdxMax\n    var colIdxMax\
    \ = colIdxMax\n    var rowIdxMin = rowIdxMax\n    var colIdxMin = colIdxMax\n\
    \    var rowIdxMax = rowIdxMax\n    var colIdxMax = colIdxMax\n    var rowIdxMin\
    \ = rowIdxMax\n    var colIdxMin = colIdxMax\n    var rowIdxMax = rowIdxMax\n\
    \    var colIdxMax = colIdxMax\n    var rowIdxMin = rowIdxMax\n    var colIdxMin\
    \ = colIdxMax\n    var rowIdxMax = rowIdxMax\n    var colIdxMax = colIdxMax\n\
    \    var rowIdxMin = rowIdxMax\n    var colIdxMin = colIdxMax\n    var rowIdxMax\
    \ = rowIdxMax\n    var colIdxMax = colIdxMax\n    var rowIdxMin = rowIdxMax\n\
    \    var colIdxMin = colIdxMax\n    var rowIdxMax = rowIdxMax\n    var colIdxMax\
    \ = colIdxMax\n    var rowIdxMin = rowIdxMax\n    var colIdxMin = colIdxMax\n\
    \    var rowIdxMax = rowIdxMax\n    var colIdxMax = colIdxMax\n    var rowIdxMin\
    \ = rowIdxMax\n    var colIdxMin = colIdxMax\n    var rowIdxMax = rowIdxMax\n\
    \    var colIdxMax = colIdxMax\n    var rowIdxMin = rowIdxMax\n    var colIdxMin\
    \ = ", "    var row = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var row_index = 0\n    var col_index = 0\n    var\
    \ row_indexes = [Int]()\n    var col_indexes = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sor", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    for row in lst {\n        if row_index == 0\
    \ {\n            rows.append(row)\n        } else {\n            if col_index\
    \ == 0 {\n                rows[row_index] = row\n            } else {\n      \
    \          rows[row_index] = rows[row_index].sorted()\n            }\n       \
    \ }\n        col_index += 1\n    }\n    if col_index == 0 {\n        return rows\n\
    \    }\n    for row in rows {\n        row[col_index] = row\n    }\n    rows.reverse()\n\
    \    return rows", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    for row in lst {\n        if row_index == 0\
    \ {\n            cols = row.count\n        } else {\n            rows.append(row_index)\n\
    \        }\n        for col in row {\n            if col_index == 0 {\n      \
    \          rows.append(col)\n            } else {\n                cols.append(col_index)\n\
    \            }\n            col_index += 1\n        }\n        row_index += 1\n\
    \    }\n    rows = rows.sorted()\n    cols = cols.sorted()\n    var result = [(Int,\
    \ Int)]()\n    for row in rows {\n        for col in cols {\n            if col\
    \ == x {\n                result.append( (row, col) )\n            }\n       \
    \ }\n    }\n    return result", "    if lst.isEmpty() {\n        return []\n \
    \   }\n    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        i += 1\n        if i == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        i += 1\n        if i\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        i\
    \ += 1\n        if i == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        i += 1\n        if i == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        i += 1\n        if i\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        i\
    \ += 1\n        if i == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        i += 1\n        if i == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        i += 1\n        if i\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        i\
    \ += 1\n        if i == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        i += 1\n        if i == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        i += 1\n        if i\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        i\
    \ += 1\n        if i == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        i += 1\n        if i == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        i += 1\n        if i\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        i\
    \ += 1\n        if i == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        i += 1\n        if i == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        i += 1\n        if i == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        i += 1\n        if i\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        i\
    \ += 1\n        if i == x {\n            break\n        }\n    }\n    for row\
    \ in lst {", "    var result = [(0, 0)]\n    for row in lst {\n        if row.contains(x)\
    \ {\n            result.append(row)\n        }\n    }\n    result.sort(by: {$0.0\
    \ < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var rows = [Int]()\n    var columns = [Int]()\n    var row_index = 0\n  \
    \  var column_index = 0\n    var i = 0\n    for row in lst {\n        column_index\
    \ = column_index + row.count\n        if column_index == x {\n            rows.append(row_index)\n\
    \            columns.append(column_index)\n            column_index = 0\n    \
    \    }\n    }\n    rows.append(row_index)\n    columns.append(column_index)\n\
    \    return rows", "    if lst.isEmpty {\n        return [] // empty list\n  \
    \  }\n    var row = [Int]()\n    var rows = [Int]()\n    var columns = [Int]()\n\
    \    var row_index = 0\n    var column_index = 0\n    for row in lst {\n     \
    \   if column_index < row.count {\n            columns.append(row_index)\n   \
    \     }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n        column_index = 0\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    for row in lst {\n        if column_index < row.count {\n            columns.append(row_index)\n\
    \        }\n", "    var result = [(Int, Int)]()\n    if lst.isEmpty {\n      \
    \  return result\n    }\n    var row = 0\n    var col = 0\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row.indices {\n        if col > row {\n            break\n        }\n      \
    \  if col == row {\n            result.append((row, col))\n        }\n    }\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var cols =\
    \ [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n        if i ==\
    \ 0 {\n            cols = row\n        } else {\n            for col in row {\n\
    \                if j == 0 {\n                    rows.append(col)\n         \
    \       } else {\n                    cols.append(col)\n                }\n  \
    \          }\n        }\n        i += 1\n        j -= 1\n    }\n    rows = rows.sorted()\n\
    \    cols = cols.sorted()\n    var result = [(0, 0)]\n    for row in rows {\n\
    \        for col in cols {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var rows = [Int]()\n    var cols = [Int]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        cols = row.map\
    \ { $0 }\n        if cols.contains(x) {\n            return [(row, col)]\n   \
    \     }\n    }\n    return []", "    var result = [(Int, Int)]()\n    var row\
    \ = 0\n    var col = 0\n    for row in lst {\n        for col in row {\n     \
    \       if col == x {\n                result.append( (row, col) )\n         \
    \   }\n        }\n    }\n    result.sort(by: { (row1, row2) in\n        return\
    \ row1.0 < row2.0\n    })\n    result.sort(by: { (col1, col2) in\n        return\
    \ col1.0 < col2.0\n    })\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n    var\
    \ rows = [Int]()\n    var columns = [Int]()\n    var rowIndex = 0\n    var columnIndex\
    \ = 0\n    for row in lst {\n        columnIndex = columns.count\n        for\
    \ column in row {\n            if column == x {\n                rows.append(rowIndex)\n\
    \                columns.append(columnIndex)\n            }\n        }\n     \
    \   rowIndex += 1\n    }\n    return [(rows[0], columns[0])] + get_row(lst: lst.dropFirst(),\
    \ x: x) + [(rows[rows.count - 1], columns[columns.count - 1])]", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(0, -1)]\n    for row in lst\
    \ {\n        if row.isEmpty {\n            continue\n        }\n        var rowResult\
    \ = [(0, -1)]\n        for col in row {\n            if col == x {\n         \
    \       rowResult.append((row, col))\n            }\n        }\n        result\
    \ = result.union(rowResult)\n    }\n    return result.sorted(by: { $0.0 < $1.0\
    \ }).sorted(by: { $0.1 < $1.1 })", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var coords = [(0, 0)]\n    for row in lst {\n        var coord = coords[0]\n\
    \        for _ in 0..<row.count {\n            coord = (coord.row+1, coord.col+1)\n\
    \            if coord.row == row.count {\n                coord.row = 0\n    \
    \            coord.col++\n            }\n            coords.append(coord)\n  \
    \      }\n    }\n    coords.sortInPlace()\n    var result = [(0, 0)]\n    for\
    \ coord in coords {\n        if coord.row == x {\n            result.append(coord)\n\
    \        }\n    }\n    result.sortInPlace()\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var coord = Int()\n\
    \    var rowCoord = Int()\n    var rowCoordDesc = Int()\n    var rowCoordDesc2\
    \ = Int()\n    var rowCoordDesc3 = Int()\n    var rowCoordDesc4 = Int()\n    var\
    \ rowCoordDesc5 = Int()\n    var rowCoordDesc6 = Int()\n    var rowCoordDesc7\
    \ = Int()\n    var rowCoordDesc8 = Int()\n    var rowCoordDesc9 = Int()\n    var\
    \ rowCoordDesc10 = Int()\n    var rowCoordDesc11 = Int()\n    var rowCoordDesc12\
    \ = Int()\n    var rowCoordDesc13 = Int()\n    var rowCoordDesc14 = Int()\n  \
    \  var rowCoordDesc15 = Int()\n    var rowCoordDesc16 = Int()\n    var rowCoordDesc17\
    \ = Int()\n    var rowCoordDesc18 = Int()\n    var rowCoordDesc19 = Int()\n  \
    \  var rowCoordDesc20 = Int()\n    var rowCoordDesc21 = Int()\n    var rowCoordDesc22\
    \ = Int()\n    var rowCoordDesc23 = Int()\n    var rowCoordDesc24 = Int()\n  \
    \  var rowCoordDesc25 = Int()\n    var rowCoordDesc26 = Int()\n    var rowCoordDesc27\
    \ = Int()\n    var rowCoordDesc28 = Int()\n    var rowCoordDesc29 = Int()\n  \
    \  var rowCoordDesc30 = Int()\n    var rowCoordDesc31 = Int()\n    var rowCoordDesc32\
    \ = Int()\n    var rowCoordDesc33 = Int()\n    var rowCoordDesc34 = Int()\n  \
    \  var rowCoordDesc35 = Int()\n    var rowCoordDesc36 = Int()\n    var rowCoordDesc37\
    \ = Int()\n    var rowCoordDesc38 = Int()\n    var rowCoordDesc39 = Int()\n  \
    \  var rowCoordDesc40 = Int()\n    var rowCoordDesc41 = Int()\n    var rowCoordDesc42\
    \ = Int()\n    var rowCoordDesc43 = Int()\n    var rowCoordDesc44 = Int()\n  \
    \  var rowCoordDesc45 = Int()\n    var rowCoordDesc46 = Int()\n    var rowCoordDesc47\
    \ = Int()\n    var rowCoordDesc48 = Int()\n    var rowCoordDesc49 = Int()\n  \
    \  var rowCoordDesc50 = Int()\n    var rowCoordDesc51 = Int()\n    var rowCoordDesc52\
    \ = Int()\n    var rowCoordDesc53 = Int()\n    var rowCoordDesc54 = Int()\n  \
    \  var rowCoordDesc55 = ", "    if lst.isEmpty() {\n        return []\n    }\n\
    \    var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var\
    \ cols = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    for row in\
    \ lst {\n        if i == 0 {\n            cols = row.map { $0 }\n            cols\
    \ = cols.reverse()\n            cols = cols.map { $0 + 1 }\n            cols =\
    \ cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + 1 }\n            cols = cols.map { $0 + 1 }\n            cols\
    \ = cols.map { $0 + ", "    if lst.isEmpty() {\n        return []\n    }\n   \
    \ var row = [Int]()\n    var col = [Int]()\n    var rowOrder = Int()\n    var\
    \ colOrder = Int()\n    var i = 0\n    var j = 0\n    for row in lst {\n     \
    \   if rowOrder == row[0] {\n            j = j + 1\n            colOrder = col[0]\n\
    \        } else {\n            rowOrder = row[0]\n            j = j + 1\n    \
    \        colOrder = col[0]\n        }\n        if colOrder == col[j] {\n     \
    \       i = i + 1\n        } else {\n            colOrder = col[j]\n         \
    \   i = i + 1\n        }\n        if i == x {\n            return [(rowOrder,\
    \ colOrder)]\n        }\n    }\n    return []", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for (i, v) in row.enumerated() {\n            if\
    \ v == x {\n                result.append( (i, v) )\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    if\
    \ lst[0].count < x {\n        return lst\n    }\n    var row = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var col = 0\n    var rowIdx = 0\n\
    \    var colIdx = 0\n    for row in lst {\n        if row.count < x {\n      \
    \      continue\n        }\n        if rowIdx < row.count {\n            for col\
    \ in rows[rowIdx..<row.count] {\n                if colIdx < col {\n         \
    \           colIdx += 1\n                    continue\n                }\n   \
    \             colIdx = col\n                rowIdx += 1\n                row.append(col)\n\
    \            }\n        } else {\n            rowIdx += 1\n            row.append(col)\n\
    \        }\n        cols.append(col)\n    }\n    rows = rows.reverse()\n    cols\
    \ = cols.reverse()\n    for col in cols {\n        if col == x {\n           \
    \ return [(rows[rowIdx], col)]\n        }\n    }\n    return []", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var rows = [Int]()\n\
    \    var columns = [Int]()\n    var row_index = 0\n    var column_index = 0\n\
    \    for row in lst {\n        columns.append(0)\n        for column in row {\n\
    \            if column == x {\n                columns[column_index] = column_index\n\
    \                rows.append(row_index)\n                column_index += 1\n \
    \           }\n        }\n        row_index += 1\n    }\n    columns.reverse()\n\
    \    rows.reverse()\n    return zip(rows, columns)", "    if lst.isEmpty() {\n\
    \        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    for row in lst {\n        i += 1\n        if i ==\
    \ x {\n            break\n        }\n    }\n    for col in row {\n        j +=\
    \ 1\n        if j == x {\n            break\n        }\n    }\n    return lst.map\
    \ { (x, y) -> (Int, Int) in\n        return (i, j)\n    }.sorted(by: { $0.0 <\
    \ $1.0 }).reversed()", "    if lst.isEmpty() {\n        return []\n    }\n   \
    \ var row = [Int]()\n    var col = [Int]()\n    var rowIdx = -1\n    var colIdx\
    \ = -1\n    for row in lst {\n        colIdx = -1\n        for col in row {\n\
    \            if col == x {\n                rowIdx = row.count\n             \
    \   break\n            }\n            colIdx += 1\n        }\n        if rowIdx\
    \ >= 0 {\n            break\n        }\n    }\n    if rowIdx < 0 {\n        return\
    \ []\n    }\n    col.sort()\n    col.sort(by: >)\n    return lst.enumerated().map\
    \ { (idx, row) in\n        let (row, col) = row[idx]\n        return (rowIdx,\
    \ colIdx)\n    }", "    var row = [Int]()\n    var column = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append((row, column))\n      \
    \      }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var column = [Int]()\n    var row_index = 0\n    var column_index\
    \ = 0\n    for row in lst {\n        column_index = row.count\n        if column_index\
    \ > x {\n            break\n        }\n        column = row[x..<column_index]\n\
    \        if row_index == 0 {\n            column = column.reversed()\n       \
    \ }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if row_index == 0 {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index > row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index == row.count {\n            column = column.reversed()\n\
    \        }\n        if column_index", "    if lst.isEmpty {\n        return []\
    \ // empty list\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    for row in lst {\n        if i == x {\n          \
    \  break\n        }\n        i += 1\n    }\n    for row in lst {\n        if i\
    \ == x {\n            break\n        }\n        j += 1\n        for col in row\
    \ {\n            if j == x {\n                break\n            }\n         \
    \   j += 1\n        }\n    }\n    return [(i, j)] // return coordinates of row",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ column = [Int]()\n    var result = [(Int, Int)]()\n    var rowIndex = 0\n  \
    \  var columnIndex = 0\n    for row in lst {\n        columnIndex = row.count\n\
    \        if columnIndex == x {\n            result.append((rowIndex, columnIndex))\n\
    \        }\n        if columnIndex > x {\n            break\n        }\n     \
    \   columnIndex -= 1\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    if lst.isEmpty {\n        return []\n\
    \    }\n    var row = [Int]()\n    var rows = [Int]()\n    var columns = [Int]()\n\
    \    var column = 0\n    var rowIndex = 0\n    for row in lst {\n        if rowIndex\
    \ == 0 {\n            columns = row\n        } else {\n            columns.append(row[column])\n\
    \        }\n        rowIndex++\n    }\n    columns.sort()\n    columns.reverse()\n\
    \    for column in columns {\n        if column == x {\n            var tuple\
    \ = (rowIndex, column)\n            rows.append(tuple)\n        }\n    }\n   \
    \ rows.sort()\n    rows.reverse()\n    return rows", "    if lst.isEmpty {\n \
    \       return []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n \
    \   var col = 0\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n        result.append((row, col))\n    }\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var coords = [(Int, Int)]()\n    var rowCoords = [(Int, Int)]()\n\
    \    var rowCoordsSorted = [(Int, Int)]()\n    var rowCoordsSortedInReverse =\
    \ [(Int, Int)]()\n    var rowCoordsSortedInReverseSorted = [(Int, Int)]()\n  \
    \  var rowCoordsSortedInReverseSortedInReverse = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverse\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverse\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverse\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverse\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverse\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverse\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedInReverseSortedIn",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var rowInd\
    \ = 0\n    var colInd = 0\n    var rowIndMax = lst.count\n    var colIndMax =\
    \ lst[0].count\n    var rowIndMin = rowIndMax\n    var colIndMin = colIndMax\n\
    \    var rowIndMax = rowIndMax\n    var colIndMax = colIndMax\n    var rowIndMin\
    \ = rowIndMax\n    var colIndMin = colIndMax\n    var rowIndMax = rowIndMax\n\
    \    var colIndMax = colIndMax\n    var rowIndMin = rowIndMax\n    var colIndMin\
    \ = colIndMax\n    var rowIndMax = rowIndMax\n    var colIndMax = colIndMax\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               coords.append(col)\n                rows.append(rowInd)\n    \
    \            cols.append(colInd)\n                rowInd++\n                colInd++\n\
    \                if rowInd == rowIndMax {\n                    rowIndMax++\n \
    \                   rowIndMin = rowIndMax\n                }\n               \
    \ if colInd == colIndMax {\n                    colIndMax++\n                \
    \    colIndMin = colIndMax\n                }\n            }\n        }\n    }\n\
    \    rows.sortInPlace()\n    cols.sortInPlace()\n    var result = [((Int, Int),\
    \ Int)]()\n    for row in rows {\n        for col in cols {\n            if row\
    \ == 0 || col == 0 {\n                continue\n            }\n            result.append((((row,\
    \ col), coords[col]), coords[col]))\n        }\n    }\n    return result", " \
    \   if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n     \
    \   for col in row {\n            if col == x {\n                result.append(\
    \ (row, col) )\n            }\n        }\n    }\n    result.sortInPlace()\n  \
    \  result.sortInPlaceInDescendingOrder()\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var i = 0\n    for row in lst {\n        i += 1\n        if i == x {\n  \
    \          break\n        }\n    }\n    var j = 0\n    for col in row {\n    \
    \    j += 1\n        if j == x {\n            break\n        }\n    }\n    return\
    \ row.enumerated().map { (index, value) in\n        return (index, value)\n  \
    \  }.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.1 < $1.1 })", "    var rows =\
    \ [[(Int, Int)]]()\n    for row in lst {\n        var cols = [Int]()\n       \
    \ for col in row {\n            if col == x {\n                cols.append(col)\n\
    \            }\n        }\n        rows.append((col, cols))\n    }\n    rows.sortInPlaceByColumn(0)\n\
    \    rows.sortInPlaceByColumn(1)\n    return rows", "    if lst.isEmpty() {\n\
    \        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst == nil || len(lst) == 0 {\n        return nil\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for col in row {\n            if col\
    \ == x {\n                result.append((row, col))\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a[1] > b[1]\n    })\n    return result",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var rowIdx = -1\n    var colIdx = -1\n    for row in lst\
    \ {\n        colIdx = -1\n        for col in row {\n            if col == x {\n\
    \                rowIdx = row.count\n                break\n            }\n  \
    \          colIdx += 1\n        }\n        if rowIdx != -1 {\n            break\n\
    \        }\n    }\n    if rowIdx == -1 {\n        return []\n    }\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        colIdx = -1\n        for col\
    \ in row {\n            if col == x {\n                result.append( (rowIdx,\
    \ colIdx) )\n                break\n            }\n            colIdx += 1\n \
    \       }\n    }\n    result.sortInPlace()\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var i = 0\n    for row in lst {\n        i += 1\n        if i == x {\n  \
    \          break\n        }\n    }\n    for row in lst {\n        i += 1\n   \
    \     if i == x {\n            break\n        }\n        for column in row {\n\
    \            column.reverse()\n        }\n    }\n    return lst.sorted().map {\
    \ (row: Int, column: Int) -> (Int, Int) in\n        return (row, column)\n   \
    \ }", "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n\
    \    var coords = [(Int, Int)]()\n    var rowCoords = [(Int, Int)]()\n    var\
    \ rowCoordsSorted = [(Int, Int)]()\n    var rowSorted = [Int]()\n    var rowSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSorted = [Int]()\n    var rowSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSorted = [Int]()\n    var rowSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSorted = [Int]()\n    var\
    \ rowSortedSortedSortedSortedSortedSortedSorted = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = ", "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var col = 0\n    var rowIdx\
    \ = 0\n    var colIdx = 0\n    for row in lst {\n        if row.contains(x) {\n\
    \            rows.append(row)\n            cols.append(col)\n        }\n     \
    \   colIdx++\n        if colIdx == row.count {\n            colIdx = 0\n     \
    \       rowIdx++\n            col = 0\n        }\n    }\n    rows.sortInPlace()\n\
    \    cols.sortInPlace()\n    var result = [(0, cols.last!)]\n    for row in rows\
    \ {\n        result.append((rowIdx, cols.first!))\n    }\n    return result",
  "    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                return\
    \ [(i, col)]\n            }\n        }\n        i += 1\n    }\n    return []",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var result = [(Int, Int)]()\n    var rowIdx = 0\n    var\
    \ colIdx = 0\n    for row in lst {\n        if rowIdx >= row.count {\n       \
    \     rowIdx = 0\n            colIdx += 1\n        }\n        if colIdx >= row.count\
    \ {\n            colIdx = 0\n            rowIdx += 1\n        }\n        if rowIdx\
    \ != colIdx {\n            result.append((rowIdx, colIdx))\n        }\n      \
    \  if rowIdx != x {\n            result.append((rowIdx, colIdx))\n        }\n\
    \    }\n    return result", "    if lst.isEmpty() {\n        return []\n    }\n\
    \    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in lst\
    \ {\n        i += 1\n        if i == x {\n            return row\n        }\n\
    \    }\n    return []", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for (i, v) in row.enumerated() {\n            if v == x {\n         \
    \       result.append( (i, v) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    if lst ==\
    \ nil {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var result = [(0, 0)]\n    for row in lst {\n        for column in row {\n\
    \            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst == [] {\n        return []\n    }\n    var row\
    \ = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n\
    \    var i = 0\n    var j = 0\n    for row in lst {\n        if i == 0 {\n   \
    \         cols = row\n        } else {\n            rows.append(i)\n        }\n\
    \        for col in row {\n            if j == 0 {\n                cols.append(col)\n\
    \            } else {\n                rows.append(j)\n            }\n       \
    \ }\n        i += 1\n        j -= 1\n    }\n    var result = [Int]()\n    var\
    \ rowI = 0\n    var colI = 0\n    for row in rows {\n        if row == x {\n \
    \           for col in cols {\n                result.append((rowI, colI))\n \
    \           }\n        }\n        rowI += 1\n    }\n    return result", "    if\
    \ lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var rowIdx =\
    \ 0\n    var colIdx = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2\
    \ = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var\
    \ rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n\
    \    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2\
    \ = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var\
    \ colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n\
    \    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2\
    \ = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var\
    \ rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n\
    \    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2\
    \ = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var\
    \ colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n\
    \    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2\
    \ = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var\
    \ rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n\
    \    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2\
    \ = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var\
    \ colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n\
    \    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2\
    \ = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var\
    \ rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n\
    \    var rowIdx2 = 0\n    var col", "    if lst.isEmpty {\n        return []\n\
    \    }\n    var row = [Int]()\n    var column = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for column in row {\n            if column\
    \ == x {\n                result.append((row, column))\n            }\n      \
    \  }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n\
    \    var i = 0\n    for row in lst {\n        coord = coord.sorted()\n       \
    \ coord = coord.reversed()\n        if row.contains(x) {\n            coord.append((i,\
    \ row.count))\n        }\n        i += 1\n    }\n    return coord", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var coords = [(Int, Int)]()\n    var row =\
    \ 0\n    var col = 0\n    for row in lst {\n        if row == x {\n          \
    \  break\n        }\n    }\n    for col in row {\n        coords.append((row,\
    \ col))\n    }\n    coords.sortInPlace()\n    coords.sortInPlace{ $0.0 < $1.0\
    \ }\n    return coords", "    if lst.isEmpty {\n        return []\n    }\n   \
    \ var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var cols\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    for\
    \ row in lst {\n        for col in row {\n            if col == x {\n        \
    \        rows.append(i)\n                cols.append(j)\n                k = 0\n\
    \                for (i, col) in rows.enumerated() {\n                    for\
    \ (j, col) in cols.enumerated() {\n                        k += 1\n          \
    \              if k == 2 {\n                            rows.append(i)\n     \
    \                       cols.append(j)\n                        }\n          \
    \          }\n                }\n            }\n            j += 1\n        }\n\
    \        i = 0\n        j = 0\n    }\n    rows.sort()\n    cols.sort()\n    var\
    \ result = [((Int, Int), Int)]()\n    for ((i, col), k) in zip(rows, cols) {\n\
    \        result.append((i, col))\n    }\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var result = [(0, -1)]\n    for row in lst\
    \ {\n        if row[x] != x {\n            continue\n        }\n        var rowResult\
    \ = [(Int, Int)]()\n        for (i, v) in row.enumerated() {\n            if v\
    \ == x {\n                rowResult.append((i, v))\n            }\n        }\n\
    \        result = result.union(rowResult)\n    }\n    return result.sorted(by:\
    \ { $0.0 < $1.0 }).sorted(by: { $0.1 < $1.0 })", "    var result = [(Int, Int)]()\n\
    \    if lst.isEmpty {\n        return result\n    }\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in row.indices {\n        if col > col {\n      \
    \      break\n        }\n        if col == 0 {\n            continue\n       \
    \ }\n        if col == row.count - 1 {\n            result.append((row, col))\n\
    \            continue\n        }\n        if row[col - 1] > row[col + 1] {\n \
    \           result.append((row, col))\n            continue\n        }\n     \
    \   result.append((row, col))\n    }\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var col = 0\n    for row in lst {\n        if row == x {\n          \
    \  break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n      \
    \  if col == x {\n            break\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n      \
    \  if col == x {\n            break\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n      \
    \  if col == x {\n            break\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {", "    if lst ==\
    \ nil || len(lst) == 0 {\n        return []\n    }\n    var row = [Int]()\n  \
    \  var col = [Int]()\n    var result = [(0, 0)]\n    for row in lst {\n      \
    \  for col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row {\n        if col == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n        result.append((row, col))\n    }\n    return result", "  \
    \  if lst.isEmpty() {\n        return nil\n    }\n    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row {\n        if col ==\
    \ x {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n    }\n    for col in row {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row {\n        if col == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row {\n        if col == x {\n            break\n        }\n    }\n \
    \   for row in lst {\n        if row == x {\n            break\n        }\n  \
    \  }\n    for col in row {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var coords = [(0, 0)]\n\
    \    for row in lst {\n        if row.contains(x) {\n            coords.append(coords[0])\n\
    \        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords.map { coord -> (Int, Int) in\n        return (coord.0, row.indexOf(coord.1))\n\
    \    }", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var coords = [(0, 0)]\n    for row in lst {\n        coords = coords.sorted()\n\
    \        coords = coords.reversed()\n        for (i, j) in coords {\n        \
    \    if i == x {\n                return coords.map { (i, j)}\n            }\n\
    \        }\n    }\n    return []", "    var coords = [(0, 0)]\n    for row in\
    \ lst {\n        var coord = (0, 0)\n        for col in row {\n            if\
    \ col == x {\n                coord = (row, col)\n                break\n    \
    \        }\n        }\n        coords.append(coord)\n    }\n    coords.sortInPlace()\n\
    \    coords.sortInPlaceInDescendingOrder()\n    return coords", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var i = 0\n    for row in lst {\n        i += 1\n        if i == x {\n  \
    \          break\n        }\n    }\n    var j = 0\n    for column in row {\n \
    \       j += 1\n        if j == x {\n            break\n        }\n    }\n   \
    \ var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            result.append((i, j))\n        }\n    }\n    return result",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ coords = [(Int, Int)]()\n    for row in lst {\n        coords = coords.sorted()\n\
    \        coords = coords.reversed()\n        if coords.contains((x, 0)) {\n  \
    \          return coords.map { ($0.0, $0.1) }\n        }\n    }\n    return []",
  "    if lst.isEmpty() {\n        return [] as! [(Int, Int)]\n    }\n    var row\
    \ = [Int]()\n    var coords = [(Int, Int)]()\n    var rowCoords = [(Int, Int)]()\n\
    \    var rowCoordsSorted = [(Int, Int)]()\n    var rowCoordsSortedReversed = [(Int,\
    \ Int)]()\n    var rowCoordsSortedReversedSorted = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSorted = [(Int,\
    \ Int)]()\n    var rowCoordsSortedReversedSortedSortedSorted = [(Int, Int)]()\n\
    \    var rowCoordsSortedReversedSortedSortedSortedSorted = [(Int, Int)]()\n  \
    \  var rowCoordsSortedReversedSortedSortedSortedSorted = [(Int, Int)]()\n    var\
    \ rowCoordsSortedReversedSortedSortedSortedSortedSorted = [(Int, Int)]()\n   \
    \ var rowCoordsSortedReversedSortedSortedSortedSortedSorted = [(Int, Int)]()\n\
    \    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSorted = [(Int,\
    \ Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var rowIndex = 0\n    var colIndex = 0\n    for row in lst\
    \ {\n        if rowIndex == x {\n            break\n        }\n        for col\
    \ in row {\n            if colIndex == x {\n                break\n          \
    \  }\n            if colIndex > col {\n                colIndex = col\n      \
    \      }\n        }\n        if colIndex > col {\n            colIndex = col\n\
    \        }\n        if rowIndex > row {\n            rowIndex = row\n        }\n\
    \        if rowIndex > row {\n            rowIndex = row\n        }\n        if\
    \ colIndex > col {\n            colIndex = col\n        }\n        if rowIndex\
    \ > row {\n            rowIndex = row\n        }\n        if colIndex > col {\n\
    \            colIndex = col\n        }\n        if rowIndex > row {\n        \
    \    rowIndex = row\n        }\n        if colIndex > col {\n            colIndex\
    \ = col\n        }\n        if rowIndex > row {\n            rowIndex = row\n\
    \        }\n        if colIndex > col {\n            colIndex = col\n        }\n\
    \        if rowIndex > row {\n            rowIndex = row\n        }\n        if\
    \ colIndex > col {\n            colIndex = col\n        }\n        if rowIndex\
    \ > row {\n            rowIndex = row\n        }\n        if colIndex > col {\n\
    \            colIndex = col\n        }\n        if rowIndex > row {\n        \
    \    rowIndex = row\n        }\n        if colIndex > col {\n            colIndex\
    \ = col\n        }\n        if rowIndex > row {\n            rowIndex = row\n\
    \        }\n        if colIndex > col {\n            colIndex = col\n        }\n\
    \        if rowIndex > row {\n            rowIndex = row\n        }\n        if\
    \ colIndex > col {\n            colIndex = col\n        }\n        if rowIndex\
    \ > row {\n            rowIndex = row\n        }\n        if colIndex > col {\n\
    \            colIndex = col\n        }\n        if rowIndex > row {\n        \
    \    rowIndex = row\n        }\n        if colIndex > col {\n            colIndex\
    \ = col\n        }\n        if rowIndex > row {\n            rowIndex = row\n\
    \        }\n        if colIndex > col {\n            colIndex = col\n        }\n\
    \        if rowIndex > row {\n            rowIndex = row\n        }\n        if\
    \ colIndex > col {\n            colIndex = col\n        }\n        if rowIndex\
    \ > row {\n            rowIndex = row\n        }\n        if colIndex > col {\n\
    \            colIndex = col\n        }\n        if rowIndex > row {\n        \
    \    rowIndex = row\n        }\n        if colIndex > col {\n            colIndex\
    \ = col\n        }\n        if rowIndex > row {\n            rowIndex = row\n\
    \        }", "    var result = [(Int, Int)]()\n    var row = 0\n    var col =\
    \ 0\n    for row in lst {\n        if row == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n        if col != x {\n            result.append((row,\
    \ col))\n        }\n    }\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var coords = [(Int, Int)]()\n    var row = [Int]()\n\
    \    var col = [Int]()\n    var rowIdx = 1\n    var colIdx = 1\n    for row in\
    \ lst {\n        for col in row {\n            if col == x {\n               \
    \ coords.append((rowIdx, colIdx))\n            }\n        }\n        rowIdx +=\
    \ 1\n        colIdx = 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    if lst.isEmpty {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var coords = [Int]()\n    var i = 0\n    for row in lst {\n\
    \        coords.append(i)\n        i += 1\n    }\n    coords.sort()\n    coords.reverse()\n\
    \    var result = [(0, -1)]\n    for coord in coords {\n        if row[coord]\
    \ < x {\n            result.append(coord)\n        }\n    }\n    result.sort()\n\
    \    result.reverse()\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var column = [Int]()\n    var result =\
    \ [(Int, Int)]()\n    var rowIndex = 0\n    var columnIndex = 0\n    for row in\
    \ lst {\n        columnIndex = row.count\n        if columnIndex == x {\n    \
    \        result.append((rowIndex, columnIndex))\n        }\n        if columnIndex\
    \ > x {\n            break\n        }\n        columnIndex -= 1\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: {$0.1 < $1.1})\n    return result",
  "    if lst.isEmpty {\n        return []\n    }\n    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row {\n        if col ==\
    \ x {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n        for col in row {\n           \
    \ if col == x {\n                break\n            }\n        }\n        result.append((row,\
    \ col))\n    }\n    return result", "    if lst == nil || len(lst) == 0 {\n  \
    \      return nil\n    }\n    var result = [(0, len(lst[0]))]\n    for row in\
    \ lst {\n        for (i, v) in row.enumerated() {\n            if v == x {\n \
    \               result.append( (i, v) )\n            }\n        }\n    }\n   \
    \ result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n    return\
    \ result", "    if lst == nil {\n        return nil\n    }\n    var row = [Int]()\n\
    \    var column = [Int]()\n    var result = [[(Int, Int)]]()\n    for row in lst\
    \ {\n        for column in row {\n            if column == x {\n             \
    \   result.append((row, column))\n            }\n        }\n    }\n    result.sort(by:\
    \ {$0.0 < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n    return result", "  \
    \  var result = [(Int, Int)]()\n    for row in lst {\n        for (i, _) in row.enumerated()\
    \ {\n            if i == x {\n                result.append( (i, row.count) )\n\
    \            }\n        }\n    }\n    result.sort(by: { (a, b) -> Bool in\n  \
    \      if a.0 < b.0 {\n            return true\n        }\n        return false\n\
    \    })\n    result.sort(by: { (a, b) -> Bool in\n        if a.1 < b.1 {\n   \
    \         return true\n        }\n        return false\n    })\n    return result",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ column = [Int]()\n    var result = [(0, 0), (Int.max, Int.max)]\n    for row\
    \ in lst {\n        for column in row {\n            if column == x {\n      \
    \          result.append((row, column))\n            }\n        }\n    }\n   \
    \ result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n    return\
    \ result", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ (i, v) in row.enumerated() {\n            if v == x {\n                result.append(\
    \ (i, v) )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n  \
    \  for row in lst {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in row {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }",
  "    if lst.isEmpty {\n        return []\n    }\n    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in lst.first!.dropFirst().reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.dropFirst() {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in lst.first!.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.dropFirst() {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in lst.first!.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.dropFirst() {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in lst.first!.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.dropFirst() {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in lst.first!.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.dropFirst() {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in lst.first!.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.dropFirst() {\n        if row == x {\n            break\n        }\n   \
    \ }\n    for col in lst.first!.reverse() {\n        if col", "    var result =\
    \ [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, v))\n        \
    \    }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{ $0.1\
    \ < $1.1 }\n    return result", "    if lst.isEmpty() {\n        return []\n \
    \   }\n    var row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n\
    \    var rowIdx = 0\n    var colIdx = 0\n    for row in lst {\n        if rowIdx\
    \ >= row.count {\n            rowIdx -= row.count\n        }\n        if colIdx\
    \ >= row.count {\n            colIdx -= row.count\n        }\n        if rowIdx\
    \ < row.count {\n            rows.append(rowIdx)\n        }\n        if colIdx\
    \ < row.count {\n            cols.append(colIdx)\n        }\n        if rowIdx\
    \ != row.count {\n            rowIdx += 1\n            colIdx += 1\n        }\n\
    \    }\n    rows = rows.sorted()\n    cols = cols.sorted()\n    var result = [(Int,\
    \ Int)]()\n    for row in rows {\n        for col in cols {\n            if col\
    \ == x {\n                result.append( (row, col) )\n            }\n       \
    \ }\n    }\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var coords = [(0, 0)]\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                coords.append((i, 0))\n        \
    \    }\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlace{ $0.1\
    \ < $1.1 }\n    return coords.map { coord -> (Int, Int) in\n        return (coord.0,\
    \ coord.1)\n    }", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n \
    \   var row_index = 0\n    var col_index = 0\n    for row in lst {\n        if\
    \ row_index == x {\n            break\n        }\n        col_index = 0\n    \
    \    for col in row {\n            coord.append((row_index, col_index))\n    \
    \        col_index += 1\n        }\n        row_index += 1\n    }\n    coord.sortInPlace()\n\
    \    coord.sortInPlaceInDescendingOrder()\n    return coord", "    if lst.isEmpty\
    \ {\n        return lst\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        col.sort()\n \
    \       col.sort(reverse: true)\n        if col[0] == x {\n            result.append((row,\
    \ col))\n        }\n    }\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in lst.first!.indices {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n        for col in lst.first!.indices {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \        result.append((row, col))\n    }\n    return result", "    var row =\
    \ [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n    for row\
    \ in lst {\n        for col in row {\n            if col == x {\n            \
    \    result.append((row, col))\n            }\n        }\n    }\n    result.sort(by:\
    \ {$0.0 < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n    return result", "  \
    \  if lst == nil || len(lst) == 0 {\n        return nil\n    }\n    var row =\
    \ [Int]()\n    var coords = [Int]()\n    for row in lst {\n        coords = row.sorted()\n\
    \        break\n    }\n    var result = [Int]()\n    for coord in coords {\n \
    \       if coord == x {\n            result.append(coord)\n        }\n    }\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var rows = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    var row_indexes = [Int]()\n    var col_indexes = [Int]()\n    var indexes\
    \ = [Int]()\n    var index = 0\n    for row in lst {\n        if row_index ==\
    \ 0 {\n            row_indexes = row\n            col_indexes = row\n        }\
    \ else {\n            row_indexes.append(row_index)\n            col_indexes.append(col_index)\n\
    \        }\n        indexes.append(index)\n        index++\n        row_index++\n\
    \        col_index = 0\n    }\n    row_indexes.sort()\n    col_indexes.sort()\n\
    \    indexes = indexes.sorted()\n    var result = [Int]()\n    for index in indexes\
    \ {\n        let row_index = row_indexes[index]\n        let col_index = col_indexes[index]\n\
    \        let row = rows[row_index]\n        let col = row[col_index]\n       \
    \ if col == x {\n            result.append((row_index, col_index))\n        }\n\
    \    }\n    return result", "    if lst == [] {\n        return []\n    }\n  \
    \  if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var result = [(0, 0), (len(lst) - 1, 0)]\n    for row in\
    \ lst {\n        for col in row {\n            if col == x {\n               \
    \ result.append((row, col))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(1)\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        if\
    \ row_index == x {\n            break\n        }\n        col_index = 0\n    \
    \    for col in row {\n            if col_index == x {\n                break\n\
    \            }\n            row.insert(col, col_index)\n            col_index\
    \ += 1\n        }\n        row_index += 1\n    }\n    return row.sorted().reversed()",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ rows = [Int]()\n    var columns = [Int]()\n    var row_index = 0\n    var column_index\
    \ = 0\n    var index = 0\n    for row in lst {\n        if row_index == x {\n\
    \            rows.append(row)\n            columns.append(columns)\n        }\n\
    \        if row_index > x {\n            row_index = 0\n            column_index\
    \ = 0\n        }\n        if column_index > x {\n            row_index += 1\n\
    \            column_index = 0\n        }\n        if row_index == x {\n      \
    \      row_index += 1\n            column_index += 1\n        }\n        if column_index\
    \ == x {\n            row_index += 1\n            column_index += 1\n        }\n\
    \        if row_index == x {\n            row_index += 1\n            column_index\
    \ += 1\n        }\n        if column_index == x {\n            row_index += 1\n\
    \            column_index += 1\n        }\n        if row_index == x {\n     \
    \       row_index += 1\n            column_index += 1\n        }\n        if column_index\
    \ == x {\n            row_index += 1\n            column_index += 1\n        }\n\
    \        if row_index == x {\n            row_index += 1\n            column_index\
    \ += 1\n        }\n        if column_index == x {\n            row_index += 1\n\
    \            column_index += 1\n        }\n        if row_index == x {\n     \
    \       row_index += 1\n            column_index += 1\n        }\n        if column_index\
    \ == x {\n            row_index += 1\n            column_index += 1\n        }\n\
    \        if row_index == x {\n            row_index += 1\n            column_index\
    \ += 1\n        }\n        if column_index == x {\n            row_index += 1\n\
    \            column_index += 1\n        }\n        if row_index == x {\n     \
    \       row_index += 1\n            column_index += 1\n        }\n        if column_index\
    \ == x {\n            row_index += 1\n            column_index += 1\n        }\n\
    \        if row_index == x {\n            row_index += 1\n            column_index\
    \ += 1\n        }\n        if column_index == x {\n            row_index += 1\n\
    \            column_index += 1\n        }\n        if row_index == x {\n     \
    \       row_index += 1\n            column_index += 1\n        }\n        if column_index\
    \ == x {\n            row_index += 1\n            column_index += 1\n        }\n\
    \        if row_index == x {\n            row_index += 1\n            column_index\
    \ += 1\n        }\n        if column_index == x {\n            row_index += 1\n\
    \            column_index += 1\n        }\n        if row_index == x {\n     \
    \       row_index += 1\n            column_index += 1\n        }\n        if column_index\
    \ == x {\n            row_index += 1\n            column_index += 1\n        }\n\
    \        if row_index == x {\n            row_index += 1\n", "    var row = [Int]()\n\
    \    var col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ row_index = 0\n    var col_index = 0\n    var i = 0\n    var j = 0\n    for\
    \ row in lst {\n        if row_index == x {\n            rows.append(row)\n  \
    \          cols.append(col)\n        }\n        if col_index == x {\n        \
    \    rows.append(row)\n            cols.append(col)\n        }\n        if row_index\
    \ == 0 {\n            rows.append(row)\n            cols.append(col)\n       \
    \ }\n        if col_index == 0 {\n            rows.append(row)\n            cols.append(col)\n\
    \        }\n        if row_index == x {\n            rows.append(row)\n      \
    \      cols.append(col)\n        }\n        if col_index == x {\n            rows.append(row)\n\
    \            cols.append(col)\n        }\n        if row_index == x {\n      \
    \      rows.append(row)\n            cols.append(col)\n        }\n        if col_index\
    \ == x {\n            rows.append(row)\n            cols.append(col)\n       \
    \ }\n        if row_index == x {\n            rows.append(row)\n            cols.append(col)\n\
    \        }\n        if col_index == x {\n            rows.append(row)\n      \
    \      cols.append(col)\n        }\n        if row_index == x {\n            rows.append(row)\n\
    \            cols.append(col)\n        }\n        if col_index == x {\n      \
    \      rows.append(row)\n            cols.append(col)\n        }\n        if row_index\
    \ == x {\n            rows.append(row)\n            cols.append(col)\n       \
    \ }\n        if col_index == x {\n            rows.append(row)\n            cols.append(col)\n\
    \        }\n        if row_index == x {\n            rows.append(row)\n      \
    \      cols.append(col)\n        }\n        if col_index == x {\n            rows.append(row)\n\
    \            cols.append(col)\n        }\n        if row_index == x {\n      \
    \      rows.append(row)\n            cols.append(col)\n        }\n        if col_index\
    \ == x {\n            rows.append(row)\n            cols.append(col)\n       \
    \ }\n        if row_index == x {\n            rows.append(row)\n            cols.append(col)\n\
    \        }\n        if col_index == x {\n            rows.append(row)\n      \
    \      cols.append(col)\n        }\n        if row_index == x {\n            rows.append(row)\n\
    \            cols.append(col)\n        }\n        if col_index == x {\n      \
    \      rows.append(row)\n            cols.append(col)\n        }\n        if row_index\
    \ == x {\n            rows.append(row)\n            cols.append(col)\n       \
    \ }\n        if col_index == x {\n            rows.append(row)\n            cols.append(col)\n\
    \        }\n        if row_index == x {\n            rows.append(row)\n      \
    \      cols.append(col)\n        }\n        if col_index == x {\n            rows.append(row)\n\
    \            cols.append(col)\n        }\n        if row_index == x {\n      \
    \      rows.append(row)\n            cols.append(col)\n        }\n        if col_index\
    \ == ", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var cols_rev = [Int]()\n\
    \    var i = 0\n    for row in lst {\n        if row.contains(x) {\n         \
    \   rows.append(i)\n            cols = row.sorted()\n            cols_rev.append(cols.reversed())\n\
    \        }\n        i += 1\n    }\n    return rows.sorted().map { (row) -> (Int,\
    \ Int) in\n        return (row, cols[row])\n    }.sorted { (row1, row2) -> (Int,\
    \ Int) in\n        return cols_rev[row1] > cols_rev[row2]\n    }.map { (row) ->\
    \ (Int, Int) in\n        return (rows[row], row)\n    }", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(0, lst[0].count)]\n    for row\
    \ in lst {\n        if row.count > x {\n            return result\n        }\n\
    \        for row in result {\n            if row[1] < row.count {\n          \
    \      return result\n            }\n        }\n        result.append(row.prefix(x))\n\
    \    }\n    return result", "    var rows = [[(Int, Int)]]()\n    for row in lst\
    \ {\n        var cols = [Int]()\n        for col in row {\n            if col\
    \ == x {\n                cols.append(col)\n            }\n        }\n       \
    \ if cols.count > 0 {\n            rows.append((cols.count, cols.count))\n   \
    \     }\n    }\n    rows.sort()\n    rows.reverse()\n    return rows", "    if\
    \ lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var rows\
    \ = [Int]()\n    var cols = [Int]()\n    var col = 0\n    for row in lst {\n \
    \       if row.contains(x) {\n            rows.append(row)\n            cols.append(col)\n\
    \        }\n        col++\n    }\n    rows = rows.sorted()\n    cols = cols.sorted()\n\
    \    var result = [((Int, Int), Int)]()\n    for row in rows {\n        for col\
    \ in cols {\n            result.append((row, col))\n        }\n    }\n    return\
    \ result", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var column = [Int]()\n    var rowIndex = 0\n    var columnIndex = 0\n   \
    \ var rowLength = 0\n    var columnLength = 0\n    for row in lst {\n        rowLength\
    \ = row.count\n        if rowIndex == x {\n            break\n        }\n    \
    \    for column in row {\n            columnLength = column.count\n          \
    \  if columnIndex == x {\n                break\n            }\n            if\
    \ columnIndex > columnLength {\n                columnIndex = 0\n            }\n\
    \            if rowIndex > rowLength {\n                rowIndex = 0\n       \
    \     }\n            if rowIndex == rowLength && columnIndex == columnLength {\n\
    \                row.append(column)\n                column.append(rowIndex)\n\
    \                rowIndex += 1\n                columnIndex += 1\n           \
    \ }\n        }\n    }\n    return row.map { (x, y) -> (Int, Int) in\n        return\
    \ (x, y) }", "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n\
    \    var col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ i = 0\n    for row in lst {\n        cols = row.map { $0 }\n        cols.sort\
    \ { $0 < $1 }\n        cols.reverse()\n        rows = cols.map { $0 + i }\n  \
    \      rows.sort { $0 < $1 }\n        rows.reverse()\n        row.init(rows: rows,\
    \ cols: cols)\n        i += 1\n    }\n    var result = [((Int, Int), Int)]()\n\
    \    for row in lst {\n        for col in row.indices {\n            if col ==\
    \ x {\n                result.append(row)\n                break\n           \
    \ }\n        }\n    }\n    return result", "    if lst.isEmpty {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n\
    \    var col = 0\n    var rowIdx = 0\n    var colIdx = 0\n    for row in lst {\n\
    \        if colIdx == x {\n            rows.append(row)\n        }\n        if\
    \ colIdx >= col {\n            colIdx = colIdx\n        } else {\n           \
    \ colIdx += 1\n        }\n    }\n    rowIdx = rowIdx.reversed()\n    colIdx =\
    \ colIdx.reversed()\n    for row in rows {\n        for col in cols {\n      \
    \      if col == x {\n                row.append(col)\n            }\n       \
    \ }\n    }\n    return rows", "    if lst.isEmpty() {\n        return nil\n  \
    \  }\n    var row = [Int]()\n    var coords = [(0, 0)]\n    for row in lst {\n\
    \        if row.contains(x) {\n            coords.append(coords[coords.count -\
    \ 1] + (row.count - 1))\n        }\n    }\n    coords.sortInPlace()\n    coords.reverse()\n\
    \    return coords", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var column = [Int]()\n    var rows = [Int]()\n    var columns\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    for row in lst {\n\
    \        i += 1\n        for column in row {\n            j += 1\n           \
    \ if column == x {\n                rows.append(i)\n                columns.append(j)\n\
    \            }\n        }\n    }\n    columns.reverse()\n    rows.reverse()\n\
    \    return zip(rows, columns)", "    if lst.isEmpty {\n        return []\n  \
    \  }\n    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n    }\n \
    \   for col in 0..<row.count {\n        let (row1, col1) = row\n        let (row2,\
    \ col2) = row[col]\n        if row1 < row2 {\n            result.append((row1,\
    \ col1))\n            result.append((row2, col2))\n        } else {\n        \
    \    result.append((row2, col2))\n            result.append((row1, col1))\n  \
    \      }\n    }\n    result.sortInPlaceByKey(ascending: false)\n    result.sortInPlaceByKey(ascending:\
    \ true)\n    return result", "    var rows = [[(Int, Int)]]()\n    for row in\
    \ lst {\n        var cols = [Int]()\n        for col in row {\n            if\
    \ col == x {\n                cols.append(col)\n            }\n        }\n   \
    \     rows.append((col, cols))\n    }\n    rows.sort(by: { (r1, r2) -> Bool in\n\
    \        if r1.0 < r2.0 {\n            return true\n        }\n        return\
    \ false\n    })\n    rows.sort(by: { (r1, r2) -> Bool in\n        if r1.1 < r2.1\
    \ {\n            return true\n        }\n        return false\n    })\n    return\
    \ rows", "    var coords = [(0, 0)]\n    for row in lst {\n        for (i, v)\
    \ in row.enumerated() {\n            if v == x {\n                coords.append((i,\
    \ row.count()))\n            }\n        }\n    }\n    coords.sortInPlace()\n \
    \   coords.sortInPlace{ $0.1 < $1.1 }\n    return coords", "    var result = [(Int,\
    \ Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        result.append((row, col))\n    }\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, v) )\n      \
    \      }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var col =\
    \ 0\n    for row in lst {\n        if row.contains(x) {\n            rows.append(row)\n\
    \            cols.append(col)\n        }\n        col++\n    }\n    rows.sortInPlace()\n\
    \    cols.sortInPlace()\n    var result = [(0, col)]\n    for row in rows {\n\
    \        result.append((row, cols[rows.index(row) - 1]))\n    }\n    return result",
  "    var result = [(0, 0)]\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, row.count) )\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var rowOrder\
    \ = Int()\n    var colOrder = Int()\n    for row in lst {\n        if row.contains(x)\
    \ {\n            coords.append((row, row.count))\n            rowOrder = rowOrder\
    \ * row.count + row.count\n            colOrder = colOrder * row.count + row.count\n\
    \        }\n    }\n    coords.sortInPlace((rowOrder, colOrder))\n    return coords.map\
    \ { coord -> (Int, Int) in\n        return (coord.0, coord.1)\n    }", "    if\
    \ lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    var i = 0\n    for row in lst {\n        col.append(0)\n    }\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               row[i] = col\n                i += 1\n            }\n        }\n\
    \    }\n    row.sort()\n    col.sort()\n    col.swap(0, i)\n    row.swap(0, i)\n\
    \    return row", "    if lst.isEmpty() {\n        return []\n    }\n    var row\
    \ = [Int]()\n    var coords = [(Int, Int)]()\n    for row in lst {\n        if\
    \ row.contains(x) {\n            coords.append((row.startIndex, row.endIndex))\n\
    \        }\n    }\n    coords.sortInPlace()\n    var result = [(Int, Int)]()\n\
    \    for coord in coords {\n        result.append((coord.1, coord.0))\n    }\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in lst {\n\
    \        if i == 0 {\n            col = row.sorted()\n        } else {\n     \
    \       col.sorted()\n        }\n        if col[0] == x {\n            return\
    \ [(i, col[0])]\n        }\n        i += 1\n    }\n    return []", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var coords = [0]\n \
    \   var rowCoords = [0]\n    var colCoords = [0]\n    var rowIdx = 1\n    var\
    \ colIdx = 1\n    for row in lst {\n        if rowIdx > row.count {\n        \
    \    break\n        }\n        if rowIdx > coords.count {\n            coords\
    \ = append(coords, rowIdx)\n            rowCoords = append(rowCoords, 0)\n   \
    \         colCoords = append(colCoords, 0)\n        }\n        if colIdx > row.count\
    \ {\n            break\n        }\n        if colIdx > colCoords.count {\n   \
    \         colCoords = append(colCoords, 0)\n        }\n        if rowIdx != coords.last\
    \ {\n            if colIdx != rowCoords.last {\n                if rowIdx != colCoords.last\
    \ {\n                    if rowIdx != colCoords.first {\n                    \
    \    if rowIdx != colCoords.last {\n                            if rowIdx != colCoords.first\
    \ {\n                                if rowIdx != colCoords.last {\n         \
    \                           if rowIdx != colCoords.first {\n                 \
    \                       rowCoords = append(rowCoords, colCoords.last)\n      \
    \                                  colCoords = append(colCoords, 0)\n        \
    \                            }\n                                }\n          \
    \                  }\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        if rowIdx != coords.last {\n\
    \            if colIdx != rowCoords.last {\n                if rowIdx != colCoords.last\
    \ {\n                    if rowIdx != colCoords.first {\n                    \
    \    if rowIdx != colCoords.last {\n                            if rowIdx != colCoords.first\
    \ {\n                                if rowIdx != colCoords.last {\n         \
    \                           if rowIdx != colCoords.first {\n                 \
    \                       rowCoords = append(rowCoords, colCoords.last)\n      \
    \                                  colCoords = append(colCoords, 0)\n        \
    \                            }\n                                }\n          \
    \                  }\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        if rowIdx != coords.last {\n\
    \            if colIdx != rowCoords.last {\n                if rowIdx != colCoords.last\
    \ {\n                    if rowIdx != colCoords.first {\n                    \
    \    if rowIdx != colCoords.last {\n                            if rowIdx != colCoords.first\
    \ {\n                                if rowIdx != colCoords.last {\n         \
    \                           if rowIdx != colCoords.first {\n                 \
    \                       rowCoords = append(rowCoords, colCoords.last)\n      \
    \                                  colCoords = append(colCoords, 0)\n        \
    \                            }\n                                }\n          \
    \                  }", "    if lst.isEmpty() {\n        return []\n    }\n   \
    \ var row = [Int]()\n    var col = [Int]()\n    var rowOrder = [Int]()\n    var\
    \ colOrder = [Int]()\n    var i = 0\n    for row in lst {\n        rowOrder =\
    \ rowOrder\n        colOrder = colOrder\n        row.sort()\n        col.sort()\n\
    \        if row[0] == x {\n            rowOrder = rowOrder\n            colOrder\
    \ = colOrder\n            row.sort()\n            col.sort()\n            if col[0]\
    \ == x {\n                return [(i, 0)]\n            }\n        }\n        i\
    \ += 1\n    }\n    return []", "    if lst.isEmpty() {\n        return []\n  \
    \  }\n    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n    }\n \
    \   for col in row {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row {\n        if col == x {\n            break\n \
    \       }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n\
    \    for row in lst {\n        if row.contains(x) {\n            rows.append(i)\n\
    \            cols.append(row.indexOf(x))\n        }\n        i += 1\n    }\n \
    \   rows.sortInPlace()\n    cols.sortInPlace()\n    var result = [(Int, Int)]()\n\
    \    for row in rows {\n        for col in cols {\n            result.append((row,\
    \ col))\n        }\n    }\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var row = [Int]()\n    var coords = [(Int, Int)]()\n\
    \    var rowCoords = [(Int, Int)]()\n    var rowSorted = false\n    var colSorted\
    \ = false\n    for row in lst {\n        if rowSorted == false {\n           \
    \ rowSorted = true\n            row.sort()\n        }\n        if colSorted ==\
    \ false {\n            colSorted = true\n            row.sort() { $0 < $1 }\n\
    \        }\n        if row[0] == x {\n            coords.append((0, row.count-1))\n\
    \            rowCoords.append((0, row.count-1))\n        } else {\n          \
    \  for (idx, val) in row.enumerated() {\n                if val == x {\n     \
    \               coords.append((idx, idx))\n                    rowCoords.append((idx,\
    \ idx))\n                    break\n                }\n            }\n       \
    \ }\n    }\n    return coords", "    var coords = [(Int, Int)]()\n    var row\
    \ = [Int]()\n    var col = [Int]()\n    var rowIdx = -1\n    var colIdx = -1\n\
    \    for row in lst {\n        colIdx = -1\n        for col in row {\n       \
    \     if col == x {\n                coords.append((rowIdx, colIdx))\n       \
    \     }\n            colIdx += 1\n        }\n        rowIdx += 1\n    }\n    coords.sortInPlace()\n\
    \    coords.sortInPlaceInDescendingOrder()\n    return coords", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var rowIdx = 0\n    var colIdx\
    \ = 0\n    var rowIdx2 = 0\n    var colIdx2 = 0\n    var rowIdx3 = 0\n    var\
    \ colIdx3 = 0\n    var rowIdx4 = 0\n    var colIdx4 = 0\n    var rowIdx5 = 0\n\
    \    var colIdx5 = 0\n    var rowIdx6 = 0\n    var colIdx6 = 0\n    var rowIdx7\
    \ = 0\n    var colIdx7 = 0\n    var rowIdx8 = 0\n    var colIdx8 = 0\n    var\
    \ rowIdx9 = 0\n    var colIdx9 = 0\n    var rowIdx10 = 0\n    var colIdx10 = 0\n\
    \    var rowIdx11 = 0\n    var colIdx11 = 0\n    var rowIdx12 = 0\n    var colIdx12\
    \ = 0\n    var rowIdx13 = 0\n    var colIdx13 = 0\n    var rowIdx14 = 0\n    var\
    \ colIdx14 = 0\n    var rowIdx15 = 0\n    var colIdx15 = 0\n    var rowIdx16 =\
    \ 0\n    var colIdx16 = 0\n    var rowIdx17 = 0\n    var colIdx17 = 0\n    var\
    \ rowIdx18 = 0\n    var colIdx18 = 0\n    var rowIdx19 = 0\n    var colIdx19 =\
    \ 0\n    var rowIdx20 = 0\n    var colIdx20 = 0\n    var rowIdx21 = 0\n    var\
    \ colIdx21 = 0\n    var rowIdx22 = 0\n    var colIdx22 = 0\n    var rowIdx23 =\
    \ 0\n    var colIdx23 = 0\n    var rowIdx24 = 0\n    var colIdx24 = 0\n    var\
    \ rowIdx25 = 0\n    var colIdx25 = 0\n    var rowIdx26 = 0\n    var colIdx26 =\
    \ 0\n    var rowIdx27 = 0\n    var colIdx27 = 0\n    var rowIdx28 = 0\n    var\
    \ colIdx28 = 0\n    var rowIdx29 = 0\n    var colIdx29 = 0\n    var rowIdx30 =\
    \ 0\n    var colIdx30 = 0\n    var rowIdx31 = 0\n    var colIdx31 = 0\n    var\
    \ rowIdx32 = 0\n    var colIdx32 = 0\n    var rowIdx33 = 0\n    var colIdx33 =\
    \ 0\n    var rowIdx34 = 0\n    var colIdx34 = 0\n    var rowIdx35 = 0\n    var\
    \ colIdx35 = 0\n    var rowIdx36 = 0\n    var colIdx36 = 0\n    var rowIdx37 =\
    \ 0\n    var colIdx37 = 0\n    var rowIdx38 = 0\n    var colIdx38 = 0\n    var\
    \ rowIdx39 = 0\n    var colIdx39 = 0\n    var rowIdx40 = 0\n", "    var rows =\
    \ [Int]()\n    var cols = [Int]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        cols = cols.sorted()\n        for col in cols {\n        \
    \    if col == x {\n                rows.append((row, col))\n            }\n \
    \       }\n    }\n    return rows.sorted().reversed()", "    var row = [Int]()\n\
    \    var column = [Int]()\n    var result = [(Int, Int)]()\n    var row_index\
    \ = 0\n    var column_index = 0\n    for row in lst {\n        column_index =\
    \ column_index + 1\n        if column_index == x {\n            result.append((row_index,\
    \ column_index))\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var cols =\
    \ [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n        if i ==\
    \ 0 {\n            cols = row\n        } else {\n            cols = col\n    \
    \    }\n        if i == 0 {\n            rows.append(row)\n        } else {\n\
    \            rows.append(col)\n        }\n        i += 1\n    }\n    var result\
    \ = [Int]()\n    for row in rows {\n        if i == 0 {\n            cols = row\n\
    \        } else {\n            cols = col\n        }\n        if i == 0 {\n  \
    \          for (j, col) in zip(row, cols) {\n                if col == x {\n \
    \                   result.append((i, j))\n                }\n            }\n\
    \        } else {\n            for (j, col) in zip(row, cols) {\n            \
    \    if col == x {\n                    result.append((i, j))\n              \
    \  }\n            }\n        }\n        i += 1\n    }\n    return result", " \
    \   if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ coords = [0]\n    var rowOrder = [0]\n    var colOrder = [0]\n    var rowOrderInc\
    \ = 0\n    var colOrderInc = 0\n    for row in lst {\n        if rowOrderInc >\
    \ rowOrder.count {\n            rowOrder = rowOrder + row\n            rowOrderInc\
    \ = 0\n        }\n        if colOrderInc > colOrder.count {\n            colOrder\
    \ = colOrder + row\n            colOrderInc = 0\n        }\n        if rowOrderInc\
    \ == rowOrder.count {\n            rowOrderInc = 0\n            rowOrder = rowOrder\
    \ + row\n        }\n        if colOrderInc == colOrder.count {\n            colOrderInc\
    \ = 0\n            colOrder = colOrder + row\n        }\n        if rowOrderInc\
    \ > rowOrder.count {\n            rowOrder = rowOrder + row\n            rowOrderInc\
    \ = 0\n        }\n        if colOrderInc > colOrder.count {\n            colOrder\
    \ = colOrder + row\n            colOrderInc = 0\n        }\n        if rowOrderInc\
    \ == rowOrder.count {\n            rowOrderInc = 0\n            rowOrder = rowOrder\
    \ + row\n        }\n        if colOrderInc == colOrder.count {\n            colOrderInc\
    \ = 0\n            colOrder = colOrder + row\n        }\n        if rowOrderInc\
    \ > rowOrder.count {\n            rowOrder = rowOrder + row\n            rowOrderInc\
    \ = 0\n        }\n        if colOrderInc > colOrder.count {\n            colOrder\
    \ = colOrder + row\n            colOrderInc = 0\n        }\n        if rowOrderInc\
    \ == rowOrder.count {\n            rowOrderInc = 0\n            rowOrder = rowOrder\
    \ + row\n        }\n        if colOrderInc == colOrder.count {\n            colOrderInc\
    \ = 0\n            colOrder = colOrder + row\n        }\n        if rowOrderInc\
    \ > rowOrder.count {\n            rowOrder = rowOrder + row\n            rowOrderInc\
    \ = 0\n        }\n        if colOrderInc > colOrder.count {\n            colOrder\
    \ = colOrder + row\n            colOrderInc = 0\n        }\n        if rowOrderInc\
    \ == rowOrder.count {\n            rowOrderInc = 0\n            rowOrder = rowOrder\
    \ + row\n        }\n        if colOrderInc == colOrder.count {\n            colOrderInc\
    \ = 0\n            colOrder = colOrder + row\n        }\n        if rowOrderInc\
    \ > rowOrder.count {\n            rowOrder = rowOrder + row\n            rowOrderInc\
    \ = 0\n        }\n        if colOrderInc > col", "    if lst.isEmpty() {\n   \
    \     return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var\
    \ i = 0\n    for row in lst {\n        i += 1\n        if i == x {\n         \
    \   break\n        }\n    }\n    var j = 0\n    for col in row {\n        j +=\
    \ 1\n        if j == x {\n            break\n        }\n    }\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n         \
    \   result.append((row, col))\n        }\n    }\n    result.sortInPlace()\n  \
    \  result.sortInPlaceInDescendingOrder()\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var col = 0\n    for row in lst {\n        if row == x {\n          \
    \  break\n        }\n    }\n    for col in row {\n        result.append((row,\
    \ col))\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var column = [Int]()\n    var rowIndex = 0\n    var columnIndex\
    \ = 0\n    for row in lst {\n        columnIndex = row.count\n        if columnIndex\
    \ > x {\n            break\n        }\n        for column in row {\n         \
    \   if column > x {\n                break\n            }\n        }\n       \
    \ if columnIndex == x {\n            return [(rowIndex, columnIndex)]\n      \
    \  }\n    }\n    return []", "    if lst.isEmpty() {\n        return []\n    }\n\
    \    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in lst\
    \ {\n        i += 1\n        if i == x {\n            break\n        }\n    }\n\
    \    var j = 0\n    for col in row {\n        j += 1\n        if j == x {\n  \
    \          break\n        }\n    }\n    var result = [(Int, Int)]()\n    for row\
    \ in lst {\n        for col in row {\n            result.append(col)\n       \
    \ }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(0, -1)]\n    for row in lst {\n     \
    \   for (i, j) in row.enumerated() {\n            if i == x {\n              \
    \  result.append( (i, j) )\n            }\n        }\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        if a.0 < b.0 {\n            return true\n     \
    \   }\n        return false\n    })\n    result.sort(by: { (a, b) -> Bool in\n\
    \        if a.1 < b.1 {\n            return true\n        }\n        return false\n\
    \    })\n    return result", "    if lst.isEmpty {\n        return [] as! [(Int,\
    \ Int)]\n    }\n    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var\
    \ rowCoords = [(Int, Int)]()\n    var rowCoordsSorted = [(Int, Int)]()\n    var\
    \ rowCoordsSortedReversed = [(Int, Int)]()\n    var rowCoordsSortedReversedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSorted = [(Int, Int)]()\n\
    \    var rowCoordsSortedReversedSortedSortedSorted = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSorted =\
    \ [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSorted = [(Int,\
    \ Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSorted = [(Int,\
    \ Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSorted = [(Int,\
    \ Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [(Int, Int)]()\n    var rowCoordsSortedReversedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "    if lst.isEmpty() {\n        return []\n    }\n    var rows = [[(Int, Int)]]()\n\
    \    var row = [Int]()\n    var cols = [Int]()\n    var col = 0\n    for row in\
    \ lst {\n        if row.contains(x) {\n            rows.append((row, cols))\n\
    \        }\n        cols.append(col)\n        col++\n    }\n    rows.sortInPlace()\n\
    \    for row in rows {\n        row.sortInPlace()\n    }\n    return rows", " \
    \   if lst.isEmpty {\n        return lst\n    }\n    var row = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var col = 0\n    var rowIdx = 0\n\
    \    var colIdx = 0\n    for row in lst {\n        if rowIdx >= row.count {\n\
    \            rowIdx -= row.count\n        }\n        if colIdx >= col.count {\n\
    \            colIdx -= col.count\n        }\n        if row[rowIdx] == x {\n \
    \           rows.append(rowIdx)\n            cols.append(colIdx)\n        }\n\
    \        rowIdx += 1\n        colIdx += 1\n    }\n    rows = rows.sorted()\n \
    \   cols = cols.sorted()\n    var result = [((Int, Int), Int)]()\n    for idx\
    \ in rows {\n        for idx in cols {\n            result.append( ((idx, idx),\
    \ idx) )\n        }\n    }\n    return result", "    if lst == nil {\n       \
    \ return nil\n    }\n    var coords = [(Int, Int)]()\n    for row in lst {\n \
    \       for (i, v) in row.enumerated() {\n            if v == x {\n          \
    \      coords.append((i, v))\n            }\n        }\n    }\n    coords.sortInPlace()\n\
    \    coords.sortInPlace{ $0.1 < $1.1 }\n    return coords", "    var result =\
    \ [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, v) )\n      \
    \      }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.0 < $1.0 }\n    return result", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var rowOrder\
    \ = [Int]()\n    var colOrder = [Int]()\n    var rowOrderInc = 0\n    var colOrderInc\
    \ = 0\n    var rowOrderMax = lst.count\n    var colOrderMax = lst[0].count\n \
    \   for row in lst {\n        rowOrder[rowOrderInc] = rowOrderInc\n        rowOrderInc\
    \ += 1\n        for col in row {\n            colOrder[colOrderInc] = colOrderInc\n\
    \            colOrderInc += 1\n        }\n    }\n    rowOrderInc = 0\n    colOrderInc\
    \ = 0\n    for row in lst {\n        for col in row {\n            if col == x\
    \ {\n                coords.append((rowOrder[rowOrderInc], colOrder[colOrderInc]))\n\
    \            }\n        }\n    }\n    coords.sortInPlace()\n    rowOrderInc =\
    \ 0\n    colOrderInc = 0\n    for row in lst {\n        for col in row {\n   \
    \         if col == x {\n                coords.append((rowOrder[rowOrderInc],\
    \ colOrder[colOrderInc]))\n            }\n        }\n    }\n    coords.sortInPlace()\n\
    \    return coords", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row {\n        if col == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n        result.append((row, col))\n    }\n    return result", "  \
    \  if lst == [] {\n        return []\n    }\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0", "    var result = [(Int, Int)]()\n\
    \    if lst == nil {\n        return result\n    }\n    if lst[0].count < x {\n\
    \        return result\n    }\n    var row = 0\n    var column = 0\n    for row\
    \ in 0..<lst[0].count {\n        var column = 0\n        for column in 0..<lst[0].count\
    \ {\n            if lst[row][column] == x {\n                result.append( (row,\
    \ column) )\n                break\n            }\n            column++\n    \
    \    }\n    }\n    return result", "    var result = [(Int, Int)]()\n    for row\
    \ in lst {\n        for (i, v) in row.enumerated() {\n            if v == x {\n\
    \                result.append( (i, v) )\n            }\n        }\n    }\n  \
    \  result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n    return\
    \ result", "    var coords = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for col in row.reverse() {\n        coords.append((row, col))\n   \
    \ }\n    return coords.sorted(by: { $0.0 < $1.0 }).reversed()", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var col = 0\n    var rowIdx = 0\n    var colIdx =\
    \ 0\n    for row in lst {\n        if rowIdx >= row.count {\n            rowIdx\
    \ -= row.count\n            colIdx += 1\n            continue\n        }\n   \
    \     if colIdx >= row.count {\n            rowIdx += 1\n            colIdx =\
    \ 0\n        }\n        if row[colIdx] == x {\n            rowIdx += 1\n     \
    \       colIdx += 1\n            continue\n        }\n        if colIdx >= row.count\
    \ {\n            rowIdx += 1\n            colIdx = 0\n        }\n        if row[colIdx]\
    \ < x {\n            rowIdx += 1\n            colIdx += 1\n            continue\n\
    \        }\n        if colIdx >= row.count {\n            rowIdx += 1\n      \
    \      colIdx = 0\n        }\n        if row[colIdx] > x {\n            rowIdx\
    \ += 1\n            colIdx += 1\n            continue\n        }\n        if colIdx\
    \ >= row.count {\n            rowIdx += 1\n            colIdx = 0\n        }\n\
    \        if row[colIdx] == x {\n            rowIdx += 1\n            colIdx +=\
    \ 1\n            continue\n        }\n        if colIdx >= row.count {\n     \
    \       rowIdx += 1\n            colIdx = 0\n        }\n        if row[colIdx]\
    \ < x {\n            rowIdx += 1\n            colIdx += 1\n            continue\n\
    \        }\n        if colIdx >= row.count {\n            rowIdx += 1\n      \
    \      colIdx = 0\n        }\n        if row[colIdx] > x {\n            rowIdx\
    \ += 1\n            colIdx += 1\n            continue\n        }\n        if colIdx\
    \ >= row.count {\n            rowIdx += 1\n            colIdx = 0\n        }\n\
    \        if row[colIdx] == x {\n            rowIdx += 1\n            colIdx +=\
    \ 1\n            continue\n        }\n        if colIdx >= row.count {\n     \
    \       rowIdx += 1\n            colIdx = 0\n        }\n        if row[colIdx]\
    \ < x {\n            rowIdx += 1\n            colIdx += 1\n            continue\n\
    \        }\n        if colIdx >= row.count {\n            rowIdx += 1\n      \
    \      colIdx = 0\n        }\n        if row[colIdx] > x {\n            rowIdx\
    \ += 1\n            colIdx += 1\n            continue\n        }\n        if colIdx\
    \ >= row.count {\n            rowIdx += 1\n            colIdx = 0\n        }\n\
    \        if row[colIdx] == x {\n            rowIdx += 1\n            colIdx +=\
    \ 1\n            continue\n        }\n        if colIdx >= row.count {\n     \
    \       rowIdx += 1\n            colIdx = 0\n        }\n        if row[colIdx]\
    \ < x {\n", "    var coords = [(0, 0)]\n    for row in lst {\n        var coord\
    \ = (0, 0)\n        for (i, v) in row.enumerated() {\n            if v == x {\n\
    \                coord = (i, v)\n                break\n            }\n      \
    \  }\n        coords.append(coord)\n    }\n    coords.sortInPlace()\n    var result\
    \ = [(0, 0)]\n    for coord in coords {\n        result.append((coord.1, coord.2))\n\
    \    }\n    return result", "    var row = [Int]()\n    var col = [Int]()\n  \
    \  var result = [(Int, Int)]()\n    for row in lst {\n        if row.contains(x)\
    \ {\n            result.append((row.firstIndex, row.lastIndex))\n        }\n \
    \   }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n \
    \   return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var coords = [(Int, Int)]()\n    var i = 0\n    for row in\
    \ lst {\n        coords.append((i, row.count-1))\n        i += 1\n    }\n    coords.sortInPlace()\n\
    \    coords.sortInPlace{ $0.1 < $1.1 }\n    var result = [coords[0]]\n    for\
    \ coord in coords {\n        if coord.0 != x {\n            result.append(coord)\n\
    \        }\n    }\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var rows = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    var row_indexes = [Int]()\n    var col_indexes\
    \ = [Int]()\n    var indexes = [Int]()\n    var i = 0\n    for row in lst {\n\
    \        row_indexes.append(row_index)\n        col_indexes.append(col_index)\n\
    \        indexes.append(i)\n        i += 1\n    }\n    row_indexes.sort()\n  \
    \  col_indexes.sort()\n    indexes = indexes.sorted()\n    for index in indexes\
    \ {\n        if row_indexes[index] != row_index {\n            continue\n    \
    \    }\n        if col_indexes[index] != col_index {\n            continue\n \
    \       }\n        if row_indexes[index] == row_index {\n            row_indexes[index]\
    \ = row_indexes[index] + 1\n            row_index += 1\n        } else {\n   \
    \         col_indexes[index] = col_indexes[index] + 1\n            col_index +=\
    \ 1\n        }\n    }\n    row_indexes.sort()\n    col_indexes.sort()\n    for\
    \ index in row_indexes {\n        if col_indexes[index] != col_index {\n     \
    \       continue\n        }\n        if row_indexes[index] == row_index {\n  \
    \          row_indexes[index] = row_indexes[index] + 1\n            row_index\
    \ += 1\n        } else {\n            col_indexes[index] = col_indexes[index]\
    \ + 1\n            col_index += 1\n        }\n    }\n    for index in row_indexes\
    \ {\n        if col_indexes[index] != col_index {\n            continue\n    \
    \    }\n        if row_indexes[index] == row_index {\n            row_indexes[index]\
    \ = row_indexes[index] + 1\n            row_index += 1\n        } else {\n   \
    \         col_indexes[index] = col_indexes[index] + 1\n            col_index +=\
    \ 1\n        }\n    }\n    for index in row_indexes {\n        if col_indexes[index]\
    \ != col_index {\n            continue\n        }\n        if row_indexes[index]\
    \ == row_index {\n            row_indexes[index] = row_indexes[index] + 1\n  \
    \          row_index += 1\n        } else {\n            col_indexes[index] =\
    \ col_indexes[index] + 1\n            col_index += 1\n        }\n    }\n    for\
    \ index in row_indexes {\n        if col_indexes[index] != col_index {\n     \
    \       continue\n        }\n        if row_indexes[index] == row_index {\n  \
    \          row_indexes[index] = row_indexes[index] + 1\n            row_index\
    \ += 1\n        } else {\n            col_indexes[index] = col_indexes[index]\
    \ + 1\n            col_index += 1\n        }\n    }\n    for index in row_indexes\
    \ {\n        if col_indexes[index] != col_index {\n            continue\n    \
    \    }\n        if row_indexes[index] == row_index {\n            row_indexes[index",
  "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ coord = [(Int, Int)]()\n    var rowOrder = [Int]()\n    var colOrder = [Int]()\n\
    \    var rowOrderInc = 0\n    var colOrderInc = 0\n    var rowOrderMax = lst.count\n\
    \    var colOrderMax = lst[0].count\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc\
    \ = 0\n    var rowOrderMin = lst.count\n    var colOrderMin = lst[0].count\n \
    \   var rowOrderMinInc = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc\
    \ = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc\
    \ = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc\
    \ = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc\
    \ = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc\
    \ = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc\
    \ = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc\
    \ = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc\
    \ = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc\
    \ = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc\
    \ = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc\
    \ = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc\
    \ = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc\
    \ = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc\
    \ = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc = 0\n    var rowOrderMinInc\
    \ = 0\n    var colOrderMinInc = 0\n    var rowOrderMaxInc = 0\n    var colOrderMaxInc\
    \ = 0\n    var rowOrderMinInc = 0\n    var colOrderMinInc = 0\n    var rowOrder",
  "    if lst == nil || len(lst) == 0 {\n        return nil\n    }\n    if lst[0][x]\
    \ == nil {\n        return nil\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n    for row in\
    \ lst {\n        if row[x] != nil {\n            rows.append(i)\n            cols.append(row[x])\n\
    \        }\n        i += 1\n    }\n    rows = rows.sorted()\n    cols = cols.sorted()\n\
    \    var result = [Int]()\n    for _, v := range rows {\n        for _, w := range\
    \ cols {\n            result.append((v, w))\n        }\n    }\n    return result",
  "    var rows = [[(Int, Int)]]()\n    for row in lst {\n        var cols = [Int]()\n\
    \        for col in row {\n            if col == x {\n                cols.append(col)\n\
    \            }\n        }\n        if cols.count > 0 {\n            rows.append((cols.count,\
    \ cols.count))\n        }\n    }\n    rows.sort(by: {$0.0 < $1.0})\n    rows.sort(by:\
    \ {$1.0 > $0.0})\n    return rows", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var rows = [Int]()\n    var row_index = 0\n\
    \    var col_index = 0\n    var row_indexes = [Int]()\n    var col_indexes = [Int]()\n\
    \    var i = 0\n    for row in lst {\n        if row_index < row.count {\n   \
    \         rows.append(row_index)\n            row_indexes.append(i)\n        }\n\
    \        i += 1\n    }\n    rows = rows.sorted()\n    for row in rows {\n    \
    \    if col_index < row.count {\n            col_indexes.append(col_index)\n \
    \       }\n        col_index += 1\n    }\n    col_indexes = col_indexes.sorted()\n\
    \    var result = [((Int, Int), Int)]()\n    for index in row_indexes {\n    \
    \    for index in col_indexes {\n            if rows[index] == x {\n         \
    \       result.append((rows[index], cols[index]))\n            }\n        }\n\
    \    }\n    return result", "    if lst.isEmpty() {\n        return []\n    }\n\
    \    var row = [Int]()\n    var col = [Int]()\n    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append((row, col))\n            }\n        }\n    }\n \
    \   result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n    return\
    \ result", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var cols_reversed = [Int]()\n\
    \    var row_index = 0\n    var col_index = 0\n    var row_reversed = false\n\
    \    var col_reversed = false\n    for row in lst {\n        if row_index == 0\
    \ {\n            cols = row\n            cols_reversed = row.reverse()\n     \
    \   } else {\n            cols = row.sorted()\n            cols_reversed = row.sorted().reverse()\n\
    \        }\n        if col_index == 0 {\n            rows = cols\n           \
    \ row_index = cols.count\n        } else {\n            rows = cols.sorted()\n\
    \            row_index = cols.count\n        }\n        if row_index == x {\n\
    \            return [(row_index, col_index)]\n        }\n        if col_index\
    \ == x {\n            if row_reversed {\n                return [(row_index, col_index)]\n\
    \            } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n        }\n        if row_index == row_index - 1 {\n         \
    \   if col_reversed {\n                return [(row_index, col_index)]\n     \
    \       } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n        }\n        if col_index == col_index - 1 {\n         \
    \   if row_reversed {\n                return [(row_index, col_index)]\n     \
    \       } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n        }\n        if row_index == row_index - 1 && col_index\
    \ == col_index - 1 {\n            if row_reversed {\n                return [(row_index,\
    \ col_index)]\n            } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n        }\n        if row_index == row_index - 1 && col_index\
    \ > col_index - 1 {\n            if row_reversed {\n                return [(row_index,\
    \ col_index)]\n            } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n        }\n        if row_index == row_index - 1 && col_index\
    \ < col_index - 1 {\n            if row_reversed {\n                return [(row_index,\
    \ col_index)]\n            } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n        }\n        if row_index == row_index - 1 && col_index\
    \ == col_index - 1 && row_reversed {\n            if col_reversed {\n        \
    \        return [(row_index, col_index)]\n            } else {\n             \
    \   return [(row_index, col_index)].reversed()\n            }\n        }\n   \
    \     if row_index == row_index - 1 && col_index == col_index - 1 && col_reversed\
    \ {\n            if row_reversed {\n                return [(row_index, col_index)]\n\
    \            } else {\n                return [(row_index, col_index)].reversed()\n\
    \            }\n", "    if lst == nil {\n        return nil\n    }\n    if lst.count\
    \ == 0 {\n        return nil\n    }\n    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in 0..<lst.count {\n        var col =\
    \ 0\n        for col in 0..<lst[row].count {\n            if lst[row][col] ==\
    \ x {\n                result.append((row, col))\n            }\n        }\n \
    \   }\n    result.sortInPlaceByKey(ascending: true, by: { (lhs, rhs) -> Bool in\n\
    \        return rhs[0] < lhs[0]\n    })\n    result.sortInPlaceByKey(ascending:\
    \ false, by: { (lhs, rhs) -> Bool in\n        return rhs[1] > lhs[1]\n    })\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var cols =\
    \ [Int]()\n    var i = 0\n    for row in lst {\n        cols = row.slice()\n \
    \       cols.reverse()\n        for col in cols {\n            if col == x {\n\
    \                rows.append(i)\n                cols.append(col)\n          \
    \  }\n        }\n        i += 1\n    }\n    rows.sort()\n    cols.sort()\n   \
    \ var result = [((Int, Int), Int)]()\n    for row in rows {\n        for col in\
    \ cols {\n            result.append((row, col))\n        }\n    }\n    return\
    \ result", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ (i, v) in row.enumerated() {\n            if v == x {\n                result.append((i,\
    \ v))\n            }\n        }\n    }\n    result.sort(by: {$0.0 < $1.0})\n \
    \   result.sort(by: {$0.1 < $1.0})\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var result = [[(Int, Int)]]()\n    for row in lst {\n        for column in\
    \ row {\n            if column == x {\n                result.append([(row, column)])\n\
    \            }\n        }\n    }\n    result.sort(by: { (row1, row2) in\n    \
    \    return row1[0].1 < row2[0].1\n    })\n    result.sort(by: { (row1, row2)\
    \ in\n        return row1[0].1 > row2[0].1\n    })\n    result.sort(by: { (row1,\
    \ row2) in\n        return row1[0].1 < row2[0].1\n    })\n    return result",
  "    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var col = 0\n    var rowIdx = 0\n\
    \    var colIdx = 0\n    for row in lst {\n        if colIdx >= col {\n      \
    \      colIdx = 0\n            rowIdx += 1\n        }\n        if rowIdx >= row.count\
    \ {\n            rowIdx = 0\n            col += 1\n        }\n        if rowIdx\
    \ != 0 {\n            rowIdx -= 1\n        }\n        if colIdx != 0 {\n     \
    \       colIdx -= 1\n        }\n        if rowIdx != 0 && colIdx != 0 {\n    \
    \        rowIdx -= 1\n            colIdx -= 1\n        }\n        if rowIdx !=\
    \ 0 && colIdx == 0 {\n            rowIdx -= 1\n        }\n        if rowIdx ==\
    \ 0 && colIdx == 0 {\n            rowIdx += 1\n        }\n        if rowIdx ==\
    \ 0 && colIdx != 0 {\n            colIdx += 1\n        }\n        if rowIdx !=\
    \ 0 && colIdx == 0 {\n            rowIdx += 1\n            colIdx += 1\n     \
    \   }\n        if rowIdx != 0 && colIdx != 0 {\n            rowIdx += 1\n    \
    \        colIdx += 1\n        }\n        if rowIdx == 0 && colIdx == 0 {\n   \
    \         rowIdx += 1\n            colIdx += 1\n        }\n        if rowIdx !=\
    \ 0 && colIdx == 0 {\n            rowIdx += 1\n            colIdx += 1\n     \
    \   }\n        if rowIdx != 0 && colIdx != 0 {\n            rowIdx += 1\n    \
    \        colIdx += 1\n        }\n        if rowIdx == 0 && colIdx == 0 {\n   \
    \         rowIdx += 1\n            colIdx += 1\n        }\n        if rowIdx !=\
    \ 0 && colIdx != 0 {\n            rowIdx += 1\n            colIdx += 1\n     \
    \   }\n        if rowIdx == 0 && colIdx == 0 {\n            rowIdx += 1\n    \
    \        colIdx += 1\n        }\n        if rowIdx != 0 && colIdx != 0 {\n   \
    \         rowIdx += 1\n            colIdx += 1\n        }\n        if rowIdx ==\
    \ 0 && colIdx == 0 {\n            rowIdx += 1\n            colIdx += 1\n     \
    \   }\n        if rowIdx != 0 && colIdx != 0 {\n            rowIdx += 1\n    \
    \        colIdx += 1\n        }\n        if rowIdx == 0 && colIdx == 0 {\n   \
    \         rowIdx += 1\n            colIdx += 1\n        }\n        if rowIdx !=\
    \ 0 && colIdx != 0 {\n            rowIdx += 1\n            colIdx += 1\n     \
    \   }\n        if rowIdx == 0 && colIdx == 0 {\n            rowIdx += 1\n    \
    \        colIdx += 1", "    var coords = [(Int, Int)]()\n    for row in lst {\n\
    \        var coord = (0, 0)\n        for col in row {\n            if col == x\
    \ {\n                coord = (row, col)\n                break\n            }\n\
    \        }\n        coords.append(coord)\n    }\n    coords.sortInPlace()\n  \
    \  coords.sortInPlaceInDescendingOrder()\n    return coords", "    if lst.isEmpty()\
    \ {\n        return [] // empty list\n    }\n    var row = [Int]()\n    var rows\
    \ = [Int]()\n    var cols = [Int]()\n    var rowIdx = 0\n    var colIdx = 0\n\
    \    for row in lst {\n        cols = row.map { $0 }\n        if cols.contains(x)\
    \ {\n            rows.append(row)\n            rowIdx += 1\n        }\n    }\n\
    \    if rowIdx == 0 {\n        return [] // no such row\n    }\n    if rowIdx\
    \ > 1 {\n        for col in cols {\n            if col > x {\n               \
    \ colIdx -= 1\n                break\n            }\n        }\n    }\n    return\
    \ rows.map { row in\n        return (rowIdx, colIdx)\n    }", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var coords = [(Int,\
    \ Int)]()\n    var rowCoords = [(Int, Int)]()\n    var rowSorted = false\n   \
    \ var colSorted = false\n    for row in lst {\n        if rowSorted {\n      \
    \      rowSorted = false\n            row.append(x)\n        } else {\n      \
    \      rowSorted = true\n        }\n        for col in row {\n            if colSorted\
    \ {\n                colSorted = false\n                coords.append((col, row))\n\
    \            } else {\n                colSorted = true\n            }\n     \
    \   }\n    }\n    if rowSorted {\n        coords.sortInPlace()\n    } else {\n\
    \        coords.sortInPlace()\n        coords.reverse()\n    }\n    if colSorted\
    \ {\n        coords.sortInPlace()\n    } else {\n        coords.sortInPlace()\n\
    \        coords.reverse()\n    }\n    return coords", "    var rows = [[(Int,\
    \ Int)]]()\n    var row = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        cols\
    \ = row.slice()\n        cols.append(0)\n        col_index = 0\n        for col\
    \ in cols {\n            if col == x {\n                rows.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    return rows", "    if lst == [] {\n        return []\n    }\n\
    \    if lst.isEmpty {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ rows = [Int]()\n    var columns = [Int]()\n    var column = [Int]()\n    var\
    \ row_index = 0\n    var column_index = 0\n    var i = 0\n    var j = 0\n    for\
    \ row in lst {\n        columns.append(0)\n        column.append(0)\n    }\n \
    \   for row in lst {\n        for column in row {\n            columns[column_index]\
    \ = column\n            column_index += 1\n        }\n        rows.append(row)\n\
    \        row_index += 1\n    }\n    for row in rows {\n        for column in row\
    \ {\n            if column == x {\n                row_index = row.index\n   \
    \             column_index = columns.index\n                break\n          \
    \  }\n        }\n    }\n    var result = [((Int, Int), Int)]()\n    for row in\
    \ rows {\n        for column in row {\n            if column == x {\n        \
    \        result.append((((row_index, column_index), x), column))\n           \
    \ }\n        }\n    }\n    result.sortInPlace()\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var column = 0\n    for row in lst {\n        if row == x {\n       \
    \     break\n        }\n    }\n    for row in lst {\n        if row == x {\n \
    \           break\n        }\n        column = lst.index(row, column) + 1\n  \
    \      result.append((row, column))\n    }\n    return result", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var col = 0\n    for row in lst {\n        if row == x {\n          \
    \  break\n        }\n    }\n    for col in lst.first!.indices {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row.indices {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \        result.append((row, col))\n    }\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, v) )\n      \
    \      }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    var result = [(Int, Int)]()\n    if\
    \ lst.isEmpty {\n        return result\n    }\n    var row = 0\n    var col =\
    \ 0\n    var rowMax = lst.count\n    var colMax = lst[0].count\n    var rowMin\
    \ = rowMax\n    var colMin = colMax\n    while row < rowMax {\n        if lst[row][col]\
    \ == x {\n            result.append((row, col))\n            row++\n         \
    \   col++\n        }\n        if row == rowMin {\n            row++\n        \
    \    col = 0\n        }\n        if col == colMin {\n            col++\n     \
    \       row = 0\n        }\n    }\n    return result", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for (i, j) in row.enumerated() {\n  \
    \          if i == x {\n                result.append( (i, j) )\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{ $0.1 < $1.1\
    \ }\n    return result", "    if lst == nil {\n        return []\n    }\n    var\
    \ result = [(Int, Int)]()\n    for row in lst {\n        if row.contains(x) {\n\
    \            for (i, j) in row.enumerated() {\n                if j > x {\n  \
    \                  break\n                }\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var col = 0\n    for row in lst {\n        if row == x {\n          \
    \  break\n        }\n    }\n    for col in row {\n        if col == x {\n    \
    \        break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }", "    var coords = [(Int, Int)]()\n    for row in lst\
    \ {\n        for (i, v) in row.enumerated() {\n            if v == x {\n     \
    \           coords.append((i, v))\n            }\n        }\n    }\n    coords.sortInPlace()\n\
    \    coords.sortInPlace{ $0.1 < $1.1 }\n    return coords", "    if lst.isEmpty\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var coords = [(Int,\
    \ Int)]()\n    for row in lst {\n        coords = coords.sorted()\n        coords\
    \ = coords.reversed()\n        if coords.contains((x, 0)) {\n            return\
    \ coords.map { ($0.0, $0.1) }\n        }\n    }\n    return []", "    var row\
    \ = [Int]()\n    var column = [Int]()\n    var rows = [Int]()\n    var columns\
    \ = [Int]()\n    var i = 0\n    for row in lst {\n        columns = row\n    \
    \    rows = column\n        columns = columns\n        rows = rows\n        if\
    \ x == row[0] {\n            rows.append(i)\n            columns.append(row[0])\n\
    \            i += 1\n        }\n    }\n    return rows", "    var row = [Int]()\n\
    \    var coords = [(0, 0)]\n    for row in lst {\n        coords = coords.sorted\
    \ { $0.0 < $1.0 }\n        coords = coords.sorted { $0.1 < $1.0 }\n        if\
    \ coords.contains((x, 0)) {\n            return coords.map { coord -> (Int, Int)\
    \ in\n                return (coord, row.count)\n            }\n        }\n  \
    \  }\n    return []", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var coords = [(0, 0)]\n    for row in lst {\n        coords\
    \ = coords.sorted { $0.0 < $1.0 }\n        coords = coords.sorted { $0.1 < $1.0\
    \ }\n        if coords.contains((x, 0)) {\n            return coords.map { coord\
    \ -> (Int, Int) in\n                return (coord.1, coord.0)\n            }\n\
    \        }\n    }\n    return []", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var result = [(Int, Int)]()\n    for row in lst {\n        for (i,\
    \ v) in row.enumerated() {\n            if v == x {\n                result.append((i,\
    \ v))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    if lst.isEmpty {\n        return [] as [(Int, Int)]\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n    var j\
    \ = 0\n    for row in lst {\n        i += 1\n        for col in row {\n      \
    \      if col == x {\n                return [(i, j)] as [(Int, Int)]\n      \
    \      }\n            j += 1\n        }\n        j = 0\n    }\n    return [] as\
    \ [(Int, Int)]", "    var result = [(Int, Int)]()\n    for row in lst {\n    \
    \    for (i, j) in row.enumerated() {\n            if i == x {\n             \
    \   result.append( (i, j) )\n            }\n        }\n    }\n    result.sort(by:\
    \ { (lhs, rhs) -> Bool in\n        if lhs.0 < rhs.0 {\n            return true\n\
    \        }\n        return false\n    })\n    result.sort(by: { (lhs, rhs) ->\
    \ Bool in\n        if lhs.1 < rhs.1 {\n            return true\n        }\n  \
    \      return false\n    })\n    return result", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        var rowResult = [(Int, Int)]()\n        for column\
    \ in row {\n            if column == x {\n                rowResult.append((column,\
    \ row))\n            }\n        }\n        result = result.sorted(by: { (r1, r2)\
    \ -> Bool in\n            return r1.0 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) -> Bool in\n            return r1.1 < r2.1\n        })\n        result\
    \ = result.sorted(by: { (r1, r2) -> Bool in\n            return r1.2 < r2.2\n\
    \        })\n    }\n    return result", "    if lst.isEmpty {\n        return\
    \ []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for col in lst.first!.dropFirst().reverse() {\n        if col == x\
    \ {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.dropFirst().reverse() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.dropFirst().reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.dropFirst().reverse() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.dropFirst().reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.dropFirst().reverse() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.dropFirst().reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    var rowIdx = 0\n    var colIdx = 0\n    for row in lst {\n    \
    \    if rowIdx == x {\n            for col in row {\n                result.append(col)\n\
    \            }\n            break\n        }\n        if colIdx == x {\n     \
    \       for col in row {\n                result.append(col)\n            }\n\
    \            break\n        }\n        if colIdx > x {\n            for col in\
    \ row {\n                result.append(col)\n            }\n            break\n\
    \        }\n        if rowIdx > x {\n            for col in row {\n          \
    \      result.append(col)\n            }\n            break\n        }\n    }\n\
    \    result.sortInPlace()\n    return result", "    var coords = [(0, 0)]\n  \
    \  for row in lst {\n        var coord = (0, 0)\n        for col in row {\n  \
    \          if col == x {\n                coord = (row, col)\n            }\n\
    \        }\n        coords.append(coord)\n    }\n    coords.sortInPlace()\n  \
    \  coords.sortInPlaceInDescendingOrder()\n    return coords", "    var result\
    \ = [(Int, Int)]()\n    if lst.isEmpty {\n        return result\n    }\n    var\
    \ row = 0\n    var col = 0\n    var rowMax = lst.count\n    var colMax = lst[0].count\n\
    \    var rowMin = rowMax\n    var colMin = colMax\n    while row < rowMax {\n\
    \        if lst[row][col] == x {\n            result.append((row, col))\n    \
    \    }\n        if col < colMax {\n            col++\n        } else {\n     \
    \       row++\n            col = 0\n            rowMin = row\n            colMin\
    \ = col\n        }\n    }\n    if row == rowMax {\n        result.append((row,\
    \ col))\n    }\n    if col == colMax {\n        result.append((row, col))\n  \
    \  }\n    result.sortInPlace((rowMin, colMin))\n    return result", "    if lst.isEmpty\
    \ {\n        return lst\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var result = [[(Int, Int)]]()\n    var rowIndex = 0\n    var columnIndex\
    \ = 0\n    for row in lst {\n        row.sort()\n        column.sort()\n     \
    \   if columnIndex == x {\n            result.append(row.toTuple())\n        }\n\
    \        if columnIndex > x {\n            columnIndex = 0\n            rowIndex\
    \ += 1\n        }\n        columnIndex += 1\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        if a.0 < b.0 {\n            return true\n        }\n\
    \        return false\n    })\n    return result", "    if lst.isEmpty {\n   \
    \     return [] as [(Int, Int)]\n    }\n    var row = [Int]()\n    var rows =\
    \ [Int]()\n    var cols = [Int]()\n    var row_index = 0\n    var col_index =\
    \ 0\n    for row in lst {\n        if row_index == x {\n            return [(row_index,\
    \ col_index)]\n        }\n        for col in row {\n            if col_index ==\
    \ x {\n                rows.append(row_index)\n                cols.append(col_index)\n\
    \            }\n            col_index += 1\n        }\n        row_index += 1\n\
    \        col_index = 0\n    }\n    return [(row_index, col_index)]", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(0, x)]\n    for row in lst {\n\
    \        if row.contains(x) {\n            result = result.sorted().map { ($0.row,\
    \ $0.column) }\n        }\n    }\n    return result as [(Int, Int)]", "    var\
    \ row = [Int]()\n    var coords = [Int]()\n    var rowCoords = [Int]()\n    var\
    \ rowCoordsSorted = [Int]()\n    var colCoords = [Int]()\n    var colCoordsSorted\
    \ = [Int]()\n    var rowSorted = [Int]()\n    var colSorted = [Int]()\n    var\
    \ rowSortedSorted = [Int]()\n    var colSortedSorted = [Int]()\n    var rowCoordsSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSorted = [Int]()\n    var rowCoordsSortedSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSortedSorted = [Int]()\n    var rowCoordsSortedSortedSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSortedSortedSorted = [Int]()\n    var rowCoordsSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSortedSortedSortedSorted = [Int]()\n    var\
    \ rowCoordsSortedSortedSortedSortedSorted = [Int]()\n    var colCoordsSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var colCoordsSortedSortedSortedSortedSortedSorted = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var colCoordsSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var colCoordsSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var colCoordsSortedSortedSortedSortedSortedSortedSortedSortedSorted = [Int]()\n\
    \    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var colCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = [Int]()\n    var rowCoordsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = ", "    if lst.isEmpty {\n        return []\n    }\n    var coords = [(0,\
    \ 0)]\n    for row in lst {\n        if row.contains(x) {\n            coords.append(coords[coords.count\
    \ - 1] + (x, row.count))\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder(by:\
    \ { $0.1 < $1.1 })\n    return coords", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var coords = [(Int, Int)]()\n    for row\
    \ in lst {\n        coords = coords.sorted()\n        coords.reverse()\n     \
    \   var coord = coords.first\n        if coord.0 < x {\n            coord = coords.last\n\
    \        }\n        if coord.1 == x {\n            return coords.map { coord }\n\
    \        }\n    }\n    return []", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var result = [(Int, Int)]()\n    for row in lst {\n        for (i,\
    \ v) in row.enumerated() {\n            if v == x {\n                result.append(\
    \ (i, v) )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    var row = [Int]()\n    var coords =\
    \ [(Int, Int)]()\n    for row in lst {\n        coords = coords.sorted(by: {$0.0\
    \ < $1.0})\n        coords = coords.sorted(by: {$0.1 < $1.0})\n        if coords.contains((x,\
    \ 0)) {\n            return coords.map { ($0.0, $0.1) }\n        }\n    }\n  \
    \  return []", "    if lst == [] as [[Int]] {\n        return [] as [(Int, Int)]\n\
    \    }\n    if lst.isEmpty {\n        return [] as [(Int, Int)]\n    }\n    if\
    \ lst[0] != [] as [Int] {\n        return get_row(lst[0] as [[Int]], x) as [(Int,\
    \ Int)]\n    }\n    var row = [Int]()\n    var rows = [Int]()\n    var cols =\
    \ [Int]()\n    var cols_rev = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    var row_max = Int()\n    var col_max = Int()\n    for row in lst {\n\
    \        if row.count > col_index {\n            row_max = row.count\n       \
    \ }\n        if row.count > col_index {\n            col_max = row.count\n   \
    \     }\n        if row.count > col_index {\n            cols = row.enumerated().map({$0.offset})\n\
    \            cols_rev = cols.reversed()\n        }\n        if row.count > row_index\
    \ {\n            rows = row.enumerated().map({$0.offset})\n        }\n       \
    \ if row.count > row_index {\n            row_index = row.count\n        }\n \
    \       if row.count > col_index {\n            col_index = row.count\n      \
    \  }\n    }\n    var result = [(Int, Int)]()\n    for row in rows {\n        if\
    \ row == x {\n            for col in cols {\n                if col == x {\n \
    \                   result.append( (row_index, col_index) )\n                }\n\
    \            }\n        }\n    }\n    result.sort({$0.0 < $1.0})\n    result.sort({$1.0\
    \ > $0.0})\n    result.sort({$0.0 < $1.0})\n    result.sort({$1.0 > $0.0})\n \
    \   return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var row = 0\n    var col = 0\n \
    \   for row in lst {\n        cols = row.sorted()\n        for col in cols {\n\
    \            if col == x {\n                return [(row, col)]\n            }\n\
    \        }\n    }\n    return []", "    var result = [(Int, Int)]()\n    var row\
    \ = 0\n    var col = 0\n    for row in lst {\n        if row == nil {\n      \
    \      continue\n        }\n        if col == x {\n            result.append((row,\
    \ col))\n        }\n        col = 0\n        for col in row {\n            col++\n\
    \            if col == x {\n                result.append((row, col))\n      \
    \      }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result"]
stop_tokens:
- "\n}"
