language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = MD5(data!) {\n        return hash.base64EncodedString()\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd0pbvgmz.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpd0pbvgmz.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpd0pbvgmz.swift:8:19: error:\
    \ cannot find 'MD5' in scope\n    if let hash = MD5(data!) {\n               \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return String(data:\
    \ hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6ro6m99q.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6ro6m99q.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp6ro6m99q.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp6ro6m99q.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = data.md5()\n\
    \    return hash?.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7e1z72sp.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp7e1z72sp.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return md5(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4rdfkga4.swift:10:12: error: cannot find 'md5' in scope\n    return\
    \ md5(text)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = data.md5() {\n        return String(data: hash, encoding: .utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb2pzgtf9.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpb2pzgtf9.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpb2pzgtf9.swift:9:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpb2pzgtf9.swift:9:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprovlwzhh.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmprovlwzhh.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmprovlwzhh.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcu_eoarb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpcu_eoarb.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpcu_eoarb.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = MD5()\n    md5.update(text.data(using: .utf8)!)\n    return String(data:\
    \ md5.digest(), encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpea6pckg2.swift:10:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmpea6pckg2.swift:11:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpea6pckg2.swift:11:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n/tmp/tmpea6pckg2.swift:12:50: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.digest(), encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpea6pckg2.swift:12:50:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.digest(), encoding: .utf8)\n                              \
    \                  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return MD5Hash(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppukeu97o.swift:10:12: error: cannot find 'MD5Hash' in scope\n \
    \   return MD5Hash(text)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp88svktw9.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp88svktw9.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp88svktw9.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp88svktw9.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp88svktw9.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpt9chit82.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpt9chit82.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpt9chit82.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpt9chit82.swift:12:57: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpt9chit82.swift:12:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let digest = data.md5()\n    return\
    \ digest.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppxx9gu2x.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmppxx9gu2x.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg285r7d7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpg285r7d7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpg285r7d7.swift:12:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpg285r7d7.swift:12:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return MD5Hash(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppukeu97o.swift:10:12: error: cannot find 'MD5Hash' in scope\n \
    \   return MD5Hash(text)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45zgn6c6.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp45zgn6c6.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp45zgn6c6.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = data.md5() {\n        return String(data: hash, encoding: .utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb2pzgtf9.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpb2pzgtf9.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpb2pzgtf9.swift:9:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpb2pzgtf9.swift:9:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let digest = MD5(data: data)\n    return\
    \ digest.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg1zfm8v0.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpg1zfm8v0.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpg1zfm8v0.swift:11:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data: data)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let data = text.data(using: .utf8) else {\n\
    \        return nil\n    }\n    return data.md5()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp34i1v2bv.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: .utf8) else {\n              \
    \       ~~~~ ^~~~\n/tmp/tmp34i1v2bv.swift:7:40: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let data = text.data(using: .utf8)\
    \ else {\n                                      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(data: hash, encoding: .utf8)\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoz9vlzgo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpoz9vlzgo.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpoz9vlzgo.swift:12:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpoz9vlzgo.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5.hash(data!)\n    return\
    \ hash?.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz6sl_oo6.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpz6sl_oo6.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpz6sl_oo6.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n        \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpt9chit82.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpt9chit82.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpt9chit82.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpt9chit82.swift:12:57: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpt9chit82.swift:12:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5_zagb2_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp5_zagb2_.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp5_zagb2_.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmp5_zagb2_.swift:12:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp5_zagb2_.swift:12:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpt9chit82.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpt9chit82.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpt9chit82.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpt9chit82.swift:12:57: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpt9chit82.swift:12:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcu_eoarb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpcu_eoarb.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpcu_eoarb.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = MD5(data!) {\n        return hash.base64EncodedString()\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd0pbvgmz.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpd0pbvgmz.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpd0pbvgmz.swift:8:19: error:\
    \ cannot find 'MD5' in scope\n    if let hash = MD5(data!) {\n               \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = MD5(data!) {\n        return hash.base64EncodedString()\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4i2n0_7_.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp4i2n0_7_.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp4i2n0_7_.swift:8:19:\
    \ error: cannot find 'MD5' in scope\n    if let hash = MD5(data!) {\n        \
    \          ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9baz29mx.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9baz29mx.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9baz29mx.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg285r7d7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpg285r7d7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpg285r7d7.swift:12:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpg285r7d7.swift:12:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpt5tfjof2.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpt5tfjof2.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpt5tfjof2.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.Init()\n    md5.Update(text.data(using: .utf8)!)\n   \
    \ var md5String: String = String()\n    for _ in 0..<md5.Size {\n        md5String\
    \ += String(format: \"%02x\", md5.Sum(nil))\n    }\n    return md5String\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmhpnlexh.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmpmhpnlexh.swift:12:21: error: value\
    \ of type 'String' has no member 'data'\n    md5.Update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpmhpnlexh.swift:12:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.Update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9baz29mx.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9baz29mx.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9baz29mx.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    return md5(data!)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpbtjar74u.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpbtjar74u.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpbtjar74u.swift:11:12:\
    \ error: cannot find 'md5' in scope\n    return md5(data!)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkscegmhg.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkscegmhg.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkscegmhg.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpakyp8i3w.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpt9chit82.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpt9chit82.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpt9chit82.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpt9chit82.swift:12:57: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpt9chit82.swift:12:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpy7_yzf_r.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpy7_yzf_r.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpy7_yzf_r.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg285r7d7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpg285r7d7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpg285r7d7.swift:12:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpg285r7d7.swift:12:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkyayonmg.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpkyayonmg.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpkyayonmg.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhciq3pn.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpkhciq3pn.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpkhciq3pn.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return String(data:\
    \ hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6ro6m99q.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6ro6m99q.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp6ro6m99q.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp6ro6m99q.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1nb9blbf.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1nb9blbf.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5_zagb2_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp5_zagb2_.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp5_zagb2_.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmp5_zagb2_.swift:12:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp5_zagb2_.swift:12:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzbup9qv0.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpzbup9qv0.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let data = text.data(using: .utf8) else { return\
    \ nil }\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprf6isfjm.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: .utf8) else { return nil }\n \
    \                    ~~~~ ^~~~\n/tmp/tmprf6isfjm.swift:7:40: error: cannot infer\
    \ contextual base in reference to member 'utf8'\n    guard let data = text.data(using:\
    \ .utf8) else { return nil }\n                                      ~^~~~\n/tmp/tmprf6isfjm.swift:8:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n        \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1nb9blbf.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1nb9blbf.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5_zagb2_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp5_zagb2_.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp5_zagb2_.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmp5_zagb2_.swift:12:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp5_zagb2_.swift:12:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg285r7d7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpg285r7d7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpg285r7d7.swift:12:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpg285r7d7.swift:12:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzbup9qv0.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpzbup9qv0.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = MD5(data!) {\n        return hash.base64EncodedString()\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4i2n0_7_.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp4i2n0_7_.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp4i2n0_7_.swift:8:19:\
    \ error: cannot find 'MD5' in scope\n    if let hash = MD5(data!) {\n        \
    \          ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.Init()\n    md5.Update(text.data(using: .utf8)!)\n   \
    \ var md5String: String = String()\n    for _ in 0..<md5.Size {\n        md5String\
    \ += String(format: \"%02x\", md5.Sum(nil))\n    }\n    return md5String\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmhpnlexh.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmpmhpnlexh.swift:12:21: error: value\
    \ of type 'String' has no member 'data'\n    md5.Update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpmhpnlexh.swift:12:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.Update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    return String(data: data, encoding:\
    \ .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmputky16ko.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmputky16ko.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmputky16ko.swift:11:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: data, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmputky16ko.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: data, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = MD5.hash(data!) {\n        return hash.base64EncodedString()\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4hvnuc_k.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp4hvnuc_k.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp4hvnuc_k.swift:8:19: error:\
    \ cannot find 'MD5' in scope\n    if let hash = MD5.hash(data!) {\n          \
    \        ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = data.md5() {\n        return String(data: hash, encoding: .utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb2pzgtf9.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpb2pzgtf9.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpb2pzgtf9.swift:9:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpb2pzgtf9.swift:9:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = MD5.hash(data!) {\n        return hash.base64EncodedString()\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6_cfoq67.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6_cfoq67.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp6_cfoq67.swift:8:19:\
    \ error: cannot find 'MD5' in scope\n    if let hash = MD5.hash(data!) {\n   \
    \               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpakyp8i3w.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5.hash(data!)\n    return\
    \ String(data: hash!, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpad8rlpgi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpad8rlpgi.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpad8rlpgi.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n        \
    \       ^~~\n/tmp/tmpad8rlpgi.swift:12:43: error: extra argument 'encoding' in\
    \ call\n    return String(data: hash!, encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpad8rlpgi.swift:12:43: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: hash!, encoding: .utf8)\n        \
    \                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = data.md5()\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoib5uosv.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpoib5uosv.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpypvbia1_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpypvbia1_.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.Init()\n    md5.Update(text.data(using: .utf8)!)\n   \
    \ var md5String: String = String()\n    for _ in 0..<md5.Size {\n        md5String\
    \ += String(format: \"%02x\", md5.Digest())\n    }\n    return md5String\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprrstrkky.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmprrstrkky.swift:12:21: error: value\
    \ of type 'String' has no member 'data'\n    md5.Update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmprrstrkky.swift:12:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.Update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.Init()\n    md5.Update(text.data(using: .utf8)!)\n   \
    \ var md5String: String = String()\n    for _ in 0..<md5.Size {\n        md5String\
    \ += String(format: \"%02x\", md5.Sum(nil))\n    }\n    return md5String\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmhpnlexh.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmpmhpnlexh.swift:12:21: error: value\
    \ of type 'String' has no member 'data'\n    md5.Update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpmhpnlexh.swift:12:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.Update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5.hash(data!)\n    return\
    \ String(data: hash!, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpad8rlpgi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpad8rlpgi.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpad8rlpgi.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n        \
    \       ^~~\n/tmp/tmpad8rlpgi.swift:12:43: error: extra argument 'encoding' in\
    \ call\n    return String(data: hash!, encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpad8rlpgi.swift:12:43: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: hash!, encoding: .utf8)\n        \
    \                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhciq3pn.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpkhciq3pn.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpkhciq3pn.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1nb9blbf.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1nb9blbf.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: .utf8)\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp20mz8tl5.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp20mz8tl5.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp20mz8tl5.swift:12:46: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp20mz8tl5.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return String(data: hash!, encoding: String.Encoding.utf8)\
    \ ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqnqwg8xh.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpqnqwg8xh.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpqnqwg8xh.swift:8:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpqnqwg8xh.swift:9:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8) ?? nil\n               \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpqnqwg8xh.swift:9:49:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash!,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1nb9blbf.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1nb9blbf.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcu_eoarb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpcu_eoarb.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpcu_eoarb.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let digest = data.md5()\n    return\
    \ digest.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppxx9gu2x.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmppxx9gu2x.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return String(data:\
    \ hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6ro6m99q.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp6ro6m99q.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp6ro6m99q.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp6ro6m99q.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpakyp8i3w.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9baz29mx.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9baz29mx.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9baz29mx.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: CC_MD5_CTX = CC_MD5_CTX()\n    defer { CC_MD5_CTX_free(md5) }\n   \
    \ CC_MD5_CTX_init(md5)\n    defer { CC_MD5_CTX_cleanup(md5) }\n    CC_MD5_Update(md5,\
    \ text.data(using: .utf8)!, text.count)\n    var digest = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5_Final(digest, &md5)\n    return\
    \ String(data: digest, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmplb5n804y.swift:10:14: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    var md5: CC_MD5_CTX = CC_MD5_CTX()\n             ^~~~~~~~~~\n/tmp/tmplb5n804y.swift:11:13:\
    \ error: cannot find 'CC_MD5_CTX_free' in scope\n    defer { CC_MD5_CTX_free(md5)\
    \ }\n            ^~~~~~~~~~~~~~~\n/tmp/tmplb5n804y.swift:12:5: error: cannot find\
    \ 'CC_MD5_CTX_init' in scope\n    CC_MD5_CTX_init(md5)\n    ^~~~~~~~~~~~~~~\n\
    /tmp/tmplb5n804y.swift:13:13: error: cannot find 'CC_MD5_CTX_cleanup' in scope\n\
    \    defer { CC_MD5_CTX_cleanup(md5) }\n            ^~~~~~~~~~~~~~~~~~\n/tmp/tmplb5n804y.swift:14:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(md5, text.data(using:\
    \ .utf8)!, text.count)\n    ^~~~~~~~~~~~~\n/tmp/tmplb5n804y.swift:14:29: error:\
    \ value of type 'String' has no member 'data'\n    CC_MD5_Update(md5, text.data(using:\
    \ .utf8)!, text.count)\n                       ~~~~ ^~~~\n/tmp/tmplb5n804y.swift:14:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    CC_MD5_Update(md5,\
    \ text.data(using: .utf8)!, text.count)\n                                    \
    \    ~^~~~\n/tmp/tmplb5n804y.swift:15:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplb5n804y.swift:16:5:\
    \ error: cannot find 'CC_MD5_Final' in scope\n    CC_MD5_Final(digest, &md5)\n\
    \    ^~~~~~~~~~~~\n/tmp/tmplb5n804y.swift:17:44: error: extra argument 'encoding'\
    \ in call\n    return String(data: digest, encoding: .utf8)\n                \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmplb5n804y.swift:17:44: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    return String(data:\
    \ digest, encoding: .utf8)\n                                          ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: CString?\n    guard let md5 = MD5(text) else {\n        return nil\n\
    \    }\n    return String(data: md5._buffer, encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8fovk5lj.swift:10:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmp8fovk5lj.swift:11:21: error:\
    \ cannot find 'MD5' in scope\n    guard let md5 = MD5(text) else {\n         \
    \           ^~~\n/tmp/tmp8fovk5lj.swift:14:49: error: extra argument 'encoding'\
    \ in call\n    return String(data: md5._buffer, encoding: .utf8)\n           \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp8fovk5lj.swift:14:49: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    return String(data:\
    \ md5._buffer, encoding: .utf8)\n                                            \
    \   ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9baz29mx.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9baz29mx.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9baz29mx.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkscegmhg.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkscegmhg.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkscegmhg.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhciq3pn.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpkhciq3pn.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpkhciq3pn.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsm823fhk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpsm823fhk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpsm823fhk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg285r7d7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpg285r7d7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpg285r7d7.swift:12:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpg285r7d7.swift:12:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkscegmhg.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpkscegmhg.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpkscegmhg.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprovlwzhh.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmprovlwzhh.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmprovlwzhh.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text.utf8)\n    return String(data: md5.bytes,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl3u2pvtw.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmpl3u2pvtw.swift:12:47: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.bytes, encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpl3u2pvtw.swift:12:47:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.bytes, encoding: .utf8)\n                                 \
    \            ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = data.md5()\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoib5uosv.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpoib5uosv.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = data.md5() {\n        return String(hash)\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1j5sla1a.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1j5sla1a.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7mquajgd.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp7mquajgd.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp7mquajgd.swift:9:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp7mquajgd.swift:9:52: error: type 'String' has no member 'Encoding'\n \
    \       return String(data: hash, encoding: String.Encoding.utf8)\n          \
    \                                  ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhciq3pn.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpkhciq3pn.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpkhciq3pn.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1nb9blbf.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1nb9blbf.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzbup9qv0.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpzbup9qv0.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9baz29mx.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9baz29mx.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9baz29mx.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl_ctjgop.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpl_ctjgop.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpl_ctjgop.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmpl_ctjgop.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpl_ctjgop.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    return md5(data: data!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpw6wev0te.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpw6wev0te.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpw6wev0te.swift:11:12: error:\
    \ cannot find 'md5' in scope\n    return md5(data: data!)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = MD5()\n    md5.update(text.data(using: .utf8)!)\n    return String(data:\
    \ md5.digest(), encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpea6pckg2.swift:10:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmpea6pckg2.swift:11:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpea6pckg2.swift:11:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n/tmp/tmpea6pckg2.swift:12:50: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.digest(), encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpea6pckg2.swift:12:50:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.digest(), encoding: .utf8)\n                              \
    \                  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    return NSData(bytes:\
    \ data, length: data.count).md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqex48e27.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpqex48e27.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpqex48e27.swift:11:12: error:\
    \ cannot find 'NSData' in scope\n    return NSData(bytes: data, length: data.count).md5()\n\
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(data: hash, encoding: .utf8)\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoz9vlzgo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpoz9vlzgo.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpoz9vlzgo.swift:12:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpoz9vlzgo.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsm823fhk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpsm823fhk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpsm823fhk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpypvbia1_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpypvbia1_.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcu_eoarb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpcu_eoarb.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpcu_eoarb.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprovlwzhh.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmprovlwzhh.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmprovlwzhh.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpt9chit82.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpt9chit82.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpt9chit82.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmpt9chit82.swift:12:57: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpt9chit82.swift:12:48: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = md5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmgkfmhjw.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpmgkfmhjw.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpmgkfmhjw.swift:11:16: error: cannot find 'md5'\
    \ in scope\n    let hash = md5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let digest = MD5(data: data)\n    return\
    \ digest.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg1zfm8v0.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpg1zfm8v0.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpg1zfm8v0.swift:11:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data: data)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: CString?\n    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \    MD5Final(&md5)\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpo93zx98z.swift:10:14: error: cannot find type 'CString' in scope\n\
    \    var md5: CString?\n             ^~~~~~~\n/tmp/tmpo93zx98z.swift:11:5: error:\
    \ cannot find 'MD5Init' in scope\n    MD5Init(&md5)\n    ^~~~~~~\n/tmp/tmpo93zx98z.swift:12:5:\
    \ error: cannot find 'MD5Update' in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \    ^~~~~~~~~\n/tmp/tmpo93zx98z.swift:12:47: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \                                              ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo93zx98z.swift:12:26:\
    \ error: value of type 'String' has no member 'cStringUsingEncoding'\n    MD5Update(&md5,\
    \ text.cStringUsingEncoding(NSUTF8StringEncoding))\n                    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo93zx98z.swift:13:5: error: cannot find 'MD5Final' in scope\n    MD5Final(&md5)\n\
    \    ^~~~~~~~\n/tmp/tmpo93zx98z.swift:14:41: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    return String(data: md5!, encoding: NSUTF8StringEncoding)\n  \
    \                                      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo93zx98z.swift:14:41:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)\n                 ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8gwl_aqb.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp8gwl_aqb.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp8gwl_aqb.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5(data!)\n             \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmd32ja49.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpmd32ja49.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5_zagb2_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp5_zagb2_.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp5_zagb2_.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n               ^~~\n\
    /tmp/tmp5_zagb2_.swift:12:58: error: extra argument 'encoding' in call\n    return\
    \ String(data: hash!, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp5_zagb2_.swift:12:49: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8)\n            \
    \                             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(data: hash, encoding: .utf8)\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoz9vlzgo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpoz9vlzgo.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpoz9vlzgo.swift:12:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpoz9vlzgo.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhciq3pn.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpkhciq3pn.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpkhciq3pn.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsmcikwk.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpfsmcikwk.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpfsmcikwk.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmpfsmcikwk.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n      \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpfsmcikwk.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: .utf8)\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp20mz8tl5.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp20mz8tl5.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp20mz8tl5.swift:12:46: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp20mz8tl5.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpakyp8i3w.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if let hash\
    \ = MD5(data!) {\n        return hash.base64EncodedString()\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4i2n0_7_.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp4i2n0_7_.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp4i2n0_7_.swift:8:19:\
    \ error: cannot find 'MD5' in scope\n    if let hash = MD5(data!) {\n        \
    \          ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n\n    let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n\
    \    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpp8kww54v.swift:11:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpp8kww54v.swift:11:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpp8kww54v.swift:12:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60csi_pi.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp60csi_pi.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp60csi_pi.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9cq2jxfj.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp9cq2jxfj.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp9cq2jxfj.swift:11:16: error:\
    \ cannot find 'MD5' in scope\n    let hash = MD5.hash(data: data)\n          \
    \     ^~~\n/tmp/tmp9cq2jxfj.swift:12:57: error: extra argument 'encoding' in call\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9cq2jxfj.swift:12:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                                        ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: .utf8)\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp20mz8tl5.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp20mz8tl5.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp20mz8tl5.swift:12:46: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp20mz8tl5.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmd32ja49.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpmd32ja49.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n       \
    \ return String(hash)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1nb9blbf.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp1nb9blbf.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.Init()\n    defer md5.Reset()\n    md5.Write([]byte(text))\n\
    \    return md5.Sum(nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpaaj79_ai.swift:12:11: error: expected '{' after 'defer'\n    defer\
    \ md5.Reset()\n          ^\n/tmp/tmpaaj79_ai.swift:10:14: error: cannot find type\
    \ 'MD5' in scope\n    var md5: MD5\n             ^~~\n/tmp/tmpaaj79_ai.swift:14:20:\
    \ error: 'nil' requires a contextual type\n    return md5.Sum(nil)\n         \
    \          ^\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text.utf8)\n    return String(data: md5.bytes,\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl3u2pvtw.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmpl3u2pvtw.swift:12:47: error: extra\
    \ argument 'encoding' in call\n    return String(data: md5.bytes, encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpl3u2pvtw.swift:12:47:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5.bytes, encoding: .utf8)\n                                 \
    \            ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n \
    \   return String(data: hash, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c2gclb4.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp9c2gclb4.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp9c2gclb4.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5.hash(data: data)\n               ^~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp9c2gclb4.swift:12:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmd32ja49.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpmd32ja49.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return\
    \ hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps65rowyo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmps65rowyo.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmps65rowyo.swift:11:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data: data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg285r7d7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpg285r7d7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpg285r7d7.swift:12:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: hash, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpg285r7d7.swift:12:52: error: type 'String' has no member 'Encoding'\n\
    \        return String(data: hash, encoding: String.Encoding.utf8)\n         \
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.Init()\n    md5.Update(text.data(using: .utf8)!)\n   \
    \ var md5String: String = String()\n    for _ in 0..<md5.Size {\n        md5String\
    \ += String(format: \"%02x\", md5.Sum(nil))\n    }\n    return md5String\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmhpnlexh.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n/tmp/tmpmhpnlexh.swift:12:21: error: value\
    \ of type 'String' has no member 'data'\n    md5.Update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpmhpnlexh.swift:12:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.Update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013631
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpakyp8i3w.swift:10:14: error: cannot find type 'MD5' in scope\n\
    \    var md5: MD5\n             ^~~\n"
  stdout: ''
  timestamp: 1660013631
