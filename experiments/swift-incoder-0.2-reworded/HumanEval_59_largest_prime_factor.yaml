name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
  \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    var largest = 1\n    var largestPrimeFactor = 1\n    for i := 2;\
    \ i <= n / 2; i += 1 {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            largest = i\n        }\n    }\n    return largestPrimeFactor",
  "    if n < 2 {\n        return 0\n    }\n\n    var max_factor: Int = 0\n    var\
    \ max_factor_index: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\n    for\
    \ i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            for j = i;\
    \ j <= n / i; j += 1 {\n                if n % j == 0 {\n                    break\n\
    \                }\n            }\n            if j > max_factor {\n         \
    \       max_factor = j\n                max_factor_index = i\n            }\n\
    \        }\n    }\n\n    return max_factor", "    if n < 2 {\n        return n\n\
    \    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                return factor\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return n", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = 2 // start at 2, since 2 is the smallest factor\
    \ of n\n    var maxFactorIsPrime = true // start at true, since 2 is the smallest\
    \ factor of n\n    for factor in 2...n {\n        if n % factor == 0 {\n     \
    \       if !maxFactorIsPrime {\n                maxFactor = factor\n         \
    \       maxFactorIsPrime = true\n            } else {\n                // factor\
    \ was already found as factor of n\n                // and was not prime\n   \
    \             maxFactorIsPrime = false\n            }\n        }\n    }\n    return\
    \ maxFactor", "    if n < 2 {\n        return n\n    }\n    var maxFactor = 2\
    \ // start at 2 since 2 > sqrt(n) and will never be a factor\n    for factor in\
    \ 2..Int(sqrt(Double(n))) { // loop from 2 to sqrt(n)\n        if n % factor ==\
    \ 0 {\n            maxFactor = factor\n            break\n        }\n    }\n \
    \   return maxFactor", "    let limit = sqrt(Double(n))\n    var factor = 2\n\
    \    var prime = 1\n    while factor <= limit {\n        if n % factor == 0 {\n\
    \            prime = factor\n            break\n        }\n        factor += 1\n\
    \    }\n    return prime", "    if n < 2 {\n        return n\n    }\n    if n\
    \ == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n\
    \    if n % 2 == 0 {\n        return largest_prime_factor(n: n / 2)\n    }\n \
    \   var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    var i: Int\n\
    \    for i = 5; i <= sqrt(n); i += 2 {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var factor: Int = 0\n\n\
    \    for i = 2; i <= n / 2; i += 1 {\n        factor = i\n        for j = i; j\
    \ < n; j += 1 {\n            if n % j == 0 {\n                factor = 0\n   \
    \             break\n            }\n            factor += 1\n        }\n     \
    \   if factor > max_factor {\n            max_factor = factor\n            max_factor_index\
    \ = i\n        }\n    }\n\n    return max_factor_index", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }", "    let mut i = 2\n  \
    \  let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n        \
    \    largest = i\n        }\n        i += 2\n    }\n    return largest", "   \
    \ if n < 2 {\n        return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactor = factor\n            maxFactorFound\
    \ = true\n        }\n    }\n    return maxFactor", "    let limit = Int(sqrt(Double(n)))\n\
    \    var factor: Int = 0\n    for _ in 0..<limit {\n        if n % 2 == 0 {\n\
    \            factor = 2\n            break\n        }\n        if n % 3 == 0 {\n\
    \            factor = 3\n            break\n        }\n        n /= 2\n    }\n\
    \    return factor", "    let maxFactor = Int(sqrt(Double(n)))\n    var factor\
    \ = 1\n    for factor in 2..<maxFactor {\n        if n % factor == 0 {\n     \
    \       break\n        }\n    }\n    return factor", "    if n < 2 {\n       \
    \ return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int\
    \ = 0\n\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor", "    if n <\
    \ 2 {\n        return n\n    }\n\n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor", "    if n <\
    \ 2 {\n        return 0\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound\
    \ = false\n    var factor = 2\n    for factor <= n {\n        if n % factor ==\
    \ 0 {\n            if maxFactorFound {\n                return factor\n      \
    \      }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n        factor++\n    }\n    return maxFactor", "    if n < 2 {\n\
    \        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var maxFactorFoundInt = Int()\n    for factor in 2...n {\n      \
    \  if n % factor == 0 {\n            if maxFactorFoundInt == 0 {\n           \
    \     maxFactorFoundInt = factor\n                maxFactorFound = true\n    \
    \        } else {\n                if maxFactorFoundInt != factor {\n        \
    \            maxFactorFound = false\n                }\n            }\n      \
    \  }\n    }\n    if maxFactorFound {\n        return maxFactorFoundInt\n    }\
    \ else {\n        return n\n    }", "    var largest = 1\n    var prime = 1\n\
    \    for number in 2...n {\n        if number % prime == 0 {\n            largest\
    \ = number\n            prime = 1\n        } else {\n            prime *= number\n\
    \        }\n    }\n    return largest", "    if n < 2 {\n        return 0\n  \
    \  }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var factor\
    \ = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n        factor++\n\
    \    }\n    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var\
    \ largest = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if largest < i {\n                largest\
    \ = i\n            }\n            if largestPrimeFactor < i {\n              \
    \  largestPrimeFactor = i\n            }\n        }\n    }\n    return largestPrimeFactor",
  "    if n < 2 {\n        return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound:\
    \ Bool = false\n    var i: Int = 0\n    var j: Int = 0\n\n    for i = 2; i <=\
    \ n / 2; i += 1 {\n        if n % i == 0 {\n            if maxFactorFound {\n\
    \                maxFactorFound = false\n            } else {\n              \
    \  maxFactor = i\n                maxFactorFound = true\n            }\n     \
    \   }\n    }\n\n    if maxFactorFound {\n        return maxFactor\n    } else\
    \ {\n        return n\n    }", "    if n < 2 {\n        return n\n    }\n    var\
    \ max_factor: Int = 0\n    var max_factor_index: Int = 0\n    var max_factor_value:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor_value < i {\n                max_factor_value = i\n         \
    \       max_factor_index = i\n            }\n            if max_factor_value ==\
    \ i {\n                max_factor_index += 1\n            }\n        }\n    }\n\
    \    return max_factor_value", "    let factors = factors(n)\n    return factors.count\
    \ > 0 ? factors.max : 1", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = 2 // largest prime factor of n\n    var maxFactorFound = true // whether maxFactor\
    \ is prime\n    var isPrime = true\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            isPrime = false\n            break\n        }\n  \
    \  }\n    if isPrime {\n        return n\n    }\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if maxFactorFound {\n                maxFactor\
    \ = i\n            } else {\n                maxFactorFound = true\n         \
    \   }\n        }\n    }\n    return maxFactor", "    var factor: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var w: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0",
  "    if n < 2 {\n        return n\n    }\n    if n == 2 {\n        return 2\n  \
    \  }\n    if n == 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return\
    \ largest_prime_factor(n: n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n:\
    \ n / 3)\n    }\n    var max_factor: Int\n    var max_factor_index: Int\n    for\
    \ max_factor_index in 2...n {\n        if n % max_factor_index == 0 {\n      \
    \      continue\n        }\n        if max_factor_index * max_factor_index > n\
    \ {\n            break\n        }\n        max_factor = max_factor_index\n   \
    \ }\n    return max_factor", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound == false {\n                maxFactor = factor\n       \
    \         maxFactorFound = true\n            } else {\n                if maxFactor\
    \ < factor {\n                    maxFactor = factor\n                }\n    \
    \        }\n        }\n    }\n    return maxFactor", "    var largest = 1\n  \
    \  var factor = 2\n    var i = 1\n    while i <= n {\n        if n % i == 0 {\n\
    \            largest = factor\n            factor = 1\n        } else {\n    \
    \        factor++\n        }\n        i += 1\n    }\n    return largest", "  \
    \  let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    var maxFactor = Int()\n    var maxFactorFound = false\n   \
    \ for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                break\n            } else {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n", "    var largest = 1\n    var factor = 2\n    while n >\
    \ 1 {\n        if n % factor == 0 {\n            largest = factor\n        }\n\
    \        n /= factor\n        factor += 1\n    }\n    return largest", "    var\
    \ factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var t: Int = 0", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0\
    \ {\n            if max_factor < i {\n                max_factor = i\n       \
    \         max_factor_index = i\n            }\n        }\n    }\n    return max_factor",
  "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            }\n            maxFactorFound = true\n    \
    \        maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n     \
    \   return maxFactor\n    }\n    return n", "    var largestPrimeFactor = Int(1)\n\
    \    var largestPrimeFactorIsPrime = true\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if largestPrimeFactorIsPrime {\n         \
    \       largestPrimeFactor = factor\n            }\n            else {\n     \
    \           largestPrimeFactorIsPrime = false\n            }\n        }\n    }\n\
    \    return largestPrimeFactor", "    if n < 2 {\n        return n\n    }\n  \
    \  var largest = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            largest = i\n            largestPrimeFactor\
    \ = i\n        }\n    }\n    return largestPrimeFactor", "    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor * factor > n {\n\
    \                largestPrimeFactor = factor\n                largestPrimeFactorIsPrime\
    \ = false\n            } else {\n                if factor > largestPrimeFactor\
    \ {\n                    largestPrimeFactor = factor\n                    largestPrimeFactorIsPrime\
    \ = true\n                }\n            }\n        }\n    }\n    if largestPrimeFactorIsPrime\
    \ {\n        return largestPrimeFactor\n    } else {\n        return n\n    }",
  "    var largest = 1\n    var factor = 2\n    for _ in 0..<n {\n        if n % factor\
    \ == 0 {\n            largest = factor\n        }\n        factor += 1\n    }\n\
    \    return largest", "    if n < 2 {\n        return n\n    }\n    var largest\
    \ = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n\
    \        if n % i == 0 {\n            largestPrimeFactor = i\n            if largest\
    \ < largestPrimeFactor {\n                largest = largestPrimeFactor\n     \
    \       }\n        }\n    }\n    return largest", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            } else {\n                maxFactorFound =\
    \ true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    } else {\n        return\
    \ n\n    }", "    var largest = 1\n    var divisor = 2\n    while divisor <= n\
    \ {\n        if n % divisor == 0 {\n            largest = divisor\n        }\n\
    \        divisor += 1\n    }\n    return largest", "    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n: n\
    \ / 3)\n    }\n    var max: Int = 0\n    var i: Int = 0\n    for i = 2; i <= Int(sqrt(Double(n)));\
    \ i++ {\n        if n % i == 0 {\n            if max < i {\n                max\
    \ = i\n            }\n        }\n    }\n    return max", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n     \
    \   return n\n    }\n    var maxFactor = 2 // largest prime factor of n\n    var\
    \ maxFactorIsPrime = true // whether maxFactor is prime\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if !maxFactorIsPrime {\n      \
    \          maxFactor = factor\n                maxFactorIsPrime = true\n     \
    \       } else {\n                if factor > maxFactor {\n                  \
    \  maxFactor = factor\n                }\n            }\n        }\n    }\n  \
    \  return maxFactor", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }", "    let mut i = 2\n    let mut largest = i\n    while\
    \ i <= n {\n        if n % i == 0 {\n            largest = i\n        }\n    \
    \    i += 2\n    }\n    return largest", "    let mut largest_prime_factor = n;\n\
    \    let mut i = 2;\n    while i * i <= largest_prime_factor {\n        if n %\
    \ i == 0 {\n            largest_prime_factor = i;\n        }\n        i += 1;\n\
    \    }\n    return largest_prime_factor;", "    let factors = prime_factors(n)\n\
    \    let largest = factors.max()\n    return largest", "    if n < 2 {\n     \
    \   return 0\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n   \
    \         if max_factor < i {\n                max_factor = i\n              \
    \  max_factor_index = i\n            }\n        }\n    }\n    return max_factor",
  "    let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    if n < 2 {\n        return n\n    }\n    var maxFactor = 2\
    \ // start at 2 since 2 is the largest factor\n    var maxFactorIndex = 1 // start\
    \ at 1 since 1 is the largest factor\n    var factorIndex = 1\n    for factorIndex\
    \ < n {\n        if n % factorIndex == 0 {\n            if factorIndex > maxFactorIndex\
    \ {\n                maxFactorIndex = factorIndex\n                maxFactor =\
    \ factorIndex\n            }\n        }\n        factorIndex += 1\n    }\n   \
    \ return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    let mut i = 2\n    let\
    \ mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i\n        }\n        i += 2\n    }\n    return largest", "    let max: Int\
    \ = Int(sqrt(Double(n)))\n    var factor: Int = 0\n    var i: Int = 0\n    while\
    \ i < max {\n        if n % i == 0 {\n            factor = i\n            i +=\
    \ 1\n        }\n        i += 1\n    }\n    return factor", "    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var largest\
    \ = 1\n    var largestPrimeFactor = 1\n    for factor in 2...n {\n        if n\
    \ % factor == 0 {\n            if largest < factor {\n                largest\
    \ = factor\n                largestPrimeFactor = factor\n            }\n     \
    \   } else {\n            if largest == factor {\n                largestPrimeFactor\
    \ = factor\n            }\n        }\n    }\n    return largestPrimeFactor", " \
    \   var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            } else {\n                maxFactorFound =\
    \ true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    } else {\n        return\
    \ 0\n    }", "    var largest = 1\n    var largestPrimeFactor = 1\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if largest == 1 {\n \
    \               largest = i\n                largestPrimeFactor = i\n        \
    \    } else {\n                if largestPrimeFactor % i == 0 {\n            \
    \        largestPrimeFactor = i\n                } else {\n                  \
    \  largest = i\n                    largestPrimeFactor = i\n                }\n\
    \            }\n        }\n    }\n    return largest", "    let mut i = 2\n  \
    \  let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n        \
    \    largest = i\n        }\n        i += 2\n    }\n    return largest", "   \
    \ var maxFactor = Int()\n    var maxFactorFound = false\n    var factor = 2\n\
    \    while !maxFactorFound {\n        if n % factor == 0 {\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n        factor += 1\n   \
    \ }\n    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var\
    \ maxFactor: Int = 0\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if !maxFactorFound {\n        \
    \        maxFactor = factor\n                maxFactorFound = true\n         \
    \   } else {\n                if maxFactor < factor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    if n < 2 {\n        return n\n    }\n    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return factor\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    if n < 2 {\n        return n\n    }\n    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return factor\n\
    \            }\n            maxFactor = factor\n            maxFactorFound = true\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    var largest = 1\n    for factor in 2...n {\n        if n\
    \ % factor == 0 {\n            largest = factor\n            break\n        }\n\
    \    }\n    return largest", "    let maxPrimeFactor = primeFactors(n)\n    return\
    \ maxPrimeFactor.count", "    if n < 2 {\n        return n\n    }\n    var maxFactor:\
    \ Int = 0\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var divisor = 2\n    while !maxFactorFound {\n        if n % divisor == 0\
    \ {\n            maxFactorFound = true\n            maxFactor = divisor\n    \
    \    }\n        divisor++\n    }\n    return maxFactor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i += 1\
    \ {\n        if n % i == 0 {\n            if max_factor < i {\n              \
    \  max_factor = i\n                max_factor_index = i\n            }\n     \
    \   }\n    }\n    return max_factor", "    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    for _ in 0..<limit {\n        if n % factor == 0 {\n\
    \            factor++\n        } else {\n            break\n        }\n    }\n\
    \    return factor", "    let mut largest_prime_factor = n.pow(2)\n    while largest_prime_factor\
    \ != 1 {\n        if n % largest_prime_factor == 0 {\n            largest_prime_factor\
    \ = largest_prime_factor.pow(2)\n        } else {\n            largest_prime_factor\
    \ = largest_prime_factor.pow(3)\n        }\n    }\n    return largest_prime_factor",
  "    if n < 2 {\n        return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n  \
    \  }\n    if n == 3 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return\
    \ largest_prime_factor(n: n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n:\
    \ n / 3)\n    }\n    var max_factor: Int\n    var max_factor_count: Int\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if max_factor_count\
    \ == 0 {\n                max_factor = factor\n                max_factor_count\
    \ = 1\n            } else {\n                max_factor_count = max_factor_count\
    \ + 1\n                if max_factor_count == 2 {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return max_factor", " \
    \   let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i : Int in 1...n {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  if n < 2 {\n        return n\n    }\n    var maxFactor = Int(1)\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if !maxFactorFound {\n                maxFactor = factor\n               \
    \ maxFactorFound = true\n            } else {\n                if factor > maxFactor\
    \ {\n                    maxFactor = factor\n                }\n            }\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var factor\
    \ = 2\n\n    while !maxFactorFound {\n        if n % factor == 0 {\n         \
    \   maxFactorFound = true\n            maxFactor = factor\n        }\n\n     \
    \   factor++\n    }\n\n    return maxFactor", "    var maxFactor = Int()\n   \
    \ var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor", "    var largest\
    \ = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n/2; i += 1 {\n  \
    \      if n % i == 0 {\n            largest = i\n            largestPrimeFactor\
    \ = i\n        }\n    }\n    return largestPrimeFactor", "    if n < 2 {\n   \
    \     return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n\
    \            maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n    return maxFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    let maxPrime =\
    \ Int(sqrt(Double(n)))\n    var factor: Int = 0\n    for prime in 2...maxPrime\
    \ {\n        if n % prime == 0 {\n            factor++\n            if factor\
    \ > maxPrime {\n                factor = 1\n            }\n        }\n    }\n\
    \    return factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if !maxFactorFound {\n                maxFactor\
    \ = factor\n                maxFactorFound = true\n            } else {\n    \
    \            if factor > maxFactor {\n                    maxFactor = factor\n\
    \                }\n            }\n        }\n    }\n    return maxFactor", " \
    \   if n < 2 {\n        return n\n    }\n\n    var maxFactor = Int()\n    var\
    \ maxFactorFound = false\n    var i = 2\n    var isPrime = true\n\n    while i\
    \ < n && !maxFactorFound {\n        if n % i == 0 {\n            isPrime = false\n\
    \        }\n\n        if isPrime {\n            if maxFactorFound == false {\n\
    \                maxFactorFound = true\n                maxFactor = i\n      \
    \      }\n        }\n\n        i += 1\n    }\n\n    return maxFactor", "    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    var factor = 2\n    while\
    \ !maxFactorFound {\n        if n % factor == 0 {\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n        factor++\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    var i: Int = 0\n    for i =\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    let mut i = 2\n    let mut largest\
    \ = i\n    while i <= n {\n        if n % i == 0 {\n            largest = i\n\
    \        }\n        i += 2\n    }\n    return largest", "    if n < 2 {\n    \
    \    return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3\
    \ {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n / 3)\n\
    \    }\n    var max: Int = 2\n    var i: Int = 0\n    while i < n {\n        if\
    \ n % max == 0 {\n            max = max * 3 + 1\n        } else {\n          \
    \  max = max * 3\n        }\n        i += 1\n    }\n    return max", "    if n\
    \ < 2 {\n        return 0\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n  \
    \  if maxFactorFound {\n        return maxFactor\n    }\n    return 0", "    var\
    \ factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int\
    \ = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var\
    \ b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n   \
    \ var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n\
    \    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r:\
    \ Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var\
    \ v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n   \
    \ var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n\
    \    var d: Int = 0\n", "    if n < 2 {\n        return n\n    }\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n        if n % i == 0 {\n            if max_factor < i {\n            \
    \    max_factor = i\n                max_factor_index = i\n            }\n   \
    \     }\n    }\n    return max_factor", "    var largest = 1\n    for factor in\
    \ 2...n {\n        if n % factor == 0 {\n            largest = factor\n      \
    \      break\n        }\n    }\n    return largest", "    if n < 2 {\n       \
    \ return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactor = factor\n                maxFactorFound = true\n            }\
    \ else {\n                if factor > maxFactor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound == false {\n\
    \                maxFactorFound = true\n                maxFactor = factor\n \
    \           } else {\n                if maxFactor < factor {\n              \
    \      maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor", "    var largest = 1\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if largest < factor {\n   \
    \             largest = factor\n            }\n        }\n    }\n    return largest",
  "    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i := 2;\
    \ i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if max_factor < i\
    \ {\n                max_factor = i\n                max_factor_index = i\n  \
    \          }\n        }\n    }\n    return max_factor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    if maxFactorFound {\n       \
    \ return maxFactor\n    } else {\n        return 0\n    }", "    let factors =\
    \ prime_factors(n)\n    let largest = factors.reduce(max) { $0 > $1 ? $1 : $0\
    \ }\n    return largest", "    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            if largest < largestPrimeFactor {\n                largest\
    \ = largestPrimeFactor\n            }\n        }\n    }\n    return largest",
  "    if n < 2 {\n        return n\n    }\n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                break\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \n    if maxFactorFound {\n        return maxFactor\n    }\n\n    return n", " \
    \   var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i : Int\
    \ in 1...n {\n        if n % i == 0 {\n            if max_factor < i {\n     \
    \           max_factor = i\n                max_factor_index = i\n           \
    \ }\n        }\n    }\n    return max_factor", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    let maxFactor = sqrt(Double(n))\n\
    \    var factor = 2\n    var isPrime = true\n    while factor <= maxFactor {\n\
    \        if n % factor == 0 {\n            isPrime = false\n            break\n\
    \        }\n        factor += 1\n    }\n    if isPrime {\n        return factor\n\
    \    }\n    return 1", "    if n < 2 {\n        return n\n    }\n\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \n    return max_factor", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor", "    if n < 2 {\n       \
    \ return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor", " \
    \   var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i : Int\
    \ in 2..<n {\n        if n % i == 0 {\n            if max_factor < i {\n     \
    \           max_factor = i\n                max_factor_index = i\n           \
    \ }\n        }\n    }\n    return max_factor", "    if n < 2 {\n        return\
    \ n\n    }\n\n    // Use Sieve of Eratosthenes for finding prime factors\n   \
    \ // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    var primes = make([]Int,\
    \ n)\n    var primeFactors = make([]Int, n)\n    var primeFactorsCount = make([]Int,\
    \ n)\n    var isPrime = make([]Bool, n)\n\n    // Initialize all primes to 2\n\
    \    for i := 0; i < n; i++ {\n        primes[i] = 2\n        primeFactors[i]\
    \ = 1\n        primeFactorsCount[i] = 0\n        isPrime[i] = true\n    }\n\n\
    \    // Sieve of Eratosthenes\n    for i := 2; i < n; i++ {\n        if isPrime[i]\
    \ {\n            for j := i * i; j < n; j += i {\n                primes[j] =\
    \ false\n            }\n        }\n    }\n\n    // Find largest prime factor\n\
    \    for i := 0; i < n; i++ {\n        if isPrime[i] {\n            if primeFactorsCount[i]\
    \ > 0 {\n                primeFactors[i] = primeFactorsCount[i]\n            }\n\
    \            primeFactorsCount[i] = 0\n        }\n    }\n\n    return primeFactors[len(primeFactors)-1]",
  "    let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    var maxFactor = Int()\n    var maxFactorFound = false\n \
    \   for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            } else {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = 2 // start at 2 since 2 is the largest factor of 2\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            maxFactor = factor\n        }\n\
    \    }\n    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    var factor = 2\n    for\
    \ factor <= n {\n        if n % factor == 0 {\n            if maxFactorFound ==\
    \ false {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            } else {\n                if maxFactor < factor {\n    \
    \                maxFactor = factor\n                }\n            }\n      \
    \  }\n        factor++\n    }\n    if maxFactorFound == false {\n        maxFactor\
    \ = n\n    }\n    return maxFactor", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            if\
    \ largest < factor {\n                largest = factor\n                largestPrimeFactor\
    \ = factor\n            }\n        } else {\n            if largest == 1 {\n \
    \               largest = factor\n                largestPrimeFactor = factor\n\
    \            }\n        }\n    }\n    return largestPrimeFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor++\n    }\n\n    return maxFactor",
  "    var largest = 1\n    var largestPrimeFactor = 1\n    for factor in 2..<n {\n\
    \        if n % factor == 0 {\n            if largest < factor {\n           \
    \     largest = factor\n                largestPrimeFactor = factor\n        \
    \    }\n        } else {\n            if largest == 1 {\n                largest\
    \ = factor\n                largestPrimeFactor = factor\n            }\n     \
    \   }\n    }\n    return largestPrimeFactor", "    let mut i = 2\n    let mut\
    \ largest = 1\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i\n        }\n        i += 2\n    }\n    return largest", "    let factors\
    \ = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }", " \
    \   let maxPrimeFactor = Int(sqrt(Double(n)))\n    var primeFactors = [Int]()\n\
    \    var isPrime = [Bool]()\n    var primeFactor = 0\n    var isPrimeIndex = 0\n\
    \    var isPrimeIndex2 = 0\n    var isPrimeIndex3 = 0\n    var isPrimeIndex4 =\
    \ 0\n    var isPrimeIndex5 = 0\n    var isPrimeIndex6 = 0\n    var isPrimeIndex7\
    \ = 0\n    var isPrimeIndex8 = 0\n    var isPrimeIndex9 = 0\n    var isPrimeIndex10\
    \ = 0\n    var isPrimeIndex11 = 0\n    var isPrimeIndex12 = 0\n    var isPrimeIndex13\
    \ = 0\n    var isPrimeIndex14 = 0\n    var isPrimeIndex15 = 0\n    var isPrimeIndex16\
    \ = 0\n    var isPrimeIndex17 = 0\n    var isPrimeIndex18 = 0\n    var isPrimeIndex19\
    \ = 0\n    var isPrimeIndex20 = 0\n    var isPrimeIndex21 = 0\n    var isPrimeIndex22\
    \ = 0\n    var isPrimeIndex23 = 0\n    var isPrimeIndex24 = 0\n    var isPrimeIndex25\
    \ = 0\n    var isPrimeIndex26 = 0\n    var isPrimeIndex27 = 0\n    var isPrimeIndex28\
    \ = 0\n    var isPrimeIndex29 = 0\n    var isPrimeIndex30 = 0\n    var isPrimeIndex31\
    \ = 0\n    var isPrimeIndex32 = 0\n    var isPrimeIndex33 = 0\n    var isPrimeIndex34\
    \ = 0\n    var isPrimeIndex35 = 0\n    var isPrimeIndex36 = 0\n    var isPrimeIndex37\
    \ = 0\n    var isPrimeIndex38 = 0\n    var isPrimeIndex39 = 0\n    var isPrimeIndex40\
    \ = 0\n    var isPrimeIndex41 = 0\n    var isPrimeIndex42 = 0\n    var isPrimeIndex43\
    \ = 0\n    var isPrimeIndex44 = 0\n    var isPrimeIndex45 = 0\n    var isPrimeIndex46\
    \ = 0\n    var isPrimeIndex47 = 0\n    var isPrimeIndex48 = 0\n    var isPrimeIndex49\
    \ = 0\n    var isPrimeIndex50 = 0\n    var isPrimeIndex51 = 0\n    var isPrimeIndex52\
    \ = 0\n    var isPrimeIndex53 = 0\n    var isPrimeIndex54 = 0\n    var isPrimeIndex55\
    \ = 0\n    var isPrimeIndex56 = 0\n    var isPrimeIndex57 = 0\n    var isPrimeIndex58\
    \ = 0\n    var isPrimeIndex59 = 0\n    var isPrimeIndex60 = 0", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n", "    let mut i = 2\n    let mut largest = 1\n    while\
    \ i <= n {\n        if n % i == 0 {\n            largest = i\n        }\n    \
    \    i += 2\n    }\n    largest", "    if n < 2 {\n        return n\n    }\n\n\
    \    var maxFactor = Int()\n    var maxFactorFound = false\n    var factor = 2\n\
    \    var factorFound = false\n\n    for factor < n {\n        if n % factor ==\
    \ 0 {\n            factorFound = true\n        } else {\n            if !maxFactorFound\
    \ {\n                maxFactorFound = true\n                maxFactor = factor\n\
    \            }\n        }\n        factor++\n    }\n\n    if !maxFactorFound {\n\
    \        return n\n    }\n\n    if maxFactor == n {\n        return n\n    }\n\
    \n    if maxFactor == 2 {\n        return 2\n    }\n\n    return maxFactor", " \
    \   let max_prime = sqrt(Double(n))\n    var max_factor = 1\n    for i in 2..<max_prime\
    \ {\n        if n % i == 0 {\n            max_factor = i\n            break\n\
    \        }\n    }\n    return max_factor", "    let maxPrime = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    for prime in 2..<maxPrime {\n        if n % prime ==\
    \ 0 {\n            factor *= prime\n            n /= prime\n        }\n    }\n\
    \    return factor", "    let mut i = 2\n    let mut largest = 1\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            largest = i\n        }\n  \
    \      i += 2\n    }\n    return largest", "    var maxFactor = Int()\n    var\
    \ maxFactorFound = false\n    for factor in 2...n {\n        if n % factor ==\
    \ 0 {\n            if maxFactorFound {\n                return factor\n      \
    \      }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return 0", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n        return n\n    }\n    var largest\
    \ = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n\
    \        if n % i == 0 {\n            largest = i\n            largestPrimeFactor\
    \ = i\n        }\n    }\n    return largestPrimeFactor", "    var maxFactor =\
    \ Int(1)\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return Int(factor)\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return Int(maxFactor)\n    }\n    return Int(1)", "    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return factor\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = 2 // first prime factor\n    var maxFactorIndex = 1 // index of maxFactor\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if maxFactor\
    \ < i {\n                maxFactor = i\n                maxFactorIndex = i\n \
    \           }\n        }\n    }\n    return maxFactor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n    var factorFound = false\n\
    \    for factor <= n {\n        if n % factor == 0 {\n            factorFound\
    \ = true\n            if factor > maxFactor {\n                maxFactor = factor\n\
    \            }\n        }\n        factor++\n    }\n    if !factorFound {\n  \
    \      return maxFactor\n    }\n    if maxFactor == n {\n        return n\n  \
    \  }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return largest_prime_factor(maxFactor)",
  "    var largest = 1\n    var factor = 2\n    while n > 1 {\n        if n % factor\
    \ == 0 {\n            largest = factor\n        }\n        n /= factor\n     \
    \   factor += 1\n    }\n    return largest", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i : Int in 2...n {\n        if n % i == 0 {\n            if largest\
    \ < i {\n                largest = i\n                largestPrimeFactor = 1\n\
    \            } else {\n                largestPrimeFactor++\n            }\n \
    \       }\n    }\n    return largestPrimeFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       break\n            } else {\n                maxFactorFound = true\n \
    \               maxFactor = factor\n            }\n        }\n    }\n    return\
    \ maxFactor", "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    if n < 2 {\n        return n\n    }\n    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return factor\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    var factor: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: ", "    var largest = 1\n    var factor = 2\n    while n > 1 {\n        if\
    \ n % factor == 0 {\n            largest = factor\n        }\n        factor++\n\
    \    }\n    return largest", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return 1", "  \
    \  if n < 2 {\n        return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n       \
    \     if maxFactorFound {\n                return factor\n            }\n\n  \
    \          maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \    }\n\n    return maxFactor", "    if n < 2 {\n        return n\n    }\n\n\
    \    var maxFactor = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInPrimes\
    \ = false\n    var primes = Set<Int>()\n    var primesFound = Set<Int>()\n   \
    \ var primesFoundInPrimes = Set<Int>()\n\n    for prime in 2..<n {\n        if\
    \ primes.contains(prime) {\n            primesFound.insert(prime)\n          \
    \  primesFoundInPrimes.insert(prime)\n        }\n\n        if primesFoundInPrimes.contains(prime)\
    \ {\n            if maxFactorFoundInPrimes {\n                maxFactorFoundInPrimes\
    \ = false\n            }\n            maxFactorFoundInPrimes = true\n        \
    \    maxFactorFound = true\n            maxFactor = prime\n        }\n\n     \
    \   if maxFactorFound {\n            if prime > maxFactor {\n                maxFactor\
    \ = prime\n            }\n        }\n    }\n\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n\n    return n", "    if n < 2 {\n        return n\n\
    \    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                return factor\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return n", "    if n < 2 {\n        return\
    \ n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n\
    \n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n\n    return max_factor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor", "    if n < 2 {\n       \
    \ return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index: Int\
    \ = 0\n    var max_factor_power: Int = 0\n\n    for i := 2; i <= n; i++ {\n  \
    \      if n % i == 0 {\n            var new_factor: Int = i\n            var new_factor_index:\
    \ Int = 0\n            var new_factor_power: Int = 0\n\n            for j := 0;\
    \ j < i; j++ {\n                if j == i {\n                    new_factor_index\
    \ = 0\n                    new_factor_power = 1\n                } else {\n  \
    \                  new_factor_index += 1\n                    new_factor_power\
    \ *= j\n                }\n                if new_factor_index > max_factor_index\
    \ {\n                    max_factor_index = new_factor_index\n               \
    \     max_factor = new_factor\n                    max_factor_power = new_factor_power\n\
    \                }\n            }\n        }\n    }\n\n    return max_factor",
  "    var result = 1\n    var factor = 2\n    while n > 1 {\n        if n % factor\
    \ == 0 {\n            n /= factor\n        } else {\n            result += 1\n\
    \            factor = 2\n        }\n    }\n    return result", "    let factors\
    \ = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }", " \
    \   let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    if n < 2 {\n        return n\n    }\n\n    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ == false {\n                maxFactorFound = true\n                maxFactorFoundInt\
    \ = factor\n            } else {\n                if maxFactorFoundInt > factor\
    \ {\n                    maxFactorFoundInt = factor\n                }\n     \
    \       }\n        }\n    }\n\n    if maxFactorFound == true {\n        return\
    \ maxFactorFoundInt\n    } else {\n        return n\n    }", "    var largest\
    \ = 1\n    var prime: Int = 0\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            largest = factor\n            prime = 1\n        }\n   \
    \     if largest % factor == 0 {\n            prime *= factor\n        }\n   \
    \ }\n    return prime", "    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for number in 2...n {\n        if number % 2 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 3 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 5 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 7 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 11 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 13 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 17 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 19 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 23 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 29 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 31 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 37 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 41 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 43 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 47 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 53 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 59 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 61 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 67 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 71 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 73 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 79 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 83 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 89 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 97 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 103 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 107 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 111 == 0 {\n", "    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    let max = (2..<n).reduce(max) {\n        max($0, $1)\n    }\n    return max",
  "    var maxFactor = Int(1)\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if !maxFactorFound {\n    \
    \            maxFactor = factor\n                maxFactorFound = true\n     \
    \       } else {\n                if factor > maxFactor {\n                  \
    \  maxFactor = factor\n                }\n            }\n        }\n    }\n  \
    \  return maxFactor", "    var largest = 1\n    for divisor in 2...n {\n     \
    \   if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n \
    \   return largest", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n\
    \            maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n    return maxFactor", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $1 : $0 }", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor", "    let factors\
    \ = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }", " \
    \   if n < 2 {\n        return n\n    }\n    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n       \
    \     if largest == 1 {\n                largest = i\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largestPrimeFactor == i {\n  \
    \                  largestPrimeFactor = largest\n                } else {\n  \
    \                  largestPrimeFactor = i\n                }\n            }\n\
    \        }\n    }\n    return largestPrimeFactor", "    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    var largestPrimeFactorIsPrime2\
    \ = true\n    var largestPrimeFactorIsPrime3 = true\n    var largestPrimeFactorIsPrime4\
    \ = true\n    var largestPrimeFactorIsPrime5 = true\n    var largestPrimeFactorIsPrime6\
    \ = true\n    var largestPrimeFactorIsPrime7 = true\n    var largestPrimeFactorIsPrime8\
    \ = true\n    var largestPrimeFactorIsPrime9 = true\n    var largestPrimeFactorIsPrime10\
    \ = true\n    var largestPrimeFactorIsPrime11 = true\n    var largestPrimeFactorIsPrime12\
    \ = true\n    var largestPrimeFactorIsPrime13 = true\n    var largestPrimeFactorIsPrime14\
    \ = true\n    var largestPrimeFactorIsPrime15 = true\n    var largestPrimeFactorIsPrime16\
    \ = true\n    var largestPrimeFactorIsPrime17 = true\n    var largestPrimeFactorIsPrime18\
    \ = true\n    var largestPrimeFactorIsPrime19 = true\n    var largestPrimeFactorIsPrime20\
    \ = true\n    var largestPrimeFactorIsPrime21 = true\n    var largestPrimeFactorIsPrime22\
    \ = true\n    var largestPrimeFactorIsPrime23 = true\n    var largestPrimeFactorIsPrime24\
    \ = true\n    var largestPrimeFactorIsPrime25 = true\n    var largestPrimeFactorIsPrime26\
    \ = true\n    var largestPrimeFactorIsPrime27 = true\n    var largestPrimeFactorIsPrime28\
    \ = true\n    var largestPrimeFactorIsPrime29 = true\n    var largestPrimeFactorIsPrime30\
    \ = true\n    var largestPrimeFactorIsPrime31 = true\n    var largestPrimeFactorIsPrime32\
    \ = true\n    var largestPrimeFactorIsPrime33 = true\n    var largestPrimeFactorIsPrime34\
    \ = true\n    var largestPrimeFactorIsPrime35 = true\n    var largestPrimeFactorIsPrime36\
    \ = true\n    var largestPrimeFactorIsPrime37 = true\n    var largestPrimeFactorIsPrime38\
    \ = true\n    var largestPrimeFactorIsPrime39 = true\n    var largestPrimeFactorIsPrime40\
    \ = true\n    var largestPrimeFactorIsPrime41 = true\n    var largestPrimeFactorIsPri",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            } else {\n                maxFactorFound =\
    \ true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $1 : $0 }", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            } else {\n         \
    \       if factor > maxFactor {\n                    maxFactorFound = true\n \
    \                   maxFactor = factor\n                }\n            }\n   \
    \     }\n    }\n    return maxFactor", "    let factors = prime_factors(n)\n \
    \   return factors.reduce(max) { $0 > $1 ? $0 : $1 }", "    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if !largestPrimeFactorFound {\n   \
    \             largestPrimeFactorFound = true\n                largestPrimeFactor\
    \ = factor\n            }\n            else {\n                if factor > largestPrimeFactor\
    \ {\n                    largestPrimeFactorFound = true\n                    largestPrimeFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return largestPrimeFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            } else {\n                maxFactorFound =\
    \ true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    } else {\n        return\
    \ 0\n    }", "    var largest = 1\n    var largestPrimeFactor = 1\n    for number\
    \ in 2...n {\n        if number % 2 == 0 {\n            continue\n        }\n\
    \        for prime in 2...number {\n            if number % prime == 0 {\n   \
    \             break\n            }\n        }\n        if prime > largestPrimeFactor\
    \ {\n            largestPrimeFactor = prime\n            largest = number\n  \
    \      }\n    }\n    return largest", "    let factors = prime_factors(n)\n  \
    \  return factors.reduce(max) { $0 > $1 ? $0 : $1 }", "    var max: Int = 0\n\
    \    var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i ==\
    \ 0 {\n            max = i\n            break\n        }\n    }\n    return max",
  "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if !maxFactorFound {\n                maxFactor = factor\n               \
    \ maxFactorFound = true\n            } else {\n                if maxFactor !=\
    \ factor {\n                    return maxFactor\n                }\n        \
    \    }\n        }\n    }\n    return maxFactor", "    var largest = 1\n    var\
    \ prime = 1\n    for i := 2; i <= n / prime; i++ {\n        if n % i == 0 {\n\
    \            largest = i\n            prime = 1\n        } else {\n          \
    \  prime *= i\n        }\n    }\n    return largest", "    if n < 2 {\n      \
    \  return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorFoundIndex = -1\n    var i = 2\n    for ; !maxFactorFound &&\
    \ i < n; i++ {\n        if n % i == 0 {\n            if maxFactorFoundIndex ==\
    \ -1 || maxFactorFoundIndex > i {\n                maxFactorFound = true\n   \
    \             maxFactorFoundIndex = i\n            }\n        }\n    }\n    if\
    \ maxFactorFound {\n        return maxFactorFoundIndex\n    } else {\n       \
    \ return n\n    }", "    let limit = sqrt(Double(n))\n    var factor = 2\n   \
    \ var prime: Int = 0\n    while factor < limit {\n        if n % factor == 0 {\n\
    \            prime = factor\n            break\n        }\n        factor += 1\n\
    \    }\n    return prime", "    var largestPrimeFactor: Int = 0\n    var largestPrimeFactorCount:\
    \ Int = 0\n    for number in 1...n {\n        if number % 2 == 0 {\n         \
    \   if number % largestPrimeFactor == 0 {\n                largestPrimeFactor\
    \ = number\n                largestPrimeFactorCount = 1\n            } else {\n\
    \                largestPrimeFactorCount = largestPrimeFactorCount + 1\n     \
    \           if largestPrimeFactorCount == 2 {\n                    largestPrimeFactor\
    \ = number\n                }\n            }\n        } else {\n            if\
    \ number % largestPrimeFactor == 0 {\n                largestPrimeFactor = number\n\
    \                largestPrimeFactorCount = 1\n            } else {\n         \
    \       largestPrimeFactorCount = largestPrimeFactorCount + 1\n              \
    \  if largestPrimeFactorCount == 2 {\n                    largestPrimeFactor =\
    \ number\n                }\n            }\n        }\n    }\n    return largestPrimeFactor",
  "    let primes = primes_up_to_n(n: n)\n    return primes.reduce(max) { $0 > $1\
    \ ? $0 : $1 }", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = 2 // start at 2 since 2 is the largest factor\n    var maxFactorFound = false\
    \ // start at false since 2 is the largest factor\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if maxFactorFound {\n             \
    \   // factor has been found before\n                return factor\n         \
    \   }\n            maxFactorFound = true\n            maxFactor = factor\n   \
    \     }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n   \
    \ }\n\n    var maxFactor: Int = 0\n    var maxFactorFound = false\n    var i:\
    \ Int\n    var j: Int\n\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i\
    \ == 0 {\n            if maxFactorFound {\n                maxFactorFound = false\n\
    \            } else {\n                maxFactor = i\n                maxFactorFound\
    \ = true\n            }\n        }\n    }\n\n    if maxFactorFound {\n       \
    \ return maxFactor\n    } else {\n        return n\n    }", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor"]
stop_tokens:
- "\n}"
