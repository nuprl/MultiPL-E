name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n/// Return nil if there is\
  \ no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>>\
  \ next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n\
  /// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int])\
  \ -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    if lst.count == 0 {\n        return nil\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return\
    \ lst[1]\n    }\n    return nil", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n  \
    \      return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n   \
    \     return lst[1]\n    }\n    if lst[0] == lst[1] {\n        return nil\n  \
    \  }\n    return lst[1]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n    for element\
    \ in lst {\n        if element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var smallest_index = -1\n    for index in 1..lst.count\
    \ {\n        if smallest<lst[index] {\n            smallest = lst[index]\n   \
    \         smallest_index = index\n        }\n    }\n    return smallest_index\
    \ == lst.count-1 ? nil : smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if smallest*i < secondSmallest\
    \ {\n            secondSmallest = smallest*i\n            smallest = i\n     \
    \   } else {\n            secondSmallest = smallest*i\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n  \
    \          smallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in lst.indices {\n        if smallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    if lst.count\
    \ == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for i in 1..lst.count {\n        if smallest > lst[i] {\n      \
    \      secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ {\n            if secondSmallest > lst[i] {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst\
    \ {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n \
    \   }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i == smallest {\n            if secondSmallest < i {\n           \
    \     secondSmallest = i\n            }\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            smallest\
    \ = element\n        }\n    }\n    return smallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for el\
    \ in lst {\n        if el < smallest {\n            smallest = el\n        }\n\
    \    }\n    return smallest", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest.isLesserThan(lst[index])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n  \
    \      return lst[1]\n    }\n    if lst.count > 2 {\n        if lst[1] < lst[2]\
    \ {\n            return lst[1]\n        }\n        return lst[2]\n    }\n    return\
    \ nil", "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let\
    \ smallest = lst[0]\n    let index = lst.index(of: smallest)\n    if index ==\
    \ lst.count - 1 {\n        return nil\n    }\n    return lst[index + 1]", "  \
    \  var smallest = lst[0]\n    var smallestIndex = 0\n    for index in 1..<lst.count\
    \ {\n        if smallestIndex == lst.count - 1 {\n            return nil\n   \
    \     }\n        if lst[index] < smallest {\n            smallest = lst[index]\n\
    \            smallestIndex = index\n        }\n    }\n    return smallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n  \
    \          smallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ >= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for el\
    \ in lst {\n        if el < smallest {\n            smallest = el\n        }\n\
    \    }\n    return smallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var smallestIndex = 0\n    for index\
    \ in 1..lst.count {\n        if smallestIndex == 0 {\n            smallest = lst[index]\n\
    \            smallestIndex = index\n            continue\n        }\n        if\
    \ lst[index] < smallest {\n            smallest = lst[index]\n            smallestIndex\
    \ = index\n        }\n    }\n    return smallest", "    var smallest: Int? = nil\n\
    \    for element in lst {\n        if smallest == nil || element < smallest {\n\
    \            smallest = element\n        }\n    }\n    return smallest", "   \
    \ guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count >\
    \ 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n   \
    \ for index in 2..lst.count {\n        if smallest > lst[index] {\n          \
    \  secondSmallest = smallest\n            smallest = lst[index]\n        } else\
    \ if smallest == lst[index] {\n            if secondSmallest > lst[index] {\n\
    \                secondSmallest = lst[index]\n            }\n        }\n    }\n\
    \    return secondSmallest", "    if lst.count == 0 {\n        return nil\n  \
    \  }\n    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    for value in lst {\n        if value <\
    \ smallest {\n            smallest = value\n        }\n    }\n    return smallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest {\n \
    \           secondSmallest = smallest\n            smallest = el\n        } else\
    \ if el < secondSmallest {\n            secondSmallest = el\n        }\n    }\n\
    \    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n  \
    \      return lst[1]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest: Int? = nil\n    for\
    \ element in lst {\n        if smallest == nil || element < smallest {\n     \
    \       smallest = element\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var smallestIndex = lst.startIndex\n    for index in lst.startIndex..<lst.endIndex\
    \ {\n        if smallestIndex == lst.endIndex {\n            return nil\n    \
    \    }\n        if lst[index] < smallest {\n            smallest = lst[index]\n\
    \            smallestIndex = index\n        }\n    }\n    return smallest", " \
    \   if lst.count == 0 {\n        return nil\n    }\n    if lst.count > 1 {\n \
    \       return lst[1]\n    }\n    return nil", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n    }\n\
    \    if lst[1] < lst[0] {\n        return lst[1]\n    }\n    return lst[0]", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    guard lst.count >= 2 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest.isLess(lst[index])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  for el in lst {\n        if el < smallest {\n            smallest = el\n  \
    \      }\n    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if smallest<lst[i] {\n            secondSmallest = smallest\n   \
    \         smallest = lst[i]\n        } else {\n            if secondSmallest<lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest", "    var smallest = lst[0]\n    for value in lst\
    \ {\n        if value < smallest {\n            smallest = value\n        }\n\
    \    }\n    return smallest", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n   \
    \     return lst[1]\n    }\n    if lst[0] == lst[1] {\n        return nil\n  \
    \  }\n    return lst[1]", "    var smallest: Int? = nil\n    var smallest_index:\
    \ Int = 0\n    for index in 0..<lst.count {\n        if smallest? == nil || smallest!\
    \ > lst[index] {\n            smallest = lst[index]\n            smallest_index\
    \ = index\n        }\n    }\n    return smallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count == 0 {\n        return nil\n\
    \    }\n    if lst.count > 1 {\n        return lst[1]\n    }\n    return nil",
  "    var smallest = lst[0]\n    var smallestIndex = 0\n    for index in 1..<lst.count\
    \ {\n        if lst[index] < smallest {\n            smallest = lst[index]\n \
    \           smallestIndex = index\n        }\n    }\n    return smallestIndex\
    \ == lst.count ? nil : lst[smallestIndex + 1]", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for index in 1..lst.count {\n        if lst[index] < smallest {\n       \
    \     secondSmallest = smallest\n            smallest = lst[index]\n        }\
    \ else if lst[index] < secondSmallest {\n            secondSmallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var smallestIndex = -1\n    for index in 1..<lst.count {\n        if lst[index]\
    \ < smallest {\n            smallest = lst[index]\n            smallestIndex =\
    \ index\n        }\n    }\n    return smallestIndex == lst.count ? nil : lst[smallestIndex\
    \ + 1]", "    if lst.count < 2 {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    var smallest =\
    \ lst[0]\n    var smallestIndex = lst.startIndex\n    for i in lst.startIndex..<lst.endIndex\
    \ {\n        if lst[i] < smallest {\n            smallest = lst[i]\n         \
    \   smallestIndex = i\n        }\n    }\n    return smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n        let pivot\
    \ = lst.sort()[0]\n        let leftHalf = lst.filter{$0 > pivot}\n        let\
    \ rightHalf = lst.filter{$0 < pivot}\n        return rightHalf[0]\n    }\n   \
    \ return lst[1]", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if smallest*i < lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest: Int?\
    \ = nil\n    for el in lst {\n        if smallest == nil || el < smallest {\n\
    \            smallest = el\n        }\n    }\n    return smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n       \
    \ return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n \
    \   if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]", " \
    \   if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n\
    \        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    var smallest_idx: Int? = nil\n    for idx in\
    \ 0..<lst.count {\n        if smallest == nil || smallest! > lst[idx] {\n    \
    \        smallest = lst[idx]\n            smallest_idx = idx\n        }\n    }\n\
    \    return smallest_idx", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    if lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[1]\n    }\n    return lst[0]", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n      \
    \  return lst[0]\n    }\n    guard lst.count > 2 else {\n        return lst[1]\n\
    \    }\n    guard lst.count > 3 else {\n        return lst[2]\n    }\n    guard\
    \ lst.count > 4 else {\n        return lst[3]\n    }\n    guard lst.count > 5\
    \ else {\n        return lst[4]\n    }\n    guard lst.count > 6 else {\n     \
    \   return lst[5]\n    }\n    guard lst.count > 7 else {\n        return lst[6]\n\
    \    }\n    guard lst.count > 8 else {\n        return lst[7]\n    }\n    guard\
    \ lst.count > 9 else {\n        return lst[8]\n    }\n    guard lst.count > 10\
    \ else {\n        return lst[9]\n    }\n    guard lst.count > 11 else {\n    \
    \    return lst[10]\n    }\n    guard lst.count > 12 else {\n        return lst[11]\n\
    \    }\n    guard lst.count > 13 else {\n        return lst[12]\n    }\n    guard\
    \ lst.count > 14 else {\n        return lst[13]\n    }\n    guard lst.count >\
    \ 15 else {\n        return lst[14]\n    }\n    guard lst.count > 16 else {\n\
    \        return lst[15]\n    }\n    guard lst.count > 17 else {\n        return\
    \ lst[16]\n    }\n    guard lst.count > 18 else {\n        return lst[17]\n  \
    \  }\n    guard lst.count > 19 else {\n        return lst[18]\n    }\n    guard\
    \ lst.count > 20 else {\n        return lst[19]\n    }\n    guard lst.count >\
    \ 21 else {\n        return lst[20]\n    }\n    guard lst.count > 22 else {\n\
    \        return lst[21]\n    }\n    guard lst.count > 23 else {\n        return\
    \ lst[22]\n    }\n    guard lst.count > 24 else {\n        return lst[23]\n  \
    \  }\n    guard lst.count > 25 else {\n        return lst[24]\n    }\n    guard\
    \ lst.count > 26 else {\n        return lst[25]\n    }\n    guard lst.count >\
    \ 27 else {\n        return lst[26]\n    }\n    guard lst.count > 28 else {\n\
    \        return lst[27]\n    }\n    guard lst.count > 29 else {\n        return\
    \ lst", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el\
    \ in lst {\n        if el < smallest {\n            secondSmallest = smallest\n\
    \            smallest = el\n        } else if el < secondSmallest {\n        \
    \    secondSmallest = el\n        }\n    }\n    return secondSmallest", "    guard\
    \ lst.count > 1 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            smallest = el\n\
    \        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    guard lst.count > 2 else {\n        return nil\n    }\n    let min1\
    \ = lst[0]\n    let min2 = lst[1]\n    if min1 < min2 {\n        return min1\n\
    \    }\n    return min2", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n     \
    \   if lst[i] < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n          \
    \  secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", "  \
    \  if lst.count == 0 {\n        return nil\n    }\n    if lst.count > 1 {\n  \
    \      return lst[1]\n    }\n    return nil", "    if lst.count < 2 {\n      \
    \  return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for index in lst.indices {\n        if smallest*secondSmallest > lst[index]\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for x in lst {\n        if x < smallest {\n            secondSmallest = smallest\n\
    \            smallest = x\n        } else if x < secondSmallest {\n          \
    \  secondSmallest = x\n        }\n    }\n    return secondSmallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLesserThan(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n \
    \           secondSmallest = smallest\n            smallest = lst[i]\n       \
    \ } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n \
    \       }\n    }\n\n    return secondSmallest", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n    }\n\
    \    if lst[0] == lst[1] {\n        return nil\n    }\n    return lst[1]", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n    \
    \    return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n        if\
    \ element < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var smallestIndex = -1\n    for index in 1..lst.count {\n      \
    \  if smallestIndex == -1 || smallestIndex > index {\n            smallestIndex\
    \ = index\n            smallest = lst[index]\n        }\n        if lst[index]\
    \ < smallest {\n            smallestIndex = index\n            smallest = lst[index]\n\
    \        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n        if\
    \ element < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n    }\n\
    \    if lst[1] < lst[0] {\n        return lst[1]\n    }\n    return lst[0]", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for value in lst {\n        if value < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = value\n   \
    \     } else if value < secondSmallest {\n            secondSmallest = value\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n    }\n\
    \    if lst[1] < lst[0] {\n        return lst[1]\n    }\n    return lst[0]", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n \
    \   guard lst.count > 2 else {\n        return nil\n    }\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n        if\
    \ element < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    if lst.count\
    \ == 0 {\n        return nil\n    }\n    var smallest = lst[0]\n    var smallestIndex\
    \ = lst.startIndex\n    for index in lst.startIndex..<lst.endIndex {\n       \
    \ if smallestIndex == lst.endIndex {\n            return nil\n        }\n    \
    \    if lst[index] < smallest {\n            smallest = lst[index]\n         \
    \   smallestIndex = index\n        }\n    }\n    return smallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    if lst.count ==\
    \ 0 {\n        return nil\n    }\n    var smallest = lst[0]\n    for x in lst\
    \ {\n        if x < smallest {\n            smallest = x\n        }\n    }\n \
    \   return smallest", "    guard lst.count > 0 else {\n        return nil\n  \
    \  }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n  \
    \          smallest = el\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for index in lst.indices {\n        if smallest*smallest+secondSmallest*secondSmallest\
    \ > index*index {\n            secondSmallest = index\n        } else {\n    \
    \        smallest = index\n        }\n    }\n    return secondSmallest", "   \
    \ guard lst.count > 1 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n        \
    \    secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count >\
    \ 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    if lst.count == 0\
    \ {\n        return nil\n    }\n    if lst.count <= 1 {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n  \
    \          smallest = el\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if smallest*i < secondSmallest {\n            secondSmallest = smallest*i\n\
    \            smallest = i\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest = lst[0]\n    for value in lst {\n        if value < smallest {\n\
    \            smallest = value\n        }\n    }\n    return smallest", "    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for value in lst {\n\
    \        if value < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = value\n        } else if value < secondSmallest {\n        \
    \    secondSmallest = value\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for value in lst\
    \ {\n        if value < smallest {\n            secondSmallest = smallest\n  \
    \          smallest = value\n        } else if value < secondSmallest {\n    \
    \        secondSmallest = value\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n  \
    \      if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n      \
    \  return nil\n    }\n    var smallest = lst[0]\n    for el in lst {\n       \
    \ if el < smallest {\n            smallest = el\n        }\n    }\n    return\
    \ smallest", "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    if lst.count == 0 {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n \
    \   for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    guard lst.count > 2 else {\n        return nil\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    if lst[1]\
    \ < lst[2] {\n        return lst[2]\n    }\n    if lst[2] < lst[0] {\n       \
    \ return lst[0]\n    }\n    return nil", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n\n    return secondSmallest", "    guard lst.count > 0 else {\n \
    \       return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n   \
    \ for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for value in lst {\n        if value < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = value\n   \
    \     } else if value < secondSmallest {\n            secondSmallest = value\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    if lst.count ==\
    \ 0 {\n        return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for i in 1..lst.count {\n        if smallest > lst[i] {\n      \
    \      secondSmallest = smallest\n            smallest = lst[i]\n        }\n \
    \   }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n \
    \   var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n        if lst[i] < secondSmallest {\n\
    \            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n   \
    \     return lst[1]\n    }\n    return lst[0]", "    var smallest = lst[0]\n \
    \   var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLesserThan(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else {\n            secondSmallest = lst[i]\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in lst.indices {\n        if smallest*smallest\
    \ > index*index {\n            secondSmallest = smallest\n            smallest\
    \ = index\n        } else {\n            if secondSmallest*secondSmallest > index*index\
    \ {\n                secondSmallest = index\n            }\n        }\n    }\n\
    \    return secondSmallest", "    var smallest: Int?\n    var smallestIndex: Int?\n\
    \    for index in 0..<lst.count {\n        if smallest == nil || smallestIndex\
    \ == nil || lst[index] < smallest! {\n            smallest = lst[index]\n    \
    \        smallestIndex = index\n        }\n    }\n    return smallest", "    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n  \
    \      if el < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\n\
    \        if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n \
    \       }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n     \
    \   return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n\
    \    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return nil", "  \
    \  guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLesserThan(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n \
    \           secondSmallest = smallest\n            smallest = lst[i]\n       \
    \ } else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n  \
    \      return lst[1]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if lst.count == 0 {\n        return nil\n   \
    \ }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[1]\n    }\n    return lst[0]", "    var smallest: Int?\
    \ = nil\n    var smallest_index: Int = 0\n    for index in 0..<lst.count {\n \
    \       if smallest? == nil || smallest! > lst[index] {\n            smallest\
    \ = lst[index]\n            smallest_index = index\n        }\n    }\n    return\
    \ smallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\n  \
    \  var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0]\
    \ == lst[1] {\n        return nil\n    }\n    return lst[1]", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var smallestIndex\
    \ = -1\n    for index in 1..<lst.count {\n        if lst[index] < smallest {\n\
    \            smallest = lst[index]\n            smallestIndex = index\n      \
    \  }\n    }\n    if smallestIndex == lst.count - 1 {\n        return nil\n   \
    \ }\n    return smallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n   \
    \ for index in 2..lst.count {\n        if smallest.isLesserThan(lst[index]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[index]\n  \
    \      }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for value in lst {\n        if value < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = value\n   \
    \     } else if value < secondSmallest {\n            secondSmallest = value\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n    }\n\
    \    if lst[0] == lst[1] {\n        return nil\n    }\n    return lst[1]", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    for x in lst {\n        if x < smallest {\n            smallest = x\n   \
    \     }\n    }\n    return smallest", "    guard lst.count > 0 else {\n      \
    \  return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n\
    \    }\n    if lst.count == 3 {\n        return lst[1]\n    }\n    if lst.count\
    \ > 3 {\n        return lst[2]\n    }\n    return nil", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    if lst.count < 2 {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    let smallest = lst[0]\n    let\
    \ secondSmallest = lst[1]\n    if smallest < secondSmallest {\n        return\
    \ secondSmallest\n    }\n    return smallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n    }\n\
    \    if lst[0] == lst[1] {\n        return nil\n    }\n    return lst[1]", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    if lst.count <=\
    \ 1 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest: Int?\n    var smallest_index:\
    \ Int = 0\n    for index in 0..<lst.count {\n        if smallest  == nil || smallest!\
    \ > lst[index] {\n            smallest = lst[index]\n            smallest_index\
    \ = index\n        }\n    }\n    return smallest", "    if lst.count < 2 {\n \
    \       return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n  \
    \  }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in lst.indices {\n        if index\
    \ < 2 {\n            continue\n        }\n        if smallest > lst[index] {\n\
    \            secondSmallest = smallest\n            smallest = lst[index]\n  \
    \      }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for\
    \ el in lst {\n        if el < smallest {\n            smallest = el\n       \
    \ }\n    }\n    return smallest", "    var smallest: Int? = nil\n    var smallestIndex:\
    \ Int = 0\n    for index in 0..<lst.count {\n        if smallestIndex == 0 {\n\
    \            smallest = lst[index]\n            smallestIndex = index\n      \
    \      continue\n        }\n        if lst[index] < smallest {\n            smallest\
    \ = lst[index]\n            smallestIndex = index\n        }\n    }\n    return\
    \ smallest", "    guard lst.count > 0 else {\n        return nil\n    }\n    guard\
    \ lst.count <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n        if\
    \ element < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count == 0 {\n        return nil\n\
    \    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int?\n    var smallest_index: Int?\n    for index in 0..<lst.count\
    \ {\n        if smallest_index == nil || smallest! > lst[index] {\n          \
    \  smallest = lst[index]\n            smallest_index = index\n        }\n    }\n\
    \    return smallest", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  if lst.count > 2 {\n        return lst[1]\n    }\n    return lst[0]"]
stop_tokens:
- "\n}"
