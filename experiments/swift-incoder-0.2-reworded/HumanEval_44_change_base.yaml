name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\n///\
  \ >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n\
  /// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x:\
  \ Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ["    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = String(x)\n\
    \    if baseIndex < 0 {\n        return result + bases[-baseIndex]\n    }\n  \
    \  return result + bases[baseIndex]", "    let bases = Array(1...base).map { String($0)\
    \ }\n    let digits = String(x.toInt())\n    let digits = digits.characters\n\
    \    let digits = digits.map { String($0) }\n    let digits = digits.map { Int($0)\
    \ }\n    let digits = digits.map { String($0) }\n    let digits = digits.map {\
    \ Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) }\n    let digits = digits.map { String($0) }\n    let digits = digits.map\
    \ { Int($0) ", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    let bases\
    \ = Array(1...base).map { String($0) }\n    var result = \"\"\n    for b in bases\
    \ {\n        let x = x % b\n        result += String(x)\n        x /= b\n    }\n\
    \    return result", "    let bases = [\n        \"0\",\n        \"1\",\n    \
    \    \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n\
    \        \"7\",\n        \"8\",\n        \"9\",\n        \"10\",\n        \"11\"\
    ,\n        \"12\",\n        \"13\",\n        \"14\",\n        \"15\",\n      \
    \  \"16\",\n        \"17\",\n        \"18\",\n        \"19\",\n        \"20\"\
    ,\n        \"21\",\n        \"22\",\n        \"23\",\n        \"24\",\n      \
    \  \"25\",\n        \"26\",\n        \"27\",\n        \"28\",\n        \"29\"\
    ,\n        \"30\",\n        \"31\"\n    ]\n    return bases[base].prefixedWith(\"\
    0\") + String(x)", "    let bases = [\"\", \"K\", \"M\", \"B\", \"T\", \"Qa\"\
    , \"Qi\", \"Qo\", \"Ra\", \"Ri\", \"Ro\", \"Ru\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let baseString = String(format: \"\
    %0*d\", baseString.count, x)\n    return baseString + String(format: \"%0*d\"\
    , baseString.count, x)", "    let bases = [\"\", \"10\", \"100\", \"1000\", \"\
    10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"\
    , \"10000000000\", \"100000000000\"]\n    let baseIndex = bases.index(base)!\n\
    \    let result = String(Int(x) / Int(bases[baseIndex]))\n    if Int(result) ==\
    \ 0 {\n        return \"\"\n    }\n    return result", "    if base < 2 {\n  \
    \      throw Errors.InvalidInputError(\n            \"base must be greater than\
    \ or equal to 2\")\n    }\n    var result = \"\"\n    var remainder = 0\n    var\
    \ quotient = 0\n    var quotientString = \"\"\n    var remainderString = \"\"\n\
    \    var quotientStringLen = 0\n    var remainderStringLen = 0\n    var quotientStringLen2\
    \ = 0\n    var remainderStringLen2 = 0\n    var quotientStringLen3 = 0\n    var\
    \ remainderStringLen3 = 0\n    var quotientStringLen4 = 0\n    var remainderStringLen4\
    \ = 0\n    var quotientStringLen5 = 0\n    var remainderStringLen5 = 0\n    var\
    \ quotientStringLen6 = 0\n    var remainderStringLen6 = 0\n    var quotientStringLen7\
    \ = 0\n    var remainderStringLen7 = 0\n    var quotientStringLen8 = 0\n    var\
    \ remainderStringLen8 = 0\n    var quotientStringLen9 = 0\n    var remainderStringLen9\
    \ = 0\n    var quotientStringLen10 = 0\n    var remainderStringLen10 = 0\n   \
    \ var quotientStringLen11 = 0\n    var remainderStringLen11 = 0\n    var quotientStringLen12\
    \ = 0\n    var remainderStringLen12 = 0\n    var quotientStringLen13 = 0\n   \
    \ var remainderStringLen13 = 0\n    var quotientStringLen14 = 0\n    var remainderStringLen14\
    \ = 0\n    var quotientStringLen15 = 0\n    var remainderStringLen15 = 0\n   \
    \ var quotientStringLen16 = 0\n    var remainderStringLen16 = 0\n    var quotientStringLen17\
    \ = 0\n    var remainderStringLen17 = 0\n    var quotientStringLen18 = 0\n   \
    \ var remainderStringLen18 = 0\n    var quotientStringLen19 = 0\n    var remainderStringLen19\
    \ = 0\n    var quotientStringLen20 = 0\n    var remainderStringLen20 = 0\n   \
    \ var quotientStringLen21 = 0\n    var remainderStringLen21 = 0\n    var quotientStringLen22\
    \ = 0\n    var remainderStringLen22 = 0\n    var quotientStringLen23 = 0\n   \
    \ var remainderStringLen23 = 0\n    var quotientStringLen24 = 0\n    var remainderStringLen24\
    \ = 0\n    var quotientStringLen25 = 0\n    var remainderStringLen25 = 0\n   \
    \ var quotientStringLen26 = 0\n    var remainderStringLen26 = 0\n    var quotientStringLen27\
    \ = 0\n    var remainderStringLen27 = 0\n    var quotientStringLen28 = 0\n   \
    \ var remainderStringLen28 = 0\n    var quotientStringLen29 = 0\n    var remainderStringLen29\
    \ = 0\n    var ", "    let baseDigits = baseDigits(base)\n    var result = \"\"\
    \n    var remainder = x\n    for digit in baseDigits {\n        if remainder >=\
    \ base {\n            result += \"0\"\n            remainder -= base\n       \
    \ } else {\n            result += digit\n            remainder -= base\n     \
    \   }\n    }\n    if remainder > 0 {\n        result += \"0\"\n    }\n    return\
    \ result", "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n\
    \    let digits_base2 = digits_base * base\n    let digits_base3 = digits_base2\
    \ * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5 = digits_base4\
    \ * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7 = digits_base6\
    \ * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9 = digits_base8\
    \ * base\n    let digits_base10 = digits_base9 * base\n    let digits_base11 =\
    \ digits_base10 * base\n    let digits_base12 = digits_base11 * base\n    let\
    \ digits_base13 = digits_base12 * base\n    let digits_base14 = digits_base13\
    \ * base\n    let digits_base15 = digits_base14 * base\n    let digits_base16\
    \ = digits_base15 * base\n    let digits_base17 = digits_base16 * base\n    let\
    \ digits_base18 = digits_base17 * base\n    let digits_base19 = digits_base18\
    \ * base\n    let digits_base20 = digits_base19 * base\n    let digits_base21\
    \ = digits_base20 * base\n    let digits_base22 = digits_base21 * base\n    let\
    \ digits_base23 = digits_base22 * base\n    let digits_base24 = digits_base23\
    \ * base\n    let digits_base25 = digits_base24 * base\n    let digits_base26\
    \ = digits_base25 * base\n    let digits_base27 = digits_base26 * base\n    let\
    \ digits_base28 = digits_base27 * base\n    let digits_base29 = digits_base28\
    \ * base\n    let digits_base30 = digits_base29 * base\n    let digits_base31\
    \ = digits_base30 * base\n    let digits_base32 = digits_base31 * base\n    let\
    \ digits_base33 = digits_base32 * base\n    let digits_base34 = digits_base33\
    \ * base\n    let digits_base35 = digits_base34 * base\n    let digits_base36\
    \ = digits_base35 * base\n    let digits_base37 = digits_base36 * base\n    let\
    \ digits_base38 = digits_base37 * base\n    let digits_base39 = digits_base38\
    \ * base\n    let digits_base40 = digits_base39 * base\n    let digits_base41\
    \ = ", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"\
    , \"Y\"]\n    let baseIndex = bases.index(base)!\n    let x = x.toInt()\n    var\
    \ result = \"\"\n    while x > 0 {\n        let remainder = x % base\n       \
    \ result = String(remainder) + result\n        x = x / base\n    }\n    return\
    \ result", "    let digits = String(Int(x))\n    let baseDigits = String(base)\n\
    \    let result = \"\"\n    if digits.count > baseDigits.count {\n        let\
    \ remainder = digits.count % baseDigits.count\n        let digitsToAdd = baseDigits.count\
    \ - remainder\n        for i in 0..<digitsToAdd {\n            result += digits[i]\n\
    \        }\n    } else {\n        let digitsToAdd = digits.count - baseDigits.count\n\
    \        for i in 0..<digitsToAdd {\n            result += digits[i]\n       \
    \ }\n    }\n    return result", "    if base < 2 {\n        return String(x)\n\
    \    }\n    var result = \"\"\n    var remainder = x % base\n    for _ in 0..<(base\
    \ - remainder) {\n        result += \"0\"\n    }\n    result += String(remainder)\n\
    \    return result", "    let baseDigits = baseDigits(base)\n    let digits =\
    \ digits(x)\n    var result = \"\"\n    for digit in digits {\n        let index\
    \ = baseDigits.index(of: digit)\n        if index == nil {\n            result\
    \ += digit\n        } else {\n            result += String(digits[index!])\n \
    \       }\n    }\n    return result", "    let baseDigits = base.digits\n    let\
    \ basePower = base.powers\n    var result: String = String()\n    var remainder:\
    \ Int = 0\n    var digit: Int = 0\n    var power: Int = 0\n    while x != 0 {\n\
    \        remainder = x % base\n        digit = remainder / base\n        power\
    \ = remainder % base\n        result = String(digit) + String(baseDigits[power])\n\
    \        x = x / base\n    }\n    return result", "    var result = \"\"\n   \
    \ var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    if base\
    \ > 10 {\n        result = String(base) + result\n    }\n    return result", " \
    \   let digits = x.toInt()\n    let baseDigits = base.toInt()\n    var result\
    \ = \"\"\n    var remainder = digits\n    while remainder > 0 {\n        let remainderDigit\
    \ = remainder % baseDigits\n        remainder = remainder / baseDigits\n     \
    \   result = String(remainderDigit + baseDigits)\n    }\n    return result", " \
    \   var result = \"\"\n    var remainder = x\n    var remainderBase = base\n \
    \   while remainder > 0 {\n        remainder, remainderBase = remainderBase %\
    \ base, remainder\n        result = String(remainder) + result\n    }\n    if\
    \ remainderBase > 0 {\n        result = String(remainderBase) + result\n    }\n\
    \    return result", "    let bases = [\n        \"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n    ]\n    let basesReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"\n    ].reversed()\n    let basesReversedCount = bases.count\n\
    \    let basesReversedCount2 = basesReversed.count\n    let basesReversedCount3\
    \ = basesReversedCount + 1\n    let basesReversedCount4 = basesReversedCount +\
    \ 2\n    let basesReversedCount5 = basesReversedCount + 3\n    let basesReversedCount6\
    \ = basesReversedCount + 4\n    let basesReversedCount7 = basesReversedCount +\
    \ 5\n    let basesReversedCount8 = basesReversedCount + 6\n    let basesReversedCount9\
    \ = basesReversedCount + 7\n    let basesReversedCount10 = basesReversedCount\
    \ + 8\n    let basesReversedCount11 = basesReversedCount + 9\n    let basesReversedCount12\
    \ = basesReversedCount + 10\n    let basesReversedCount13 = basesReversedCount\
    \ + 11\n    let basesReversedCount14 = basesReversedCount + 12\n    let basesReversedCount15\
    \ = basesReversedCount + 13\n    let basesReversedCount16 = basesReversedCount\
    \ + 14\n    let basesReversedCount17 = basesReversedCount + 15\n    let basesReversedCount18\
    \ = basesReversedCount + 16\n    let basesReversedCount19 = basesReversedCount\
    \ + 17\n    let basesReversedCount20 = basesReversedCount + 18\n    let basesReversedCount21\
    \ = basesReversedCount + 19\n    let basesReversedCount22 = basesReversedCount\
    \ + 20\n    let basesReversedCount23 = basesReversedCount + 21\n    let basesReversedCount24\
    \ = basesReversedCount + 22\n    let basesReversedCount25 = ", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    if base < 10 {\n        result = String(base) + result\n    }\n  \
    \  return result", "    let baseNum = base\n    var result: String = \"\"\n  \
    \  var remainder: Int = 0\n    var digit: Int = 0\n    while x >= base {\n   \
    \     remainder = x % base\n        digit = remainder / baseNum\n        result\
    \ = String(digit) + result\n        x = x / base\n    }\n    if x > 0 {\n    \
    \    remainder = x % base\n        result = String(remainder) + result\n    }\n\
    \    return result", "    let baseDigits = baseDigits(base)\n    var result =\
    \ \"\"\n    var remainder = x\n    for digit in baseDigits {\n        if remainder\
    \ < 0 {\n            result += \"-\"\n            remainder *= -1\n        }\n\
    \        result += (digits[digit] as String) + String(remainder)\n        remainder\
    \ *= base\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x\n    var quotient = base\n    while quotient > 0 {\n        remainder, remainder\
    \ = divmod(remainder, base)\n        result = String(quotient) + result\n    \
    \    quotient = quotient / base\n    }\n    if remainder > 0 {\n        result\
    \ = String(remainder) + result\n    }\n    return result", "    let baseDigits\
    \ = baseDigits(base)\n    let digits = digits(x)\n    var result = \"\"\n    for\
    \ digit in digits {\n        let index = baseDigits.index(of: digit)\n       \
    \ if index == nil {\n            result += digit\n        } else {\n         \
    \   result += String(digits[index!])\n        }\n    }\n    return result", " \
    \   let digits = x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2\
    \ = digits_base * base\n    let digits_base3 = digits_base2 * base\n    let digits_base4\
    \ = digits_base3 * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6\
    \ = digits_base5 * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8\
    \ = digits_base7 * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10\
    \ = digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let\
    \ digits_base12 = digits_base11 * base\n    let digits_base13 = digits_base12\
    \ * base\n    let digits_base14 = digits_base13 * base\n    let digits_base15\
    \ = digits_base14 * base\n    let digits_base16 = digits_base15 * base\n    let\
    \ digits_base17 = digits_base16 * base\n    let digits_base18 = digits_base17\
    \ * base\n    let digits_base19 = digits_base18 * base\n    let digits_base20\
    \ = digits_base19 * base\n    let digits_base21 = digits_base20 * base\n    let\
    \ digits_base22 = digits_base21 * base\n    let digits_base23 = digits_base22\
    \ * base\n    let digits_base24 = digits_base23 * base\n    let digits_base25\
    \ = digits_base24 * base\n    let digits_base26 = digits_base25 * base\n    let\
    \ digits_base27 = digits_base26 * base\n    let digits_base28 = digits_base27\
    \ * base\n    let digits_base29 = digits_base28 * base\n    let digits_base30\
    \ = digits_base29 * base\n    let digits_base31 = digits_base30 * base\n    let\
    \ digits_base32 = digits_base31 * base\n    let digits_base33 = digits_base32\
    \ * base\n    let digits_base34 = digits_base33 * base\n    let digits_base35\
    \ = digits_base34 * base\n    let digits_base36 = digits_base35 * base\n    let\
    \ digits_base37 = digits_base36 * base\n    let digits_base38 = digits_base37\
    \ * base\n    let digits_base39 = digits_base38 * base\n    let digits_base40\
    \ = digits_base39 * base\n    let digits_base41 = ", "    let baseDigits = base.digits\n\
    \    var result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / baseDigits[digit], remainder\
    \ % baseDigits[digit]\n        digit = digit + 1\n    }\n    if digit == 0 {\n\
    \        return String(remainder)\n    }\n    while digit < baseDigits.count {\n\
    \        result = String(remainder) + String(baseDigits[digit])\n        remainder,\
    \ remainder = remainder / baseDigits[digit], remainder % baseDigits[digit]\n \
    \       digit = digit + 1\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    var result = \"\"\n    var remainder = x\n    var base\
    \ = base\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / base, base\n    }\n    while remainder > 0 {\n        result = String(remainder)\
    \ + result\n        remainder, remainder = remainder % base, base\n    }\n   \
    \ return result", "    let base10 = 10\n    let base16 = 16\n    let base26 =\
    \ 26\n    let base36 = 36\n    let base48 = 48\n    let base56 = 56\n    let base66\
    \ = 66\n    let base78 = 78\n    let base90 = 90\n    let base102 = 102\n    let\
    \ base104 = 104\n    let base106 = 106\n    let base108 = 108\n    let base110\
    \ = 110\n    let base112 = 112\n    let base114 = 114\n    let base116 = 116\n\
    \    let base118 = 118\n    let base120 = 120\n    let base122 = 122\n    let\
    \ base124 = 124\n    let base126 = 126\n    let base128 = 128\n    let base130\
    \ = 130\n    let base132 = 132\n    let base134 = 134\n    let base136 = 136\n\
    \    let base138 = 138\n    let base140 = 140\n    let base142 = 142\n    let\
    \ base144 = 144\n    let base146 = 146\n    let base148 = 148\n    let base150\
    \ = 150\n    let base152 = 152\n    let base154 = 154\n    let base156 = 156\n\
    \    let base158 = 158\n    let base160 = 160\n    let base162 = 162\n    let\
    \ base164 = 164\n    let base166 = 166\n    let base168 = 168\n    let base170\
    \ = 170\n    let base172 = 172\n    let base174 = 174\n    let base176 = 176\n\
    \    let base178 = 178\n    let base180 = 180\n    let base182 = 182\n    let\
    \ base184 = 184\n    let base186 = 186\n    let base188 = 188\n    let base190\
    \ = 190\n    let base192 = 192\n    let base194 = 194\n    let base196 = 196\n\
    \    let base198 = 198\n    let base200 = 200\n    let base202 = 202\n    let\
    \ base204 = 204\n    let base206 = 206\n    let base208 = 208\n    let base210\
    \ = 210\n    let base212 = 212\n    let base214 = 214\n    let base216 = 216\n\
    \    let base218 = 218\n    let base220 = 220\n    let base222 = 222\n    let\
    \ base224 = 224\n    let base226 = 226\n    let base228 = 238\n    let base230\
    \ = 230\n    let base232 = 232\n    let base234 = 234\n    let base236 = 236\n\
    \    let base238 = 238\n    let base240 = 240\n    let base242 = 242\n    let\
    \ base244 = 244\n    let base246 = 246\n    let base248 = 248\n    let base250\
    \ = 250\n    let base252 = 252\n", "    let baseString = String(base)\n    var\
    \ result = \"\"\n    var remainder = x\n    var quotient = 0\n    while remainder\
    \ > 0 {\n        quotient = remainder / base\n        remainder = remainder %\
    \ base\n        result = String(quotient) + baseString + result\n    }\n    return\
    \ result", "    let baseDigits = baseDigits(base)\n    var result = \"\"\n   \
    \ var remainder = x\n    for digit in baseDigits {\n        if remainder < 0 {\n\
    \            result += \"-\"\n            remainder = 0\n        }\n        result\
    \ += \"0123456789abcdefghijklmnopqrstuvwxyz\"[digit]\n        remainder -= digit\n\
    \    }\n    if remainder > 0 {\n        result += \"-\"\n        remainder = 0\n\
    \    }\n    result += \"0123456789abcdefghijklmnopqrstuvwxyz\"[remainder]\n  \
    \  return result", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var remainder = x\n    var quotient = base\n    while quotient >\
    \ 0 {\n        remainder = remainder % quotient\n        result = String(quotient)\
    \ + result\n        quotient = quotient / base\n    }\n    if remainder > 0 {\n\
    \        result = String(remainder) + result\n    }\n    return result", "   \
    \ let bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    ]\n    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = String(format: \"%@\", String(format: \"%@\", x))\n    return\
    \ String(format: \"%@\", String(format: \"%@\", result))", "    let bases = [\n\
    \        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\"\
    , \"9\", \"10\", \"11\", \"12\", \"13\", \"14\",\n        \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\",\n        \"22\", \"23\", \"24\", \"25\", \"\
    26\", \"27\", \"28\",\n        \"29\", \"30\", \"31\"\n    ]\n    let basesReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\",\n        \"15\", \"\
    16\", \"17\", \"18\", \"19\", \"20\", \"21\",\n        \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\",\n        \"29\", \"30\", \"31\"\n    ]\n   \
    \ let basesReversedReversed = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\",\n        \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ,\n        \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\n        \"\
    22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\",\n        \"29\", \"30\"\
    , \"31\"\n    ]\n    let basesReversedReversedReversed = [\n        \"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\",\n        \"15\", \"16\", \"17\", \"18\", \"\
    19\", \"20\", \"21\",\n        \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\",\n        \"29\", \"30\", \"31\"\n    ]\n    let basesReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\",\n        \"15\", \"\
    16\", \"17\", \"18\", \"19\", \"20\", \"21\",\n        \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\",\n        \"29\", \"30\", \"31\"\n    ]\n   \
    \ let basesReversedReversedReversedReversedReversed = [\n        \"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"10\", \"\
    11\", \"12\", \"13\", \"14\",\n        \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\",\n        \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"\
    28\",\n        \"29\", \"30\", \"31\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"", "    let digits = String(format: \"%0\" + String(base) + \"d\"\
    , x)\n    return digits.reversed()", "    let baseString = String(base)\n    let\
    \ baseInt = Int(baseString)\n    if baseInt < 10 {\n        return String(Int(x)\
    \ * Int(base) + Int(base))\n    }\n    return String(Int(x) / Int(base) + Int(base))",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder = remainder % quotient\n        result = String(quotient)\
    \ + result\n        quotient = quotient / base\n    }\n    if remainder > 0 {\n\
    \        result = String(remainder) + result\n    }\n    return result", "   \
    \ var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder, remainder = divmod(remainder, base)\n   \
    \     quotient = quotient / base\n        result += String(quotient)\n    }\n\
    \    if remainder > 0 {\n        result += String(remainder)\n    }\n    return\
    \ result", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n        x /= base\n    }\n    return String(result)", "    let bases =\
    \ [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = x.toInt().toString(base: baseIndex)\n\
    \    return String(result)", "    let baseDigits = baseDigits(base)\n    let digits\
    \ = digits(x)\n    var result = \"\"\n    for i in 0..<baseDigits.count {\n  \
    \      let digit = digits[i]\n        let baseDigit = baseDigits[i]\n        if\
    \ digit < baseDigit {\n            result += String(digit)\n        } else {\n\
    \            result += String(baseDigit)\n        }\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder, remainder = remainder / quotient, quotient\
    \ % quotient\n        result = String(remainder) + result\n    }\n    if quotient\
    \ > 0 {\n        result = String(quotient) + result\n    }\n    return result",
  "    let bases = String((base).times(base).map({ String($0) }))\n    let digits\
    \ = String((x).times(base).map({ String($0) }))\n    return digits.dropLast(bases.count).append(bases)",
  "    let bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    , \"1000000000000\", \"10000000000000\", \"100000000000000\", \"1000000000000000\"\
    , \"10000000000000000\", \"100000000000000000\", \"1000000000000000000\"]\n  \
    \  let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = ", "    let baseDigits = String(base)\n    let baseDigitCount\
    \ = baseDigits.count\n    let digits = String(Int(x)).characters\n    var result\
    \ = \"\"\n    var remainder = 0\n    for digit in digits {\n        let digitValue\
    \ = Int(digit)\n        remainder = digitValue % base\n        result += String(remainder)\n\
    \    }\n    if remainder != 0 {\n        result += String(remainder)\n    }\n\
    \    if baseDigitCount != result.count {\n        result += \"0\"\n    }\n   \
    \ return result", "    let bases = String((base).times(base).description)\n  \
    \  let basesArray = bases.characters.split{$0 == \".\"}.map(String.init)\n   \
    \ let basesString = basesArray.join()\n    let basesArray2 = basesString.characters.split{$0\
    \ == \",\"}.map(String.init)\n    let basesString2 = basesArray2.joinWithSeparator(\"\
    \")\n    let basesString3 = basesString2.characters.split{$0 == \" \"}.map(String.init)\n\
    \    let basesString4 = basesString3.joinWithSeparator(\"\")\n    let basesString5\
    \ = basesString4.characters.split{$0 == \"\"}.map(String.init)\n    let basesString6\
    \ = basesString5.joinWithSeparator(\"\")\n    let basesString7 = basesString6.characters.split{$0\
    \ == \".\"}.map(String.init)\n    let basesString8 = basesString7.joinWithSeparator(\"\
    \")\n    let basesString9 = basesString8.characters.split{$0 == \",\"}.map(String.init)\n\
    \    let basesString10 = basesString9.joinWithSeparator(\"\")\n    let basesString11\
    \ = basesString10.characters.split{$0 == \" \"}.map(String.init)\n    let basesString12\
    \ = basesString11.joinWithSeparator(\"\")\n    let basesString13 = basesString12.characters.split{$0\
    \ == \"\"}.map(String.init)\n    let basesString14 = basesString13.joinWithSeparator(\"\
    \")\n    let basesString15 = basesString14.characters.split{$0 == \".\"}.map(String.init)\n\
    \    let basesString16 = basesString15.joinWithSeparator(\"\")\n    let basesString17\
    \ = basesString16.characters.split{$0 == \",\"}.map(String.init)\n    let basesString18\
    \ = basesString17.joinWithSeparator(\"\")\n    let basesString19 = basesString18.characters.split{$0\
    \ == \" \"}.map(String.init)\n    let basesString20 = basesString19.joinWithSeparator(\"\
    \")\n    let basesString21 = basesString20.characters.split{$0 == \"\"}.map(String.init)\n\
    \    let basesString22 = basesString21.joinWithSeparator(\"\")\n    let basesString23\
    \ = basesString22.characters.split{$0 == \".\"}.map(String.init)\n    let basesString24\
    \ = basesString23.joinWithSeparator(\"\")\n    let basesString25 = basesString24.characters.split{$0\
    \ == \",\"}.map(String.init)\n    let basesString26 = basesString25.joinWith",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n\n    while\
    \ quotient > 0 {\n        remainder = remainder % quotient\n        result = String(quotient)\
    \ + result\n        quotient = quotient / base\n    }\n\n    if remainder > 0\
    \ {\n        result = String(remainder) + result\n    }\n\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = x.toInt().toString(base:\
    \ baseIndex)\n    return String(result)", "    let digits = String(Int(x))\n \
    \   let digits_base = String(Int(base))\n    let digits_base_len = digits_base.count\n\
    \    let digits_len = digits.count\n    var result = \"\"\n    if digits_base_len\
    \ > digits_len {\n        digits_base_len = digits_len\n    }\n    for i in 0..<digits_base_len\
    \ {\n        let digit = digits[digits_len - digits_base_len - 1 - i]\n      \
    \  let digit2 = digits_base[digits_len - digits_base_len - 1 - i]\n        let\
    \ digit3 = digits_base[digits_len - digits_base_len - 2 - i]\n        let digit4\
    \ = digits_base[digits_len - digits_base_len - 3 - i]\n        let digit5 = digits_base[digits_len\
    \ - digits_base_len - 4 - i]\n        let digit6 = digits_base[digits_len - digits_base_len\
    \ - 5 - i]\n        let digit7 = digits_base[digits_len - digits_base_len - 6\
    \ - i]\n        let digit8 = digits_base[digits_len - digits_base_len - 7 - i]\n\
    \        let digit9 = digits_base[digits_len - digits_base_len - 8 - i]\n    \
    \    let digit10 = digits_base[digits_len - digits_base_len - 9 - i]\n       \
    \ let digit11 = digits_base[digits_len - digits_base_len - 10 - i]\n        let\
    \ digit12 = digits_base[digits_len - digits_base_len - 11 - i]\n        let digit13\
    \ = digits_base[digits_len - digits_base_len - 12 - i]\n        let digit14 =\
    \ digits_base[digits_len - digits_base_len - 13 - i]\n        let digit15 = digits_base[digits_len\
    \ - digits_base_len - 14 - i]\n        let digit16 = digits_base[digits_len -\
    \ digits_base_len - 15 - i]\n        let digit17 = digits_base[digits_len - digits_base_len\
    \ - 16 - i]\n        let digit18 = digits_base[digits_len - digits_base_len -\
    \ 17 - i]\n        let digit19 = digits_base[digits_len - digits_base_len - 18\
    \ - i]\n        let digit20 = digits_base[digits_len - digits_base_len - 19 -\
    \ i]\n        let digit21 = digits_base[digits_len - digits_base_len - 20 - i]\n\
    \        let digit22 = digits_base[digits_len - digits_base_len - 21 - i]\n  \
    \      let digit23 = digits_base[digits_len - digits_base_len - 22 - i]\n    \
    \    let digit24 = digits_base[digits_len - digits_base_len - 23 - i]\n      \
    \  let digit25 = digits_", "    let bases = [\"\", \"10\", \"100\", \"1000\",\
    \ \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"\
    , \"10000000000\", \"100000000000\"]\n    let baseIndex = bases.firstIndex(of:\
    \ base)!\n    let baseDigit = bases[baseIndex]\n    let baseDigitCount = Int(baseDigit)!\n\
    \    let digitCount = Int(x)!\n    var result: String = \"\"\n    var remainder\
    \ = digitCount % baseDigitCount\n    while remainder > 0 {\n        result = bases[baseIndex]\
    \ + result\n        remainder = remainder - 1\n    }\n    while remainder < 0\
    \ {\n        result = bases[baseIndex] + result\n        remainder = remainder\
    \ + 1\n    }\n    while remainder == 0 {\n        result = bases[baseIndex] +\
    \ result\n        remainder = remainder + 1\n    }\n    return result", "    let\
    \ baseDigits = base.digits\n    let digits = x.digits\n    var result = \"\"\n\
    \    for i in 0..<baseDigits {\n        let digit = digits[i]\n        let baseDigit\
    \ = baseDigits[i]\n        if digit < baseDigit {\n            result += String(digit\
    \ - baseDigit)\n        } else {\n            result += String(baseDigit - digit)\n\
    \        }\n    }\n    return result", "    let baseString = String(base)\n  \
    \  let baseStringLength = baseString.count\n    var result = \"\"\n    var remainder\
    \ = x\n    var quotient = 0\n    while remainder > 0 {\n        quotient = quotient\
    \ * 10 + remainder % base\n        remainder = remainder / base\n    }\n    if\
    \ quotient > 0 {\n        result = String(quotient) + baseString\n    }\n    if\
    \ remainder > 0 {\n        result = result + String(remainder)\n    }\n    return\
    \ result", "    let bases = Array(1...base).map { String($0) }\n    let digits\
    \ = x.toInt()\n    let result = \"\"\n    for b in bases {\n        let digit\
    \ = digits % b\n        digits = digits / b\n        result = b + String(digit)\
    \ + result\n    }\n    return result", "    let baseNum = base.toInt()\n    if\
    \ x < baseNum {\n        return \"\"\n    }\n    var result = \"\"\n    var remainder\
    \ = x - baseNum\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ % baseNum, baseNum\n        result += String(remainder)\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n\
    \    if Int(result) == 0 {\n        return \"\"\n    }\n    return String(Int(result)\
    \ + baseIndex)", "    let baseDigits = baseDigits(base)\n    var result: String\
    \ = \"\"\n    var remainder: Int = 0\n    var digit: Int = 0\n    while x > 0\
    \ {\n        remainder = x % base\n        digit = remainder / baseDigits[digit]\n\
    \        result = String(digit) + result\n        x = x / base\n    }\n    return\
    \ result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let baseIndex = bases.count\n    let baseDigit = bases[baseIndex]\n\
    \    let basePower = Int(log10(Double(x)))\n    let basePowerIndex = basePower\
    \ % baseIndex\n    let basePowerDigit = bases[basePowerIndex]\n    let basePowerPowerIndex\
    \ = basePowerIndex + baseIndex\n    let basePowerPowerDigit = bases[basePowerPowerIndex]\n\
    \    let basePowerPowerPowerDigit = bases[basePowerPowerIndex + baseIndex]\n \
    \   let basePowerPowerPowerPowerDigit = bases[basePowerPowerIndex + baseIndex\
    \ + baseIndex]\n    let basePowerPowerPowerPowerPowerDigit = bases[basePowerPowerIndex\
    \ + baseIndex + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex + baseIndex]\n\
    \    let basePowerPowerPowerPowerPowerPowerDigit = bases[basePowerPowerIndex +\
    \ baseIndex + baseIndex + baseIndex + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex + baseIndex\
    \ + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex + baseIndex\
    \ + baseIndex + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex + baseIndex\
    \ + baseIndex + baseIndex + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex + baseIndex\
    \ + baseIndex + baseIndex + baseIndex + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex + baseIndex\
    \ + baseIndex + baseIndex + baseIndex + baseIndex + baseIndex + baseIndex]\n \
    \   let basePowerPowerPowerPowerPowerPowerPowerPowerPowerDigit = bases[basePowerPowerIndex\
    \ + baseIndex + baseIndex + baseIndex + baseIndex + baseIndex + baseIndex + baseIndex\
    \ + baseIndex + baseIndex + baseIndex + baseIndex]\n    let basePowerPowerPowerPowerPowerPowerPowerPowerPowerDigit\
    \ = bases[basePowerPowerIndex + baseIndex + baseIndex + baseIndex", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n    let\
    \ result = String(format: \"%0\" + String(base) + \"d\", x)\n    return baseString\
    \ + result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"\
    , \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = String(Int(x)\
    \ / Int(base))\n    if Int(result) == 0 {\n        return \"\"\n    }\n    return\
    \ String(Int(result) * Int(baseIndex))", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    for digit in baseDigits {\n        if x < base {\n\
    \            result += digit\n            x /= base\n        } else {\n      \
    \      result += \"0\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(result)", "    let baseDigits = base.digits\n    let\
    \ digits = x.digits\n    var result = \"\"\n    var carry = 0\n    for index in\
    \ 0..<x.digits {\n        let digit = digits[index]\n        let digitBase = baseDigits[index]\n\
    \        if digit > 0 {\n            let digitCarry = digit + carry\n        \
    \    let digitBaseCarry = digitBase + carry\n            carry = digitCarry /\
    \ digitBaseCarry\n            digits[index] = digitCarry % digitBaseCarry\n  \
    \      } else {\n            digits[index] = digitBase\n        }\n        result\
    \ = String(digits) + result\n    }\n    if carry != 0 {\n        result = String(digits)\
    \ + String(Int(carry)) + result\n    }\n    return result", "    let bases = [\"\
    \", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(x)\n    if result.characters.count\
    \ > baseIndex {\n        let remainder = result.characters.count - baseIndex\n\
    \        let remainderString = String(repeating: \"0\", count: remainder)\n  \
    \      result = result.substringToIndex(remainder)\n    }\n    return result +\
    \ bases[baseIndex]", "    if base < 10 {\n        guard base > 0 else { return\
    \ \"\" }\n        return String(format: \"%0\" + String(base) + \"d\", x)\n  \
    \  }\n    var result = \"\"\n    var remainder = x\n    var divisor = base\n \
    \   while remainder > 0 {\n        let quotient = remainder / divisor\n      \
    \  remainder = remainder % divisor\n        result = String(format: \"%0\" + String(base)\
    \ + \"d\", quotient) + result\n        divisor = divisor * base\n    }\n    return\
    \ result", "    let baseStr = String(base)\n    let baseNum = Int(baseStr)\n \
    \   let x = Int(x)\n    let result = String(x)\n    if baseNum < 10 {\n      \
    \  return String(result)\n    }\n    if baseNum < 36 {\n        return String(result)\n\
    \    }\n    if baseNum < 63 {\n        return String(result)\n    }\n    if baseNum\
    \ < 91 {\n        return String(result)\n    }\n    if baseNum < 123 {\n     \
    \   return String(result)\n    }\n    if baseNum < 153 {\n        return String(result)\n\
    \    }\n    if baseNum < 183 {\n        return String(result)\n    }\n    if baseNum\
    \ < 213 {\n        return String(result)\n    }\n    if baseNum < 236 {\n    \
    \    return String(result)\n    }\n    if baseNum < 263 {\n        return String(result)\n\
    \    }\n    if baseNum < 293 {\n        return String(result)\n    }\n    if baseNum\
    \ < 323 {\n        return String(result)\n    }\n    if baseNum < 343 {\n    \
    \    return String(result)\n    }\n    if baseNum < 363 {\n        return String(result)\n\
    \    }\n    if baseNum < 393 {\n        return String(result)\n    }\n    if baseNum\
    \ < 423{\n        return String(result)\n    }\n    if baseNum < 453 {\n     \
    \   return String(result)\n    }\n    if baseNum < 483 {\n        return String(result)\n\
    \    }\n    if baseNum < 523{\n        return String(result)\n    }\n    if baseNum\
    \ < 563 {\n        return String(result)\n    }\n    if baseNum < 593{\n     \
    \   return String(result)\n    }\n    if baseNum < 623{\n        return String(result)\n\
    \    }\n    if baseNum < 653{\n        return String(result)\n    }\n    if baseNum\
    \ < 683{\n        return String(result)\n    }\n    if baseNum < 713{\n      \
    \  return String(result)\n    }\n    if baseNum < 743{\n        return String(result)\n\
    \    }\n    if baseNum < 783{\n        return String(result)\n    }\n    if baseNum\
    \ < 823{\n        return String(result)\n    }\n    if baseNum < 853 {\n     \
    \   return String(result)\n    }\n    if baseNum < 883 {\n        return String(result)\n\
    \    }\n    if baseNum < 913{\n        return String(result)\n    }\n    if baseNum\
    \ < 943{\n        return String(result)\n    }\n    if baseNum < 983{\n      \
    \  return String(result)\n    }\n    if baseNum < 1023{\n        return String(result)\n\
    \    }\n    if baseNum < 1053{\n        return String(result)\n    }\n    if baseNum\
    \ < 1083{\n        return String(result)\n    }\n    if baseNum", "    let digits\
    \ = x.digits\n    let digits_count = digits.count\n    var digits_base = [Int]()\n\
    \    var digits_base_count = [0]\n    var digits_base_index = 0\n    var digits_base_index2\
    \ = 0\n    var digits_base_index3 = 0\n    var digits_base_index4 = 0\n    var\
    \ digits_base_index5 = 0\n    var digits_base_index6 = 0\n    var digits_base_index7\
    \ = 0\n    var digits_base_index8 = 0\n    var digits_base_index9 = 0\n    var\
    \ digits_base_index10 = 0\n    var digits_base_index11 = 0\n    var digits_base_index12\
    \ = 0\n    var digits_base_index13 = 0\n    var digits_base_index14 = 0\n    var\
    \ digits_base_index15 = 0\n    var digits_base_index16 = 0\n    var digits_base_index17\
    \ = 0\n    var digits_base_index18 = 0\n    var digits_base_index19 = 0\n    var\
    \ digits_base_index20 = 0\n    var digits_base_index21 = 0\n    var digits_base_index22\
    \ = 0\n    var digits_base_index23 = 0\n    var digits_base_index24 = 0\n    var\
    \ digits_base_index25 = 0\n    var digits_base_index26 = 0\n    var digits_base_index27\
    \ = 0\n    var digits_base_index28 = 0\n    var digits_base_index29 = 0\n    var\
    \ digits_base_index30 = 0\n    var digits_base_index31 = 0\n    var digits_base_index32\
    \ = 0\n    var digits_base_index33 = 0\n    var digits_base_index34 = 0\n    var\
    \ digits_base_index35 = 0\n    var digits_base_index36 = 0\n    var digits_base_index37\
    \ = 0\n    var digits_base_index38 = 0\n    var digits_base_index39 = 0\n    var\
    \ digits_base_index40 = 0\n    var digits_base_index41 = 0\n    var digits_base_index42\
    \ = 0\n    var digits_base_index43 = 0\n    var digits_base_index44 = 0\n    var\
    \ digits_base_index45 = 0\n    var digits_base_index46 = 0\n    var digits_base_index47\
    \ = 0\n    var digits_base_index48 = 0\n    var digits_base_index49 = 0\n    var\
    \ digits_base_index50 = 0\n    var digits_base_index51 = 0\n    var digits_base_index52\
    \ = 0\n    var digits_base_index53 = 0\n    var digits_base_index54 = 0\n    var\
    \ digits_base_index55 = 0\n    var digits_base_index56 = 0\n    var digits_base_index57\
    \ = 0\n    var digits_base_index58 = 0\n    var digits_base_index59 = 0\n    var\
    \ digits_base_index60 = 0\n    var digits_base", "    let bases = Array(1...base).map(String.init)\n\
    \    let digits = x.toInt()\n    let result = \"\"\n    for b in bases {\n   \
    \     let digit = digits % b\n        digits = digits / b\n        result = String(digit)\
    \ + result\n    }\n    return result", "    let bases = Array(1...base).map {\
    \ String($0) }\n    let digits = x.toString(base).components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    let result = digits[bases.count]\n    return String(result)", "    let baseNum\
    \ = base.toInt()\n    let numStr = x.toInt()\n    let numLen = numStr.count\n\
    \    var result: String = \"\"\n    var remainder: Int = 0\n    var digit: Int\
    \ = 0\n    while numLen > 0 {\n        remainder = numStr % baseNum\n        digit\
    \ = remainder / baseNum\n        result = String(digit) + result\n        numStr\
    \ = numStr.truncatingRemainder(dividingBy: baseNum)\n        numLen = numStr.count\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseDigits = baseDigits(base)\n    var result = \"\"\n    var remainder\
    \ = x\n    for digit in baseDigits {\n        let digitValue = remainder % base\n\
    \        remainder = remainder / base\n        result = digitValue + String(digit)\
    \ + result\n    }\n    return result", "    let bases = [\"\", \"10\", \"100\"\
    , \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"\
    1000000000\", \"10000000000\", \"100000000000\"]\n    return String(Int(x) / Int(bases[base]))",
  "    let baseDigit = String(base)\n    let baseDigitCount = baseDigit.count\n  \
    \  let digitCount = x.count\n    var result = \"\"\n    var remainder = x\n  \
    \  var digit = 0\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / base, digit\n        digit = remainder % baseDigitCount\n        result =\
    \ String(digit) + result\n    }\n    if digit > 0 {\n        result = String(digit)\
    \ + result\n    }\n    return result", "    let baseDigits = baseDigits(base)\n\
    \    let digits = digits(x)\n    var result = \"\"\n    for digit in digits {\n\
    \        let index = baseDigits.index(of: digit)\n        if index == nil {\n\
    \            result += digit\n        } else {\n            result += String(digits[index!])\n\
    \        }\n    }\n    return result", "    let bases = Array(1...base)\n    let\
    \ digits = x.toString(base: base)\n    return digits.reversed()", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(x)\n    if x < 0 {\n        result\
    \ = \"-\" + result\n    }\n    if baseIndex < 0 {\n        result = \"0\" + result\n\
    \    }\n    if baseIndex < 10 {\n        result = \"0\" + result\n    }\n    if\
    \ baseIndex < 20 {\n        result = result + bases[baseIndex + 1]\n    }\n  \
    \  return result", "    let baseDigits = base.digits\n    let digits = x.digits\n\
    \    var result: String = \"\"\n    for index in 0..<x.digits {\n        let digit\
    \ = digits[index]\n        let baseDigit = baseDigits[index]\n        if digit\
    \ == baseDigit {\n            result += digit\n        } else {\n            result\
    \ += String(digit)\n        }\n    }\n    return result", "    let baseDigits\
    \ = String(base)\n    let digits = String(x)\n    var result = \"\"\n    for index\
    \ in 0..<digits.count {\n        let digit = digits[index]\n        let digitIndex\
    \ = digits.index(digit)\n        let digitBase = digitIndex / baseDigits.count\n\
    \        let digitBaseIndex = digitIndex % baseDigits.count\n        let digitBaseDigit\
    \ = digitBases[digitBaseIndex]\n        let digitBaseDigitIndex = digitBases.indexOf(digitBaseDigit)\n\
    \        let digitBaseDigitValue = digitBaseDigits[digitBaseDigitIndex]\n    \
    \    result += digitBaseDigitValue\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(result)", "    let digits = x.toInt()\n    let result\
    \ = \"\"\n    var remainder: Int = 0\n    while digits != 0 {\n        remainder\
    \ = digits % base\n        digits = digits / base\n        result = String(remainder)\
    \ + result\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"\
    G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let x = Int(x)\n    let result = String(format: \"%0\" + String(baseIndex)\
    \ + \"d\", x)\n    return result", "    let baseString = String(base)\n    let\
    \ baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let baseString = baseString.characters.reversed()\n    let baseString = baseString.joined()\n\
    \    let base", "    let baseDigits = baseDigits(base)\n    let digits = x.toInt().map({\
    \ $0 % base })\n    return digits.reduce(\"\") { $0 + String($1) + baseDigits[$1]\
    \ }", "    let baseString = String(base)\n    let baseInt = Int(baseString)\n\
    \    if baseInt < 10 {\n        return String(x)\n    }\n    var result = 0\n\
    \    var remainder = 0\n    var quotient = 0\n    while x != 0 {\n        remainder\
    \ = x % base\n        quotient = x / base\n        result = quotient * base\n\
    \        x = remainder\n    }\n    return String(result)", "    let bases = [\"\
    \", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(x)\n    if baseIndex < 0 {\n \
    \       return String(Int(result) << (-baseIndex))\n    }\n    if baseIndex >=\
    \ bases.count {\n        return String(Int(result) >> (bases.count - baseIndex))\n\
    \    }\n    return String(Int(result) >> (baseIndex))", "    let bases = [\"\"\
    , \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex =\
    \ bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n    let\
    \ baseInt = Int(baseString)\n    let x = Int(x) * baseInt\n    let result = String(Int(x)\
    \ / baseInt)\n    return result", "    var result = \"\"\n    var remainder =\
    \ x % base\n    while remainder != 0 {\n        result = String(remainder) + result\n\
    \        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseDigits = baseDigits(base)\n    var result = \"\"\n    var remainder\
    \ = x\n    for digit in baseDigits {\n        if remainder < 0 {\n           \
    \ result += \"-\"\n            remainder = remainder - digit\n        } else {\n\
    \            result += digit\n            remainder = remainder - digit\n    \
    \    }\n    }\n    if remainder > 0 {\n        result += \"+\"\n        remainder\
    \ = remainder - base\n    }\n    if remainder > 0 {\n        result += \"0\"\n\
    \    }\n    return result", "    let baseDigits = String(base)\n    let digits\
    \ = String(Int(x))\n    var result = \"\"\n    for index in 0..<digits.count {\n\
    \        let digit = digits[index]\n        let baseDigit = baseDigits[index]\n\
    \        if digit == \"0\" {\n            result += baseDigit\n        } else\
    \ {\n            result += digit + baseDigit\n        }\n    }\n    return result",
  "    if base < 2 {\n        return String(x)\n    }\n    var result = \"\"\n   \
    \ var remainder = x\n    var divisor = base\n    while remainder > 0 {\n     \
    \   remainder, remainder = divMod(remainder, divisor)\n        result = String(remainder)\
    \ + result\n        divisor *= base\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = x\n    var quotient = 0\n    while remainder > 0\
    \ {\n        quotient = quotient * base + remainder % base\n        remainder\
    \ = (remainder - quotient % base) / base\n    }\n    if remainder > 0 {\n    \
    \    result = String(quotient) + String(remainder)\n    }\n    return result",
  "    let bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    ]\n    let baseIndex = bases.index(base)!\n    let baseDigit = Int(pow(base, baseIndex))\n\
    \    let result = String(x)\n    if baseDigit > 0 {\n        let remainder = x\
    \ % baseDigit\n        if remainder > 0 {\n            result = String(remainder)\
    \ + result\n        }\n    }\n    return result", "    let baseNum = base\n  \
    \  let basePower = Int(log2(baseNum))\n    let baseString = String(baseNum)\n\
    \    var result = \"\"\n    var remainder = Int(x)\n    while remainder > 0 {\n\
    \        let remainderString = String(remainder)\n        let power = remainderString.index(of:\
    \ baseString[basePower])\n        let powerString = String(power!)\n        let\
    \ powerNum = Int(powerString)\n        let powerPower = Int(log2(powerNum))\n\
    \        let powerString = String(powerNum)\n        let powerPower = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let powerString = String(powerPower)\n        let powerString = String(powerPower)\n\
    \        let power", "    let baseString = String(base)\n    let baseInt = Int(baseString)\n\
    \    if baseInt < 10 {\n        return String(x)\n    }\n    var result = \"\"\
    \n    var remainder = x\n    var quotient = baseInt\n    while quotient > 0 {\n\
    \        remainder = remainder / base\n        quotient = quotient % base\n  \
    \      result = String(quotient) + result\n    }\n    return String(remainder)\
    \ + result", "    let bases = Array(1...base).map { String($0) }\n    let basesString\
    \ = bases.joined(separator: \"\")\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n", "    var result = \"\"\n  \
    \  var remainder = x\n    var quotient = base\n    while quotient > 0 {\n    \
    \    remainder, remainder = remainder / quotient, quotient % quotient\n      \
    \  result = String(remainder) + result\n    }\n    if quotient > 0 {\n       \
    \ result = String(quotient) + result\n    }\n    return result", "    let base10\
    \ = 10\n    let base16 = 16\n    let base26 = 26\n    let base36 = 36\n    let\
    \ base48 = 48\n    let base58 = 58\n    let base62 = 62\n    let base64 = 64\n\
    \    let base82 = 82\n    let base96 = 96\n    let base108 = 108\n    let base115\
    \ = 116\n    let base122 = 122\n    let base136 = 136\n    let base144 = 144\n\
    \    let base152 = 152\n    let base160 = 160\n    let base168 = 168\n    let\
    \ base176 = 176\n    let base184 = 184\n    let base192 = 192\n    let base200\
    \ = 200\n    let base208 = 208\n    let base216 = 216\n    let base226 = 226\n\
    \    let base234 = 234\n    let base242 = 242\n    let base252 = 252\n    let\
    \ base262 = 262\n    let base272 = 272\n    let base282 = 282\n    let base292\
    \ = 292\n    let base302 = 302\n    let base312 = 312\n    let base322 = 322\n\
    \    let base332 = 332\n    let base342 = 342\n    let base352 = 352\n    let\
    \ base362 = 362\n    let base372 = 372\n    let base382 = 382\n    let base392\
    \ = 392\n    let base402 = 402\n    let base412 = 412\n    let base422 = 422\n\
    \    let base432 = 432\n    let base442 = 442\n    let base452 = 452\n    let\
    \ base462 = 462\n    let base472 = 472\n    let base482 = 482\n    let base492\
    \ = 492\n    let base502 = 502\n    let base512 = 512\n    let base522 = 522\n\
    \    let base532 = 532\n    let base542 = 542\n    let base552 = 552\n    let\
    \ base562 = 562\n    let base572 = 572\n    let base582 = 582\n    let base592\
    \ = 592\n    let base602 = 602\n    let base612 = 612\n    let base622 = 622\n\
    \    let base632 = 632\n    let base642 = 642\n    let base652 = 652\n    let\
    \ base662 = 662\n    let base672 = 672\n    let base682 = 682\n    let base692\
    \ = 692\n    let base702 = 702\n    let base712 = 712\n    let base722 = 722\n\
    \    let base732 = 733\n    let base742 = 742\n    let base752 = 752\n    let\
    \ base762 = 762\n", "    let digits = String(Int(x))\n    let baseDigits = String(base)\n\
    \    var result = \"\"\n    for digit in digits {\n        if digit == \"0\" {\n\
    \            result += baseDigits.characters.first!\n        } else {\n      \
    \      result += digit\n        }\n    }\n    return result", "    let digits\
    \ = x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2 = digits_base\
    \ * base\n    let digits_base3 = digits_base2 * base\n    let digits_base4 = digits_base3\
    \ * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6 = digits_base5\
    \ * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8 = digits_base7\
    \ * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10 =\
    \ digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let digits_base12\
    \ = digits_base11 * base\n    let digits_base13 = digits_base12 * base\n    let\
    \ digits_base14 = digits_base13 * base\n    let digits_base15 = digits_base14\
    \ * base\n    let digits_base16 = digits_base15 * base\n    let digits_base17\
    \ = digits_base16 * base\n    let digits_base18 = digits_base17 * base\n    let\
    \ digits_base19 = digits_base18 * base\n    let digits_base20 = digits_base19\
    \ * base\n    let digits_base21 = digits_base20 * base\n    let digits_base22\
    \ = digits_base21 * base\n    let digits_base23 = digits_base22 * base\n    let\
    \ digits_base24 = digits_base23 * base\n    let digits_base25 = digits_base24\
    \ * base\n    let digits_base26 = digits_base25 * base\n    let digits_base27\
    \ = digits_base26 * base\n    let digits_base28 = digits_base27 * base\n    let\
    \ digits_base29 = digits_base28 * base\n    let digits_base30 = digits_base29\
    \ * base\n    let digits_base31 = digits_base30 * base\n    let digits_base32\
    \ = digits_base31 * base\n    let digits_base33 = digits_base32 * base\n    let\
    \ digits_base34 = digits_base33 * base\n    let digits_base35 = digits_base34\
    \ * base\n    let digits_base36 = digits_base35 * base\n    let digits_base37\
    \ = digits_base36 * base\n    let digits_base38 = digits_base37 * base\n    let\
    \ digits_base39 = digits_base38 * base\n    let digits_base40 = digits_base39\
    \ * base\n    let digits_base41 = ", "    let digits = x.toInt()\n    let digits_base\
    \ = digits.toInt()\n    let digits_base2 = digits_base * base\n    let digits_base3\
    \ = digits_base2 * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5\
    \ = digits_base4 * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7\
    \ = digits_base6 * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9\
    \ = digits_base8 * base\n    let digits_base10 = digits_base9 * base\n    let\
    \ digits_base11 = digits_base10 * base\n    let digits_base12 = digits_base11\
    \ * base\n    let digits_base13 = digits_base12 * base\n    let digits_base14\
    \ = digits_base13 * base\n    let digits_base15 = digits_base14 * base\n    let\
    \ digits_base16 = digits_base15 * base\n    let digits_base17 = digits_base16\
    \ * base\n    let digits_base18 = digits_base17 * base\n    let digits_base19\
    \ = digits_base18 * base\n    let digits_base20 = digits_base19 * base\n    let\
    \ digits_base21 = digits_base20 * base\n    let digits_base22 = digits_base21\
    \ * base\n    let digits_base23 = digits_base22 * base\n    let digits_base24\
    \ = digits_base23 * base\n    let digits_base25 = digits_base24 * base\n    let\
    \ digits_base26 = digits_base25 * base\n    let digits_base27 = digits_base26\
    \ * base\n    let digits_base28 = digits_base27 * base\n    let digits_base29\
    \ = digits_base28 * base\n    let digits_base30 = digits_base29 * base\n    let\
    \ digits_base31 = digits_base30 * base\n    let digits_base32 = digits_base31\
    \ * base\n    let digits_base33 = digits_base32 * base\n    let digits_base34\
    \ = digits_base33 * base\n    let digits_base35 = digits_base34 * base\n    let\
    \ digits_base36 = digits_base35 * base\n    let digits_base37 = digits_base36\
    \ * base\n    let digits_base38 = digits_base37 * base\n    let digits_base39\
    \ = digits_base38 * base\n    let digits_base40 = digits_base39 * base\n    let\
    \ digits_base41 = ", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"\
    , \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.firstIndex(of: base)!\n    let\
    \ baseString = bases[baseIndex]\n    let baseInt = Int(baseString)\n    let baseDouble\
    \ = Double(baseString)\n    let baseFloat = Float(baseString)\n    let baseInt\
    \ = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n   \
    \ let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt =\
    \ Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let\
    \ baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n\
    \    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let\
    \ baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble =\
    \ Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n  \
    \  let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let\
    \ baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n   \
    \ let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt\
    \ = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n   \
    \ let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt =\
    \ Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let\
    \ baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n\
    \    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let\
    \ baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = ",
  "    if base < 2 {\n        return String(x)\n    }\n    var result = \"\"\n   \
    \ var remainder = x\n    var digit = 0\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / base, digit\n        digit = digit * base\n    }\n \
    \   if digit > 0 {\n        result = String(digit) + result\n    }\n    return\
    \ result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let baseIndex = bases.firstIndex(of: base)!\n    let baseString\
    \ = bases[baseIndex]\n    let baseInt = Int(baseString)!\n    let baseDouble =\
    \ Double(baseString)!\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n\
    \    let baseDouble = Double(x)\n    let baseDouble = Double(x)\n    let baseDouble\
    \ = ", "    let baseChar = String(base)\n    let baseCharArray = baseChar.unicodeScalars\n\
    \    let baseCharArrayCount = baseCharArray.count\n    var resultString = \"\"\
    \n    var remainder = x\n    var remainderChar = \"\"\n    for _ in 0..<baseCharArrayCount\
    \ {\n        remainderChar += String(remainder % baseCharArray[baseCharArrayCount\
    \ - 1])\n        remainder = remainder / baseCharArray[baseCharArrayCount - 1]\n\
    \    }\n    resultString += remainderChar\n    return resultString", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let result = String(x)\n    if result\
    \ < 10 {\n        return result\n    }\n    let remainder = result % base\n  \
    \  let quotient = result / base\n    return String(quotient + remainder) + bases[baseIndex]",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let x = x.toInt()\n    let result\
    \ = String(x)\n    if x > 0 {\n        let remainder = x % base\n        result\
    \ = String(remainder) + bases[baseIndex]\n    }\n    return result", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let x = Int(x) * pow(10, Double(baseIndex))\n\
    \    return String(x)", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseNum = base\n    let x = Int(x)\n    let result = String(x)\n    if\
    \ baseNum < 10 {\n        let digits = result.unicodeScalars.filter { $0.isDigit\
    \ }\n        let digit = digits[Int(baseNum)]\n        result = String(digit)\
    \ + result\n    }\n    return result", "    let baseChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let baseCharsLen = baseChars.count\n    let baseCharsLenMinusOne = baseCharsLen\
    \ - 1\n    let baseCharsLenMinusOneMinusOne = baseCharsLenMinusOne - 1\n    let\
    \ baseCharsLenMinusOneMinusOneMinusOne = baseCharsLenMinusOneMinusOne - 1\n  \
    \  let baseCharsLenMinusOneMinusOneMinusOneMinusOne = baseCharsLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOne = baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n\
    \    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n    let baseCharsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = base", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = String(format: \"%0\" + String((baseIndex + 1) * 3) + \"d\"\
    , x)\n    return String(result) + baseString", "    let bases = Array(1...base).map\
    \ { String($0) }\n    let digits = String(Int(x) % base)\n    return digits.dropLast(bases.count).append(bases.first!)",
  "    let bases = String((base).digits)\n    let digits = String((x).digits)\n  \
    \  var result = \"\"\n    for index in 0..<digits.count {\n        let digit =\
    \ digits[index]\n        let baseIndex = digits.index(before: index)\n       \
    \ let baseDigit = digits[baseIndex]\n        if baseDigit == bases[baseIndex]\
    \ {\n            result += digit\n        } else {\n            result += digit\
    \ + bases[baseIndex]\n        }\n    }\n    return result", "    let digits =\
    \ x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2 = digits_base\
    \ * base\n    let digits_base3 = digits_base2 * base\n    let digits_base4 = digits_base3\
    \ * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6 = digits_base5\
    \ * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8 = digits_base7\
    \ * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10 =\
    \ digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let digits_base12\
    \ = digits_base11 * base\n    let digits_base13 = digits_base12 * base\n    let\
    \ digits_base14 = digits_base13 * base\n    let digits_base15 = digits_base14\
    \ * base\n    let digits_base16 = digits_base15 * base\n    let digits_base17\
    \ = digits_base16 * base\n    let digits_base18 = digits_base17 * base\n    let\
    \ digits_base19 = digits_base18 * base\n    let digits_base20 = digits_base19\
    \ * base\n    let digits_base21 = digits_base20 * base\n    let digits_base22\
    \ = digits_base21 * base\n    let digits_base23 = digits_base22 * base\n    let\
    \ digits_base24 = digits_base23 * base\n    let digits_base25 = digits_base24\
    \ * base\n    let digits_base26 = digits_base25 * base\n    let digits_base27\
    \ = digits_base26 * base\n    let digits_base28 = digits_base27 * base\n    let\
    \ digits_base29 = digits_base28 * base\n    let digits_base30 = digits_base29\
    \ * base\n    let digits_base31 = digits_base30 * base\n    let digits_base32\
    \ = digits_base31 * base\n    let digits_base33 = digits_base32 * base\n    let\
    \ digits_base34 = digits_base33 * base\n    let digits_base35 = digits_base34\
    \ * base\n    let digits_base36 = digits_base35 * base\n    let digits_base37\
    \ = digits_base36 * base\n    let digits_base38 = digits_base37 * base\n    let\
    \ digits_base39 = digits_base38 * base\n    let digits_base40 = digits_base39\
    \ * base\n    let digits_base41 = ", "    let bases = Array(1...base).map { String($0)\
    \ }\n    let digits = x.toInt()\n    let result = \"\"\n    for digit in digits\
    \ {\n        let index = bases.indexOf(String(digit))!\n        result = result\
    \ + bases[index]\n    }\n    return result", "    let baseString = String(base)\n\
    \    var result = \"\"\n    var remainder = x\n    var quotient = 0\n    while\
    \ remainder > 0 {\n        quotient = remainder / base\n        remainder = remainder\
    \ % base\n        result = String(quotient) + result\n    }\n    if remainder\
    \ > 0 {\n        result = String(quotient) + result\n    }\n    return result",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\"]\n    let baseIndex = bases.firstIndex(of: base)!\n    let baseString\
    \ = bases[baseIndex]\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.", "    let baseDigits\
    \ = String(base)\n    let digits = String(Int(x))\n    let digitCount = digits.count\n\
    \    var result = \"\"\n    var remainder: Int = 0\n    for _ in 0..<digitCount\
    \ {\n        let digit = digits[Int(digitCount) - 1]\n        let digitValue =\
    \ Int(digit)\n        remainder = digitValue % base\n        result = digitValue\
    \ - remainder + String(baseDigits[remainder])\n    }\n    return result", "  \
    \  let baseDigits = String(base)\n    var result = \"\"\n    var remainder = x\n\
    \    var digit = 0\n    while remainder > 0 {\n        remainder, remainder =\
    \ remainder / base, digit\n        result = String(digit) + result\n        digit\
    \ += 1\n    }\n    return result", "    let baseDigits = baseDigits(base)\n  \
    \  var digits = String(x)\n    for index in 0..<baseDigits.count {\n        digits\
    \ = digits[baseDigits.startIndex.advanced(by: index)] +\n            digits[baseDigits.startIndex.advanced(by:\
    \ index + 1)]\n    }\n    return digits", "    let digits = x.toString(base).reversed()\n\
    \    return digits.reverse().reduce(\"\") { $0 + String($1) + String($2) }", " \
    \   let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"]\n    let baseIndex = bases.index(base)!\n    let baseString =\
    \ bases[baseIndex]\n    let result = String(format: \"%0*d\", baseString.count,\
    \ x)\n    return String(result)", "    let bases = [\"\", \"K\", \"M\", \"G\"\
    , \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let result = String(Int(x)/Double(base))\n    return String(Int(x)%Double(base))",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    if base < 10 {\n        result = String(base) +\
    \ result\n    }\n    return result", "    let baseString = String(base)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ base", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var remainder = x % base\n    if remainder == 0 {\n        return\
    \ String(Int(x))\n    }\n    while remainder > 0 {\n        result = String(Int(remainder))\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    if base\
    \ < 10 {\n        result = String(Int(base)) + result\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.firstIndex(of: base)!\n    let baseDigits = Int(log10(Double(x)))\
    \ + baseIndex\n    let baseDigit = Double(baseDigits)\n    let baseDouble = Double(baseDigit)\n\
    \    let baseString = String(Int(baseDouble))\n    let baseStringIndex = baseString.index(baseString)\n\
    \    let baseStringDigits = baseString.dropFirst(baseStringIndex)\n    let baseStringDigit\
    \ = Double(baseStringDigits)\n    let baseStringDouble = Double(baseStringDigit)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = Double(baseStringDouble)\n\
    \    let baseStringDouble = Double(baseStringDouble)\n    let baseStringDouble\
    \ = Double(baseStringDouble)\n    let baseStringDouble = ", "    let bases = [\n\
    \        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\
    ,\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"\
    9\",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n       \
    \ \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n   \
    \     \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n\
    \        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\"\
    ,\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"\
    x\",\n        \"y\",\n        \"z\",\n    ]\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesIndexCount = basesIndex.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = basesIndexCount.count\n\
    \    let basesIndexCount = basesIndexCount.count\n    let basesIndexCount = base",
  "    let base10: Int = Int(base)\n    let base16: Int = Int(base10)\n    let base32:\
    \ Int = Int(base16)\n    let base64: Int = Int(base32)\n    let base128: Int =\
    \ Int(base64)\n    let base256: Int = Int(base128)\n    let base512: Int = Int(base256)\n\
    \    let base1024: Int = Int(base512)\n    let base2048: Int = Int(base1024)\n\
    \    let base4096: Int = Int(base2048)\n    let base8192: [Int] = [base4096, base8192]\n\
    \    let base16384: [Int] = [base8192, base16384]\n    let base32768: [Int] =\
    \ [base16384, base32768]\n    let base65536: [Int] = [base32768, base65536]\n\
    \    let base131072: [Int] = [base65536, base131072]\n    let base262144: [Int]\
    \ = [base131072, base262144]\n    let base524288: [Int] = [base262144, base524288]\n\
    \    let base1048576: [Int] = [base524288, base1048576]\n    let base2097152:\
    \ [Int] = [base1048576, base2097152]\n    let base4194304: [Int] = [base2097152,\
    \ base4194304]\n    let base8388608: [Int] = [base4194304, base8388608]\n    let\
    \ base16777216: [Int] = [base8388608, base16777216]\n    let base33554432: [Int]\
    \ = [base16777216, base33554432]\n    let base67108864: [Int] = [base33554432,\
    \ base67108864]\n    let base134217728: [Int] = [base67108864, base134217728]\n\
    \    let base268435456: [Int] = [base134217728, base268435456]\n    let base536870912:\
    \ [Int] = [base268435456, base536870912]\n    let base1073741824: [Int] = [base536870912,\
    \ base1073741824]\n    let base2147483648: [Int] = [base1073741824, base2147483648]\n\
    \    let base4294967296: [Int] = [base2147483648, base4294967296]\n    let base8589934592:\
    \ [Int] = [base4294967296, base8589934592]\n    let base17179869184: [Int] = [base858",
  "    let bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\"\
    ,\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"\
    8\",\n        \"9\",\n        \"10\",\n        \"11\",\n        \"12\",\n    \
    \    \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n        \"17\"\
    ,\n        \"18\",\n        \"19\",\n        \"20\",\n        \"21\",\n      \
    \  \"22\",\n        \"23\",\n        \"24\",\n        \"25\",\n        \"26\"\
    ,\n        \"27\",\n        \"28\",\n        \"29\",\n        \"30\",\n      \
    \  \"31\"\n    ]\n    let basesCount = bases.count\n    let basesString = bases[base]\n\
    \    let basesStringCount = basesString.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let basesStringCount = basesStringCount.count\n\
    \    let basesStringCount = basesStringCount.count\n    let basesStringCount =\
    \ basesStringCount.count\n    let base", "    var result = \"\"\n    var remainder\
    \ = x % base\n    if remainder == 0 {\n        return String(format: \"%0\" +\
    \ String(base) + \"d\", x)\n    }\n    var quotient = x / base\n    while quotient\
    \ > 0 {\n        result = String(format: \"%0\" + String(base) + \"d\", quotient)\
    \ + result\n        quotient = quotient / base\n    }\n    result = String(format:\
    \ \"%0\" + String(base) + \"d\", quotient) + result\n    return String(result.reversed())",
  "    let baseDigits = baseDigits(base)\n    var result = \"\"\n    var remainder\
    \ = x\n    for digit in baseDigits {\n        if remainder < 0 {\n           \
    \ result += \"-\"\n            remainder *= -1\n        }\n        result += String(digit)\n\
    \        remainder /= base\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let baseDigits = baseDigits(base)\n    var result = \"\
    \"\n    var remainder = x\n    for digit in baseDigits {\n        if remainder\
    \ >= base {\n            result += \"0\"\n            remainder -= base\n    \
    \    } else {\n            result += digit\n            remainder -= digit\n \
    \       }\n    }\n    if remainder > 0 {\n        result += \"0\"\n    }\n   \
    \ return result", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = base\n    while quotient > 0 {\n        remainder = remainder % quotient\n\
    \        result = String(quotient) + result\n        quotient = quotient / base\n\
    \    }\n    if remainder > 0 {\n        result = String(remainder) + result\n\
    \    }\n    return result", "    let baseChar = String(base)\n    var result =\
    \ \"\"\n    var remainder = x\n    var quotient = 0\n    while remainder > 0 {\n\
    \        quotient = quotient * base + remainder % base\n        remainder = remainder\
    \ / base\n    }\n    if quotient > 0 {\n        result = String(quotient) + baseChar\n\
    \    }\n    return result", "    let baseDigits = String(base)\n    let digits\
    \ = String(Int(x))\n    var result = \"\"\n    for i in 0..<digits.count {\n \
    \       let digit = digits[i]\n        let baseDigit = baseDigits[i]\n       \
    \ if digit == baseDigit {\n            result += digit\n        } else {\n   \
    \         result += digit + baseDigit\n        }\n    }\n    return result", " \
    \   let bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    ]\n    let baseIndex = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)\n    let baseIntString = String(baseInt)\n\
    \    let baseIntString = baseIntString.addingPercentEncoding(withAllowedCharacters:\
    \ CharacterSet.urlQueryAllowed)\n    let baseStringWithoutBase = baseString.replacingOccurrences(of:\
    \ baseString, with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ baseIntString, with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%0\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%1\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%2\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%3\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%4\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%5\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%6\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%7\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%8\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%9\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%a\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%b\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%c\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%d\", with: \"\")\n    let baseStringWithoutBase = baseStringWithoutBase.replacingOccurrences(of:\
    \ \"%e\", with: \"\")\n    let baseStringWithout", "    var result = \"\"\n  \
    \  var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let baseChar = String(base)\n    var result = \"\"\n \
    \   var remainder = x\n    while remainder > 0 {\n        let remainderChar =\
    \ String(remainder)\n        if let index = remainderChar.index(of: baseChar)\
    \ {\n            let newBase = Int(remainderChar[..(index)]) ?? 0\n          \
    \  let newRemainder = Int(remainderChar[index...])\n            result = String(newRemainder)\
    \ + result\n            remainder = newRemainder\n        } else {\n         \
    \   result = remainderChar + result\n            remainder = 0\n        }\n  \
    \  }\n    return result", "    let bases = [\"\", \"10\", \"100\", \"1000\", \"\
    10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"\
    , \"10000000000\", \"100000000000\"]\n    let baseIndex = bases.index(base)!\n\
    \    let result = String(Int(x) / Int(bases[baseIndex]))\n    if Int(result) ==\
    \ 0 {\n        return \"\"\n    }\n    return String(result)", "    let bases\
    \ = Array(1...base).map { String($0) }\n    let digits = String(x.toInt())\n \
    \   return digits.split(separator: bases).joined(separator: \"\")", "    let bases\
    \ = Array(1...base).map(String.init)\n    let digits = x.toInt()\n    let result\
    \ = \"\"\n    for digit in digits {\n        let index = bases.firstIndex(of:\
    \ digit)!\n        result += bases[index]\n    }\n    return result", "    let\
    \ baseDigits = baseDigits(base)\n    var result = \"\"\n    var remainder = x\n\
    \    for digit in baseDigits {\n        if remainder >= base {\n            result\
    \ += \"0\"\n            remainder -= base\n        } else {\n            result\
    \ += digit\n            remainder -= base\n        }\n    }\n    if remainder\
    \ > 0 {\n        result += \"0\"\n    }\n    return result", "    let baseString\
    \ = String(base)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    var result = \"\
    \"\n    if baseInt < baseDouble {\n        let remainder = baseDouble - baseInt\n\
    \        let quotient = remainder / baseDouble\n        let remainderInt = remainder\
    \ % baseDouble\n        result = String(quotient) + String(remainderInt)\n   \
    \ } else {\n        let quotient = baseInt / baseDouble\n        let remainderInt\
    \ = baseInt % baseDouble\n        result = String(quotient) + String(remainderInt)\n\
    \    }\n    return String(result)", "    let bases = [\"\", \"K\", \"M\", \"G\"\
    , \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let baseStringIndex = baseString.characters.count\n\
    \    let baseStringLength = baseString.characters.count\n    let baseStringLengthDouble\
    \ = baseStringLength * 2\n    let baseStringLengthHalf = baseStringLength / 2\n\
    \    let baseStringLengthQuarter = baseStringLength / 4\n    let baseStringLengthDoubleQuarter\
    \ = baseStringLengthDouble / 4\n    let baseStringLengthHalfQuarter = baseStringLengthHalf\
    \ / 4\n    let baseStringLengthQuarterDouble = baseStringLengthQuarter / 4\n \
    \   let baseStringLengthHalfDouble = baseStringLengthHalf / 2\n    let baseStringLengthDoubleHalf\
    \ = baseStringLengthDouble / 2\n    let baseStringLengthHalfHalf = baseStringLengthHalf\
    \ / 2\n    let baseStringLengthDoubleHalfHalf = baseStringLengthDoubleHalf / 2\n\
    \    let baseStringLengthHalfHalfHalf = baseStringLengthHalfHalf / 2\n    let\
    \ baseStringLengthHalfHalfHalfHalf = baseStringLengthHalfHalfHalf / 2\n    let\
    \ baseStringLengthHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalf / 2\n\
    \    let baseStringLengthHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalf = baseStringLengthHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n    let baseStringLengthHalfHalfHalf", "    let baseNum = pow(base, Int(log10(x)))\
    \ + 1\n    let result = String(x/baseNum)\n    if x < baseNum {\n        return\
    \ result + String(baseNum)\n    } else {\n        return result\n    }", "   \
    \ let baseDigits = baseDigits(base)\n    let digits = digits(x)\n    var result\
    \ = \"\"\n    for digit in digits {\n        let index = baseDigits.index(of:\
    \ digit)\n        if index == nil {\n            result += digit\n        } else\
    \ {\n            result += String(digits[index!])\n        }\n    }\n    return\
    \ result", "    let baseDigits = base.digits\n    let basePower = base.powers\n\
    \    var result = \"\"\n    var remainder = x\n    var power = 1\n    while remainder\
    \ > 0 {\n        let digit = remainder % base\n        remainder = (remainder\
    \ - digit) / base\n        result = String(digit) + result\n        power = basePower[digit]\n\
    \    }\n    if power > 0 {\n        result = String(power) + result\n    }\n \
    \   if baseDigits > 0 {\n        result = String(baseDigits.last!) + result\n\
    \    }\n    return result", "    let digits = x.toInt()\n    let baseDigits =\
    \ base.toInt()\n    var result = \"\"\n    var carry = 0\n    for digit in digits\
    \ {\n        let digitValue = digit.toInt()\n        let digitBase = digitValue\
    \ / baseDigits\n        let digitCarry = digitValue % baseDigits\n        let\
    \ digitResult = digitBase + digitCarry + carry\n        carry = digitResult /\
    \ baseDigits\n        digitResult = digitResult % baseDigits\n        result =\
    \ digitResult.toString() + result\n    }\n    if carry > 0 {\n        result =\
    \ carry.toString() + result\n    }\n    return result", "    let bases = [\n \
    \       \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\
    ,\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"\
    9\",\n        \"10\",\n        \"11\",\n        \"12\",\n        \"13\",\n   \
    \     \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n        \"18\"\
    ,\n        \"19\",\n        \"20\",\n        \"21\",\n        \"22\",\n      \
    \  \"23\",\n        \"24\",\n        \"25\",\n        \"26\",\n        \"27\"\
    ,\n        \"28\",\n        \"29\",\n        \"30\",\n        \"31\"\n    ]\n\
    \    if base < 0 || base > len(bases) {\n        throw ArgumentError(\"base must\
    \ be between 0 and \\(bases.count-1)\")\n    }\n    let base_index = bases.index(bases.startIndex,\
    \ offsetBy: base)\n    return String(x.truncatingRemainder(dividingBy: base_index))",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(x)\n    if result.characters.count\
    \ < baseIndex {\n        return \"\"\n    }\n    if result.characters.count >\
    \ baseIndex {\n        let remainder = result.characters.count - baseIndex\n \
    \       let remainderString = String(repeating: \"0\", count: remainder)\n   \
    \     return result.substringToIndex(baseIndex) + remainderString\n    }\n   \
    \ return result", "    let bases = Array(1...base).map { String($0) }\n    let\
    \ digits = x.toInt()\n    let result = \"\"\n    for digit in digits {\n     \
    \   let index = bases.indexOf(digit)!\n        result = result + bases[index]\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let bases = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\",\n        \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\",\n        \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\n        \"22\", \"23\"\
    , \"24\", \"25\", \"26\", \"27\", \"28\",\n        \"29\", \"30\", \"31\"\n  \
    \  ]\n    let baseIndex = bases.index(base)!\n    let result = String(Int(x) /\
    \ Int(bases[baseIndex]))\n    if Int(result) == 0 {\n        return \"\"\n   \
    \ }\n    return String(result)", "    let baseDigits = base.digits\n    var result:\
    \ String = \"\"\n    var remainder: Int = 0\n    var digit: Int = 0\n    while\
    \ x >= base {\n        remainder = x % base\n        digit = baseDigits[remainder]\n\
    \        result = String(digit) + result\n        x = x / base\n    }\n    if\
    \ x != 0 {\n        remainder = x % base\n        digit = baseDigits[remainder]\n\
    \        result = String(digit) + result\n    }\n    return result", "    let\
    \ digits = x.toInt()\n    let digits_len = digits.count\n    let digits_pow =\
    \ pow(base, digits_len)\n    var digits_pow2 = digits_pow\n    var digits_pow3\
    \ = digits_pow2\n    var digits_pow4 = digits_pow3\n    var digits_pow5 = digits_pow4\n\
    \    var digits_pow6 = digits_pow5\n    var digits_pow7 = digits_pow6\n    var\
    \ digits_pow8 = digits_pow7\n    var digits_pow9 = digits_pow8\n    var digits_pow10\
    \ = digits_pow9\n    var digits_pow11 = digits_pow10\n    var digits_pow12 = digits_pow11\n\
    \    var digits_pow13 = digits_pow12\n    var digits_pow14 = digits_pow13\n  \
    \  var digits_pow15 = digits_pow14\n    var digits_pow16 = digits_pow15\n    var\
    \ digits_pow17 = digits_pow16\n    var digits_pow18 = digits_pow17\n    var digits_pow19\
    \ = digits_pow18\n    var digits_pow20 = digits_pow19\n    var digits_pow21 =\
    \ digits_pow20\n    var digits_pow22 = digits_pow21\n    var digits_pow23 = digits_pow22\n\
    \    var digits_pow24 = digits_pow23\n    var digits_pow25 = digits_pow24\n  \
    \  var digits_pow26 = digits_pow25\n    var digits_pow27 = digits_pow26\n    var\
    \ digits_pow28 = digits_pow27\n    var digits_pow29 = digits_pow28\n    var digits_pow30\
    \ = digits_pow29\n    var digits_pow31 = digits_pow30\n    var digits_pow32 =\
    \ digits_pow31\n    var digits_pow33 = digits_pow32\n    var digits_pow34 = digits_pow33\n\
    \    var digits_pow35 = digits_pow34\n    var digits_pow36 = digits_pow35\n  \
    \  var digits_pow37 = digits_pow36\n    var digits_pow38 = digits_pow37\n    var\
    \ digits_pow39 = digits_pow38\n    var digits_pow40 = digits_pow39\n    var digits_pow41\
    \ = digits_pow40\n    var digits_pow42 = digits_pow41\n    var digits_pow43 =\
    \ digits_pow42\n    var digits_pow44 = digits_pow43\n    var digits_pow45 = digits_pow44\n\
    \    var digits_pow46 = digits_pow45\n    var digits_", "    let bases = [\"\"\
    , \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let result = String(format: \"%@%@\"\
    , baseString, x)\n    return result", "    let bases = [\n        \"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n        \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n        \"K\", \"L\"\
    , \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n        \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\"\n    ]\n    let basesIndex = [\n        0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n    \
    \    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n        30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n        50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69,\n        70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89,\n        90, 91, 92, 93, 94, 95, 96, 97, 98, 99\n\
    \    ]\n    let basesIndexReverse = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n\
    \        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29,\n        30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n     \
    \   40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n        50, 51, 52, 53, 54, 55, 56,\
    \ 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n        70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89,\n        90, 91, 92, 93, 94, 95, 96, 97, 98, 99\n    ].reverse()\n    let\
    \ basesIndexReverse = basesIndex.reverse()\n    let basesIndexReverse = basesIndex.reverse()\n\
    \    let basesIndexReverse = basesIndex.reverse()\n    let basesIndexReverse =\
    \ basesIndex.reverse()\n    let basesIndexReverse = basesIndex.reverse()\n   \
    \ let basesIndexReverse = basesIndex.reverse()\n    let basesIndexReverse = basesIndex.reverse()\n\
    \    let basesIndexReverse = basesIndex.reverse()\n    let basesIndexReverse =\
    \ basesIndex.reverse()\n    let basesIndexReverse", "    let bases = Array(1...base).map\
    \ { String($0) }\n    let digits = x.toInt()\n    let result = \"\"\n    for digit\
    \ in digits {\n        let index = bases.firstIndex(of: String(digit))!\n    \
    \    result = result + bases[index]\n    }\n    return result", "    let digits\
    \ = String(Int(x))\n    let digitCount = digits.count\n    var newDigits = \"\"\
    \n    var carry = 0\n    for i in 0..<digitCount {\n        let digit = Int(digits[i])\
    \ - Int(base) + carry\n        carry = digit / Int(base)\n        newDigits =\
    \ String(digit) + newDigits\n    }\n    if carry > 0 {\n        newDigits = String(Int(carry)\
    \ + Int(base)) + newDigits\n    }\n    return newDigits", "    let bases = [\"\
    \", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n    if Int(result)\
    \ == 0 {\n        return \"\"\n    }\n    if Int(result) < 10 {\n        return\
    \ String(Int(result))\n    }\n    if Int(result) < 100 {\n        return String(Int(result),\
    \ bases[baseIndex])\n    }\n    return String(Int(result), bases[baseIndex], bases[baseIndex\
    \ + 1])", "    var result = \"\"\n    var remainder = x\n    var quotient = base\n\
    \    while quotient > 0 {\n        remainder = remainder % quotient\n        result\
    \ = String(quotient) + result\n        quotient = quotient / base\n    }\n   \
    \ if remainder > 0 {\n        result = String(remainder) + result\n    }\n   \
    \ return result", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = 0\n    while remainder > 0 {\n        quotient = quotient * base + remainder\
    \ % base\n        remainder = remainder / base\n    }\n    if quotient > 0 {\n\
    \        result = String(quotient)\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n    }\n    return\
    \ String(base)", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)"]
stop_tokens:
- "\n}"
