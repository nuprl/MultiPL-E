language: swift
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result += c.lowercased()\n  \
    \      } else {\n            result += c\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi4zps28.swift:20:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else if lower != nil {\n      \
    \          result += lower!\n            } else {\n                result += char\n\
    \            }\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxcto9tyi.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpxcto9tyi.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpxcto9tyi.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmpxcto9tyi.swift:22:29: warning: comparing non-optional value of type 'String'\
    \ to 'nil' always returns true\n            } else if lower != nil {\n       \
    \               ~~~~~ ^  ~~~\n/tmp/tmpxcto9tyi.swift:23:32: error: cannot force\
    \ unwrap value of non-optional type 'String'\n                result += lower!\n\
    \                          ~~~~~^\n                               \n/tmp/tmpxcto9tyi.swift:25:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpxcto9tyi.swift:28:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"B\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfyy8bm7w.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            switch c.caseInsensitiveCompare(\"A\") {\n            case .orderedSame,\
    \ .orderedAscending:\n                result += \"B\"\n            case .orderedDescending:\n\
    \                result += \"a\"\n            }\n        } else {\n          \
    \  result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbr4x_a47.swift:21:22: error: value of type 'Character' has no member\
    \ 'caseInsensitiveCompare'\n            switch c.caseInsensitiveCompare(\"A\"\
    ) {\n                   ~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr4x_a47.swift:28:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpe6cpa1yx.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpe6cpa1yx.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpe6cpa1yx.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpv7qe2zqv.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpv7qe2zqv.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpv7qe2zqv.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpe6cpa1yx.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpe6cpa1yx.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpe6cpa1yx.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1).capitalized }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplx05iyzg.swift:15:54: error: value of type 'String' has no member\
    \ 'capitalized'\n    return s.characters.reduce(\"\") { $0 + String($1).capitalized\
    \ }\n                                          ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"g\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpn5mmfwgc.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpn5mmfwgc.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpn5mmfwgc.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpn5mmfwgc.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpn5mmfwgc.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpn5mmfwgc.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpn5mmfwgc.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpn5mmfwgc.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpn5mmfwgc.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpn5mmfwgc.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpn5mmfwgc.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpn5mmfwgc.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpn5mmfwgc.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpn5mmfwgc.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpn5mmfwgc.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpn5mmfwgc.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      if isLetter {\n            result += Character(char).uppercaseString\n\
    \        } else {\n            result += Character(char)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1dmj09cq.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1dmj09cq.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmp1dmj09cq.swift:19:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            result += Character(char).uppercaseString\n           \
    \                     ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp1dmj09cq.swift:19:39: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n            result += Character(char).uppercaseString\n \
    \                     ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1dmj09cq.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += Character(char)\n                      ^\n/tmp/tmp1dmj09cq.swift:21:33:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          result += Character(char)\n                                ^\n    \
    \                            extendedGraphemeClusterLiteral: \n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\": result = \"A\" + result\n\
    \        case \"b\": result = \"B\" + result\n        case \"c\": result = \"\
    C\" + result\n        case \"d\": result = \"D\" + result\n        case \"e\"\
    : result = \"E\" + result\n        case \"f\": result = \"F\" + result\n     \
    \   case \"g\": result = \"G\" + result\n        case \"h\": result = \"H\" +\
    \ result\n        case \"i\": result = \"I\" + result\n        case \"j\": result\
    \ = \"J\" + result\n        case \"k\": result = \"K\" + result\n        case\
    \ \"l\": result = \"L\" + result\n        case \"m\": result = \"M\" + result\n\
    \        case \"n\": result = \"N\" + result\n        case \"o\": result = \"\
    O\" + result\n        case \"p\": result = \"P\" + result\n        case \"q\"\
    : result = \"Q\" + result\n        case \"r\": result = \"R\" + result\n     \
    \   case \"s\": result = \"S\" + result\n        case \"t\": result = \"T\" +\
    \ result\n        case \"u\": result = \"U\" + result\n        case \"v\": result\
    \ = \"V\" + result\n        case \"w\": result = \"W\" + result\n        case\
    \ \"x\": result = \"X\" + result\n        case \"y\": result = \"Y\" + result\n\
    \        case \"z\": result = \"Z\" + result\n        default:\n            result\
    \ = char + result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiey3kojr.swift:45:22: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result = char + result\n   \
    \                  ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      let isUpper = Character(char).isUpper\n        let isLower = Character(char).isLower\n\
    \        \n        if isLetter {\n            if isUpper {\n                result\
    \ += Character(char).uppercaseString\n            } else {\n                result\
    \ += Character(char).lowercaseString\n            }\n        } else {\n      \
    \      result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpqvs5ds44.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqvs5ds44.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmpqvs5ds44.swift:18:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let isUpper = Character(char).isUpper\n                   \
    \             ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpqvs5ds44.swift:18:39: error: value of type 'Character' has no member\
    \ 'isUpper'\n        let isUpper = Character(char).isUpper\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpqvs5ds44.swift:19:33: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n        let isLower = Character(char).isLower\n\
    \                                ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpqvs5ds44.swift:19:39: error: value of type 'Character' has no member\
    \ 'isLower'\n        let isLower = Character(char).isLower\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpqvs5ds44.swift:23:37: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n                result += Character(char).uppercaseString\n\
    \                                    ^\n                                    extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpqvs5ds44.swift:23:43: err"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"B\"; break\n            case \"b\": result\
    \ += \"a\"; break\n            case \"c\": result += \"D\"; break\n          \
    \  case \"d\": result += \"c\"; break\n            case \"e\": result += \"f\"\
    ; break\n            case \"f\": result += \"e\"; break\n            case \"g\"\
    : result += \"H\"; break\n            case \"h\": result += \"g\"; break\n   \
    \         case \"i\": result += \"J\"; break\n            case \"j\": result +=\
    \ \"i\"; break\n            case \"k\": result += \"L\"; break\n            case\
    \ \"l\": result += \"k\"; break\n            case \"m\": result += \"N\"; break\n\
    \            case \"n\": result += \"m\"; break\n            case \"o\": result\
    \ += \"P\"; break\n            case \"p\": result += \"o\"; break\n          \
    \  case \"q\": result += \"R\"; break\n            case \"r\": result += \"q\"\
    ; break\n            case \"s\": result += \"T\"; break\n            case \"t\"\
    : result += \"s\"; break\n            case \"u\": result += \"V\"; break\n   \
    \         case \"v\": result += \"u\"; break\n            case \"w\": result +=\
    \ \"X\"; break\n            case \"x\": result += \"w\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"z\"; break\n\
    \            default: result += \"\\(char)\"; break\n            }\n        }\
    \ else {\n            result += char\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpcnu_k_ng.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpcnu_k_ng.swift:48:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"_\":\n        case \"$\":\n    \
    \    case \"%\":\n        case \"@\":\n        case \"#\":\n        case \"+\"\
    :\n        case \"-\":\n        case \"/\":\n        case \"*\":\n        case\
    \ \"=\":\n        case \"<\":\n        case \">\":\n        case \"?\":\n    \
    \    case \"!\":\n        case \"&\":\n        case \"|\":\n        case \"(\"\
    :\n        case \")\":\n        case \"{\":\n        case \"}\":\n        case\
    \ \"[\":\n        case \"]\":\n        case \"\\\\\":\n        case \"^\":\n \
    \       case \"~\":\n        case \"`\":\n        case \"!\":\n        case \"\
    <\":\n        case \"=\":\n        case \"+\":\n        case \"*\":\n        case\
    \ \"/\":\n        case \"?\":\n        case \"@\":\n        case \"#\":\n    \
    \    case \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\"\
    :\n        case \"|\":\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_jlcor0j.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp_jlcor0j.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_jlcor0j.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvheiih4y.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpvheiih4y.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpvheiih4y.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else if lower != nil {\n      \
    \          result += lower!\n            } else {\n                result += char\n\
    \            }\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxcto9tyi.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpxcto9tyi.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpxcto9tyi.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmpxcto9tyi.swift:22:29: warning: comparing non-optional value of type 'String'\
    \ to 'nil' always returns true\n            } else if lower != nil {\n       \
    \               ~~~~~ ^  ~~~\n/tmp/tmpxcto9tyi.swift:23:32: error: cannot force\
    \ unwrap value of non-optional type 'String'\n                result += lower!\n\
    \                          ~~~~~^\n                               \n/tmp/tmpxcto9tyi.swift:25:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpxcto9tyi.swift:28:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo49lph7_.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpo49lph7_.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpo49lph7_.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpo49lph7_.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpo49lph7_.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpo49lph7_.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpo49lph7_.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpo49lph7_.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpo49lph7_.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpo49lph7_.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpo49lph7_.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpo49lph7_.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpo49lph7_.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpo49lph7_.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpo49lph7_.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpo49lph7_.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"g\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6vno7016.swift:18:25: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            switch char.lowercaseString {\n             \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp6vno7016.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmp6vno7016.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            let upper =\
    \ char.uppercased()\n            let lower = char.lowercased()\n            if\
    \ upper != nil {\n                result += upper!\n            } else if lower\
    \ != nil {\n                result += lower!\n            } else {\n         \
    \       result += char\n            }\n        } else {\n            result +=\
    \ char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3i3v3ddb.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3i3v3ddb.swift:20:22:\
    \ warning: comparing non-optional value of type 'String' to 'nil' always returns\
    \ true\n            if upper != nil {\n               ~~~~~ ^  ~~~\n/tmp/tmp3i3v3ddb.swift:21:32:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \     result += upper!\n                          ~~~~~^\n                   \
    \            \n/tmp/tmp3i3v3ddb.swift:22:29: warning: comparing non-optional value\
    \ of type 'String' to 'nil' always returns true\n            } else if lower !=\
    \ nil {\n                      ~~~~~ ^  ~~~\n/tmp/tmp3i3v3ddb.swift:23:32: error:\
    \ cannot force unwrap value of non-optional type 'String'\n                result\
    \ += lower!\n                          ~~~~~^\n                              \
    \ \n/tmp/tmp3i3v3ddb.swift:25:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n/tmp/tmp3i3v3ddb.swift:28:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpe6cpa1yx.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpe6cpa1yx.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpe6cpa1yx.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if let char = char.lowercaseString {\n     \
    \       result = char + result\n        } else if let char = char.uppercaseString\
    \ {\n            result = result + char\n        } else {\n            result\
    \ = result + char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpu043knpz.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpu043knpz.swift:17:28:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n        if\
    \ let char = char.lowercaseString {\n                      ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpu043knpz.swift:19:35: error: value of type 'Character' has no member 'uppercaseString'\n\
    \        } else if let char = char.uppercaseString {\n                       \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpu043knpz.swift:22:31: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ = result + char\n                              ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"A\":\n                result += \"A\"\n            case \"\
    B\":\n                result += \"b\"\n            case \"C\":\n             \
    \   result += \"C\"\n            case \"D\":\n                result += \"d\"\n\
    \            case \"E\":\n                result += \"e\"\n            case \"\
    F\":\n                result += \"f\"\n            case \"G\":\n             \
    \   result += \"g\"\n            case \"H\":\n                result += \"h\"\n\
    \            case \"I\":\n                result += \"i\"\n            case \"\
    J\":\n                result += \"j\"\n            case \"K\":\n             \
    \   result += \"k\"\n            case \"L\":\n                result += \"l\"\n\
    \            case \"M\":\n                result += \"m\"\n            case \"\
    N\":\n                result += \"n\"\n            case \"O\":\n             \
    \   result += \"o\"\n            case \"P\":\n                result += \"p\"\n\
    \            case \"Q\":\n                result += \"q\"\n            case \"\
    R\":\n                result += \"r\"\n            case \"S\":\n             \
    \   result += \"s\"\n            case \"T\":\n                result += \"t\"\n\
    \            case \"U\":\n                result += \"u\"\n            case \"\
    V\":\n                result += \"v\"\n            case \"W\":\n             \
    \   result += \"w\"\n            case \"X\":\n                result += \"x\"\n\
    \            case \"Y\":\n                result += \"y\"\n            case \"\
    Z\":\n                result += \"z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_0eoa24n.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmp_0eoa24n.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += letter\n                          ^\n/tmp/tmp_0eoa24n.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            if char.lowercased()\
    \ == char {\n                result += char.uppercased()\n            } else {\n\
    \                result += char.lowercased()\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3odc29zi.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp3odc29zi.swift:18:34: error: binary operator '=='\
    \ cannot be applied to operands of type 'String' and 'Character'\n           \
    \ if char.lowercased() == char {\n               ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp3odc29zi.swift:18:34:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char.lowercased() ==\
    \ char {\n                                 ^\n/tmp/tmp3odc29zi.swift:24:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s.characters {\n        if\
    \ char.isLetter {\n            switch char.caseInsensitiveCompare(\"A\") {\n \
    \           case .orderedAscending:\n                result += \"B\"\n       \
    \     case .orderedSame:\n                result += char\n            case .orderedDescending:\n\
    \                result += \"a\"\n            }\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplk3ihdkp.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplk3ihdkp.swift:21:25:\
    \ error: value of type 'Character' has no member 'caseInsensitiveCompare'\n  \
    \          switch char.caseInsensitiveCompare(\"A\") {\n                   ~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplk3ihdkp.swift:25:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmplk3ihdkp.swift:30:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += String(char.lowercased())\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprgrnf_k6.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmprgrnf_k6.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s.characters {\n        if c.isLetter {\n            result += c.lowercased()\n\
    \        } else {\n            result += c\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmzhtqutd.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmzhtqutd.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"A\"; break\n            case \"b\": result\
    \ += \"B\"; break\n            case \"c\": result += \"C\"; break\n          \
    \  case \"d\": result += \"D\"; break\n            case \"e\": result += \"E\"\
    ; break\n            case \"f\": result += \"F\"; break\n            case \"g\"\
    : result += \"G\"; break\n            case \"h\": result += \"H\"; break\n   \
    \         case \"i\": result += \"I\"; break\n            case \"j\": result +=\
    \ \"J\"; break\n            case \"k\": result += \"K\"; break\n            case\
    \ \"l\": result += \"L\"; break\n            case \"m\": result += \"M\"; break\n\
    \            case \"n\": result += \"N\"; break\n            case \"o\": result\
    \ += \"O\"; break\n            case \"p\": result += \"P\"; break\n          \
    \  case \"q\": result += \"Q\"; break\n            case \"r\": result += \"R\"\
    ; break\n            case \"s\": result += \"S\"; break\n            case \"t\"\
    : result += \"T\"; break\n            case \"u\": result += \"U\"; break\n   \
    \         case \"v\": result += \"V\"; break\n            case \"w\": result +=\
    \ \"W\"; break\n            case \"x\": result += \"X\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"Z\"; break\n\
    \            default: result += char\n            }\n        } else {\n      \
    \      result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpcnidf8hi.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpcnidf8hi.swift:45:32: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            default:\
    \ result += char\n                               ^\n/tmp/tmpcnidf8hi.swift:48:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1).capitalized }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplx05iyzg.swift:15:54: error: value of type 'String' has no member\
    \ 'capitalized'\n    return s.characters.reduce(\"\") { $0 + String($1).capitalized\
    \ }\n                                          ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"a\":\n                result += \"A\"\n            case \"\
    b\":\n                result += \"b\"\n            case \"c\":\n             \
    \   result += \"C\"\n            case \"d\":\n                result += \"D\"\n\
    \            case \"e\":\n                result += \"E\"\n            case \"\
    f\":\n                result += \"F\"\n            case \"g\":\n             \
    \   result += \"G\"\n            case \"h\":\n                result += \"H\"\n\
    \            case \"i\":\n                result += \"I\"\n            case \"\
    j\":\n                result += \"J\"\n            case \"k\":\n             \
    \   result += \"K\"\n            case \"l\":\n                result += \"L\"\n\
    \            case \"m\":\n                result += \"M\"\n            case \"\
    n\":\n                result += \"N\"\n            case \"o\":\n             \
    \   result += \"O\"\n            case \"p\":\n                result += \"P\"\n\
    \            case \"q\":\n                result += \"Q\"\n            case \"\
    r\":\n                result += \"R\"\n            case \"s\":\n             \
    \   result += \"S\"\n            case \"t\":\n                result += \"T\"\n\
    \            case \"u\":\n                result += \"U\"\n            case \"\
    v\":\n                result += \"V\"\n            case \"w\":\n             \
    \   result += \"W\"\n            case \"x\":\n                result += \"X\"\n\
    \            case \"y\":\n                result += \"Y\"\n            case \"\
    z\":\n                result += \"Z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpsnhos7vb.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmpsnhos7vb.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += letter\n                          ^\n/tmp/tmpsnhos7vb.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if let char = char.lowercaseString {\n     \
    \       result = char + result\n        } else if let char = char.uppercaseString\
    \ {\n            result = result + char\n        } else {\n            result\
    \ = char + result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpeksf1dpb.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeksf1dpb.swift:17:28:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n        if\
    \ let char = char.lowercaseString {\n                      ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpeksf1dpb.swift:19:35: error: value of type 'Character' has no member 'uppercaseString'\n\
    \        } else if let char = char.uppercaseString {\n                       \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpeksf1dpb.swift:22:22: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ = char + result\n                     ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = String(char).uppercased()\n\
    \            let lower = String(char).lowercased()\n            if upper != lower\
    \ {\n                result += upper\n            } else {\n                result\
    \ += lower\n            }\n        } else {\n            result += char\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3txzhaqj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp3txzhaqj.swift:26:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"_\":\n        case \"$\":\n    \
    \    case \"@\":\n        case \"#\":\n        case \"%\":\n        case \"^\"\
    :\n        case \"&\":\n        case \"*\":\n        case \"(\":\n        case\
    \ \")\":\n        case \"+\":\n        case \"-\":\n        case \"=\":\n    \
    \    case \"{\":\n        case \"}\":\n        case \"[\":\n        case \"]\"\
    :\n        case \"\\\\\":\n        case \"|\":\n        case \"<\":\n        case\
    \ \">\":\n        case \"?\":\n        case \"/\":\n        case \"\\\"\":\n \
    \       case \"'\":\n        case \"~\":\n        case \"`\":\n        case \"\
    \xA1\":\n        case \"\xBF\":\n        case \"\xAC\":\n        case \"\xBD\"\
    :\n        case \"\xBC\":\n        case \"\xAB\":\n        case \"\xBB\":\n  \
    \      case \"\xB1\":\n        case \"\xB2\":\n        case \"\xB3\":\n      \
    \  case \"\xB4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpr49in6me.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpr49in6me.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpr49in6me.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for c in s.characters {\n        if let\
    \ _ = c.isUppercase {\n            result = c.lowercaseString + result\n     \
    \   } else {\n            result = c.uppercaseString + result\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7gc794wl.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7gc794wl.swift:21:24:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result = c.lowercaseString + result\n                     ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp7gc794wl.swift:23:24: error: value of type 'Character' has no member 'uppercaseString'\n\
    \            result = c.uppercaseString + result\n                     ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp7gc794wl.swift:20:12: error: initializer for conditional binding must\
    \ have Optional type, not 'Bool'\n        if let _ = c.isUppercase {\n       \
    \    ^       ~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpy8acijdd.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpy8acijdd.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpy8acijdd.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmpy8acijdd.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmpy8acijdd.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmphdsyh9ja.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphdsyh9ja.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmphdsyh9ja.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmphdsyh9ja.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s.characters {\n        if letter.isLetter {\n            switch letter\
    \ {\n            case \"A\":\n                result += \"a\"\n            case\
    \ \"B\":\n                result += \"b\"\n            case \"C\":\n         \
    \       result += \"c\"\n            case \"D\":\n                result += \"\
    d\"\n            case \"E\":\n                result += \"e\"\n            case\
    \ \"F\":\n                result += \"f\"\n            case \"G\":\n         \
    \       result += \"g\"\n            case \"H\":\n                result += \"\
    h\"\n            case \"I\":\n                result += \"i\"\n            case\
    \ \"J\":\n                result += \"j\"\n            case \"K\":\n         \
    \       result += \"k\"\n            case \"L\":\n                result += \"\
    l\"\n            case \"M\":\n                result += \"m\"\n            case\
    \ \"N\":\n                result += \"n\"\n            case \"O\":\n         \
    \       result += \"o\"\n            case \"P\":\n                result += \"\
    p\"\n            case \"Q\":\n                result += \"q\"\n            case\
    \ \"R\":\n                result += \"r\"\n            case \"S\":\n         \
    \       result += \"s\"\n            case \"T\":\n                result += \"\
    t\"\n            case \"U\":\n                result += \"u\"\n            case\
    \ \"V\":\n                result += \"v\"\n            case \"W\":\n         \
    \       result += \"w\"\n            case \"X\":\n                result += \"\
    x\"\n            case \"Y\":\n                result += \"y\"\n            case\
    \ \"Z\":\n                result += \"z\"\n            default:\n            \
    \    result += letter\n            }\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiaw43z6s.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpiaw43z6s.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += letter\n                          ^\n/tmp/tmpiaw43z6s.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            result += String(char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    if\
    \ result.characters.count == 0 {\n        result = s.lowercased()\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmptte87jrp.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptte87jrp.swift:23:15:\
    \ error: 'characters' is unavailable: Please use String directly\n    if result.characters.count\
    \ == 0 {\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            if char.lowercased()\
    \ == char {\n                result += char.uppercased()\n            } else {\n\
    \                result += char.lowercased()\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3odc29zi.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp3odc29zi.swift:18:34: error: binary operator '=='\
    \ cannot be applied to operands of type 'String' and 'Character'\n           \
    \ if char.lowercased() == char {\n               ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp3odc29zi.swift:18:34:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char.lowercased() ==\
    \ char {\n                                 ^\n/tmp/tmp3odc29zi.swift:24:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo49lph7_.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpo49lph7_.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpo49lph7_.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpo49lph7_.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpo49lph7_.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpo49lph7_.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpo49lph7_.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpo49lph7_.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpo49lph7_.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpo49lph7_.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpo49lph7_.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpo49lph7_.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpo49lph7_.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpo49lph7_.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpo49lph7_.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpo49lph7_.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"d\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"f\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"m\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"p\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplo1ip9x7.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s.characters {\n        switch letter {\n        case let c where\
    \ c.isUpper:\n            result += \"\\(c)\"\n        case let c where c.isLower:\n\
    \            result += \"\\(c)\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rwaq2qh.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4rwaq2qh.swift:18:28:\
    \ error: value of type 'Character' has no member 'isUpper'\n        case let c\
    \ where c.isUpper:\n                         ~ ^~~~~~~\n/tmp/tmp4rwaq2qh.swift:20:28:\
    \ error: value of type 'Character' has no member 'isLower'\n        case let c\
    \ where c.isLower:\n                         ~ ^~~~~~~\n/tmp/tmp4rwaq2qh.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char.caseInsensitiveCompare(s.startIndex,\
    \ to: s.endIndex) {\n            case .orderedSame, .orderedAscending:\n     \
    \           result += char.lowercased()\n            case .orderedDescending:\n\
    \                result += char.uppercased()\n            default:\n         \
    \       result += char\n            }\n        } else {\n            result +=\
    \ char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpebdb_o19.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpebdb_o19.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmpebdb_o19.swift:18:25:\
    \ error: value of type 'Character' has no member 'caseInsensitiveCompare'\n  \
    \          switch char.caseInsensitiveCompare(s.startIndex, to: s.endIndex) {\n\
    \                   ~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpebdb_o19.swift:24:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpebdb_o19.swift:27:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpy8acijdd.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpy8acijdd.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpy8acijdd.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmpy8acijdd.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmpy8acijdd.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case let c where c.isLetter:\n\
    \            switch char {\n            case let c where c.isUpper:\n        \
    \        result += c.lowercaseString\n            case let c where c.isLower:\n\
    \                result += c.uppercaseString\n            default:\n         \
    \       result += char\n            }\n        case let c where !c.isLetter:\n\
    \            result += char\n        default:\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_3oykjpj.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_3oykjpj.swift:20:32:\
    \ error: value of type 'Character' has no member 'isUpper'\n            case let\
    \ c where c.isUpper:\n                             ~ ^~~~~~~\n/tmp/tmp_3oykjpj.swift:22:32:\
    \ error: value of type 'Character' has no member 'isLower'\n            case let\
    \ c where c.isLower:\n                             ~ ^~~~~~~\n/tmp/tmp_3oykjpj.swift:21:29:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       result += c.lowercaseString\n                          ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_3oykjpj.swift:23:29: error: value of type 'Character' has no member 'uppercaseString'\n\
    \                result += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_3oykjpj.swift:25:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n/tmp/tmp_3oykjpj.swift:28:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n/tmp/tmp_3oykjpj.swift:30:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpsglargzv.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpsglargzv.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpsglargzv.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpsglargzv.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpsglargzv.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpsglargzv.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpsglargzv.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpsglargzv.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpsglargzv.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpsglargzv.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpsglargzv.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpsglargzv.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpsglargzv.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpsglargzv.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpsglargzv.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpsglargzv.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter {\n            let upperCaseLetter\
    \ = String(letter).uppercased()\n            let lowerCaseLetter = String(letter).lowercased()\n\
    \            if upperCaseLetter == letter {\n                result = result +\
    \ upperCaseLetter\n            } else if lowerCaseLetter == letter {\n       \
    \         result = result + lowerCaseLetter\n            } else {\n          \
    \      result = result + letter\n            }\n        } else {\n           \
    \ result = result + letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2cs6b9sw.swift:20:32: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n            if upperCaseLetter\
    \ == letter {\n               ~~~~~~~~~~~~~~~ ^  ~~~~~~\n/tmp/tmp2cs6b9sw.swift:20:32:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if upperCaseLetter ==\
    \ letter {\n                               ^\n/tmp/tmp2cs6b9sw.swift:22:39: error:\
    \ binary operator '==' cannot be applied to operands of type 'String' and 'Character'\n\
    \            } else if lowerCaseLetter == letter {\n                      ~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~\n/tmp/tmp2cs6b9sw.swift:22:39: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Character, Character), (String, String)\n\
    \            } else if lowerCaseLetter == letter {\n                         \
    \             ^\n/tmp/tmp2cs6b9sw.swift:25:35: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n                result\
    \ = result + letter\n                                  ^\n/tmp/tmp2cs6b9sw.swift:28:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = result + letter\n                              ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s.characters {\n        if letter.isLetter {\n            switch letter\
    \ {\n            case letter.lowercaseString:\n                letter = letter.uppercaseString\n\
    \            case letter.uppercaseString:\n                letter = letter.lowercaseString\n\
    \            default:\n                break\n            }\n        }\n     \
    \   result += letter\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpm3gffj7c.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm3gffj7c.swift:19:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   case letter.lowercaseString:\n                 ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpm3gffj7c.swift:21:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   case letter.uppercaseString:\n                 ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpm3gffj7c.swift:20:17:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n              \
    \  letter = letter.uppercaseString\n                ^~~~~~\n/tmp/tmpm3gffj7c.swift:20:33:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \       letter = letter.uppercaseString\n                         ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpm3gffj7c.swift:22:17: error: cannot assign to value: 'letter' is a 'let'\
    \ constant\n                letter = letter.lowercaseString\n                ^~~~~~\n\
    /tmp/tmpm3gffj7c.swift:22:33: error: value of type 'Character' has no member 'lowercaseString'\n\
    \                letter = letter.lowercaseString\n                         ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpm3gffj7c.swift:27:19: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n        result += letter\n\
    \                  ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for c in s.characters {\n        if c.isLetter\
    \ {\n            let upper = c.uppercaseString\n            let lower = c.lowercaseString\n\
    \            if upper != c {\n                result += upper\n            } else\
    \ {\n                result += lower\n            }\n        } else {\n      \
    \      result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ndqbjb9.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5ndqbjb9.swift:21:27:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   let upper = c.uppercaseString\n                        ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp5ndqbjb9.swift:22:27: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            let lower = c.lowercaseString\n                        ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp5ndqbjb9.swift:29:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result = \"A\"; break\n            case \"b\": result\
    \ = \"B\"; break\n            case \"c\": result = \"C\"; break\n            case\
    \ \"d\": result = \"D\"; break\n            case \"e\": result = \"E\"; break\n\
    \            case \"f\": result = \"F\"; break\n            case \"g\": result\
    \ = \"G\"; break\n            case \"h\": result = \"H\"; break\n            case\
    \ \"i\": result = \"I\"; break\n            case \"j\": result = \"J\"; break\n\
    \            case \"k\": result = \"K\"; break\n            case \"l\": result\
    \ = \"L\"; break\n            case \"m\": result = \"M\"; break\n            case\
    \ \"n\": result = \"N\"; break\n            case \"o\": result = \"O\"; break\n\
    \            case \"p\": result = \"P\"; break\n            case \"q\": result\
    \ = \"Q\"; break\n            case \"r\": result = \"R\"; break\n            case\
    \ \"s\": result = \"S\"; break\n            case \"t\": result = \"T\"; break\n\
    \            case \"u\": result = \"U\"; break\n            case \"v\": result\
    \ = \"V\"; break\n            case \"w\": result = \"W\"; break\n            case\
    \ \"x\": result = \"X\"; break\n            case \"y\": result = \"Y\"; break\n\
    \            case \"z\": result = \"Z\"; break\n            default: result =\
    \ char\n            }\n        } else {\n            result = char\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpuwppna6s.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpuwppna6s.swift:45:31: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            default: result = char\n \
    \                             ^~~~\n/tmp/tmpuwppna6s.swift:48:22: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            result = char\n\
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      if isLetter {\n            let upperCase = Character(char).uppercaseString\n\
    \            let lowerCase = Character(char).lowercaseString\n            result\
    \ = upperCase + lowerCase + result\n        } else {\n            result = char\
    \ + result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7tw06v85.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7tw06v85.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmp7tw06v85.swift:19:39: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            let upperCase = Character(char).uppercaseString\n     \
    \                                 ^\n                                      extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp7tw06v85.swift:19:45: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n            let upperCase = Character(char).uppercaseString\n\
    \                            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7tw06v85.swift:20:39:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          let lowerCase = Character(char).lowercaseString\n                 \
    \                     ^\n                                      extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp7tw06v85.swift:20:45: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            let lowerCase = Character(char).lowercaseString\n\
    \                            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7tw06v85.swift:23:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = char + result\n                     ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        switch letter {\n        case \"A\":\n        case \"\
    a\":\n            result += \"B\"\n        case \"B\":\n        case \"b\":\n\
    \            result += \"a\"\n        case \"C\":\n        case \"c\":\n     \
    \       result += \"D\"\n        case \"D\":\n        case \"d\":\n          \
    \  result += \"C\"\n        case \"E\":\n        case \"e\":\n            result\
    \ += \"F\"\n        case \"F\":\n        case \"f\":\n            result += \"\
    E\"\n        case \"G\":\n        case \"g\":\n            result += \"H\"\n \
    \       case \"H\":\n        case \"h\":\n            result += \"G\"\n      \
    \  case \"I\":\n        case \"i\":\n            result += \"J\"\n        case\
    \ \"J\":\n        case \"j\":\n            result += \"I\"\n        case \"K\"\
    :\n        case \"k\":\n            result += \"L\"\n        case \"L\":\n   \
    \     case \"l\":\n            result += \"K\"\n        case \"M\":\n        case\
    \ \"m\":\n            result += \"N\"\n        case \"N\":\n        case \"n\"\
    :\n            result += \"M\"\n        case \"O\":\n        case \"o\":\n   \
    \         result += \"P\"\n        case \"P\":\n        case \"p\":\n        \
    \    result += \"O\"\n        case \"Q\":\n        case \"q\":\n            result\
    \ += \"R\"\n        case \"R\":\n        case \"r\":\n            result += \"\
    Q\"\n        case \"S\":\n        case \"s\":\n            result += \"T\"\n \
    \       case \"T\":\n        case \"t\":\n            result += \"S\"\n      \
    \  case \"U\":\n        case \"u\":\n            result += \"V\"\n        case\
    \ \"V\":\n        case \"v\":\n            result += \"U\"\n        case \"W\"\
    :\n        case \"w\":\n            result += \"X\"\n        case \"X\":\n   \
    \     case \"x\":\n            result += \"W\"\n        case \"Y\":\n        case\
    \ \"y\":\n            result += \"Z\"\n        case \"Z\":\n        case \"z\"\
    :\n            result += \"Y\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpapyl2xu5.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"A\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpapyl2xu5.swift:21:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"B\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:24:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"C\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"D\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:33:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"F\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:36:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"G\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:39:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"H\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:42:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:45:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"J\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:48:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"K\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:51:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"L\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpapyl2xu5.swift:54:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            if c.isUppercase {\n        \
    \        result += c.lowercaseString\n            } else {\n                result\
    \ += c.uppercaseString\n            }\n        } else {\n            result +=\
    \ c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpqw7lte2p.swift:19:29: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n                result += c.lowercaseString\n           \
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpqw7lte2p.swift:21:29: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n                result\
    \ += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n/tmp/tmpqw7lte2p.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            if c.isUppercase {\n        \
    \        result += c.lowercaseString\n            } else {\n                result\
    \ += c.uppercaseString\n            }\n        } else {\n            result +=\
    \ c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpqw7lte2p.swift:19:29: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n                result += c.lowercaseString\n           \
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpqw7lte2p.swift:21:29: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n                result\
    \ += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n/tmp/tmpqw7lte2p.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\": result += \"B\"; break\n            case \"b\": result\
    \ += \"a\"; break\n            case \"c\": result += \"D\"; break\n          \
    \  case \"d\": result += \"c\"; break\n            case \"e\": result += \"f\"\
    ; break\n            case \"f\": result += \"e\"; break\n            case \"g\"\
    : result += \"H\"; break\n            case \"h\": result += \"g\"; break\n   \
    \         case \"i\": result += \"J\"; break\n            case \"j\": result +=\
    \ \"i\"; break\n            case \"k\": result += \"L\"; break\n            case\
    \ \"l\": result += \"k\"; break\n            case \"m\": result += \"N\"; break\n\
    \            case \"n\": result += \"m\"; break\n            case \"o\": result\
    \ += \"P\"; break\n            case \"p\": result += \"o\"; break\n          \
    \  case \"q\": result += \"R\"; break\n            case \"r\": result += \"q\"\
    ; break\n            case \"s\": result += \"T\"; break\n            case \"t\"\
    : result += \"s\"; break\n            case \"u\": result += \"V\"; break\n   \
    \         case \"v\": result += \"u\"; break\n            case \"w\": result +=\
    \ \"X\"; break\n            case \"x\": result += \"w\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"z\"; break\n\
    \            default: result += char.lowercaseString\n            }\n        }\
    \ else {\n            result += char\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1b94_pte.swift:18:25: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            switch char.lowercaseString {\n             \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1b94_pte.swift:45:37: error: value of type\
    \ 'Character' has no member 'lowercaseString'\n            default: result +=\
    \ char.lowercaseString\n                               ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp1b94_pte.swift:48:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpe6cpa1yx.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpe6cpa1yx.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpe6cpa1yx.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpy8acijdd.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpy8acijdd.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpy8acijdd.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmpy8acijdd.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmpy8acijdd.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp823kd687.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp823kd687.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp823kd687.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp823kd687.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp823kd687.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp823kd687.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp823kd687.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp823kd687.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp823kd687.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp823kd687.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp823kd687.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp823kd687.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp823kd687.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp823kd687.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp823kd687.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp823kd687.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprzrmcpje.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmprzrmcpje.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmprzrmcpje.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmprzrmcpje.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmprzrmcpje.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmprzrmcpje.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmprzrmcpje.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmprzrmcpje.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmprzrmcpje.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmprzrmcpje.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmprzrmcpje.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmprzrmcpje.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmprzrmcpje.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmprzrmcpje.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmprzrmcpje.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmprzrmcpje.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"A\":\n                result += \"a\"\n            case \"\
    B\":\n                result += \"b\"\n            case \"C\":\n             \
    \   result += \"c\"\n            case \"D\":\n                result += \"d\"\n\
    \            case \"E\":\n                result += \"e\"\n            case \"\
    F\":\n                result += \"f\"\n            case \"G\":\n             \
    \   result += \"g\"\n            case \"H\":\n                result += \"h\"\n\
    \            case \"I\":\n                result += \"i\"\n            case \"\
    J\":\n                result += \"j\"\n            case \"K\":\n             \
    \   result += \"k\"\n            case \"L\":\n                result += \"l\"\n\
    \            case \"M\":\n                result += \"m\"\n            case \"\
    N\":\n                result += \"n\"\n            case \"O\":\n             \
    \   result += \"o\"\n            case \"P\":\n                result += \"p\"\n\
    \            case \"Q\":\n                result += \"q\"\n            case \"\
    R\":\n                result += \"r\"\n            case \"S\":\n             \
    \   result += \"s\"\n            case \"T\":\n                result += \"t\"\n\
    \            case \"U\":\n                result += \"u\"\n            case \"\
    V\":\n                result += \"v\"\n            case \"W\":\n             \
    \   result += \"w\"\n            case \"X\":\n                result += \"x\"\n\
    \            case \"Y\":\n                result += \"y\"\n            case \"\
    Z\":\n                result += \"z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpyddrinh5.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmpyddrinh5.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += letter\n                          ^\n/tmp/tmpyddrinh5.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s.characters {\n        if letter.isLetter() {\n            switch\
    \ letter {\n            case let letter as Character:\n                let upperCaseLetter\
    \ = Character(letter).uppercaseString\n                let lowerCaseLetter = Character(letter).lowercaseString\n\
    \                let reversedLetter = upperCaseLetter < lowerCaseLetter ? upperCaseLetter\
    \ : lowerCaseLetter\n                result += reversedLetter\n            default:\n\
    \                result += letter\n            }\n        } else {\n         \
    \   result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnlcv1yx1.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnlcv1yx1.swift:17:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmpnlcv1yx1.swift:19:29:\
    \ warning: 'as' test is always true\n            case let letter as Character:\n\
    \                            ^\n/tmp/tmpnlcv1yx1.swift:20:49: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n                let upperCaseLetter\
    \ = Character(letter).uppercaseString\n                                      \
    \          ^\n                                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpnlcv1yx1.swift:20:57: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n                let upperCaseLetter = Character(letter).uppercaseString\n\
    \                                      ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnlcv1yx1.swift:21:49:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \              let lowerCaseLetter = Character(letter).lowercaseString\n     \
    \                                           ^\n                              \
    \                  extendedGraphemeClusterLiteral: \n/tmp/tmpnlcv1yx1.swift:21:57:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       let lowerCaseLetter = Character(letter).lowercaseString\n            \
    \                          ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnlcv1yx1.swift:25:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += letter\n                          ^\n/tmp/tmpnlcv1yx1.swift:28:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            if char.lowercased()\
    \ == char {\n                result += char.uppercased()\n            } else {\n\
    \                result += char.lowercased()\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3odc29zi.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp3odc29zi.swift:18:34: error: binary operator '=='\
    \ cannot be applied to operands of type 'String' and 'Character'\n           \
    \ if char.lowercased() == char {\n               ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp3odc29zi.swift:18:34:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char.lowercased() ==\
    \ char {\n                                 ^\n/tmp/tmp3odc29zi.swift:24:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ \"\"\n    }\n    var result = \"\"\n    for char in s {\n        switch char\
    \ {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n \
    \           result += \"B\"\n        case \"c\":\n            result += \"C\"\n\
    \        case \"d\":\n            result += \"D\"\n        case \"e\":\n     \
    \       result += \"E\"\n        case \"f\":\n            result += \"F\"\n  \
    \      case \"g\":\n            result += \"G\"\n        case \"h\":\n       \
    \     result += \"H\"\n        case \"i\":\n            result += \"I\"\n    \
    \    case \"j\":\n            result += \"J\"\n        case \"k\":\n         \
    \   result += \"K\"\n        case \"l\":\n            result += \"L\"\n      \
    \  case \"m\":\n            result += \"M\"\n        case \"n\":\n           \
    \ result += \"N\"\n        case \"o\":\n            result += \"O\"\n        case\
    \ \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpx2plh4t3.swift:74:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp823kd687.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp823kd687.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp823kd687.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp823kd687.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp823kd687.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp823kd687.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp823kd687.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp823kd687.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp823kd687.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp823kd687.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp823kd687.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp823kd687.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp823kd687.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp823kd687.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp823kd687.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp823kd687.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"_\":\n        case \"$\":\n    \
    \    case \"%\":\n        case \"@\":\n        case \"#\":\n        case \"+\"\
    :\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case\
    \ \"(\":\n        case \")\":\n        case \"[\":\n        case \"]\":\n    \
    \    case \"{\":\n        case \"}\":\n        case \"<\":\n        case \">\"\
    :\n        case \"=\":\n        case \"~\":\n        case \"^\":\n        case\
    \ \"%\":\n        case \"&\":\n        case \"*\":\n        case \"?\":\n    \
    \    case \"!\":\n        case \"%\":\n        case \"|\":\n        case \"\\\\\
    \":\n        case \"\\\"\":\n        case \"'\":\n        case \"<\":\n      \
    \  case \"=\":\n        case \"+\":\n        case \"-\":\n        case \"*\":\n\
    \        case \"/\":\n        case \"(\":\n        case \")\":\n        case \"\
    [\":\n        case \"]\":\n        case \"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpjrsrumme.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpjrsrumme.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjrsrumme.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case let c as Character:\n\
    \            switch c {\n            case .lowercase:\n                result\
    \ += \"A\"\n            case .uppercase:\n                result += \"a\"\n  \
    \          case .digit:\n                result += \"0\"\n            default:\n\
    \                result += String(char)\n            }\n        case let c as\
    \ String:\n            result += c\n        default:\n            result += String(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbm11bf8s.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbm11bf8s.swift:18:20:\
    \ warning: 'as' test is always true\n        case let c as Character:\n      \
    \             ^\n/tmp/tmpbm11bf8s.swift:29:20: warning: cast from 'Character'\
    \ to unrelated type 'String' always fails\n        case let c as String:\n   \
    \                ^~ ~~~~~~\n/tmp/tmpbm11bf8s.swift:20:19: error: type 'Character'\
    \ has no member 'lowercase'\n            case .lowercase:\n                 ~^~~~~~~~~\n\
    /tmp/tmpbm11bf8s.swift:22:19: error: type 'Character' has no member 'uppercase'\n\
    \            case .uppercase:\n                 ~^~~~~~~~~\n/tmp/tmpbm11bf8s.swift:24:19:\
    \ error: type 'Character' has no member 'digit'\n            case .digit:\n  \
    \               ~^~~~~\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\": result += \"a\"\n            case \"B\": result += \"b\"\n\
    \            case \"C\": result += \"c\"\n            case \"D\": result += \"\
    d\"\n            case \"E\": result += \"e\"\n            case \"F\": result +=\
    \ \"f\"\n            case \"G\": result += \"g\"\n            case \"H\": result\
    \ += \"h\"\n            case \"I\": result += \"i\"\n            case \"J\": result\
    \ += \"j\"\n            case \"K\": result += \"k\"\n            case \"L\": result\
    \ += \"l\"\n            case \"M\": result += \"m\"\n            case \"N\": result\
    \ += \"n\"\n            case \"O\": result += \"o\"\n            case \"P\": result\
    \ += \"p\"\n            case \"Q\": result += \"q\"\n            case \"R\": result\
    \ += \"r\"\n            case \"S\": result += \"s\"\n            case \"T\": result\
    \ += \"t\"\n            case \"U\": result += \"u\"\n            case \"V\": result\
    \ += \"v\"\n            case \"W\": result += \"w\"\n            case \"X\": result\
    \ += \"x\"\n            case \"Y\": result += \"y\"\n            case \"Z\": result\
    \ += \"z\"\n            default: result += char\n            }\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ho9ftin.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp7ho9ftin.swift:45:32: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            default:\
    \ result += char\n                               ^\n/tmp/tmp7ho9ftin.swift:48:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.unicodeScalars.first!.value\
    \ {\n            case 0x41:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x42:\n                result += char.unicodeScalars.last!.value\n\
    \            default:\n                result += char\n            }\n       \
    \ } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpn4kjq4kk.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpn4kjq4kk.swift:20:54: error: cannot convert value\
    \ of type 'UInt32' to expected argument type 'String'\n                result\
    \ += char.unicodeScalars.first!.value\n                                      \
    \               ^\n/tmp/tmpn4kjq4kk.swift:22:53: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n                result +=\
    \ char.unicodeScalars.last!.value\n                                          \
    \          ^\n/tmp/tmpn4kjq4kk.swift:24:27: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result += char\n\
    \                          ^\n/tmp/tmpn4kjq4kk.swift:27:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp78zmdulu.swift:18:25: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            switch char.lowercaseString {\n             \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp78zmdulu.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmp78zmdulu.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += char.lowercased()\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp57ou2ac2.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp57ou2ac2.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpe6cpa1yx.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpe6cpa1yx.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpe6cpa1yx.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo49lph7_.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpo49lph7_.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpo49lph7_.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpo49lph7_.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpo49lph7_.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpo49lph7_.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpo49lph7_.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpo49lph7_.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpo49lph7_.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpo49lph7_.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpo49lph7_.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpo49lph7_.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpo49lph7_.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpo49lph7_.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpo49lph7_.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpo49lph7_.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upperCase = char.uppercased()\n\
    \            let lowerCase = char.lowercased()\n            if char == upperCase\
    \ {\n                result = result + lowerCase\n            } else {\n     \
    \           result = result + upperCase\n            }\n        } else {\n   \
    \         result = result + char\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpckgyvrz9.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpckgyvrz9.swift:20:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n           \
    \ if char == upperCase {\n               ~~~~ ^  ~~~~~~~~~\n/tmp/tmpckgyvrz9.swift:20:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char == upperCase {\n\
    \                    ^\n/tmp/tmpckgyvrz9.swift:26:31: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result =\
    \ result + char\n                              ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"B\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpi06cu1w3.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpi06cu1w3.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpi06cu1w3.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpi06cu1w3.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpi06cu1w3.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpi06cu1w3.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpi06cu1w3.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpi06cu1w3.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpi06cu1w3.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpi06cu1w3.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpi06cu1w3.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpi06cu1w3.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpi06cu1w3.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpi06cu1w3.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpi06cu1w3.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpi06cu1w3.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp9vwkgz83.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp9vwkgz83.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp9vwkgz83.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp9vwkgz83.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp9vwkgz83.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp9vwkgz83.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp9vwkgz83.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp9vwkgz83.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp9vwkgz83.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp9vwkgz83.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp9vwkgz83.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp9vwkgz83.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp9vwkgz83.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp9vwkgz83.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp9vwkgz83.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp9vwkgz83.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_t8rful7.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp_t8rful7.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp_t8rful7.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp_t8rful7.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp_t8rful7.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp_t8rful7.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp_t8rful7.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp_t8rful7.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp_t8rful7.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp_t8rful7.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp_t8rful7.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp_t8rful7.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp_t8rful7.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp_t8rful7.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp_t8rful7.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp_t8rful7.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += char.lowercased()\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp57ou2ac2.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp57ou2ac2.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp57ou2ac2.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"g\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    p\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4yzsuex.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpo4yzsuex.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpo4yzsuex.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            let upper =\
    \ char.uppercaseString\n            let lower = char.lowercaseString\n       \
    \     if upper != nil {\n                result += upper!\n            } else\
    \ {\n                result += lower!\n            }\n        } else {\n     \
    \       result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmbxe_v35.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmbxe_v35.swift:18:30:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   let upper = char.uppercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmbxe_v35.swift:19:30: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            let lower = char.lowercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmbxe_v35.swift:26:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            let upper\
    \ = char.uppercased()\n            let lower = char.lowercased()\n           \
    \ if upper != nil {\n                result += upper!\n            } else {\n\
    \                result += lower!\n            }\n        } else {\n         \
    \   result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprw65mgnm.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprw65mgnm.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmprw65mgnm.swift:20:22:\
    \ warning: comparing non-optional value of type 'String' to 'nil' always returns\
    \ true\n            if upper != nil {\n               ~~~~~ ^  ~~~\n/tmp/tmprw65mgnm.swift:21:32:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \     result += upper!\n                          ~~~~~^\n                   \
    \            \n/tmp/tmprw65mgnm.swift:23:32: error: cannot force unwrap value\
    \ of non-optional type 'String'\n                result += lower!\n          \
    \                ~~~~~^\n                               \n/tmp/tmprw65mgnm.swift:26:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        switch letter {\n        case \"a\":\n            letter\
    \ = \"A\"\n        case \"b\":\n            letter = \"B\"\n        case \"c\"\
    :\n            letter = \"C\"\n        case \"d\":\n            letter = \"D\"\
    \n        case \"e\":\n            letter = \"E\"\n        case \"f\":\n     \
    \       letter = \"F\"\n        case \"g\":\n            letter = \"G\"\n    \
    \    case \"h\":\n            letter = \"H\"\n        case \"i\":\n          \
    \  letter = \"I\"\n        case \"j\":\n            letter = \"J\"\n        case\
    \ \"k\":\n            letter = \"K\"\n        case \"l\":\n            letter\
    \ = \"L\"\n        case \"m\":\n            letter = \"M\"\n        case \"n\"\
    :\n            letter = \"N\"\n        case \"o\":\n            letter = \"O\"\
    \n        case \"p\":\n            letter = \"P\"\n        case \"q\":\n     \
    \       letter = \"Q\"\n        case \"r\":\n            letter = \"R\"\n    \
    \    case \"s\":\n            letter = \"S\"\n        case \"t\":\n          \
    \  letter = \"T\"\n        case \"u\":\n            letter = \"U\"\n        case\
    \ \"v\":\n            letter = \"V\"\n        case \"w\":\n            letter\
    \ = \"W\"\n        case \"x\":\n            letter = \"X\"\n        case \"y\"\
    :\n            letter = \"Y\"\n        case \"z\":\n            letter = \"Z\"\
    \n        default:\n            letter = letter\n        }\n        result +=\
    \ letter\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo0ka0lro.swift:19:13: error: cannot assign to value: 'letter' is\
    \ a 'let' constant\n            letter = \"A\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:21:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"B\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:23:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"C\"\n       \
    \     ^~~~~~\n/tmp/tmpo0ka0lro.swift:25:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"D\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:27:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"E\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:29:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"F\"\n       \
    \     ^~~~~~\n/tmp/tmpo0ka0lro.swift:31:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"G\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:33:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"H\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:35:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"I\"\n       \
    \     ^~~~~~\n/tmp/tmpo0ka0lro.swift:37:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"J\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:39:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"K\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:41:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"L\"\n       \
    \     ^~~~~~\n/tmp/tmpo0ka0lro.swift:43:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"M\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:45:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"N\"\n            ^~~~~~\n/tmp/tmpo0ka0lro.swift:47:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"O\"\n       \
    \     ^~~~~~\n/tmp/tmpo0ka0lro.swift:49:13: error: c"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            switch c.caseInsensitiveCompare(\"\
    A\") {\n            case .orderedSame, .orderedAscending:\n                result\
    \ += \"A\"\n            case .orderedDescending:\n                result += \"\
    a\"\n            }\n        } else {\n            result += c\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7q7g_k1j.swift:18:22: error: value of type 'Character' has no member\
    \ 'caseInsensitiveCompare'\n            switch c.caseInsensitiveCompare(\"A\"\
    ) {\n                   ~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7q7g_k1j.swift:25:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            let upperCase = char.uppercaseString\n\
    \            let lowerCase = char.lowercaseString\n            result = upperCase\
    \ + lowerCase + result\n        } else {\n            result = char + result\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpb1fc2qfm.swift:18:34: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n            let upperCase = char.uppercaseString\n      \
    \                      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpb1fc2qfm.swift:19:34: error:\
    \ value of type 'Character' has no member 'lowercaseString'\n            let lowerCase\
    \ = char.lowercaseString\n                            ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpb1fc2qfm.swift:22:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = char + result\n                     ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1).capitalized }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplx05iyzg.swift:15:54: error: value of type 'String' has no member\
    \ 'capitalized'\n    return s.characters.reduce(\"\") { $0 + String($1).capitalized\
    \ }\n                                          ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"A\"; break\n            case \"b\": result\
    \ += \"b\"; break\n            case \"c\": result += \"C\"; break\n          \
    \  case \"d\": result += \"d\"; break\n            case \"e\": result += \"E\"\
    ; break\n            case \"f\": result += \"F\"; break\n            case \"g\"\
    : result += \"G\"; break\n            case \"h\": result += \"H\"; break\n   \
    \         case \"i\": result += \"I\"; break\n            case \"j\": result +=\
    \ \"J\"; break\n            case \"k\": result += \"K\"; break\n            case\
    \ \"l\": result += \"L\"; break\n            case \"m\": result += \"M\"; break\n\
    \            case \"n\": result += \"N\"; break\n            case \"o\": result\
    \ += \"O\"; break\n            case \"p\": result += \"P\"; break\n          \
    \  case \"q\": result += \"Q\"; break\n            case \"r\": result += \"R\"\
    ; break\n            case \"s\": result += \"S\"; break\n            case \"t\"\
    : result += \"T\"; break\n            case \"u\": result += \"U\"; break\n   \
    \         case \"v\": result += \"V\"; break\n            case \"w\": result +=\
    \ \"W\"; break\n            case \"x\": result += \"X\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"Z\"; break\n\
    \            default: result += char; break\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpb21hx_aj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpb21hx_aj.swift:45:32: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            default:\
    \ result += char; break\n                               ^\n/tmp/tmpb21hx_aj.swift:48:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            if c.isUppercase {\n        \
    \        result += c.lowercaseString\n            } else {\n                result\
    \ += c.uppercaseString\n            }\n        } else {\n            result +=\
    \ c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpqw7lte2p.swift:19:29: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n                result += c.lowercaseString\n           \
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpqw7lte2p.swift:21:29: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n                result\
    \ += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n/tmp/tmpqw7lte2p.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result += String(char.uppercase)\n\
    \        default:\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxklq5up8.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpxklq5up8.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxklq5up8.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"B\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfyy8bm7w.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"A\":\n                result += \"a\"\n            case \"\
    B\":\n                result += \"b\"\n            case \"C\":\n             \
    \   result += \"c\"\n            case \"D\":\n                result += \"d\"\n\
    \            case \"E\":\n                result += \"e\"\n            case \"\
    F\":\n                result += \"f\"\n            case \"G\":\n             \
    \   result += \"g\"\n            case \"H\":\n                result += \"h\"\n\
    \            case \"I\":\n                result += \"i\"\n            case \"\
    J\":\n                result += \"j\"\n            case \"K\":\n             \
    \   result += \"k\"\n            case \"L\":\n                result += \"l\"\n\
    \            case \"M\":\n                result += \"m\"\n            case \"\
    N\":\n                result += \"n\"\n            case \"O\":\n             \
    \   result += \"o\"\n            case \"P\":\n                result += \"p\"\n\
    \            case \"Q\":\n                result += \"q\"\n            case \"\
    R\":\n                result += \"r\"\n            case \"S\":\n             \
    \   result += \"s\"\n            case \"T\":\n                result += \"t\"\n\
    \            case \"U\":\n                result += \"u\"\n            case \"\
    V\":\n                result += \"v\"\n            case \"W\":\n             \
    \   result += \"w\"\n            case \"X\":\n                result += \"x\"\n\
    \            case \"Y\":\n                result += \"y\"\n            case \"\
    Z\":\n                result += \"z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpyddrinh5.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmpyddrinh5.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += letter\n                          ^\n/tmp/tmpyddrinh5.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            let upper =\
    \ char.uppercaseString\n            let lower = char.lowercaseString\n       \
    \     if upper != nil {\n                result += upper!\n            } else\
    \ {\n                result += lower!\n            }\n        } else {\n     \
    \       result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmbxe_v35.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmbxe_v35.swift:18:30:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   let upper = char.uppercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmbxe_v35.swift:19:30: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            let lower = char.lowercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpmbxe_v35.swift:26:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpe6cpa1yx.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpe6cpa1yx.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpe6cpa1yx.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp823kd687.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp823kd687.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp823kd687.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp823kd687.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp823kd687.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp823kd687.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp823kd687.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp823kd687.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp823kd687.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp823kd687.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp823kd687.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp823kd687.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp823kd687.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp823kd687.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp823kd687.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp823kd687.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        switch c {\n        case \"a\":\n            result += \"\
    A\"\n        case \"b\":\n            result += \"b\"\n        case \"c\":\n \
    \           result += \"C\"\n        case \"d\":\n            result += \"D\"\n\
    \        case \"e\":\n            result += \"E\"\n        case \"f\":\n     \
    \       result += \"F\"\n        case \"g\":\n            result += \"G\"\n  \
    \      case \"h\":\n            result += \"H\"\n        case \"i\":\n       \
    \     result += \"I\"\n        case \"j\":\n            result += \"J\"\n    \
    \    case \"k\":\n            result += \"K\"\n        case \"l\":\n         \
    \   result += \"L\"\n        case \"m\":\n            result += \"M\"\n      \
    \  case \"n\":\n            result += \"N\"\n        case \"o\":\n           \
    \ result += \"O\"\n        case \"p\":\n            result += \"P\"\n        case\
    \ \"q\":\n            result += \"Q\"\n        case \"r\":\n            result\
    \ += \"R\"\n        case \"s\":\n            result += \"S\"\n        case \"\
    t\":\n            result += \"T\"\n        case \"u\":\n            result +=\
    \ \"U\"\n        case \"v\":\n            result += \"V\"\n        case \"w\"\
    :\n            result += \"W\"\n        case \"x\":\n            result += \"\
    X\"\n        case \"y\":\n            result += \"Y\"\n        case \"z\":\n \
    \           result += \"Z\"\n        default:\n            result += c\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dr2dq28.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"A\"; break\n            case \"b\": result\
    \ += \"b\"; break\n            case \"c\": result += \"C\"; break\n          \
    \  case \"d\": result += \"d\"; break\n            case \"e\": result += \"E\"\
    ; break\n            case \"f\": result += \"F\"; break\n            case \"g\"\
    : result += \"G\"; break\n            case \"h\": result += \"H\"; break\n   \
    \         case \"i\": result += \"I\"; break\n            case \"j\": result +=\
    \ \"J\"; break\n            case \"k\": result += \"K\"; break\n            case\
    \ \"l\": result += \"L\"; break\n            case \"m\": result += \"M\"; break\n\
    \            case \"n\": result += \"N\"; break\n            case \"o\": result\
    \ += \"O\"; break\n            case \"p\": result += \"P\"; break\n          \
    \  case \"q\": result += \"Q\"; break\n            case \"r\": result += \"R\"\
    ; break\n            case \"s\": result += \"S\"; break\n            case \"t\"\
    : result += \"T\"; break\n            case \"u\": result += \"U\"; break\n   \
    \         case \"v\": result += \"V\"; break\n            case \"w\": result +=\
    \ \"W\"; break\n            case \"x\": result += \"X\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"Z\"; break\n\
    \            default: result += char; break\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpb21hx_aj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpb21hx_aj.swift:45:32: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            default:\
    \ result += char; break\n                               ^\n/tmp/tmpb21hx_aj.swift:48:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"@\":\n        case \"#\":\n    \
    \    case \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\"\
    :\n        case \"*\":\n        case \"(\":\n        case \")\":\n        case\
    \ \"-\":\n        case \"_\":\n        case \"+\":\n        case \"=\":\n    \
    \    case \"{\":\n        case \"}\":\n        case \"[\":\n        case \"]\"\
    :\n        case \"\\\\\":\n        case \"|\":\n        case \"<\":\n        case\
    \ \">\":\n        case \"?\":\n        case \"/\":\n        case \"\\\\\":\n \
    \       case \"\\\"\":\n        case \"'\":\n        case \"<\":\n        case\
    \ \"=\":\n        case \"{\":\n        case \"}\":\n        case \"[\":\n    \
    \    case \"]\":\n        case \"|\":\n        case \"\\\\\":\n        case \"\
    \\\"\":\n        case \"'\":\n        case \"<\":\n        case \"=\":\n     \
    \   case \"{\":\n        case \"}\":\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_z3tm1a3.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp_z3tm1a3.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_z3tm1a3.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpy8acijdd.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpy8acijdd.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpy8acijdd.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmpy8acijdd.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmpy8acijdd.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s.characters {\n        switch letter {\n        case let c where\
    \ c.isUpper:\n            result += c.lowercaseString\n        case let c where\
    \ c.isLower:\n            result += c.uppercaseString\n        default:\n    \
    \        result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpwl37m7jf.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwl37m7jf.swift:18:28:\
    \ error: value of type 'Character' has no member 'isUpper'\n        case let c\
    \ where c.isUpper:\n                         ~ ^~~~~~~\n/tmp/tmpwl37m7jf.swift:20:28:\
    \ error: value of type 'Character' has no member 'isLower'\n        case let c\
    \ where c.isLower:\n                         ~ ^~~~~~~\n/tmp/tmpwl37m7jf.swift:19:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.lowercaseString\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpwl37m7jf.swift:21:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.uppercaseString\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpwl37m7jf.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"+\":\n        case \"-\":\n    \
    \    case \"*\":\n        case \"/\":\n        case \"%\":\n        case \"=\"\
    :\n        case \"!\":\n        case \"@\":\n        case \"#\":\n        case\
    \ \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\":\n    \
    \    case \"*\":\n        case \"(\":\n        case \")\":\n        case \"[\"\
    :\n        case \"]\":\n        case \"{\":\n        case \"}\":\n        case\
    \ \"<\":\n        case \">\":\n        case \"|\":\n        case \"~\":\n    \
    \    case \"`\":\n        case \"\xB4\":\n        case \"\xA8\":\n        case\
    \ \"\xB1\":\n        case \"\xA7\":\n        case \"\xB6\":\n        case \"\xA3\
    \":\n        case \"\xA5\":\n        case \"\xA4\":\n        case \"\xA2\":\n\
    \        case \"\xA3\":\n        case \"\xA2\":\n        case \"\xA3\":\n    \
    \    case \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpu96i519p.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpu96i519p.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpu96i519p.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s.characters {\n        let\
    \ isLetter = Character(char).isLetter\n        if isLetter {\n            let\
    \ upper = Character(char).uppercaseString\n            let lower = Character(char).lowercaseString\n\
    \            result = result + upper\n            result = result + lower\n  \
    \      } else {\n            result = result + char\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1x4z39gt.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1x4z39gt.swift:20:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmp1x4z39gt.swift:22:35: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            let upper = Character(char).uppercaseString\n         \
    \                         ^\n                                  extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp1x4z39gt.swift:22:41: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n            let upper = Character(char).uppercaseString\n\
    \                        ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1x4z39gt.swift:23:35:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          let lower = Character(char).lowercaseString\n                     \
    \             ^\n                                  extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp1x4z39gt.swift:23:41: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            let lower = Character(char).lowercaseString\n\
    \                        ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1x4z39gt.swift:27:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = result + char\n                              ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"j\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"o\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"s\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"u\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"w\"\n            case \"x\":\n                result += \"\
    x\"\n            case \"y\":\n                result += \"y\"\n            case\
    \ \"z\":\n                result += \"z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbtorh_93.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpbtorh_93.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpbtorh_93.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter {\n            if letter.isUppercase\
    \ {\n                letter = String(letter).lowercased()\n            } else\
    \ {\n                letter = String(letter).uppercased()\n            }\n   \
    \     } else {\n            letter = String(letter).lowercased()\n        }\n\
    \        result += letter\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp5u94e63f.swift:19:17: error: cannot assign to value: 'letter' is\
    \ a 'let' constant\n                letter = String(letter).lowercased()\n   \
    \             ^~~~~~\n/tmp/tmp5u94e63f.swift:19:41: error: cannot assign value\
    \ of type 'String' to type 'Character'\n                letter = String(letter).lowercased()\n\
    \                         ~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmp5u94e63f.swift:21:17:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n              \
    \  letter = String(letter).uppercased()\n                ^~~~~~\n/tmp/tmp5u94e63f.swift:21:41:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \      letter = String(letter).uppercased()\n                         ~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmp5u94e63f.swift:24:13: error: cannot assign to value: 'letter' is a 'let'\
    \ constant\n            letter = String(letter).lowercased()\n            ^~~~~~\n\
    /tmp/tmp5u94e63f.swift:24:37: error: cannot assign value of type 'String' to type\
    \ 'Character'\n            letter = String(letter).lowercased()\n            \
    \         ~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmp5u94e63f.swift:26:19: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   result += letter\n                  ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.unicodeScalars.first!.value\
    \ {\n            case 0x41:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x42:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x43:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x44:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x45:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x46:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x47:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x48:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x49:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x4A:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x4B:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x4C:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x4D:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x4E:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x4F:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x50:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x51:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x52:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x53:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x54:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x55:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x56:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x57:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x58:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x59:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x5A:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x5B:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x5C:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x5D:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x5E:\n                result += char.unicodeScalars.first!.value\n\
    \            case 0x5F:\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpawvareix.swift:79:13: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n            case 0x5F:\n            ^~~~~~~~~~\n\
    \                       break\n/tmp/tmpawvareix.swift:102:35: error: expected\
    \ '}' at end of brace statement\nassert(solve(s: \"#ccc\") == \"#CCC\")\n    \
    \                              ^\n/tmp/tmpawvareix.swift:17:28: note: to match\
    \ this opening '{'\n        if char.isLetter() {\n                           ^\n\
    /tmp/tmpawvareix.swift:102:35: error: expected '}' at end of brace statement\n\
    assert(solve(s: \"#ccc\") == \"#CCC\")\n                                  ^\n\
    /tmp/tmpawvareix.swift:16:19: note: to match this opening '{'\n    for char in\
    \ s {\n                  ^\n/tmp/tmpawvareix.swift:102:35: error: expected '}'\
    \ at end of brace statement\nassert(solve(s: \"#ccc\") == \"#CCC\")\n        \
    \                          ^\n/tmp/tmpawvareix.swift:14:33: note: to match this\
    \ opening '{'\nfunc solve(s: String) -> String {\n                           \
    \     ^\n/tmp/tmpawvareix.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpawvareix.swift:20:54: error: cannot convert value\
    \ of type 'UInt32' to expected argument type 'String'\n                result\
    \ += char.unicodeScalars.first!.value\n                                      \
    \               ^\n/tmp/tmpawvareix.swift:22:54: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n                result +=\
    \ char.unicodeScalars.first!.value\n                                         \
    \            ^\n/tmp/tmpawvareix.swift:24:54: error: cannot convert value of type\
    \ 'UInt32' to expected argument type 'String'\n                result += char.unicodeScalars.first!.value\n\
    \                                                     ^\n/tmp/tmpawvareix.swift:26:54:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \                result += char.unicodeScalars.first!.value\n                \
    \                                     ^\n/tmp/tmpa"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"A\"; break\n            case \"b\": result\
    \ += \"B\"; break\n            case \"c\": result += \"C\"; break\n          \
    \  case \"d\": result += \"D\"; break\n            case \"e\": result += \"E\"\
    ; break\n            case \"f\": result += \"F\"; break\n            case \"g\"\
    : result += \"G\"; break\n            case \"h\": result += \"H\"; break\n   \
    \         case \"i\": result += \"I\"; break\n            case \"j\": result +=\
    \ \"J\"; break\n            case \"k\": result += \"K\"; break\n            case\
    \ \"l\": result += \"L\"; break\n            case \"m\": result += \"M\"; break\n\
    \            case \"n\": result += \"N\"; break\n            case \"o\": result\
    \ += \"O\"; break\n            case \"p\": result += \"P\"; break\n          \
    \  case \"q\": result += \"Q\"; break\n            case \"r\": result += \"R\"\
    ; break\n            case \"s\": result += \"S\"; break\n            case \"t\"\
    : result += \"T\"; break\n            case \"u\": result += \"U\"; break\n   \
    \         case \"v\": result += \"V\"; break\n            case \"w\": result +=\
    \ \"W\"; break\n            case \"x\": result += \"X\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"Z\"; break\n\
    \            default: result += \"\\(char)\";\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpn0jjle04.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpn0jjle04.swift:48:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp5zu2v_8n.swift:20:22: warning: comparing non-optional value of\
    \ type 'String' to 'nil' always returns true\n            if upper != nil {\n\
    \               ~~~~~ ^  ~~~\n/tmp/tmp5zu2v_8n.swift:21:32: error: cannot force\
    \ unwrap value of non-optional type 'String'\n                result += upper!\n\
    \                          ~~~~~^\n                               \n/tmp/tmp5zu2v_8n.swift:23:32:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \     result += lower!\n                          ~~~~~^\n                   \
    \            \n/tmp/tmp5zu2v_8n.swift:26:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += char\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
