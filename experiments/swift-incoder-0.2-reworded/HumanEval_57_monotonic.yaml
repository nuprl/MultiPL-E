name: HumanEval_57_monotonic
language: swift
prompt: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
  /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n\
  /// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int])\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
  \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
  \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
  \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\n\
  assert(monotonic(l: [9, 9, 9, 9]) == true)"
completions: ['    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m =\
    \ Int64(math.MaxInt64)\n    for ; k >= 0; k-- {\n        if l[i] < l[k] {\n  \
    \          m = l[i]\n            i = k\n        }\n        if l[j] > l[k] {\n\
    \            m = l[j]\n            j = k\n        }\n    }\n    if j > i {\n \
    \       return false\n    }\n    if j < i {\n        return true\n    }\n    return\
    \ m >= l[i]", '    return monotonicImpl(l, l.count)', '    return monotonicWithContext(l,
    nil)', "    if l.count < 2 {\n        return true\n    }\n    var prev = 0\n \
    \   var curr = l[0]\n    for var i = 0; i < l.count; i++ {\n        if curr <\
    \ l[i] {\n            return false\n        }\n        if curr > l[i] {\n    \
    \        return true\n        }\n        if prev < l[i] {\n            return\
    \ false\n        }\n        prev = curr\n        curr = l[i]\n    }\n    return\
    \ true", "    var monotonic = true\n    for idx, x in l.enumerated() {\n     \
    \   if idx > 0 {\n            if x < l[idx - 1] {\n                monotonic =\
    \ false\n                break\n            }\n        }\n    }\n    return monotonic",
  '    return monotonicWithContext(l, nil)', '    return monotonicWithOptions(l, options:
    [])', "    var i = 0\n    for x in l {\n        if x > l[i-1] {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true", "    var i = 0\n\
    \    var j = l.count - 1\n    var k = j - 1\n    var monotonic = true\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            k = j\n        } else {\n   \
    \         i = i + 1\n        }\n        if i < k {\n            j = k\n      \
    \  } else {\n            monotonic = false\n        }\n    }\n    return monotonic",
  "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n", '    return monotonicWithContext(l, nil)',
  "    if l.isEmpty {\n        return true\n    }\n    var prev: Int = 0\n    var\
    \ next: Int = 0\n    var last: Int = 0\n    for idx in l.indices {\n        last\
    \ = idx\n        next = idx\n        if prev < next {\n            return false\n\
    \        }\n        while next < l.endIndex {\n            prev = next\n     \
    \       next = next + 1\n            if prev < next {\n                return\
    \ false\n            }\n        }\n    }\n    return true", '    return monotonicWithOptions([Int](l),
    nil)', "    var i = 0\n    var j = l.count\n    var k = j - 1\n    var m = j\n\
    \    var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n \
    \   var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n  \
    \  var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n   \
    \ var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n    var\
    \ h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m\
    \ = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r =\
    \ j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n\
    \    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n \
    \   var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n  \
    \  var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n   \
    \ var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n    var\
    \ r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w\
    \ = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b =\
    \ j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n\
    \    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n \
    \   var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n  \
    \  var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n   \
    \ var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var\
    \ b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g\
    \ = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l =\
    \ j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n\
    \    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n \
    \   var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n  \
    \  var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n   \
    \ var g = j", "    var i = 0\n    for x in l {\n        if x < l[i] {\n      \
    \      return false\n        }\n        if x > l[i] {\n            return true\n\
    \        }\n        i += 1\n    }\n    return true", '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', "    if l.count < 2 {\n    \
    \    return true\n    }\n    var i = 0\n    var j = l.count - 1\n    var k = j\
    \ - 1\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(", '    return monotonicWithOptions([Int](l), nil)', '    return
    monotonicWithContext(l, nil)', "    let n = l.count\n    if n < 2 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    var i =\
    \ 0\n    var j = n - 1\n    var k = j - 1\n    var m = n - 1\n    while i < m\
    \ && j >= 0 {\n        if l[i] > l[j] {\n            i += 1\n        } else if\
    \ l[i] < l[j] {\n            j -= 1\n        } else {\n            k += 1\n  \
    \      }\n        if k >= 0 {\n            m = k\n        }\n    }\n    return\
    \ m == n", '    return monotonicWithContext(l, nil)', "    if l.isEmpty {\n  \
    \      return true\n    }\n    let l = l.sorted()\n    if l.first > l.last {\n\
    \        return false\n    }\n    var prev: Int?\n    var cur: Int?\n    for cur\
    \ in l.prefix(l.count - 1) {\n        if cur == nil {\n            return false\n\
    \        }\n        if prev == nil {\n            prev = cur\n            continue\n\
    \        }\n        if cur! > prev! {\n            return false\n        }\n \
    \       prev = cur\n    }\n    return true", '    return monotonicImpl(l, l.count)',
  "    let sorted = l.sorted()\n    return sorted.first == sorted.last", '    return
    monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count\n    var k\
    \ = 0\n    var l2 = l.count\n    var m = Int64(0)\n    var n = Int64(0)\n    var\
    \ o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = ", "    var\
    \ i = 0\n    for x in l {\n        if x > l[i] {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true", '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicImpl(l)', '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, nil)', "    var monotonic = true\n    for x\
    \ in l {\n        if x < l[0] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic", "    var i = 0\n    for x in l {\n \
    \       if i > 0 {\n            if x < l[i-1] {\n                return false\n\
    \            }\n        }\n        i += 1\n    }\n    return true", "    var monotonic\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx-1] {\n     \
    \       monotonic = false\n            break\n        }\n    }\n    return monotonic",
  '    return monotonicWithOptions([Int](l), nil)', '    return monotonicImpl(l, l.count)',
  '    return monotonicImpl(l, l.count, 0)', '    return monotonicWithContext(l, ContextualLoad())',
  "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var monotonic =\
    \ true\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n    \
    \    } else if l[i] > l[j] {\n            j -= 1\n        } else {\n         \
    \   if l[i] < l[k] {\n                monotonic = false\n                break\n\
    \            } else if l[i] > l[k] {\n                k += 1\n            } else\
    \ {\n                i += 1\n                j -= 1\n                k += 1\n\
    \            }\n        }\n    }\n    return monotonic", '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    for x in l {\n        if i > 0 {\n            if x\
    \ < l[i-1] {\n                return false\n            }\n        }\n       \
    \ i = i + 1\n    }\n    return true", '    return monotonicWithContext(l, nil)',
  '    return monotonicImpl(l)', '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', "  \
    \  var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n", "    var i = 0\n    for v in l {\n      \
    \  if v < l[i-1] {\n            return false\n        }\n        i += 1\n    }\n\
    \    return true", '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithOptions([Int](l), options: [])', '    return monotonicWithContext(l,
    nil)', '    return monotonic(l, isIncreasing: true)', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', "    let n = l.count\n    if n < 2 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return l[0] > l[1]\n    }\n    var left = 0\n    var right\
    \ = n - 1\n    var middle = n / 2\n    var leftIsSmaller = true\n    var rightIsSmaller\
    \ = true\n    while left < middle && right >= middle {\n        if l[left] > l[right]\
    \ {\n            leftIsSmaller = false\n        }\n        if l[right] > l[left]\
    \ {\n            rightIsSmaller = false\n        }\n        left += 1\n      \
    \  right -= 1\n    }\n    if left >= middle {\n        return leftIsSmaller\n\
    \    }\n    if right <= middle {\n        return rightIsSmaller\n    }\n    return\
    \ l[middle] > l[middle - 1]", '    return monotonicImpl(l)', '    return monotonicWithOptions(l,
    options: .MatchStrictly)', '    return monotonic(l, isIncreasing: true)', '    return
    monotonicWithOptions([Int](l), nil)', '    return monotonicWithContext(l, nil)',
  "    if l.isEmpty {\n        return true\n    }\n    var prev = 0\n    for x in\
    \ l {\n        if prev < x {\n            return false\n        }\n        prev\
    \ = x\n    }\n    return true", '    return monotonicImpl(l)', '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m =\
    \ Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n   \
    \ var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var ", '    return
    monotonicImpl(l, l, 0)', "    var i = 0\n    var j = l.count\n    var k = j -\
    \ 1\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n\
    \    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n \
    \   var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n  \
    \  var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n   \
    \ var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var\
    \ l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q\
    \ = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v =\
    \ j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n\
    \    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n \
    \   var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n  \
    \  var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n   \
    \ var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var\
    \ v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a\
    \ = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f =\
    \ j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n\
    \    var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n \
    \   var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n  \
    \  var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n   \
    \ var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var\
    \ f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k\
    \ = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p =\
    \ j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n\
    \    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n \
    \   var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n  \
    \  var f = j\n    var g = j", '    return monotonicWithContext(l, ContextualLoad())',
  "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while i < j {\n\
    \        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            return true\n        }\n  \
    \      if i == k {\n            return false\n        }\n        if l[i] < l[k]\
    \ {\n            k += 1\n        }\n    }\n    return false", '    return monotonic(l,
    l.count)', "    let sorted = l.sorted()\n    return sorted.first >= sorted.last",
  '    return monotonicImpl(l)', "    var i = 0\n    var j = l.count - 1\n    var\
    \ k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n\
    \        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n     \
    \       return true\n        }\n        if i < k {\n            k = j\n      \
    \  }\n    }\n    return false", "    var i = 0\n    var j = l.count - 1\n    var\
    \ k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n\
    \        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n     \
    \       i += 1\n            j -= 1\n        }\n        if i < k {\n          \
    \  k = i\n        }\n    }\n    return j >= i", '    return monotonicWithContext(l,
    ContextualLoad())', "    var monotonic = true\n    for idx, val in\n        l.enumerate().reverse().enumerate().reverse()\
    \ {\n        if val < l[idx - 1] {\n            monotonic = false\n          \
    \  break\n        }\n    }\n    return monotonic", '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    for v in l {\n        if v < l[i-1] {\n           \
    \ return false\n        }\n        i += 1\n    }\n    return true", "    if l.isEmpty()\
    \ {\n        return true\n    }\n    var left = 0\n    var right = l.count - 1\n\
    \    var mid = 0\n    var leftIsSmaller = true\n    var rightIsSmaller = true\n\
    \    var leftIsLarger = true\n    var rightIsLarger = true\n    var leftIsLargerOrEqual\
    \ = true\n    var rightIsLargerOrEqual = true\n    var leftIsGreater = true\n\
    \    var rightIsGreater = true\n    while left < right {\n        mid = left +\
    \ (right - left) / 2\n        if l[mid] < l[left] {\n            leftIsSmaller\
    \ = false\n        } else {\n            rightIsSmaller = false\n        }\n \
    \       if l[mid] > l[right] {\n            rightIsSmaller = false\n        }\
    \ else {\n            leftIsSmaller = true\n        }\n        if l[mid] < l[left]\
    \ {\n            leftIsLarger = false\n        } else {\n            rightIsLarger\
    \ = false\n        }\n        if l[mid] > l[right] {\n            rightIsLarger\
    \ = false\n        } else {\n            leftIsLarger = true\n        }\n    \
    \    if l[mid] < l[left] {\n            leftIsLargerOrEqual = false\n        }\
    \ else {\n            rightIsLargerOrEqual = false\n        }\n        if l[mid]\
    \ > l[right] {\n            rightIsLargerOrEqual = false\n        } else {\n \
    \           leftIsLargerOrEqual = true\n        }\n        if l[mid] > l[left]\
    \ {\n            leftIsGreater = false\n        } else {\n            rightIsGreater\
    \ = false\n        }\n        if l[mid] < l[right] {\n            rightIsGreater\
    \ = false\n        } else {\n            leftIsGreater = true\n        }\n   \
    \     if leftIsSmaller && rightIsSmaller {\n            return true\n        }\
    \ else if leftIsLarger && rightIsLarger {\n            return true\n        }\
    \ else if leftIsLargerOrEqual && rightIsLargerOrEqual {\n            return true\n\
    \        } else if leftIsGreater && rightIsGreater {\n            return true\n\
    \        }\n        left = mid\n        right = mid\n    }\n    return false",
  "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var l = 0\n    var m\
    \ = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r =\
    \ 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n\
    \    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n \
    \   var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n  \
    \  var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n   \
    \ var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var\
    \ R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W\
    \ = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n",
  '    return monotonicWithOptions(l, options: [])', '    return monotonicWithContext(l,
    nil)', '    return monotonicImpl(l, l.count)', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithOptions([Int](l), nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j =\
    \ l.count - 1\n    var k = j - 1\n    var m = Int64(math.MaxInt64)\n    for ;\
    \ j < k; j = k {\n        if l[j] > l[k] {\n            m = l[j]\n        } else\
    \ {\n            m = l[k]\n        }\n        if m > l[i] {\n            i = j\n\
    \        }\n        k = j - 1\n    }\n    if l[j] < l[k] {\n        m = l[j]\n\
    \    } else {\n        m = l[k]\n    }\n    return m > l[i]", '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', "    let n = l.count\n    if n < 2 {\n        return true\n    }\n    var\
    \ i = 0\n    var j = n - 1\n    var k = 0\n    while i < n && j < n {\n      \
    \  if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n   \
    \         j -= 1\n        } else {\n            k += 1\n        }\n    }\n   \
    \ return k == n", '    return monotonicWithContext(l, nil)', "    if l.isEmpty\
    \ {\n        return true\n    }\n    if l.count == 1 {\n        return true\n\
    \    }\n    if l.count == 2 {\n        return l[0] < l[1]\n    }\n    var last\
    \ = 0\n    var next = 1\n    for idx in 0..<l.count {\n        if l[idx] > l[next]\
    \ {\n            last = idx\n        } else {\n            next = idx + 1\n  \
    \      }\n    }\n    return l[last] < l[next]", '    return monotonicWithContext(l,
    nil)', '    return monotonicImpl(l)', '    return monotonicImpl(l)', '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, ContextualLoad())', '    return monotonicImpl(l)', '    return
    monotonicWithOptions([Int](l), options: [])', '    return monotonicImpl(l, l.count)',
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    for v in l {\n  \
    \      if v < l[i] {\n            return false\n        }\n        if v > l[i]\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return true",
  "    var monotonic = true\n    for i := 0; i < len(l); i++ {\n        if l[i] <\
    \ l[i-1] {\n            monotonic = false\n            break\n        }\n    }\n\
    \    return monotonic", '    return monotonicWithOptions([Int](l), nil)', '    return
    monotonicWithContext(l, ContextualLoad())', "    var i = 0\n    for v in l {\n\
    \        if v < l[i-1] {\n            return false\n        }\n        i += 1\n\
    \    }\n    return true", "    let n = l.count\n    if n < 2 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    let mut\
    \ i = n - 1\n    let mut j = n - 1\n    let mut k = n - 1\n    while i >= 0 {\n\
    \        if l[i] > l[j] {\n            k = i\n        } else {\n            j\
    \ = i\n        }\n        i -= 1\n    }\n    while j >= 0 {\n        if l[j] >\
    \ l[k] {\n            i = j\n        } else {\n            k = j\n        }\n\
    \        j -= 1\n    }\n    return l[i] > l[k]", "    let len = l.count\n    if\
    \ len == 0 {\n        return true\n    }\n    if len == 1 {\n        return l[0]\
    \ > l[0]\n    }\n    if len == 2 {\n        return l[0] > l[1]\n    }\n    if\
    \ len == 3 {\n        return l[0] > l[1] && l[1] > l[2]\n    }\n    if len ==\
    \ 4 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if\
    \ len == 5 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3]\
    \ > l[4]\n    }\n    if len == 6 {\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n    }\n    if len == 7 {\n   \
    \     return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6]\n    }\n    if len == 8 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] &&\
    \ l[6] > l[7]\n    }\n    if len == 9 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\
    \ && l[7] > l[8]\n    }\n    if len == 10 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] >\
    \ l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n    if len == 11 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10]\n    }\n\
    \    if len == 12 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
    \ && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] &&\
    \ l[8] > l[9] && l[9] > l[10] && l[10", "    var i = 0\n    for x in l {\n   \
    \     if i > 0 {\n            if x < l[i-1] {\n                return false\n\
    \            }\n        }\n        i = i + 1\n    }\n    return true", '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', "  \
    \  if l.count < 2 {\n        return true\n    }\n\n    var prev = 0\n    var curr\
    \ = l[0]\n    for idx in 1..<l.count {\n        if curr < l[idx] {\n         \
    \   return false\n        }\n        if prev < l[idx] {\n            prev = curr\n\
    \            curr = l[idx]\n        }\n    }\n    return true", "    var i = 0\n\
    \    for x in l {\n        if x < l[i] {\n            return false\n        }\n\
    \        if x > l[i] {\n            return true\n        }\n        i += 1\n \
    \   }\n    return true", '    return monotonicWithContext(l, nil)', '    return
    monotonicWithOptions([Int](l), nil)', '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count -\
    \ 1\n    var k = j - 1\n    var monotonic = true\n    while i < j {\n        if\
    \ l[i] > l[j] {\n            monotonic = false\n            break\n        }\n\
    \        if l[i] < l[k] {\n            k = j\n        }\n        i += 1\n    \
    \    j -= 1\n    }\n    return monotonic", "    var i = 0\n    var j = l.count\
    \ - 1\n    var k = j - 1\n    var m = Int64(0)\n    var n = Int64(0)\n    var\
    \ o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n",
  '    return monotonicImpl(l, l.count)', '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, nil)', "    var monotonic = true\n    for idx,\
    \ val := range l {\n        if val < l[idx-1] {\n            monotonic = false\n\
    \            break\n        }\n    }\n    return monotonic", "    var i = 0\n\
    \    var j = l.count - 1\n    var k = 0\n    var l2 = l.count\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var ", '    return monotonicWithContext(l, nil)', "    let n =\
    \ l.count\n    if n < 2 {\n        return true\n    }\n    if n == 2 {\n     \
    \   return l[0] < l[1]\n    }\n    if n == 3 {\n        return l[0] < l[1] &&\
    \ l[1] < l[2]\n    }\n    if n == 4 {\n        return l[0] < l[1] && l[1] < l[2]\
    \ && l[2] < l[3]\n    }\n    if n == 5 {\n        return l[0] < l[1] && l[1] <\
    \ l[2] && l[2] < l[3] && l[3] < l[4]\n    }\n    if n == 6 {\n        return l[0]\
    \ < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5]\n    }\n\
    \    if n == 7 {\n        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] &&\
    \ l[3] < l[4] && l[4] < l[5] && l[5] < l[6]\n    }\n    if n == 8 {\n        return\
    \ l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5] && l[5]\
    \ < l[6] && l[6] < l[7]\n    }\n    if n == 9 {\n        return l[0] < l[1] &&\
    \ l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5] && l[5] < l[6] && l[6]\
    \ < l[7] && l[7] < l[8]\n    }\n    if n == 10 {\n        return l[0] < l[1] &&\
    \ l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5] && l[5] < l[6] && l[6]\
    \ < l[7] && l[7] < l[8] && l[8] < l[9]\n    }\n    if n == 11 {\n        return\
    \ l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5] && l[5]\
    \ < l[6] && l[6] < l[7] && l[7] < l[8] && l[8] < l[9] && l[9] < l[10]\n    }\n\
    \    if n == 12 {\n        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] &&\
    \ l[3] < l[4] && l[4] < l[5] && l[5] < l[6] && l[6] < l[7] && l[7] < l[8] && l[8]\
    \ < l[9] && l[9] < l[10] && l[10] < l[11]\n    }\n    if n == 13 {\n        return\
    \ l[0] < l", '    return monotonicWithContext(l, nil)', '    return monotonic(l,
    isIncreasing: true)', "    let sorted = l.sorted()\n    return sorted.first ==\
    \ sorted.last", "    var i = 0\n    for x in l {\n        if x > l[i] {\n    \
    \        return false\n        }\n        i += 1\n    }\n    return true", '    return
    monotonicWithOptions([Int](l), nil)', '    return monotonicWithContext(l, nil)',
  "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var l2 = l.count\n \
    \   var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var ", "    let sorted = l.sorted()\n  \
    \  return sorted.first == sorted.last", "    let l = l.sorted()\n    return l.first\
    \ <= l.last", "    if l.count < 2 {\n        return true\n    }\n    var prev\
    \ = 0\n    for x in l {\n        if prev < x {\n            return false\n   \
    \     }\n        prev = x\n    }\n    return true", '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', "    var i = 0\n    for x in\
    \ l {\n        if i == 0 || x > l[i-1] {\n            return true\n        }\n\
    \        i += 1\n    }\n    return false", '    return monotonic(l, l.count)',
  "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var monotonic = true\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            k += 1\n\
    \            if k > 1 {\n                monotonic = false\n            }\n  \
    \      }\n    }\n    return monotonic", "    var i = 0\n    var j = l.count -\
    \ 1\n    var k = j - 1\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var aa = Int64(l.count)\n    var ab = Int64(l.count)\n    var ac = Int64(l.count)\n\
    \    var ad = Int64(l.count)\n    var ah = Int64(l.count)\n    var ai = Int64(l.count)\n\
    \    var aj = Int64(l.count)\n    var ak = Int64(l.count)\n    var al = Int64(l.count)\n\
    \    var am = Int64(l.count)\n    var an = Int64(l.count)\n    var ao = Int64(l.count)\n\
    \    var ap = Int64(l.count)\n    var aq = Int64(l.count)\n    var ar = Int64(l.count)\n\
    \    var as = Int64(l.count)\n    var at = Int64(l.count)\n    var au = Int64(l.count)\n\
    \    var av = Int64(l.count)\n    var aw = Int64(l.count)\n    var ax = Int64(l.count)\n\
    \    var ay = Int64(l.count)\n    var az = Int64(l.count)\n    var aA = Int64(l.count)\n\
    \    var aB = Int64(l.count)\n    var aC = Int64(l.count)\n    var aD = Int64(l.count)\n\
    \    var aE = Int64(l.count)\n    var aF = Int64(l.count)\n    var aG = Int64(l.count)\n\
    \    var aH = Int64(l.count)\n    var aI = Int64(l.count)\n    var aJ = Int64(l.count)\n\
    \    var aK = Int64(l.count)\n    var aL = Int64(l.count)\n    var aM = Int64(l.count)\n\
    \    var aN = Int64(l.count)\n    var aO = Int64(l.count)\n    var aP = Int64(l.count)\n\
    \    var aQ = Int64(l.count)\n    var aR = Int64(l.count)\n    var aS = Int64(l.count)\n\
    \    var aT = Int64(l.count)\n    var aU = Int64(l.count)\n    var aV = Int64(l.count)\n\
    \    var aW = Int64(l.count)\n    var aX = Int64(l.count)\n    var aY = Int64(l.count)\n\
    \    var aZ = Int64(l.count)\n", "    var i = 0\n    for v in l {\n        if\
    \ v < l[i] {\n            return false\n        }\n        if v > l[i] {\n   \
    \         return true\n        }\n        i += 1\n    }\n    return true", '    return
    monotonicWithContext(l, nil)', "    let n = l.count\n    if n < 2 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n ==\
    \ 3 {\n        return l[0] > l[1] && l[1] > l[2]\n    }\n    let mut i = 0;\n\
    \    let mut j = n - 1;\n    let mut k = n - 2;\n    while i < j {\n        if\
    \ l[i] < l[j] {\n            k = j\n        } else {\n            i = i + 1\n\
    \        }\n        j = k - 1\n    }\n    return l[i] > l[j]", "    let sorted\
    \ = l.sorted()\n    return sorted.first == sorted.last", "    var i = 0\n    var\
    \ j = l.count\n    var k = j - 1\n    var m = j\n    var n = j\n    var o = j\n\
    \    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n \
    \   var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n  \
    \  var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n   \
    \ var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var\
    \ j = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o\
    \ = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t =\
    \ j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n\
    \    var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n \
    \   var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n  \
    \  var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n   \
    \ var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var\
    \ t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y\
    \ = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d =\
    \ j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n\
    \    var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n \
    \   var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n  \
    \  var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n   \
    \ var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n    var\
    \ d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i\
    \ = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n =\
    \ j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n\
    \    var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n \
    \   var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n  \
    \  var d = j\n    var e = j\n    var f = j\n    var g = j", "    var monotonic\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx - 1] {\n   \
    \         monotonic = false\n            break\n        }\n    }\n    return monotonic",
  "    if l.count < 2 {\n        return true\n    }\n    var left = 0\n    var right\
    \ = l.count - 1\n    var mid = 0\n    var result = true\n    while left < right\
    \ {\n        mid = (left + right) / 2\n        if l[mid] < l[mid+1] {\n      \
    \      left = mid + 1\n        } else {\n            right = mid\n        }\n\
    \        if l[mid] < l[left] {\n            result = false\n            break\n\
    \        }\n    }\n    return result", '    return monotonicWithContext(l, nil)',
  "    let n = l.count\n    if n < 2 {\n        return true\n    }\n    if n == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n        return l[0] >\
    \ l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n == 6 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n  \
    \  }\n    if n == 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
    \ && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if n == 8 {\n     \
    \   return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] >\
    \ l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] >\
    \ l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n    return false",
  "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var monotonic =\
    \ true\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n    \
    \    } else if l[i] > l[j] {\n            j -= 1\n        } else {\n         \
    \   if l[i] < l[k] {\n                monotonic = false\n            } else {\n\
    \                i += 1\n                j -= 1\n                k += 1\n    \
    \        }\n        }\n    }\n    return monotonic", "    let sorted = l.sorted()\n\
    \    return sorted.first == sorted.last", '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    var j = l.count\n    var k = j - 1\n    var m = j\n\
    \    var n = j\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = j\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n \
    \   var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n\
    \    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al =\
    \ 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq\
    \ = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var\
    \ av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n   \
    \ var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n\
    \    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj =\
    \ 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo\
    \ = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var\
    \ bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n   \
    \ var by = 0\n    var bz = 0\n    var ca = 0\n    var cb = 0\n    var cc = 0\n\
    \    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg = 0\n    var ch =\
    \ 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n    var cl = 0\n    var cm\
    \ = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n    var cq = 0\n    var\
    \ cr = 0\n    var cs = 0\n    var ct = 0\n    var cu = 0\n    var cv = 0\n   \
    \ var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz = 0\n    var da = 0\n\
    \    var db = 0\n    var dc = 0\n    var dd = 0\n    var de = 0\n    var df =\
    \ 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n    var dj = 0\n    var dk\
    \ = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n    var do = 0\n    var\
    \ dp = 0\n    var dq = 0\n    var dr = 0\n    var ds = 0\n    var dt = 0\n   \
    \ var du = 0\n    var dv = 0\n    var dw = 0\n    var dx = 0\n    var dy = 0\n\
    \    var dz = 0\n    var ea = 0\n    var eb = 0\n    var ec = 0\n    var ed =\
    \ 0\n    var ee = 0\n    var ef = 0\n", '    return monotonicWithOptions([Int](l),
    nil)', '    return monotonicWithContext(l, Context())', "    var i = 0\n    var\
    \ j = l.count\n    var k = 0\n    var monotonic = true\n    while i < j {\n  \
    \      if l[i] < l[j] {\n            k = i\n        } else {\n            k =\
    \ j\n        }\n        if k - i < 2 {\n            monotonic = false\n      \
    \      break\n        }\n        if l[i] > l[k] {\n            j = k\n       \
    \ } else {\n            i = k\n        }\n    }\n    return monotonic", "    var\
    \ i = 0\n    for v in l {\n        if v < l[i] {\n            return false\n \
    \       }\n        if v > l[i] {\n            return true\n        }\n       \
    \ i += 1\n    }\n    return i == len(l)", '    return monotonicImpl(l)', "   \
    \ var i = 0\n    for v in l {\n        if v < l[i] {\n            return false\n\
    \        }\n        if v > l[i] {\n            return true\n        }\n      \
    \  i += 1\n    }\n    return i == len(l)", '    return monotonicWithContext(l,
    nil)', "    let n = l.count\n    if n < 2 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return l[0] > l[1]\n    }\n    var left = 0\n    var right\
    \ = n - 1\n    var mid = 0\n    var leftIsSmaller = true\n    var rightIsSmaller\
    \ = true\n    while left < right {\n        mid = (left + right) / 2\n       \
    \ if l[mid] < l[left] {\n            leftIsSmaller = false\n        }\n      \
    \  if l[mid] > l[right] {\n            rightIsSmaller = false\n        }\n   \
    \     if leftIsSmaller && rightIsSmaller {\n            return true\n        }\n\
    \        if l[mid] < l[left] {\n            left = mid + 1\n        } else {\n\
    \            right = mid - 1\n        }\n    }\n    return leftIsSmaller", '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, ContextualLoad())',
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count -\
    \ 1\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n       \
    \ } else if l[i] > l[j] {\n            j -= 1\n        } else {\n            return\
    \ true\n        }\n    }\n    return false", "    var i = 0\n    for x in l {\n\
    \        if i == 0 {\n            i = x\n            continue\n        }\n   \
    \     if x < i {\n            return false\n        }\n        i = x\n    }\n\
    \    return true", '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    ContextualLoad())', '    return monotonicWithContext(l, nil)', "    if l.isEmpty\
    \ {\n        return true\n    }\n    if l.count == 1 {\n        return true\n\
    \    }\n    if l.count == 2 {\n        return l[0] > l[1]\n    }\n    if l.count\
    \ == 3 {\n        return l[0] > l[1] && l[1] > l[2]\n    }\n    if l.count ==\
    \ 4 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if\
    \ l.count == 5 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4]\n    }\n    if l.count == 6 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n    }\n    if l.count ==\
    \ 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6]\n    }\n    if l.count == 8 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7]\n    }\n    if l.count == 9 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] &&\
    \ l[6] > l[7] && l[7] > l[8]\n    }\n    if l.count == 10 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] >\
    \ l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n    if l.count ==\
    \ 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] &&\
    \ l[9] > l[10]\n    }\n    if l.count == 12 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] >\
    \ l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10", "    var monotonic\
    \ = true\n    var last = 0\n    for x in l {\n        if x == last {\n       \
    \     monotonic = false\n        } else {\n            last = x\n        }\n \
    \   }\n    return monotonic", "    if l.count < 2 {\n        return true\n   \
    \ }\n    var max = 0\n    var min = l[0]\n    for i in 1..<l.count {\n       \
    \ if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n\
    \            max = l[i]\n        }\n    }\n    return min <= max", '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, nil)', "    var monotonic = true\n    for i := 0; i <\
    \ len(l); i++ {\n        if l[i] < l[i-1] {\n            monotonic = false\n \
    \           break\n        }\n    }\n    return monotonic", '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', '    return monotonicWithOptions([Int](l),
    nil)', '    return monotonicImpl(l)', "    let l = l.sorted()\n    if l.first\
    \ == l.last {\n        return true\n    }\n    if l.first > l.last {\n       \
    \ return false\n    }\n    if l.first == 0 {\n        return true\n    }\n   \
    \ if l.last == 0 {\n        return false\n    }\n    if l.first > l.last {\n \
    \       return false\n    }\n    if l.first == l.last {\n        return true\n\
    \    }\n    if l.first < l.last {\n        return true\n    }\n    return false"]
stop_tokens:
- "\n}"
