language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % 3 == 0 {\n        return\
    \ true\n    }\n    if a % 5 == 0 {\n        return true\n    }\n    if a % 7 ==\
    \ 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbwrrh8b4/tmpbwrrh8b4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5703a6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5703764b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5703764988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57037637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwrrh8b4                        0x0000558fd38c4241 <unavailable> + 4673

    5    libc.so.6                          0x00002b5703c59460 __libc_start_main +
    245

    6    tmpbwrrh8b4                        0x0000558fd38c3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return false\n    }\n    if a < 6 {\n\
    \        return false\n    }\n    if a < 7 {\n        return false\n    }\n  \
    \  if a < 8 {\n        return false\n    }\n    if a < 9 {\n        return false\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return false\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return false\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return false\n    }\n    if a < 16 {\n      \
    \  return false\n    }\n    if a < 17 {\n        return false\n    }\n    if a\
    \ < 18 {\n        return false\n    }\n    if a < 19 {\n        return false\n\
    \    }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n      \
    \  return false\n    }\n    if a < 22 {\n        return false\n    }\n    if a\
    \ < 23 {\n        return false\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 25 {\n        return false\n    }\n    if a < 26 {\n      \
    \  return false\n    }\n    if a < 27 {\n        return false\n    }\n    if a\
    \ < 28 {\n        return false\n    }\n    if a < 29 {\n        return false\n\
    \    }\n    if a < 30 {\n        return false\n    }\n    if a < 31 {\n      \
    \  return false\n    }\n    if a < 32 {\n        return false\n    }\n    if a\
    \ < 33 {\n        return false\n    }\n    if a < 34 {\n        return false\n\
    \    }\n    if a < 35 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a < 37 {\n        return false\n    }\n    if a\
    \ < 38 {\n        return false\n    }\n    if a < 39 {\n        return false\n\
    \    }\n    if a < 40 {\n        return false\n    }\n    if a < 41 {\n      \
    \  return false\n    }\n    if a < 42 {\n        return false\n    }\n    if a\
    \ < 43 {\n        return false\n    }\n    if a < 44 {\n        return false\n\
    \    }\n    if a < 45 {\n        return false\n    }\n    if a < 46 {\n      \
    \  return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjadyper5.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7fwwss5l/tmp7fwwss5l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9c1452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9c1149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9c1149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9c11487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fwwss5l                        0x000055b06cb01227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab9c163e460 __libc_start_main +
    245

    6    tmp7fwwss5l                        0x000055b06cb00e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_90vc_z_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return false\n    }\n    if a < 6 {\n\
    \        return false\n    }\n    if a < 7 {\n        return false\n    }\n  \
    \  if a < 8 {\n        return false\n    }\n    if a < 9 {\n        return false\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return false\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return false\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return false\n    }\n    if a < 16 {\n      \
    \  return false\n    }\n    if a < 17 {\n        return false\n    }\n    if a\
    \ < 18 {\n        return false\n    }\n    if a < 19 {\n        return false\n\
    \    }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n      \
    \  return false\n    }\n    if a < 22 {\n        return false\n    }\n    if a\
    \ < 23 {\n        return false\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 25 {\n        return false\n    }\n    if a < 26 {\n      \
    \  return false\n    }\n    if a < 27 {\n        return false\n    }\n    if a\
    \ < 28 {\n        return false\n    }\n    if a < 29 {\n        return false\n\
    \    }\n    if a < 30 {\n        return false\n    }\n    if a < 31 {\n      \
    \  return false\n    }\n    if a < 32 {\n        return false\n    }\n    if a\
    \ < 33 {\n        return false\n    }\n    if a < 34 {\n        return false\n\
    \    }\n    if a < 35 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a < 37 {\n        return false\n    }\n    if a\
    \ < 38 {\n        return false\n    }\n    if a < 39 {\n        return false\n\
    \    }\n    if a < 40 {\n        return false\n    }\n    if a < 41 {\n      \
    \  return false\n    }\n    if a < 42 {\n        return false\n    }\n    if a\
    \ < 43 {\n        return false\n    }\n    if a < 44 {\n        return false\n\
    \    }\n    if a < 45 {\n        return false\n    }\n    if a < 46 {\n      \
    \  return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjadyper5.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm08ocdw_.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpm08ocdw_.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpm08ocdw_.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpm08ocdw_.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwlru5cqk.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpwlru5cqk.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpwlru5cqk.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpmlp1p2by/tmpmlp1p2by.swift:132: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6931838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b693152fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b693152f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b693152e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlp1p2by                        0x0000558530b79227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6931a24460 __libc_start_main +
    245

    6    tmpmlp1p2by                        0x0000558530b78e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_90vc_z_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwlru5cqk.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpwlru5cqk.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpwlru5cqk.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpc1e4j0ou/tmpc1e4j0ou.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1300ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13009e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13009e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13009e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc1e4j0ou                        0x000055ef99c91227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1300eda460 __libc_start_main +
    245

    6    tmpc1e4j0ou                        0x000055ef99c90e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm08ocdw_.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpm08ocdw_.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpm08ocdw_.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpm08ocdw_.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwlru5cqk.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpwlru5cqk.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpwlru5cqk.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5dqzroip/tmp5dqzroip.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5b68ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5b65e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5b65e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5b65e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dqzroip                        0x00005600af7902b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba5b6ad7460 __libc_start_main +
    245

    6    tmp5dqzroip                        0x00005600af78fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm08ocdw_.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpm08ocdw_.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpm08ocdw_.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpm08ocdw_.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpmlp1p2by/tmpmlp1p2by.swift:132: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6931838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b693152fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b693152f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b693152e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlp1p2by                        0x0000558530b79227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6931a24460 __libc_start_main +
    245

    6    tmpmlp1p2by                        0x0000558530b78e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7fwwss5l/tmp7fwwss5l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9c1452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9c1149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9c1149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9c11487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fwwss5l                        0x000055b06cb01227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab9c163e460 __libc_start_main +
    245

    6    tmp7fwwss5l                        0x000055b06cb00e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 18\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0v2pljhe/tmp0v2pljhe.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ccc547c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ccc23eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ccc23e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ccc23d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0v2pljhe                        0x000055d24ca32227 <unavailable> + 4647

    5    libc.so.6                          0x00002b5ccc733460 __libc_start_main +
    245

    6    tmp0v2pljhe                        0x000055d24ca31e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpmlp1p2by/tmpmlp1p2by.swift:132: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6931838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b693152fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b693152f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b693152e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlp1p2by                        0x0000558530b79227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6931a24460 __libc_start_main +
    245

    6    tmpmlp1p2by                        0x0000558530b78e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 3 {\n        return true\n\
    \    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 9 {\n       \
    \ return true\n    }\n    if a <= 12 {\n        return true\n    }\n    if a <=\
    \ 15 {\n        return true\n    }\n    if a <= 18 {\n        return true\n  \
    \  }\n    if a <= 21 {\n        return true\n    }\n    if a <= 24 {\n       \
    \ return true\n    }\n    if a <= 27 {\n        return true\n    }\n    if a <=\
    \ 30 {\n        return true\n    }\n    if a <= 33 {\n        return true\n  \
    \  }\n    if a <= 36 {\n        return true\n    }\n    if a <= 39 {\n       \
    \ return true\n    }\n    if a <= 42 {\n        return true\n    }\n    if a <=\
    \ 45 {\n        return true\n    }\n    if a <= 48 {\n        return true\n  \
    \  }\n    if a <= 51 {\n        return true\n    }\n    if a <= 54 {\n       \
    \ return true\n    }\n    if a <= 57 {\n        return true\n    }\n    if a <=\
    \ 60 {\n        return true\n    }\n    if a <= 63 {\n        return true\n  \
    \  }\n    if a <= 66 {\n        return true\n    }\n    if a <= 69 {\n       \
    \ return true\n    }\n    if a <= 72 {\n        return true\n    }\n    if a <=\
    \ 75 {\n        return true\n    }\n    if a <= 78 {\n        return true\n  \
    \  }\n    if a <= 81 {\n        return true\n    }\n    if a <= 84 {\n       \
    \ return true\n    }\n    if a <= 87 {\n        return true\n    }\n    if a <=\
    \ 90 {\n        return true\n    }\n    if a <= 93 {\n        return true\n  \
    \  }\n    if a <= 96 {\n        return true\n    }\n    if a <= 99 {\n       \
    \ return true\n    }\n    if a <= 102 {\n        return true\n    }\n    if a\
    \ <= 105 {\n        return true\n    }\n    if a <= 108 {\n        return true\n\
    \    }\n    if a <= 111 {\n        return true\n    }\n    if a <= 114 {\n   \
    \     return true\n    }\n    if a <= 117 {\n        return true\n    }\n    if\
    \ a <= 120 {\n        return true\n    }\n    if a <= 123 {\n        return true\n\
    \    }\n    if a <= 126 {\n        return true\n    }\n    if a <= 129 {\n   \
    \     return true\n    }\n    if a <= 132 {\n        return true\n    }\n    if\
    \ a <= 135 {\n        return true\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqxisknbc.swift:182:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpqxisknbc.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpqxisknbc.swift:163:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a <= 0 {\n        return false\n    }\n\
    \    if a > 180 {\n        return true\n    }\n    if a > 361 {\n        return\
    \ false\n    }\n    if a > 362 {\n        return true\n    }\n    if a > 363 {\n\
    \        return false\n    }\n    if a > 364 {\n        return true\n    }\n \
    \   if a > 365 {\n        return false\n    }\n    if a > 366 {\n        return\
    \ true\n    }\n    if a > 367 {\n        return false\n    }\n    if a > 368 {\n\
    \        return true\n    }\n    if a > 369 {\n        return false\n    }\n \
    \   if a > 370 {\n        return true\n    }\n    if a > 371 {\n        return\
    \ false\n    }\n    if a > 372 {\n        return true\n    }\n    if a > 373 {\n\
    \        return false\n    }\n    if a > 374 {\n        return true\n    }\n \
    \   if a > 375 {\n        return false\n    }\n    if a > 376 {\n        return\
    \ true\n    }\n    if a > 377 {\n        return false\n    }\n    if a > 378 {\n\
    \        return true\n    }\n    if a > 379 {\n        return false\n    }\n \
    \   if a > 380 {\n        return true\n    }\n    if a > 381 {\n        return\
    \ false\n    }\n    if a > 382 {\n        return true\n    }\n    if a > 383 {\n\
    \        return false\n    }\n    if a > 384 {\n        return true\n    }\n \
    \   if a > 385 {\n        return false\n    }\n    if a > 386 {\n        return\
    \ true\n    }\n    if a > 387 {\n        return false\n    }\n    if a > 388 {\n\
    \        return true\n    }\n    if a > 389 {\n        return false\n    }\n \
    \   if a > 390 {\n        return true\n    }\n    if a > 391 {\n        return\
    \ false\n    }\n    if a > 392 {\n        return true\n    }\n    if a > 393 {\n\
    \        return false\n    }\n    if a > 394 {\n        return true\n    }\n \
    \   if a > 395 {\n        return false\n    }\n    if a > 396 {\n        return\
    \ true\n    }\n    if a > 397 {\n        return false\n    }\n    if a > 398 {\n\
    \        return true\n    }\n    if a > 399 {\n        return false\n    }\n \
    \   if a > 400 {\n        return true\n    }\n    if a > 401 {\n        return\
    \ false\n    }\n    if a > 402 {\n        return true\n    }\n    if a > 403 {\n\
    \        return false\n    }\n    if a > 404 {\n        return true\n    }\n \
    \   if a > \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpxxk3_p9z.swift:158:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm08ocdw_.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpm08ocdw_.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpm08ocdw_.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpm08ocdw_.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5dqzroip/tmp5dqzroip.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5b68ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5b65e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5b65e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5b65e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dqzroip                        0x00005600af7902b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba5b6ad7460 __libc_start_main +
    245

    6    tmp5dqzroip                        0x00005600af78fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    if a < 4294967296 {\n        return true\n  \
    \  }\n    if a < 8589934592 {\n        return true\n    }\n    if a < 17179869184\
    \ {\n        return true\n    }\n    if a < 34359738368 {\n        return true\n\
    \    }\n    if a < 68719476736 {\n        return true\n    }\n    if a < 137438953472\
    \ {\n        return true\n    }\n    if a < 274877906944 {\n        return true\n\
    \    }\n    if a < 549755813888 {\n        return true\n    }\n    if a < 10995\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpchs09cyk.swift:139:17: error: expected '{' after 'if' condition\n\
    \    if a < 10995\n                ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   var cube = Int(a) * Int(a) * Int(a)\n    if cube == 1 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp9vtiwa0z/tmp9vtiwa0z.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad191187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad190e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad190e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad190e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vtiwa0z                        0x000055f39a44c3cd <unavailable> + 5069

    5    libc.so.6                          0x00002ad191373460 __libc_start_main +
    245

    6    tmp9vtiwa0z                        0x000055f39a44bf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpc1e4j0ou/tmpc1e4j0ou.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1300ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13009e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13009e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13009e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc1e4j0ou                        0x000055ef99c91227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1300eda460 __libc_start_main +
    245

    6    tmpc1e4j0ou                        0x000055ef99c90e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a <= 0 {\n        return false\n    }\n\
    \    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n        return true\n    }\n    if a ==\
    \ 51 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkpu9b40_.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpkpu9b40_.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpkpu9b40_.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpkpu9b40_.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64 && a % 1 == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpy_eokdq9/tmpy_eokdq9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b771f341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b771f038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b771f038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b771f0377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_eokdq9                        0x000055692e0bb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b771f52d460 __libc_start_main +
    245

    6    tmpy_eokdq9                        0x000055692e0baef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 180 && (a % 6) == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmprn8rtuoe/tmprn8rtuoe.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc05bcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc058c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc058c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc058c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprn8rtuoe                        0x000056193e48f241 <unavailable> + 4673

    5    libc.so.6                          0x00002adc05db6460 __libc_start_main +
    245

    6    tmprn8rtuoe                        0x000056193e48eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7fwwss5l/tmp7fwwss5l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9c1452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9c1149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9c1149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9c11487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fwwss5l                        0x000055b06cb01227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab9c163e460 __libc_start_main +
    245

    6    tmp7fwwss5l                        0x000055b06cb00e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_90vc_z_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp5dqzroip/tmp5dqzroip.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5b68ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5b65e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5b65e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5b65e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dqzroip                        0x00005600af7902b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba5b6ad7460 __libc_start_main +
    245

    6    tmp5dqzroip                        0x00005600af78fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return false\n    }\n    if a < 6 {\n\
    \        return false\n    }\n    if a < 7 {\n        return false\n    }\n  \
    \  if a < 8 {\n        return false\n    }\n    if a < 9 {\n        return false\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return false\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return false\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return false\n    }\n    if a < 16 {\n      \
    \  return false\n    }\n    if a < 17 {\n        return false\n    }\n    if a\
    \ < 18 {\n        return false\n    }\n    if a < 19 {\n        return false\n\
    \    }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n      \
    \  return false\n    }\n    if a < 22 {\n        return false\n    }\n    if a\
    \ < 23 {\n        return false\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 25 {\n        return false\n    }\n    if a < 26 {\n      \
    \  return false\n    }\n    if a < 27 {\n        return false\n    }\n    if a\
    \ < 28 {\n        return false\n    }\n    if a < 29 {\n        return false\n\
    \    }\n    if a < 30 {\n        return false\n    }\n    if a < 31 {\n      \
    \  return false\n    }\n    if a < 32 {\n        return false\n    }\n    if a\
    \ < 33 {\n        return false\n    }\n    if a < 34 {\n        return false\n\
    \    }\n    if a < 35 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a < 37 {\n        return false\n    }\n    if a\
    \ < 38 {\n        return false\n    }\n    if a < 39 {\n        return false\n\
    \    }\n    if a < 40 {\n        return false\n    }\n    if a < 41 {\n      \
    \  return false\n    }\n    if a < 42 {\n        return false\n    }\n    if a\
    \ < 43 {\n        return false\n    }\n    if a < 44 {\n        return false\n\
    \    }\n    if a < 45 {\n        return false\n    }\n    if a < 46 {\n      \
    \  return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjadyper5.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 180 && (a % 180) !=\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpzbndih2u/tmpzbndih2u.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89e3fa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89e3c9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89e3c9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89e3c9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbndih2u                        0x000055fe879f32b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b89e4193460 __libc_start_main +
    245

    6    tmpzbndih2u                        0x000055fe879f2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 3 {\n        return true\n\
    \    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 9 {\n       \
    \ return true\n    }\n    if a <= 12 {\n        return true\n    }\n    if a <=\
    \ 15 {\n        return true\n    }\n    if a <= 18 {\n        return true\n  \
    \  }\n    if a <= 21 {\n        return true\n    }\n    if a <= 24 {\n       \
    \ return true\n    }\n    if a <= 27 {\n        return true\n    }\n    if a <=\
    \ 30 {\n        return true\n    }\n    if a <= 33 {\n        return true\n  \
    \  }\n    if a <= 36 {\n        return true\n    }\n    if a <= 39 {\n       \
    \ return true\n    }\n    if a <= 42 {\n        return true\n    }\n    if a <=\
    \ 45 {\n        return true\n    }\n    if a <= 48 {\n        return true\n  \
    \  }\n    if a <= 51 {\n        return true\n    }\n    if a <= 54 {\n       \
    \ return true\n    }\n    if a <= 57 {\n        return true\n    }\n    if a <=\
    \ 60 {\n        return true\n    }\n    if a <= 63 {\n        return true\n  \
    \  }\n    if a <= 66 {\n        return true\n    }\n    if a <= 69 {\n       \
    \ return true\n    }\n    if a <= 72 {\n        return true\n    }\n    if a <=\
    \ 75 {\n        return true\n    }\n    if a <= 78 {\n        return true\n  \
    \  }\n    if a <= 81 {\n        return true\n    }\n    if a <= 84 {\n       \
    \ return true\n    }\n    if a <= 87 {\n        return true\n    }\n    if a <=\
    \ 90 {\n        return true\n    }\n    if a <= 93 {\n        return true\n  \
    \  }\n    if a <= 96 {\n        return true\n    }\n    if a <= 99 {\n       \
    \ return true\n    }\n    if a <= 102 {\n        return true\n    }\n    if a\
    \ <= 105 {\n        return true\n    }\n    if a <= 108 {\n        return true\n\
    \    }\n    if a <= 111 {\n        return true\n    }\n    if a <= 114 {\n   \
    \     return true\n    }\n    if a <= 117 {\n        return true\n    }\n    if\
    \ a <= 120 {\n        return true\n    }\n    if a <= 123 {\n        return true\n\
    \    }\n    if a <= 126 {\n        return true\n    }\n    if a <= 129 {\n   \
    \     return true\n    }\n    if a <= 132 {\n        return true\n    }\n    if\
    \ a <= 135 {\n        return true\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqxisknbc.swift:182:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpqxisknbc.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpqxisknbc.swift:163:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    if a < 4294967296 {\n        return true\n  \
    \  }\n    if a < 8589934592 {\n        return true\n    }\n    if a < 17179869184\
    \ {\n        return true\n    }\n    if a < 34359738368 {\n        return true\n\
    \    }\n    if a < 68719476736 {\n        return true\n    }\n    if a < 137438953472\
    \ {\n        return true\n    }\n    if a < 274877906944 {\n        return true\n\
    \    }\n    if a < 549755813888 {\n        return true\n    }\n    if a < 10995\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpchs09cyk.swift:139:17: error: expected '{' after 'if' condition\n\
    \    if a < 10995\n                ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwlru5cqk.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpwlru5cqk.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpwlru5cqk.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_90vc_z_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 6 {\n        return false\n\
    \    }\n    if a % 3 == 0 {\n        return true\n    }\n    if a % 3 == 1 {\n\
    \        return false\n    }\n    if a % 3 == 2 {\n        return true\n    }\n\
    \    if a % 3 == 3 {\n        return true\n    }\n    if a % 3 == 4 {\n      \
    \  return false\n    }\n    if a % 3 == 5 {\n        return true\n    }\n    if\
    \ a % 3 == 6 {\n        return false\n    }\n    if a % 3 == 7 {\n        return\
    \ true\n    }\n    if a % 3 == 8 {\n        return false\n    }\n    if a % 3\
    \ == 9 {\n        return true\n    }\n    if a % 3 == 10 {\n        return false\n\
    \    }\n    if a % 3 == 11 {\n        return true\n    }\n    if a % 3 == 12 {\n\
    \        return false\n    }\n    if a % 3 == 13 {\n        return true\n    }\n\
    \    if a % 3 == 14 {\n        return false\n    }\n    if a % 3 == 15 {\n   \
    \     return true\n    }\n    if a % 3 == 16 {\n        return false\n    }\n\
    \    if a % 3 == 17 {\n        return true\n    }\n    if a % 3 == 18 {\n    \
    \    return false\n    }\n    if a % 3 == 19 {\n        return true\n    }\n \
    \   if a % 3 == 20 {\n        return false\n    }\n    if a % 3 == 21 {\n    \
    \    return true\n    }\n    if a % 3 == 22 {\n        return false\n    }\n \
    \   if a % 3 == 23 {\n        return true\n    }\n    if a % 3 == 24 {\n     \
    \   return false\n    }\n    if a % 3 == 25 {\n        return true\n    }\n  \
    \  if a % 3 == 26 {\n        return false\n    }\n    if a % 3 == 27 {\n     \
    \   return true\n    }\n    if a % 3 == 28 {\n        return false\n    }\n  \
    \  if a % 3 == 29 {\n        return true\n    }\n    if a % 3 == 30 {\n      \
    \  return false\n    }\n    if a % 3 == 31 {\n        return true\n    }\n   \
    \ if a % 3 == 32 {\n        return false\n    }\n    if a % 3 == 33 {\n      \
    \  return true\n    }\n    if a % 3 == 34 {\n        return false\n    }\n   \
    \ if a % 3 == 35 {\n        return true\n    }\n    if a % 3 == 36 {\n       \
    \ return false\n    }\n    if a % 3 == 37 {\n        return true\n    }\n    if\
    \ a % 3 == 38 {\n        return false\n    }\n    if a % 3 == 39 {\n        return\
    \ true\n    }\n    if a % 3 == 40 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptx98rdz1.swift:172:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmptx98rdz1.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmptx98rdz1.swift:153:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7fwwss5l/tmp7fwwss5l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9c1452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9c1149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9c1149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9c11487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fwwss5l                        0x000055b06cb01227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab9c163e460 __libc_start_main +
    245

    6    tmp7fwwss5l                        0x000055b06cb00e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 1 {\n        return true\n    }\n    if a < 2 {\n        return true\n\
    \    }\n    if a < 3 {\n        return true\n    }\n    if a < 4 {\n        return\
    \ true\n    }\n    if a < 5 {\n        return true\n    }\n    if a < 6 {\n  \
    \      return true\n    }\n    if a < 7 {\n        return true\n    }\n    if\
    \ a < 8 {\n        return true\n    }\n    if a < 9 {\n        return true\n \
    \   }\n    if a < 10 {\n        return true\n    }\n    if a < 11 {\n        return\
    \ true\n    }\n    if a < 12 {\n        return true\n    }\n    if a < 13 {\n\
    \        return true\n    }\n    if a < 14 {\n        return true\n    }\n   \
    \ if a < 15 {\n        return true\n    }\n    if a < 16 {\n        return true\n\
    \    }\n    if a < 17 {\n        return true\n    }\n    if a < 18 {\n       \
    \ return true\n    }\n    if a < 19 {\n        return true\n    }\n    if a <\
    \ 20 {\n        return true\n    }\n    if a < 21 {\n        return true\n   \
    \ }\n    if a < 22 {\n        return true\n    }\n    if a < 23 {\n        return\
    \ true\n    }\n    if a < 24 {\n        return true\n    }\n    if a < 25 {\n\
    \        return true\n    }\n    if a < 26 {\n        return true\n    }\n   \
    \ if a < 27 {\n        return true\n    }\n    if a < 28 {\n        return true\n\
    \    }\n    if a < 29 {\n        return true\n    }\n    if a < 30 {\n       \
    \ return true\n    }\n    if a < 31 {\n        return true\n    }\n    if a <\
    \ 32 {\n        return true\n    }\n    if a < 33 {\n        return true\n   \
    \ }\n    if a < 34 {\n        return true\n    }\n    if a < 35 {\n        return\
    \ true\n    }\n    if a < 36 {\n        return true\n    }\n    if a < 37 {\n\
    \        return true\n    }\n    if a < 38 {\n        return true\n    }\n   \
    \ if a < 39 {\n        return true\n    }\n    if a < 40 {\n        return true\n\
    \    }\n    if a < 41 {\n        return true\n    }\n    if a < 42 {\n       \
    \ return true\n    }\n    if a < 43 {\n        return true\n    }\n    if a <\
    \ 44 {\n        return true\n    }\n    if a < 45 {\n        return true\n   \
    \ }\n    if a < 46 {\n        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpieeozmr_.swift:161:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 8 {\n        return true\n\
    \    }\n    if a < 16 {\n        return true\n    }\n    if a < 32 {\n       \
    \ return true\n    }\n    if a < 64 {\n        return true\n    }\n    if a <\
    \ 128 {\n        return true\n    }\n    if a < 256 {\n        return true\n \
    \   }\n    if a < 512 {\n        return true\n    }\n    if a < 1024 {\n     \
    \   return true\n    }\n    if a < 2048 {\n        return true\n    }\n    if\
    \ a < 4096 {\n        return true\n    }\n    if a < 8192 {\n        return true\n\
    \    }\n    if a < 16384 {\n        return true\n    }\n    if a < 32768 {\n \
    \       return true\n    }\n    if a < 65536 {\n        return true\n    }\n \
    \   if a < 131072 {\n        return true\n    }\n    if a < 262144 {\n       \
    \ return true\n    }\n    if a < 524288 {\n        return true\n    }\n    if\
    \ a < 1048576 {\n        return true\n    }\n    if a < 2097152 {\n        return\
    \ true\n    }\n    if a < 4194304 {\n        return true\n    }\n    if a < 8388608\
    \ {\n        return true\n    }\n    if a < 16777216 {\n        return true\n\
    \    }\n    if a < 33554432 {\n        return true\n    }\n    if a < 67108864\
    \ {\n        return true\n    }\n    if a < 134217728 {\n        return true\n\
    \    }\n    if a < 268435456 {\n        return true\n    }\n    if a < 536870912\
    \ {\n        return true\n    }\n    if a < 1073741824 {\n        return true\n\
    \    }\n    if a < 2147483648 {\n        return true\n    }\n    if a < 4294967296\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpewr37p4h/tmpewr37p4h.swift:132: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9f819dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9f7e94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9f7e94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9f7e937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewr37p4h                        0x0000558080925227 <unavailable> + 4647

    5    libc.so.6                          0x00002ba9f8389460 __libc_start_main +
    245

    6    tmpewr37p4h                        0x0000558080924e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwlru5cqk.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpwlru5cqk.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpwlru5cqk.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 90 {\n        return true\n    }\n  \
    \  if a <= 270 {\n        return true\n    }\n    if a <= 720 {\n        return\
    \ true\n    }\n    if a <= 1440 {\n        return true\n    }\n    if a <= 2880\
    \ {\n        return true\n    }\n    if a <= 5760{\n        return true\n    }\n\
    \    if a <= 11520{\n        return true\n    }\n    if a <= 23040{\n        return\
    \ true\n    }\n    if a <= 46080{\n        return true\n    }\n    if a <= 72520{\n\
    \        return true\n    }\n    if a <= 148480{\n        return true\n    }\n\
    \    if a <= 281680{\n        return true\n    }\n    if a <= 571280{\n      \
    \  return true\n    }\n    if a <= 1146240{\n        return true\n    }\n    if\
    \ a <= 2340160{\n        return true\n    }\n    if a <= 4611680{\n        return\
    \ true\n    }\n    if a <= 7262144{\n        return true\n    }\n    if a <= 14852880{\n\
    \        return true\n    }\n    if a <= 28171280{\n        return true\n    }\n\
    \    if a <= 57131280{\n        return true\n    }\n    if a <= 114638480{\n \
    \       return true\n    }\n    if a <= 234022480{\n        return true\n    }\n\
    \    if a <= 461176640{\n        return true\n    }\n    if a <= 7262305120{\n\
    \        return true\n    }\n    if a <= 1485456880{\n        return true\n  \
    \  }\n    if a <= 2817248960{\n        return true\n    }\n    if a <= 5714745120{\n\
    \        return true\n    }\n    if a <= 11464608000{\n        return true\n \
    \   }\n    if a <= 23403413440{\n        return true\n    }\n    if a <= 46118820800{\n\
    \        return true\n    }\n    if a <= 72624150400{\n        return true\n \
    \   }\n    if a <= 148547056800{\n        return true\n    }\n    if a <= 281727395200{\n\
    \        return true\n    }\n    if a <= 571509755200{\n        return true\n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpct255pvo.swift:158:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpct255pvo.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpct255pvo.swift:139:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpc1e4j0ou/tmpc1e4j0ou.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1300ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13009e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13009e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13009e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc1e4j0ou                        0x000055ef99c91227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1300eda460 __libc_start_main +
    245

    6    tmpc1e4j0ou                        0x000055ef99c90e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_90vc_z_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiadieogz.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpiadieogz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpiadieogz.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpiadieogz.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_90vc_z_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(a) * Int(a) * Int(a) * Int(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8_chn1v/tmpp8_chn1v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a95260c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94f57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a94f57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a94f567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8_chn1v                        0x0000557903e9b3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b2a9544c460 __libc_start_main +
    245

    6    tmpp8_chn1v                        0x0000557903e9af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpde7cy8me/tmpde7cy8me.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97020f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9701decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9701dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9701deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde7cy8me                        0x000055fb059d9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b97022e1460 __libc_start_main +
    245

    6    tmpde7cy8me                        0x000055fb059d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpv1ptoov2/tmpv1ptoov2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ba86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ba562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ba562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ba5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ptoov2                        0x00005602f8b012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba8baa57460 __libc_start_main +
    245

    6    tmpv1ptoov2                        0x00005602f8b00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpba4ehjob/tmpba4ehjob.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b224bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b221b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b221b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b221b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ehjob                        0x0000562917fec227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9b226a8460 __libc_start_main +
    245

    6    tmpba4ehjob                        0x0000562917febe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwrs498xu/tmpwrs498xu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a5e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a5b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a5b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a5b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrs498xu                        0x000055714a1f5227 <unavailable> + 4647

    5    libc.so.6                          0x00002b02a6020460 __libc_start_main +
    245

    6    tmpwrs498xu                        0x000055714a1f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824750
