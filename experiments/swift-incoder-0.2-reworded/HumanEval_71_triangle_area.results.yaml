language: swift
name: HumanEval_71_triangle_area
results:
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    \n    if a1\
    \ + b1 + c1 < 3 {\n        return -1\n    }\n    \n    let area = a * b * c\n\
    \    \n    if area > 0 {\n        return Double(area) / Double(a1 + b1 + c1)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpzonxwv6b/tmpzonxwv6b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9766213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9765f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9765f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9765f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzonxwv6b                        0x000055e6ae0882bf <unavailable> + 4799

    5    libc.so.6                          0x00002b97663ff460 __libc_start_main +
    245

    6    tmpzonxwv6b                        0x000055e6ae087f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)), 0.5)\n\
    \    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsnwgjmgu.swift:13:30: error: cannot find 'pow' in scope\n    let\
    \ area: Double = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)), 0.5)\n       \
    \                      ^~~\n/tmp/tmpsnwgjmgu.swift:13:35: error: cannot find 'pow'\
    \ in scope\n    let area: Double = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c, 2)),\
    \ 0.5)\n                                  ^~~\n/tmp/tmpsnwgjmgu.swift:13:47: error:\
    \ cannot find 'pow' in scope\n    let area: Double = 0.5 * pow((pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)), 0.5)\n                                              ^~~\n/tmp/tmpsnwgjmgu.swift:13:59:\
    \ error: cannot find 'pow' in scope\n    let area: Double = 0.5 * pow((pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2)), 0.5)\n                                        \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > b + c {\n        return -1\n    }\n    if b > a + c {\n        return\
    \ -1\n    }\n    if c > a + b {\n        return -1\n    }\n    return sqrt(Double(a\
    \ * b * c) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbee0tdq7.swift:22:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(a * b * c) / 2)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return ((a + b + c) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpey5ntvuv.swift:13:25: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return ((a + b + c) / 2)\n         \
    \  ~~~~~~~~~~~~~^~~~\n           Double(          )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    if area > 0 {\n        return round(area, 2)\n \
    \   } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpg128ooch.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpg128ooch.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpg128ooch.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpg128ooch.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpg128ooch.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpg128ooch.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpg128ooch.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpg128ooch.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpg128ooch.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpg128ooch.swift:18:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) + abs(c)\n    let side4 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3 * side4\n    if area > 0 {\n   \
    \     return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6lczt9er.swift:17:46: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3 * side4\n\
    \                       ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n                      \
    \ Double(                      )\n/tmp/tmp6lczt9er.swift:19:16: error: cannot\
    \ find 'round' in scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(b, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    if area > 0.0 {\n        return round(area, 2)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpf85ztm_r.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpf85ztm_r.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpf85ztm_r.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpf85ztm_r.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpf85ztm_r.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpf85ztm_r.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpf85ztm_r.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpf85ztm_r.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpf85ztm_r.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpf85ztm_r.swift:18:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let c1 = (c +\
    \ a + b) / 2\n    return a1 * b1 * c1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmps_ed_p0f.swift:16:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a1 * b1 * c1\n           ~~~~~~~~^~~~\n\
    \           Double(     )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double\
    \ = side1 + side2 + side3\n    if area > 0 {\n        return round(area, 2)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsff9fy3q.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpsff9fy3q.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpsff9fy3q.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpsff9fy3q.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpsff9fy3q.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpsff9fy3q.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpsff9fy3q.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpsff9fy3q.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpsff9fy3q.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpsff9fy3q.swift:16:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpsff9fy3q.swift:18:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return -1\n    }\n    if a + c > b {\n        return\
    \ -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpg4_cui6w/tmpg4_cui6w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a29e6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a29b61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a29b61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a29b607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4_cui6w                        0x0000558766de31cf <unavailable> + 4559

    5    libc.so.6                          0x00002b4a2a056460 __libc_start_main +
    245

    6    tmpg4_cui6w                        0x0000558766de2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 > side2 && side1 > side3\
    \ {\n        return Double(round(side1 / 2))\n    }\n    if side2 > side3 {\n\
    \        return Double(round(side2 / 2))\n    }\n    return Double(round(side3\
    \ / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsuf0k7po.swift:17:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(side1 / 2))\n                      ^~~~~\n/tmp/tmpsuf0k7po.swift:20:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(side2 / 2))\n\
    \                      ^~~~~\n/tmp/tmpsuf0k7po.swift:22:19: error: cannot find\
    \ 'round' in scope\n    return Double(round(side3 / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area: Double = side1 * side2\
    \ * side3\n    if area > 0 {\n        return round(area, 2)\n    } else {\n  \
    \      return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptrdbzx3z.swift:16:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmptrdbzx3z.swift:18:16: error: cannot find 'round' in scope\n\
    \        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a2 = a * a\n    let b2 = b * b\n    let c2 = c * c\n    let ac = a2 +\
    \ c2\n    let bc = b2 + c2\n    let ab = a2 + b2\n    let b2 = b * b\n    let\
    \ c2 = c * c\n    let ac2 = ac + c2\n    let bc = bc + c2\n    let ab2 = ab +\
    \ b2\n    let ac2 = ac2 + ab2\n    let bc = bc + ab2\n    let ac2 = ac2 + bc\n\
    \    let ac2 = ac2 * 0.5\n    let ac2 = ac2.rounded(.towardZero)\n    return ac2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmxmm1e9v.swift:19:9: error: invalid redeclaration of 'b2'\n   \
    \ let b2 = b * b\n        ^\n/tmp/tmpmxmm1e9v.swift:14:9: note: 'b2' previously\
    \ declared here\n    let b2 = b * b\n        ^\n/tmp/tmpmxmm1e9v.swift:20:9: error:\
    \ invalid redeclaration of 'c2'\n    let c2 = c * c\n        ^\n/tmp/tmpmxmm1e9v.swift:15:9:\
    \ note: 'c2' previously declared here\n    let c2 = c * c\n        ^\n/tmp/tmpmxmm1e9v.swift:28:28:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \  let ac2 = ac2.rounded(.towardZero)\n                          ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum > 3 {\n        return Double(sum - 3) / 2.0\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpgvo0j1h4/tmpgvo0j1h4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0206fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab01d66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab01d66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab01d657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgvo0j1h4                        0x0000561d33ef31cf <unavailable> + 4559

    5    libc.so.6                          0x00002aab0225b460 __libc_start_main +
    245

    6    tmpgvo0j1h4                        0x0000561d33ef2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    \n    guard sides.count >= 3 else { return -1\
    \ }\n    \n    let sum = sides.reduce(0.0, +)\n    \n    if sum > sides[2] {\n\
    \        return Double(round(100*sides[0]/sum))\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0umbxh8p.swift:17:33: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    let\
    \ sum = sides.reduce(0.0, +)\n                                ^\n/tmp/tmp0umbxh8p.swift:20:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(100*sides[0]/sum))\n\
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double(sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)) / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqcsk9ain.swift:13:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)) / 2)\n                  ^~~~\n\
    /tmp/tmpqcsk9ain.swift:13:24: error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2)) / 2)\n                       ^~~\n/tmp/tmpqcsk9ain.swift:13:36:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)) / 2)\n                                   ^~~\n/tmp/tmpqcsk9ain.swift:13:48:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)) / 2)\n                                               ^~~\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return Double(sides.last)\n    }\n    return Double(sum)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpuibhbo_d.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpuibhbo_d.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpuibhbo_d.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpuibhbo_d.swift:16:29: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Double(sides.last)\n \
    \                           ^\n/tmp/tmpuibhbo_d.swift:16:29: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        return\
    \ Double(sides.last)\n                            ^\n                        \
    \         ?? <#default value#>\n/tmp/tmpuibhbo_d.swift:16:29: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        return\
    \ Double(sides.last)\n                            ^\n                        \
    \        !\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / Double(3.0)\n    return round(area, 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyvrjipb.swift:18:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 > b1\
    \ && b1 > c1 {\n        return a * b * c / 2\n    }\n    if a1 > c1 {\n      \
    \  return a * b * c / 2\n    }\n    if b1 > c1 {\n        return a * b * c / 2\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3_vmmpxn.swift:17:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n/tmp/tmp3_vmmpxn.swift:20:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a * b * c / 2\n               ~~~~~~~~~~^~~\n               Double(\
    \      )\n/tmp/tmp3_vmmpxn.swift:23:26: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return a * b * c / 2\n      \
    \         ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = math.sqrt(a1)\n    let a3 = math.sqrt(a2)\n\
    \    let a4 = b * b + 4 * a * c\n    let a5 = math.sqrt(a4)\n    let a6 = a *\
    \ b + 4 * a * c\n    let a7 = a * b - 4 * a * c\n    let a8 = math.sqrt(a6)\n\
    \    let a9 = a * b - 4 * a * c\n    let a10 = a * b + 4 * a * c\n    let a11\
    \ = a * b + 4 * a * c\n    let a12 = a * b - 4 * a * c\n    let a13 = a * b +\
    \ 4 * a * c\n    let a14 = a * b - 4 * a * c\n    let a15 = a * b + 4 * a * c\n\
    \    let a16 = a * b + 4 * a * c\n    let a17 = a * b - 4 * a * c\n    let a18\
    \ = a * b + 4 * a * c\n    let a19 = a * b + 4 * a * c\n    let a20 = a * b -\
    \ 4 * a * c\n    let a21 = a * b + 4 * a * c\n    let a22 = a * b + 4 * a * c\n\
    \    let a23 = a * b - 4 * a * c\n    let a24 = a * b + 4 * a * c\n    let a25\
    \ = a * b + 4 * a * c\n    let a26 = a * b - 4 * a * c\n    let a27 = a * b +\
    \ 4 * a * c\n    let a28 = a * b + 4 * a * c\n    let a29 = a * b - 4 * a * c\n\
    \    let a30 = a * b + 4 * a * c\n    let a31 = a * b + 4 * a * c\n    let a32\
    \ = a * b - 4 * a * c\n    let a33 = a * b + 4 * a * c\n    let a34 = a * b +\
    \ 4 * a * c\n    let a35 = a * b - 4 * a * c\n    let a36 = a * b + 4 * a * c\n\
    \    let a37 = a * b + 4 * a * c\n    let a38 = a * b - 4 * a * c\n    let a39\
    \ = a * b + 4 * a * c\n    let a40 = a * b + 4 * a * c\n    let a41 = a * b -\
    \ 4 * a * c\n    let a42 = a * b + 4 * a * c\n    let a43 = a * b + 4 * a * c\n\
    \    let a44 = a * b - 4 * a * c\n    let a45 = a * b + 4 * a * c\n    let a46\
    \ = a * b + 4 * a * c\n    let a47 = a * b - 4 * a * c\n    let a48 = a * b +\
    \ 4 * a * c\n    let a49 = a * b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplfttatvu.swift:14:14: error: cannot find 'math' in scope\n    let\
    \ a2 = math.sqrt(a1)\n             ^~~~\n/tmp/tmplfttatvu.swift:15:14: error:\
    \ cannot find 'math' in scope\n    let a3 = math.sqrt(a2)\n             ^~~~\n\
    /tmp/tmplfttatvu.swift:17:14: error: cannot find 'math' in scope\n    let a5 =\
    \ math.sqrt(a4)\n             ^~~~\n/tmp/tmplfttatvu.swift:20:14: error: cannot\
    \ find 'math' in scope\n    let a8 = math.sqrt(a6)\n             ^~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return ((a + b + c) / 2.0).rounded(.toNearestOrAwayFromZero)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpgngqhu47.swift:13:20: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return ((a + b + c) / 2.0).rounded(.toNearestOrAwayFromZero)\n\
    \                   ^\n            Double(    )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(a + b - c)\n    }\n    if a + c > b\
    \ {\n        return Double(a + c - b)\n    }\n    if b + c > a {\n        return\
    \ Double(b + c - a)\n    }\n    return Double(a + b + c)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpr1pwl9sx/tmpr1pwl9sx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac717708c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7173ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7173ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7173fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1pwl9sx                        0x000055961a8ab1cf <unavailable> + 4559

    5    libc.so.6                          0x00002ac7178f4460 __libc_start_main +
    245

    6    tmpr1pwl9sx                        0x000055961a8aae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    } else {\n        return Double(a +\
    \ b + c - a)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpfa76b_0n/tmpfa76b_0n.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42f2a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42f26fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42f26fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42f26fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfa76b_0n                        0x00005592474ef2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b42f2bf0460 __libc_start_main +
    245

    6    tmpfa76b_0n                        0x00005592474eef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 && side2 == side3\
    \ {\n        return Double(side1)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpirw4m3hg/tmpirw4m3hg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fc8c6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fc8963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fc8963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fc89627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirw4m3hg                        0x0000561d90f1d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b1fc8e58460 __libc_start_main +
    245

    6    tmpirw4m3hg                        0x0000561d90f1cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpn3hishmg.swift:13:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n                  ^~~~\n/tmp/tmpn3hishmg.swift:13:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                       ^~~\n/tmp/tmpn3hishmg.swift:13:42:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp725m4ddj/tmp725m4ddj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0abe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0a8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0a8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0a8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp725m4ddj                        0x000055839853725f <unavailable> + 4703

    5    libc.so.6                          0x00002aab0add4460 __libc_start_main +
    245

    6    tmp725m4ddj                        0x0000558398536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpp0_bloqb/tmpp0_bloqb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb1b996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb1b68db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb1b68d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb1b68c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0_bloqb                        0x00005601f3f572bf <unavailable> + 4799

    5    libc.so.6                          0x00002adb1bb82460 __libc_start_main +
    245

    6    tmpp0_bloqb                        0x00005601f3f56f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    let area = sides.reduce(0, +) / Double(sides.count)\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4081a4rw.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp4081a4rw.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp4081a4rw.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp4081a4rw.swift:18:32: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    let\
    \ area = sides.reduce(0, +) / Double(sides.count)\n                          \
    \     ^\n/tmp/tmp4081a4rw.swift:19:12: error: cannot find 'round' in scope\n \
    \   return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpjoh_6714/tmpjoh_6714.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9da8f9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9da8c96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9da8c96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9da8c957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoh_6714                        0x00005643e195a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b9da918b460 __libc_start_main +
    245

    6    tmpjoh_6714                        0x00005643e1959f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpn3hishmg.swift:13:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n                  ^~~~\n/tmp/tmpn3hishmg.swift:13:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                       ^~~\n/tmp/tmpn3hishmg.swift:13:42:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum < 3 {\n        return -1\n    }\n    let\
    \ area = Double(sqrt(Double(sum) * Double(sum - 3) * Double(sum - 2)))\n    return\
    \ round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2jumkj41.swift:17:23: error: cannot find 'sqrt' in scope\n    let\
    \ area = Double(sqrt(Double(sum) * Double(sum - 3) * Double(sum - 2)))\n     \
    \                 ^~~~\n/tmp/tmp2jumkj41.swift:18:12: error: cannot find 'round'\
    \ in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / Double(3.0)\n    return round(area, 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyvrjipb.swift:18:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr2g5d7ov.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpr2g5d7ov.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpr2g5d7ov.swift:18:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n/tmp/tmpr2g5d7ov.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmpr2g5d7ov.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n                         \
    \   !\n/tmp/tmpr2g5d7ov.swift:18:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmpr2g5d7ov.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n      "
  stdout: ''
  timestamp: 1660014383
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b) * Double(b / c)\n\
    \    } else {\n        return Double(-1) * Double(c / a) * Double(a / b)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpstgrdpzs/tmpstgrdpzs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3748da2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3748a99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3748a99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3748a987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstgrdpzs                        0x000055f0e4cdb25f <unavailable> + 4703

    5    libc.so.6                          0x00002b3748f8e460 __libc_start_main +
    245

    6    tmpstgrdpzs                        0x000055f0e4cdaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum < 3 {\n        return -1\n    }\n    return\
    \ Double(sum) / Double(3.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmphl452bj0/tmphl452bj0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f871ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f8411b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f8411988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f84107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphl452bj0                        0x0000563a249df1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b57f8906460 __libc_start_main +
    245

    6    tmphl452bj0                        0x0000563a249dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = Math.sqrt(a1)\n    let a3 = -b +\
    \ Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n    if a2 > a3 && a2 > a4 {\n\
    \        return a2 / 2\n    }\n    if a3 > a4 {\n        return a3 / 2\n    }\n\
    \    return a4 / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfa4llim2.swift:14:14: error: cannot find 'Math' in scope\n    let\
    \ a2 = Math.sqrt(a1)\n             ^~~~\n/tmp/tmpfa4llim2.swift:15:19: error:\
    \ cannot find 'Math' in scope\n    let a3 = -b + Math.sqrt(a1)\n             \
    \     ^~~~\n/tmp/tmpfa4llim2.swift:16:19: error: cannot find 'Math' in scope\n\
    \    let a4 = -b - Math.sqrt(a1)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    let area = Double(sides.last) * (sides.last\
    \ - sum) / 2\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0elxis2e.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp0elxis2e.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp0elxis2e.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp0elxis2e.swift:18:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let area = Double(sides.last) * (sides.last - sum) / 2\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0elxis2e.swift:19:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014398
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = sqrt(a1)\n    let a3 = sqrt(a2)\n\
    \    let a4 = b * b + 4 * a * c\n    let a5 = sqrt(a4)\n    let a6 = a * b + 4\
    \ * a * c\n    let a7 = a * b - 4 * a * c\n    let a8 = sqrt(a7)\n    let a9 =\
    \ a * b + 4 * a * c\n    let a10 = a * b - 4 * a * c\n    let a11 = a * b + 4\
    \ * a * c\n    let a12 = a * b - 4 * a * c\n    let a13 = a * b + 4 * a * c\n\
    \    let a14 = a * b - 4 * a * c\n    let a15 = a * b + 4 * a * c\n    let a16\
    \ = a * b - 4 * a * c\n    let a17 = a * b + 4 * a * c\n    let a18 = a * b -\
    \ 4 * a * c\n    let a19 = a * b + 4 * a * c\n    let a20 = a * b - 4 * a * c\n\
    \    let a21 = a * b + 4 * a * c\n    let a22 = a * b - 4 * a * c\n    let a23\
    \ = a * b + 4 * a * c\n    let a24 = a * b - 4 * a * c\n    let a25 = a * b +\
    \ 4 * a * c\n    let a26 = a * b - 4 * a * c\n    let a27 = a * b + 4 * a * c\n\
    \    let a28 = a * b - 4 * a * c\n    let a29 = a * b + 4 * a * c\n    let a30\
    \ = a * b - 4 * a * c\n    let a31 = a * b + 4 * a * c\n    let a32 = a * b -\
    \ 4 * a * c\n    let a33 = a * b + 4 * a * c\n    let a34 = a * b - 4 * a * c\n\
    \    let a35 = a * b + 4 * a * c\n    let a36 = a * b - 4 * a * c\n    let a37\
    \ = a * b + 4 * a * c\n    let a38 = a * b - 4 * a * c\n    let a39 = a * b +\
    \ 4 * a * c\n    let a40 = a * b - 4 * a * c\n    let a41 = a * b + 4 * a * c\n\
    \    let a42 = a * b - 4 * a * c\n    let a43 = a * b + 4 * a * c\n    let a44\
    \ = a * b - 4 * a * c\n    let a45 = a * b + 4 * a * c\n    let a46 = a * b -\
    \ 4 * a * c\n    let a47 = a * b + 4 * a * c\n    let a48 = a * b - 4 * a * c\n\
    \    let a49 = a * b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppedtgsut.swift:14:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmppedtgsut.swift:15:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmppedtgsut.swift:17:14:\
    \ error: cannot find 'sqrt' in scope\n    let a5 = sqrt(a4)\n             ^~~~\n\
    /tmp/tmppedtgsut.swift:20:14: error: cannot find 'sqrt' in scope\n    let a8 =\
    \ sqrt(a7)\n             ^~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) / Double(Double(a + b - c))\n \
    \   }\n    if a + c > b {\n        return Double(-1) / Double(Double(a + c - b))\n\
    \    }\n    if b + c > a {\n        return Double(-1) / Double(Double(b + c -\
    \ a))\n    }\n    return Double(a + b + c) / Double(2.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpfff5ww3b/tmpfff5ww3b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b044431ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0444011b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0444011988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04440107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfff5ww3b                        0x000055a275ef121f <unavailable> + 4639

    5    libc.so.6                          0x00002b0444506460 __libc_start_main +
    245

    6    tmpfff5ww3b                        0x000055a275ef0eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * Double(a) + Double(b)\
    \ + Double(c))\n    if area >= 1.0 {\n        return area\n    } else {\n    \
    \    return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpr40ycuhb/tmpr40ycuhb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad712945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad71263cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad71263c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad71263b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr40ycuhb                        0x0000557b605b721f <unavailable> + 4639

    5    libc.so.6                          0x00002ad712b31460 __libc_start_main +
    245

    6    tmpr40ycuhb                        0x0000557b605b6eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a+b+c)/2.0\n\
    \    if s > c {\n        return -1\n    }\n    if s == c {\n        return s *\
    \ s\n    }\n    if s == b {\n        return s * s * 0.5\n    }\n    if s == a\
    \ {\n        return s * s * 0.25\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpg3b3i_9a.swift:16:20: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let s = (a+b+c)/2.0\n          \
    \  ~~~~~~~^~~~\n/tmp/tmpg3b3i_9a.swift:16:20: note: overloads for '/' exist with\
    \ these partially matching parameter lists: (Double, Double), (Duration, Double),\
    \ (Int, Int)\n    let s = (a+b+c)/2.0\n                   ^\n/tmp/tmpg3b3i_9a.swift:21:18:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return s * s\n               ~~^~~\n/tmp/tmpg3b3i_9a.swift:24:22: error:\
    \ cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return s * s * 0.5\n               ~~~~~~^~~~~\n/tmp/tmpg3b3i_9a.swift:27:22:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return s * s * 0.25\n               ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area: Double = side1 * side2\
    \ * side3\n    if area > 0 {\n        return round(area, 2)\n    } else {\n  \
    \      return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptrdbzx3z.swift:16:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmptrdbzx3z.swift:18:16: error: cannot find 'round' in scope\n\
    \        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(b, 2))\n    let side3 = sqrt(pow(a, 2) + pow(c, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    if area > 0.0 {\n        return round(area * 100)\
    \ / 100\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpljeryzp5.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpljeryzp5.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpljeryzp5.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpljeryzp5.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpljeryzp5.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpljeryzp5.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpljeryzp5.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(a, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpljeryzp5.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(a, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpljeryzp5.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(a, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpljeryzp5.swift:18:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 && side2 == side3\
    \ {\n        return Double(side1)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpijh423j8/tmpijh423j8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4053e85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4053b7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4053b7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4053b7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijh423j8                        0x00005647d83552bf <unavailable> + 4799

    5    libc.so.6                          0x00002b4054071460 __libc_start_main +
    245

    6    tmpijh423j8                        0x00005647d8354f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, combine: +)\n    if\
    \ sum > sides[2] {\n        return Double(sides[2]) / 2\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbfzep458.swift:14:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let a2 = a * a\n    let a3 = b * b - a * a\n\
    \    let a4 = a * a\n    let a5 = b * b - a * a\n    let a6 = a * a\n    let a7\
    \ = a * a\n    let a8 = -b * b - a * a\n    let a9 = a * a\n    let a10 = a *\
    \ a\n    let a11 = a * a\n    let a12 = a * a\n    let a13 = a * a\n    let a14\
    \ = a * a\n    let a15 = a * a\n    let a16 = a * a\n    let a17 = a * a\n   \
    \ let a18 = a * a\n    let a19 = a * a\n    let a20 = a * a\n    let a21 = a *\
    \ a\n    let a22 = a * a\n    let a23 = a * a\n    let a24 = a * a\n    let a25\
    \ = a * a\n    let a26 = a * a\n    let a27 = a * a\n    let a28 = a * a\n   \
    \ let a29 = a * a\n    let a30 = a * a\n    let a31 = a * a\n    let a32 = a *\
    \ a\n    let a33 = a * a\n    let a34 = a * a\n    let a35 = a * a\n    let a36\
    \ = a * a\n    let a37 = a * a\n    let a38 = a * a\n    let a39 = a * a\n   \
    \ let a40 = a * a\n    let a41 = a * a\n    let a42 = a * a\n    let a43 = a *\
    \ a\n    let a44 = a * a\n    let a45 = a * a\n    let a46 = a * a\n    let a47\
    \ = a * a\n    let a48 = a * a\n    let a49 = a * a\n    let a50 = a * a\n   \
    \ let a51 = a * a\n    let a52 = a * a\n    let a53 = a * a\n    let a54 = a *\
    \ a\n    let a55 = a * a\n    let a56 = a * a\n    let a57 = a * a\n    let a58\
    \ = a * a\n    let a59 = a * a\n    let a60 = a * a\n    let a61 = a * a\n   \
    \ let a62 = a * a\n    let a63 = a * a\n    let a64 = a * a\n    let a65 = a *\
    \ a\n    let a66 = a * a\n    let a67 = a * a\n    let a68 = a * a\n    let a69\
    \ = a * a\n    let a70 = a * a\n    let a71 = a * a\n    let a72 = a * a\n   \
    \ let a73 = a * a\n    let a74 = a * a\n    let a75 = a * a\n    let a76 = a *\
    \ a\n    let a77 = a * a\n    let a78 = a * a\n    let a79 = a * a\n    let a80\
    \ = a * a\n    let a81 = a * a\n    let a82 = a * a\n    let a83 = a * a\n   \
    \ let a84 = a * a\n    let a85 = a * a\n    let a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpanith9vo.swift:98:9: error: type annotation missing in pattern\n\
    \    let a\n        ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n    return area < 0.000001 ? -1.0 : area\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphc48g0ux.swift:13:48: error: cannot find 'pow' in scope\n    let\
    \ area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n\
    \                                               ^~~\n/tmp/tmphc48g0ux.swift:13:60:\
    \ error: cannot find 'pow' in scope\n    let area: Double = abs(a * b * c) / Double(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n                                              \
    \             ^~~\n/tmp/tmphc48g0ux.swift:13:72: error: cannot find 'pow' in scope\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                                                      \
    \ ^~~\n/tmp/tmphc48g0ux.swift:13:24: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let area: Double = abs(a * b * c) /\
    \ Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                       ^\n      \
    \                 Double(       )\n"
  stdout: ''
  timestamp: 1660014386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n    if area < sides {\n\
    \        return area\n    }\n    return round(area / sides * 100) / 100\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp60cv8rz8.swift:17:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n               ^~~~\n/tmp/tmp60cv8rz8.swift:17:21:\
    \ error: cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                    ^~~\n/tmp/tmp60cv8rz8.swift:17:33: error:\
    \ cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                ^~~\n/tmp/tmp60cv8rz8.swift:17:45: error:\
    \ cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                            ^~~\n/tmp/tmp60cv8rz8.swift:21:12:\
    \ error: cannot find 'round' in scope\n    return round(area / sides * 100) /\
    \ 100\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 && side2 == side3\
    \ {\n        return Double(side1)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpirw4m3hg/tmpirw4m3hg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fc8c6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fc8963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fc8963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fc89627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirw4m3hg                        0x0000561d90f1d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b1fc8e58460 __libc_start_main +
    245

    6    tmpirw4m3hg                        0x0000561d90f1cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides % 2 == 1 {\n        return Double(sides)\
    \ / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpgs1_fhp2/tmpgs1_fhp2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1d668cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1d6383b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1d6383988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1d63827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs1_fhp2                        0x000055ef25da625f <unavailable> + 4703

    5    libc.so.6                          0x00002ad1d6878460 __libc_start_main +
    245

    6    tmpgs1_fhp2                        0x000055ef25da5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = sides / 2.0\n    if area >= a && area >= b && area >= c {\n    \
    \    return area\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkizeo_dn.swift:17:22: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = sides / 2.0\n       \
    \        ~~~~~ ^ ~~~\n/tmp/tmpkizeo_dn.swift:17:22: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = sides / 2.0\n                     ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a)\n    let side2 = abs(b)\n    let side3 = abs(c)\n    let\
    \ sum = side1 + side2 + side3\n    if sum > side3 {\n        return Double(round(100\
    \ * side3 / sum))\n    }\n    if sum > side2 {\n        return Double(round(100\
    \ * side2 / sum))\n    }\n    if sum > side1 {\n        return Double(round(100\
    \ * side1 / sum))\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpw0hjfogk.swift:18:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(100 * side3 / sum))\n                      ^~~~~\n/tmp/tmpw0hjfogk.swift:21:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(100 * side2\
    \ / sum))\n                      ^~~~~\n/tmp/tmpw0hjfogk.swift:24:23: error: cannot\
    \ find 'round' in scope\n        return Double(round(100 * side1 / sum))\n   \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = a + b\
    \ + c\n    if s > 0 {\n        let area = (a * b * c) / s\n        return round(area,\
    \ 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzdk1148f.swift:19:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp725m4ddj/tmp725m4ddj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0abe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0a8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0a8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0a8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp725m4ddj                        0x000055839853725f <unavailable> + 4703

    5    libc.so.6                          0x00002aab0add4460 __libc_start_main +
    245

    6    tmp725m4ddj                        0x0000558398536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a2 = a*a\n    let b2 = b*b\n    let c2 = c*c\n    let ac = a + c\n  \
    \  let bc = b + c\n    let ad = a + d\n    let bd = b + d\n    let ac2 = ac*ac\n\
    \    let bc2 = bc*bc\n    let ad2 = ad*ad\n    let bd2 = bd*bd\n    let ac3 =\
    \ ac*ac\n    let bc3 = bc*bc\n    let ad3 = ad*ad\n    let bd3 = bd*bd\n    let\
    \ ac4 = ac*ac\n    let bc4 = bc*bc\n    let ad4 = ad*ad\n    let bd4 = bd*bd\n\
    \    let ac5 = ac*ac\n    let bc5 = bc*bc\n    let ad5 = ad*ad\n    let bd5 =\
    \ bd*bd\n    let ac6 = ac*ac\n    let bc6 = bc*bc\n    let ad6 = ad*ad\n    let\
    \ bd6 = bd*bd\n    let ac7 = ac*ac\n    let bc7 = bc*bc\n    let ad7 = ad*ad\n\
    \    let bd7 = bd*bd\n    let ac8 = ac*ac\n    let bc8 = bc*bc\n    let ad8 =\
    \ ad*ad\n    let bd8 = bd*bd\n    let ac9 = ac*ac\n    let bc9 = bc*bc\n    let\
    \ ad9 = ad*ad\n    let bd9 = bd*bd\n    let ac10 = ac*ac\n    let bc10 = bc*bc\n\
    \    let ad10 = ad*ad\n    let bd10 = bd*bd\n    let ac11 = ac*ac\n    let bc11\
    \ = bc*bc\n    let ad11 = ad*ad\n    let bd11 = bd*bd\n    let ac12 = ac*ac\n\
    \    let bc12 = bc*bc\n    let ad12 = ad*ad\n    let bd12 = bd*bd\n    let ac13\
    \ = ac*ac\n    let bc13 = bc*bc\n    let ad13 = ad*ad\n    let bd13 = bd*bd\n\
    \    let ac14 = ac*ac\n    let bc14 = bc*bc\n    let ad14 = ad*ad\n    let bd14\
    \ = bd*bd\n    let ac15 = ac*ac\n    let bc15 = bc*bc\n    let ad15 = ad*ad\n\
    \    let bd15 = bd*bd\n    let ac16 = ac*ac\n    let bc16 = bc*bc\n    let ad16\
    \ = ad*ad\n    let bd16 = bd*bd\n    let ac17 = ac*ac\n    let bc17 = bc*bc\n\
    \    let ad17 = ad*ad\n    let bd17 = bd*bd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqzld11rf.swift:18:18: error: cannot find 'd' in scope\n    let\
    \ ad = a + d\n                 ^\n/tmp/tmpqzld11rf.swift:19:18: error: cannot\
    \ find 'd' in scope\n    let bd = b + d\n                 ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    let area = sides.reduce(0, +) / Double(sides.count)\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4081a4rw.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp4081a4rw.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp4081a4rw.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp4081a4rw.swift:18:32: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    let\
    \ area = sides.reduce(0, +) / Double(sides.count)\n                          \
    \     ^\n/tmp/tmp4081a4rw.swift:19:12: error: cannot find 'round' in scope\n \
    \   return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    let area = Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdl3xh1kd.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpdl3xh1kd.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpdl3xh1kd.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpdl3xh1kd.swift:18:71: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let area = Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                                                     \
    \                 ^\n/tmp/tmpdl3xh1kd.swift:18:71: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n    let area = Double(sides.last)\
    \ * Double(sides.last) / Double(sides.last)\n                                \
    \                                      ^\n                                   \
    \                                        ?? <#default value#>\n/tmp/tmpdl3xh1kd.swift:18:71:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                                                                      ^\n   \
    \                                                                       !\n/tmp/tmpdl3xh1kd.swift:18:50:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    let area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                                                 ^\n/tmp/tmpdl3xh1kd.swift:18:50:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                                                 ^\n                        \
    \                              ?? <#"
  stdout: ''
  timestamp: 1660014391
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpp0_bloqb/tmpp0_bloqb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb1b996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb1b68db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb1b68d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb1b68c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0_bloqb                        0x00005601f3f572bf <unavailable> + 4799

    5    libc.so.6                          0x00002adb1bb82460 __libc_start_main +
    245

    6    tmpp0_bloqb                        0x00005601f3f56f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp725m4ddj/tmp725m4ddj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0abe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0a8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0a8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0a8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp725m4ddj                        0x000055839853725f <unavailable> + 4703

    5    libc.so.6                          0x00002aab0add4460 __libc_start_main +
    245

    6    tmp725m4ddj                        0x0000558398536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sumOfSides = sides.reduce(0, +)\n    if sumOfSides\
    \ > sides.last {\n        return -1\n    }\n    let third = sides.last\n    let\
    \ thirdSquare = side * side\n    let thirdSqrOfThird = thirdSquare * third\n \
    \   let fourth = sides.last * sides.last\n    let fourthSquare = fourth * fourth\n\
    \    let fourthSqrOfFourth = fourthSquare * fourth\n    let fifth = sides.last\
    \ * sides.last * sides.last\n    let fifthSquare = fifth * fifth\n    let fifthSqrOfFifth\
    \ = fifthSquare * fifth\n    let sixth = sides.last * sides.last * sides.last\
    \ * sides.last\n    let sixthSquare = sixth * sixth\n    let sixthSqrOfSixth =\
    \ sixthSquare * sixth\n    let seventh = sides.last * sides.last * sides.last\
    \ * sides.last * sides.last\n    let seventhSquare = seventh * seventh\n    let\
    \ seventhSqrOfSeventh = seventhSquare * seventh\n    let eighth = sides.last *\
    \ sides.last * sides.last * sides.last * sides.last * sides.last\n    let eighthSquare\
    \ = eighth * eighth\n    let eighthSqrOfEighth = eighthSquare * eighth\n    let\
    \ ninth = sides.last * sides.last * sides.last * sides.last * sides.last * sides.last\
    \ * sides.last * sides.last\n    let ninthSquare = ninth * ninth\n    let ninthSqrOfNinth\
    \ = ninthSquare * ninth\n    let tenth = sides.last * sides.last * sides.last\
    \ * sides.last * sides.last * sides.last * sides.last * sides.last * sides.last\n\
    \    let tenthSquare = tenth * tenth\n    let tenthSqrOfTenth = tenthSquare *\
    \ tenth\n    let hundredth = sides.last * sides.last * sides.last * sides.last\
    \ * sides.last * sides.last * sides.last * sides.last * sides.last * sides.last\
    \ * sides.last\n    let hundredthSquare = hundredth * \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfta0fv9i.swift:44:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpfta0fv9i.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sumOfSides > sides.last {\n  \
    \                        ^\n/tmp/tmpfta0fv9i.swift:15:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              \
    \ ?? <#default value#>\n/tmp/tmpfta0fv9i.swift:15:27: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              !\n\
    /tmp/tmpfta0fv9i.swift:19:23: error: cannot find 'side' in scope\n    let thirdSquare\
    \ = side * side\n                      ^~~~\n/tmp/tmpfta0fv9i.swift:19:30: error:\
    \ cannot find 'side' in scope\n    let thirdSquare = side * side\n           \
    \                  ^~~~\n/tmp/tmpfta0fv9i.swift:21:29: error: binary operator\
    \ '*' cannot be applied to two 'Int?' operands\n    let fourth = sides.last *\
    \ sides.last\n                 ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmpfta0fv9i.swift:21:29:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    let fourth = sides.last * sides.last\n                     \
    \       ^\n/tmp/tmpfta0fv9i.swift:24:28: error: binary operator '*' cannot be\
    \ applied to two 'Int?' operands\n    let fifth = sides.last * sides.last * sides.last\n\
    \                ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmpfta0fv9i.swift:24:28: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Int,\
    \ Int)\n    let fifth = sides.last * sides.last * sides.last\n               \
    \            ^\n/tmp/tmpfta0fv9i.swift:24:49: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n    let fifth = sides.last * sides.last\
    \ * sides.last\n                                                ^\n/tmp/tmpfta0fv9i.swift:24:49:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let fifth = s"
  stdout: ''
  timestamp: 1660014721
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) + abs(c)\n    let side4 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double\n    switch side1 {\n    case side2:\n        area = abs(b)\
    \ + abs(c)\n    case side3:\n        area = abs(a) + abs(c)\n    case side4:\n\
    \        area = abs(a) - abs(c)\n    default:\n        area = -1\n    }\n    return\
    \ round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzy_s6354.swift:20:23: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = abs(b) + abs(c)\n               ~~~~~~~^~~~~~~~\n\
    \               Double(        )\n/tmp/tmpzy_s6354.swift:22:23: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n        area = abs(a) + abs(c)\n\
    \               ~~~~~~~^~~~~~~~\n               Double(        )\n/tmp/tmpzy_s6354.swift:24:23:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        area = abs(a)\
    \ - abs(c)\n               ~~~~~~~^~~~~~~~\n               Double(        )\n\
    /tmp/tmpzy_s6354.swift:28:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) + abs(c)\n\
    \    let side3 = abs(a) + abs(b) + abs(c)\n    if side1 == side2 && side2 == side3\
    \ {\n        return Double(side1)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmppdp_8fb8/tmppdp_8fb8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c545aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c542a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c542a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c542a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdp_8fb8                        0x00005642313362bf <unavailable> + 4799

    5    libc.so.6                          0x00002b1c54796460 __libc_start_main +
    245

    6    tmppdp_8fb8                        0x0000564231335f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(b, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    if area >= 0 {\n        return area\n    } else\
    \ {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpire7h2ta.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpire7h2ta.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpire7h2ta.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpire7h2ta.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpire7h2ta.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpire7h2ta.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpire7h2ta.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpire7h2ta.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpire7h2ta.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * Double(a) + Double(b)\
    \ + Double(c))\n    if area < 0.0 {\n        return -1.0\n    }\n    return area\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp5b88eb1y/tmp5b88eb1y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49bdee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49bdbdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49bdbdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49bdbde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b88eb1y                        0x00005603d910d21f <unavailable> + 4639

    5    libc.so.6                          0x00002b49be0d4460 __libc_start_main +
    245

    6    tmp5b88eb1y                        0x00005603d910ceb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a)\n    let side2 = abs(b)\n    let side3 = abs(c)\n    let\
    \ sum = side1 + side2 + side3\n    if sum < side3 {\n        return Double(sum)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmptv4x4vip/tmptv4x4vip.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad113faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad113ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad113ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad113ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptv4x4vip                        0x0000562fccbfe2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ad11419a460 __libc_start_main +
    245

    6    tmptv4x4vip                        0x0000562fccbfdf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides[2]\
    \ {\n        return Double(sides[2]) / Double(sides[0])\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp0cj9ceij/tmp0cj9ceij.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf4fda1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf4fa98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf4fa98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf4fa977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cj9ceij                        0x00005630c010d39f <unavailable> + 5023

    5    libc.so.6                          0x00002abf4ff8d460 __libc_start_main +
    245

    6    tmp0cj9ceij                        0x00005630c010d039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / Double(3.0)\n    return round(area, 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyvrjipb.swift:18:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a + b + c) / 2\n    if area > c {\n        return area\n    }\n\
    \    if area > b {\n        return area\n    }\n    if area > a {\n        return\
    \ area\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp17q_uukf.swift:15:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return area\n               ^~~~\n\
    \               Double( )\n/tmp/tmp17q_uukf.swift:18:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return area\n\
    \               ^~~~\n               Double( )\n/tmp/tmp17q_uukf.swift:21:16:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return area\n               ^~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr2g5d7ov.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpr2g5d7ov.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpr2g5d7ov.swift:18:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n/tmp/tmpr2g5d7ov.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmpr2g5d7ov.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n                         \
    \   !\n/tmp/tmpr2g5d7ov.swift:18:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmpr2g5d7ov.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n      "
  stdout: ''
  timestamp: 1660014383
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides == 0 {\n        return 0.0\n    }\n \
    \   let area = Double(sides) / Double(sides - a)\n    if area > 1.0 {\n      \
    \  return -1.0\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpnoshmlgj/tmpnoshmlgj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad118fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad118cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad118cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad118cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnoshmlgj                        0x00005595efbaa1cf <unavailable> + 4559

    5    libc.so.6                          0x00002ad1191d2460 __libc_start_main +
    245

    6    tmpnoshmlgj                        0x00005595efba9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double((a+b+c) * (a+b+c+1))\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpt_73nwmo/tmpt_73nwmo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e6bb97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e6b88eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e6b88e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e6b88d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_73nwmo                        0x00005622bac261cf <unavailable> + 4559

    5    libc.so.6                          0x00002b6e6bd83460 __libc_start_main +
    245

    6    tmpt_73nwmo                        0x00005622bac25e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1\
    \ + c1 < a1 + b1 + c1 {\n        return -1\n    }\n    let a2 = a1 * a1\n    let\
    \ b2 = b1 * b1\n    let c2 = c1 * c1\n    let a3 = a1 * a2\n    let b3 = b1 *\
    \ b2\n    let c3 = c1 * c2\n    let a4 = a1 * a3\n    let b4 = b1 * b3\n    let\
    \ c4 = c1 * c3\n    let a5 = a1 * a4\n    let b5 = b1 * b4\n    let c5 = c1 *\
    \ c5\n    let a6 = a1 * a5\n    let b6 = b1 * b6\n    let c6 = c1 * c6\n    let\
    \ a7 = a1 * a6\n    let b7 = b1 * b7\n    let c7 = c1 * c7\n    let a8 = a1 *\
    \ a7\n    let b8 = b1 * b8\n    let c8 = c1 * c8\n    let a9 = a1 * a8\n    let\
    \ b9 = b1 * b9\n    let c9 = c1 * c9\n    let a10 = a1 * a9\n    let b10 = b1\
    \ * b10\n    let c10 = c1 * c10\n    let a11 = a1 * a10\n    let b11 = b1 * b11\n\
    \    let c11 = c1 * c11\n    let a12 = a1 * a11\n    let b12 = b1 * b12\n    let\
    \ c12 = c1 * c12\n    let a13 = a1 * a12\n    let b13 = b1 * b13\n    let c13\
    \ = c1 * c13\n    let a14 = a1 * a13\n    let b14 = b1 * b14\n    let c14 = c1\
    \ * c14\n    let a15 = a1 * a14\n    let b15 = b1 * b15\n    let c15 = c1 * c15\n\
    \    let a16 = a1 * a15\n    let b16 = b1 * b16\n    let c16 = c1 * c16\n    let\
    \ a17 = a1 * a16\n    let b17 = b1 * b17\n    let c17 = c1 * c17\n    let a18\
    \ = a1 * a17\n    let b18 = b1 * b18\n    let c18 = c1 * c18\n    let a19 = a1\
    \ * a18\n    let b19 = b1 * b19\n    let c19 = c1 * c19\n    let a20 = a1 * a19\n\
    \    let b20 = b1 * b20\n    let c20 = c1 * c20\n    let a21 = a1 * a20\n    let\
    \ b21 = b1 * b21\n    let c21 = c1 * c21\n    let a22 = a1 * a21\n    let b22\
    \ = b1 * b22\n    let c22 = c1 * c22\n    let a23 = a1 * a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsieoq2w5.swift:30:19: error: use of local variable 'c5' before\
    \ its declaration\n    let c5 = c1 * c5\n                  ^\n/tmp/tmpsieoq2w5.swift:30:9:\
    \ note: 'c5' declared here\n    let c5 = c1 * c5\n        ^\n/tmp/tmpsieoq2w5.swift:32:19:\
    \ error: use of local variable 'b6' before its declaration\n    let b6 = b1 *\
    \ b6\n                  ^\n/tmp/tmpsieoq2w5.swift:32:9: note: 'b6' declared here\n\
    \    let b6 = b1 * b6\n        ^\n/tmp/tmpsieoq2w5.swift:33:19: error: use of\
    \ local variable 'c6' before its declaration\n    let c6 = c1 * c6\n         \
    \         ^\n/tmp/tmpsieoq2w5.swift:33:9: note: 'c6' declared here\n    let c6\
    \ = c1 * c6\n        ^\n/tmp/tmpsieoq2w5.swift:35:19: error: use of local variable\
    \ 'b7' before its declaration\n    let b7 = b1 * b7\n                  ^\n/tmp/tmpsieoq2w5.swift:35:9:\
    \ note: 'b7' declared here\n    let b7 = b1 * b7\n        ^\n/tmp/tmpsieoq2w5.swift:36:19:\
    \ error: use of local variable 'c7' before its declaration\n    let c7 = c1 *\
    \ c7\n                  ^\n/tmp/tmpsieoq2w5.swift:36:9: note: 'c7' declared here\n\
    \    let c7 = c1 * c7\n        ^\n/tmp/tmpsieoq2w5.swift:38:19: error: use of\
    \ local variable 'b8' before its declaration\n    let b8 = b1 * b8\n         \
    \         ^\n/tmp/tmpsieoq2w5.swift:38:9: note: 'b8' declared here\n    let b8\
    \ = b1 * b8\n        ^\n/tmp/tmpsieoq2w5.swift:39:19: error: use of local variable\
    \ 'c8' before its declaration\n    let c8 = c1 * c8\n                  ^\n/tmp/tmpsieoq2w5.swift:39:9:\
    \ note: 'c8' declared here\n    let c8 = c1 * c8\n        ^\n/tmp/tmpsieoq2w5.swift:41:19:\
    \ error: use of local variable 'b9' before its declaration\n    let b9 = b1 *\
    \ b9\n                  ^\n/tmp/tmpsieoq2w5.swift:41:9: note: 'b9' declared here\n\
    \    let b9 = b1 * b9\n        ^\n/tmp/tmpsieoq2w5.swift:42:19: error: use of\
    \ local variable 'c9' before its declaration\n    let c9 = c1 * c9\n         \
    \         ^\n/tmp/tmpsieoq2w5.swift:42:9: note: 'c9' declared here\n    let c9\
    \ = c1 * c9\n        ^\n/tmp/tmpsieoq2w5.swift:44:20: error: use of local variable\
    \ 'b10' before its declaration\n    let b10 = b1 * b10\n                   ^"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a * b) - (c * c)\n    if area < 0 {\n        return -1\n    }\n\
    \    return Double(area) / Double(2.0 * Double(a * b))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmph0krbux_/tmph0krbux_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56508c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56505bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56505bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56505be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0krbux_                        0x000055c43136121f <unavailable> + 4639

    5    libc.so.6                          0x00002b5650ab4460 __libc_start_main +
    245

    6    tmph0krbux_                        0x000055c431360eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = Math.sqrt(a1)\n    let a3 = -b +\
    \ Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n    let a5 = Math.sqrt(a3)\n\
    \    let a6 = Math.sqrt(a4)\n    if a2 < 0 {\n        return -1\n    }\n    if\
    \ a3 > a2 {\n        return a2 / a2\n    }\n    if a4 > a2 {\n        return a2\
    \ / a2\n    }\n    if a5 >= 0 {\n        return a2 / a2\n    }\n    if a6 >= 0\
    \ {\n        return a2 / a2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptwalf15y.swift:14:14: error: cannot find 'Math' in scope\n    let\
    \ a2 = Math.sqrt(a1)\n             ^~~~\n/tmp/tmptwalf15y.swift:15:19: error:\
    \ cannot find 'Math' in scope\n    let a3 = -b + Math.sqrt(a1)\n             \
    \     ^~~~\n/tmp/tmptwalf15y.swift:16:19: error: cannot find 'Math' in scope\n\
    \    let a4 = -b - Math.sqrt(a1)\n                  ^~~~\n/tmp/tmptwalf15y.swift:17:14:\
    \ error: cannot find 'Math' in scope\n    let a5 = Math.sqrt(a3)\n           \
    \  ^~~~\n/tmp/tmptwalf15y.swift:18:14: error: cannot find 'Math' in scope\n  \
    \  let a6 = Math.sqrt(a4)\n             ^~~~\n/tmp/tmptwalf15y.swift:23:19: error:\
    \ cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return a2 / a2\n               ~~~^~~~\n/tmp/tmptwalf15y.swift:26:19:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return a2 / a2\n               ~~~^~~~\n/tmp/tmptwalf15y.swift:29:19:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return a2 / a2\n               ~~~^~~~\n/tmp/tmptwalf15y.swift:32:19:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \        return a2 / a2\n               ~~~^~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprosdhndb/tmprosdhndb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88b404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88b0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88b0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88b0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprosdhndb                        0x0000557a35cc62bf <unavailable> + 4799

    5    libc.so.6                          0x00002af88b5f0460 __libc_start_main +
    245

    6    tmprosdhndb                        0x0000557a35cc5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum < 3 {\n        return -1\n    }\n    return\
    \ Double(sum) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpdf_ho87n/tmpdf_ho87n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9db48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d83fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d83f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d83e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf_ho87n                        0x00005625ac19e1cf <unavailable> + 4559

    5    libc.so.6                          0x00002aca9dd34460 __libc_start_main +
    245

    6    tmpdf_ho87n                        0x00005625ac19de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprosdhndb/tmprosdhndb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88b404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88b0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88b0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88b0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprosdhndb                        0x0000557a35cc62bf <unavailable> + 4799

    5    libc.so.6                          0x00002af88b5f0460 __libc_start_main +
    245

    6    tmprosdhndb                        0x0000557a35cc5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides[2]\
    \ {\n        return Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmplpt1aite/tmplpt1aite.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1b2b71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1b2868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1b2868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1b28677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplpt1aite                        0x000056481ec7939f <unavailable> + 5023

    5    libc.so.6                          0x00002ad1b2d5d460 __libc_start_main +
    245

    6    tmplpt1aite                        0x000056481ec79039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvvy6ypj9.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpvvy6ypj9.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpvvy6ypj9.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = sides * (sides - a) * (sides - b) * (sides - c)\n    return Double(round(area\
    \ / Double(sides)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpw4z7dqa2.swift:18:19: error: cannot find 'round' in scope\n   \
    \ return Double(round(area / Double(sides)))\n                  ^~~~~\n/tmp/tmpw4z7dqa2.swift:18:30:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return Double(round(area / Double(sides)))\n                        ~~~~\
    \ ^ ~~~~~~~~~~~~~\n/tmp/tmpw4z7dqa2.swift:18:30: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    return Double(round(area / Double(sides)))\n      \
    \                       ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / Double(3.0)\n    return round(area, 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyvrjipb.swift:18:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum > 0 {\n        return Double(sum) / Double(3.0)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpcnsdqiph/tmpcnsdqiph.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9a776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c9a46db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c9a46d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c9a46c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnsdqiph                        0x00005623c42361cf <unavailable> + 4559

    5    libc.so.6                          0x00002b6c9a962460 __libc_start_main +
    245

    6    tmpcnsdqiph                        0x00005623c4235e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area: Double\n    if side1\
    \ == side2 && side2 == side3 {\n        area = side1\n    } else {\n        area\
    \ = -1\n    }\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp98q89xut.swift:18:16: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = side1\n               ^~~~~\n             \
    \  Double( )\n/tmp/tmp98q89xut.swift:22:12: error: cannot find 'round' in scope\n\
    \    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a * b) - (a * c)\n    if area < 0 {\n        return -1\n    }\n\
    \    return Double(area) / Double(a * b * c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpzssg9mvs/tmpzssg9mvs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f6311c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f6008b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f6008988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f60077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzssg9mvs                        0x000055bdb822d1cf <unavailable> + 4559

    5    libc.so.6                          0x00002af2f64fd460 __libc_start_main +
    245

    6    tmpzssg9mvs                        0x000055bdb822ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / Double(3.0)\n    if area >= 1.0 {\n        return\
    \ area\n    } else {\n        return round(area, 2)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqw36hfni.swift:21:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double\
    \ = side1 * side2 * side3\n    if area > 0 {\n        return round(area, 2)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpeimcl9nq.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpeimcl9nq.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpeimcl9nq.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpeimcl9nq.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpeimcl9nq.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpeimcl9nq.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpeimcl9nq.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpeimcl9nq.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpeimcl9nq.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpeimcl9nq.swift:16:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpeimcl9nq.swift:18:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area = side1 * side2 * side3\n\
    \    if area > 0 {\n        return Double(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps8tst76g/tmps8tst76g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac5bea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac5bb97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac5bb97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac5bb967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8tst76g                        0x000055895c7d82bf <unavailable> + 4799

    5    libc.so.6                          0x00002aac5c08c460 __libc_start_main +
    245

    6    tmps8tst76g                        0x000055895c7d7f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1\
    \ > c1 {\n        return a * b * c / 2\n    }\n    if a1 + c1 > b1 {\n       \
    \ return a * b * c / 2\n    }\n    if b1 + c1 > a1 {\n        return a * b * c\
    \ / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7yxumzj3.swift:17:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n/tmp/tmp7yxumzj3.swift:20:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a * b * c / 2\n               ~~~~~~~~~~^~~\n               Double(\
    \      )\n/tmp/tmp7yxumzj3.swift:23:26: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return a * b * c / 2\n      \
    \         ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sumOfSides = sides.reduce(0, +)\n    if sumOfSides\
    \ > sides.last {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp230yfjko.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sumOfSides > sides.last {\n  \
    \                        ^\n/tmp/tmp230yfjko.swift:15:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              \
    \ ?? <#default value#>\n/tmp/tmp230yfjko.swift:15:27: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              !\n\
    /tmp/tmp230yfjko.swift:18:46: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmp230yfjko.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmp230yfjko.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n                              \
    \                   !\n/tmp/tmp230yfjko.swift:18:25: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.count)\n                        ^\n/tmp/tmp230yfjko.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmp230yfjko.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last"
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * a + b + c)\n    return\
    \ area >= 0.0 ? area : -1.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2bmi2rvd.swift:13:51: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area: Double = Double(a * b * c) /\
    \ Double(2.0 * a + b + c)\n                                                  ^\n\
    \                                                  Int( )\n"
  stdout: ''
  timestamp: 1660014386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    let area = sides/2.0\n    if area > Double(sides)\
    \ {\n        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaicnsm26.swift:14:21: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = sides/2.0\n         \
    \      ~~~~~^~~~\n/tmp/tmpaicnsm26.swift:14:21: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = sides/2.0\n                    ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sum) / Double(sides.last)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz254ttqz.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpz254ttqz.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpz254ttqz.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpz254ttqz.swift:18:39: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sum) / Double(sides.last)\n\
    \                                      ^\n/tmp/tmpz254ttqz.swift:18:39: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return Double(sum) / Double(sides.last)\n                               \
    \       ^\n                                           ?? <#default value#>\n/tmp/tmpz254ttqz.swift:18:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sum) / Double(sides.last)\n                       \
    \               ^\n                                          !\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = sides / 2.0\n    if area >= a && area >= b && area >= c {\n    \
    \    return area\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkizeo_dn.swift:17:22: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = sides / 2.0\n       \
    \        ~~~~~ ^ ~~~\n/tmp/tmpkizeo_dn.swift:17:22: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = sides / 2.0\n                     ^\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 || side1 == side3\
    \ {\n        return side1\n    }\n    if side2 == side3 {\n        return side2\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpilesipp4.swift:17:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return side1\n               ^~~~~\n\
    \               Double( )\n/tmp/tmpilesipp4.swift:20:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return side2\n\
    \               ^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / 2.0\n    if area >= 1.0 {\n        return area\n\
    \    }\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaswzd8hd.swift:21:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * Double(a) + Double(b)\
    \ + Double(c))\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpx6hkgulo/tmpx6hkgulo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84f8eddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84f8bd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84f8bd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84f8bd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6hkgulo                        0x000055a9aafc021f <unavailable> + 4639

    5    libc.so.6                          0x00002b84f90c9460 __libc_start_main +
    245

    6    tmpx6hkgulo                        0x000055a9aafbfeb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides % 2 == 0 {\n        return Double(sides)\
    \ / 2.0\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4td_f0pt/tmp4td_f0pt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5341bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53418f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53418f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53418f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4td_f0pt                        0x0000562a587e3383 <unavailable> + 4995

    5    libc.so.6                          0x00002b5341de9460 __libc_start_main +
    245

    6    tmp4td_f0pt                        0x0000562a587e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprosdhndb/tmprosdhndb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88b404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88b0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88b0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88b0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprosdhndb                        0x0000557a35cc62bf <unavailable> + 4799

    5    libc.so.6                          0x00002af88b5f0460 __libc_start_main +
    245

    6    tmprosdhndb                        0x0000557a35cc5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp725m4ddj/tmp725m4ddj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0abe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0a8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0a8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0a8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp725m4ddj                        0x000055839853725f <unavailable> + 4703

    5    libc.so.6                          0x00002aab0add4460 __libc_start_main +
    245

    6    tmp725m4ddj                        0x0000558398536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let a2 = a * a\n    let a3 = a * a\n    let b1\
    \ = 2 * b * b\n    let b2 = b * b\n    let b3 = b * b\n    let c1 = 2 * c * c\n\
    \    let c2 = c * c\n    let c3 = c * c\n    let det = a1 * b2 - a2 * b1\n   \
    \ if det < 0 {\n        return -1\n    }\n    let sqrt_det = sqrt(det)\n    let\
    \ area = sqrt_det * sqrt_det\n    if area < 0 {\n        return -1\n    }\n  \
    \  return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpcnb5yoyt.swift:26:20: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt_det = sqrt(det)\n                   ^~~~\n/tmp/tmpcnb5yoyt.swift:31:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a > b {\n        guard a > c else {\n            return -1\n        }\n\
    \        return b * b + c * c\n    }\n    guard b > c else {\n        return -1\n\
    \    }\n    return a * b + c * c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplsg7f4uc.swift:17:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return b * b + c * c\n         \
    \      ~~~~~~^~~~~~~\n               Double(      )\n/tmp/tmplsg7f4uc.swift:22:18:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return a * b + c * c\n           ~~~~~~^~~~~~~\n           Double(      )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides % 2 == 0 {\n        return Double(sides)\
    \ / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp59uwo2hm/tmp59uwo2hm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade69f20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade69c17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade69c17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade69c167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59uwo2hm                        0x0000558d23d4b383 <unavailable> + 4995

    5    libc.so.6                          0x00002ade6a10c460 __libc_start_main +
    245

    6    tmp59uwo2hm                        0x0000558d23d4aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sumOfSides = sides.reduce(0, +)\n    if sumOfSides\
    \ > sides[2] {\n        return -1\n    }\n    return Double(sides[0] * sides[1]\
    \ * sides[2]) / Double(sides[0] + sides[1] + sides[2])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmphqwh307f/tmphqwh307f.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af147455c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14714cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af14714c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14714b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqwh307f                        0x00005589397c239f <unavailable> + 5023

    5    libc.so.6                          0x00002af147641460 __libc_start_main +
    245

    6    tmphqwh307f                        0x00005589397c2039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a +\
    \ b + c) / 2\n    if s > 0 {\n        return s * sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsjg4u3a0.swift:18:20: error: cannot find 'sqrt' in scope\n    \
    \    return s * sqrt(s * (s - a) * (s - b) * (s - c))\n                   ^~~~\n\
    /tmp/tmpsjg4u3a0.swift:18:16: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return s * sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1\
    \ > c1 {\n        return a * b * c / 2\n    }\n    if a1 + b1 > c1 {\n       \
    \ return a * b * c / 2\n    }\n    if a1 + b1 > c1 {\n        return a * b * c\
    \ / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwajz6993.swift:17:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n/tmp/tmpwajz6993.swift:20:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a * b * c / 2\n               ~~~~~~~~~~^~~\n               Double(\
    \      )\n/tmp/tmpwajz6993.swift:23:26: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return a * b * c / 2\n      \
    \         ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    let a2 = a1\
    \ + b1\n    let b2 = b1 + c1\n    let c2 = c1 + a1\n    if a2 > b2 && a2 > c2\
    \ {\n        return a * b * c / 2\n    } else if b2 > a2 && b2 > c2 {\n      \
    \  return b * a * c / 2\n    } else {\n        return c * a * a / 2\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpl2fajb8g.swift:20:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n/tmp/tmpl2fajb8g.swift:22:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return b * a * c / 2\n               ~~~~~~~~~~^~~\n               Double(\
    \      )\n/tmp/tmpl2fajb8g.swift:24:26: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return c * a * a / 2\n      \
    \         ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a + b - c)\n    }\n  \
    \  if a + c > b {\n        return Double(-1) * Double(a + c - b)\n    }\n    if\
    \ b + c > a {\n        return Double(-1) * Double(b + c - a)\n    }\n    return\
    \ Double(a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpefbthi79/tmpefbthi79.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b3b2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b3826b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b3826988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b38257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefbthi79                        0x0000560eb49331cf <unavailable> + 4559

    5    libc.so.6                          0x00002ba0b3d1b460 __libc_start_main +
    245

    6    tmpefbthi79                        0x0000560eb4932e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * a + b + c)\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc79xmm_t.swift:13:51: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area: Double = Double(a * b * c) /\
    \ Double(2.0 * a + b + c)\n                                                  ^\n\
    \                                                  Int( )\n"
  stdout: ''
  timestamp: 1660014386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c) / 2\n    }\n    if a + c > b {\n       \
    \ return Double(a + c - b) / 2\n    }\n    if b + c > a {\n        return Double(b\
    \ + c - a) / 2\n    }\n    return Double(a + b + c) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps5q8e1kx/tmps5q8e1kx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3459dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace34294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace34294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace342937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5q8e1kx                        0x00005562c21cb2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ace34789460 __libc_start_main +
    245

    6    tmps5q8e1kx                        0x00005562c21caf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sum) / Double(sides.last)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz254ttqz.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpz254ttqz.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpz254ttqz.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpz254ttqz.swift:18:39: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sum) / Double(sides.last)\n\
    \                                      ^\n/tmp/tmpz254ttqz.swift:18:39: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return Double(sum) / Double(sides.last)\n                               \
    \       ^\n                                           ?? <#default value#>\n/tmp/tmpz254ttqz.swift:18:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sum) / Double(sides.last)\n                       \
    \               ^\n                                          !\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a * b + c * b * c) / Double(4.0 * a + b + c)\n    if area > Double(0.0)\
    \ {\n        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpd5clxgyc.swift:13:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let area = (a * b + c * b * c) / Double(4.0 * a + b + c)\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd5clxgyc.swift:15:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014435
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = Math.sqrt(a1)\n    let a3 = -b +\
    \ Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n    let a5 = Math.sqrt(a3)\n\
    \    let a6 = Math.sqrt(a4)\n    if a2 < 0 {\n        return -1\n    }\n    if\
    \ a3 < 0 {\n        return -1\n    }\n    if a4 < 0 {\n        return -1\n   \
    \ }\n    if a5 < 0 {\n        return -1\n    }\n    if a6 < 0 {\n        return\
    \ -1\n    }\n    if a2 > a6 && a3 > a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 > a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 < a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > a6 && a3 < a5 && a4 > a4 {\n        return a1 + a2 +\
    \ a3\n    }\n    if a2 > \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpp93ghg4x.swift:83:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpp93ghg4x.swift:14:14: error: cannot find 'Math' in scope\n    let\
    \ a2 = Math.sqrt(a1)\n             ^~~~\n/tmp/tmpp93ghg4x.swift:15:19: error:\
    \ cannot find 'Math' in scope\n    let a3 = -b + Math.sqrt(a1)\n             \
    \     ^~~~\n/tmp/tmpp93ghg4x.swift:16:19: error: cannot find 'Math' in scope\n\
    \    let a4 = -b - Math.sqrt(a1)\n                  ^~~~\n/tmp/tmpp93ghg4x.swift:17:14:\
    \ error: cannot find 'Math' in scope\n    let a5 = Math.sqrt(a3)\n           \
    \  ^~~~\n/tmp/tmpp93ghg4x.swift:18:14: error: cannot find 'Math' in scope\n  \
    \  let a6 = Math.sqrt(a4)\n             ^~~~\n/tmp/tmpp93ghg4x.swift:35:24: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \     return a1 + a2 + a3\n               ~~~~~~~~^~~~\n               Double(\
    \     )\n/tmp/tmpp93ghg4x.swift:38:24: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return a1 + a2 + a3\n       \
    \        ~~~~~~~~^~~~\n               Double(     )\n/tmp/tmpp93ghg4x.swift:41:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a1 + a2 + a3\n               ~~~~~~~~^~~~\n               Double(\
    \     )\n/tmp/tmpp93ghg4x.swift:44:24: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return a1 + a2 + a3\n       \
    \        ~~~~~~~~^~~~\n               Double(     )\n/tmp/tmpp93ghg4x.swift:47:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a1 + a2 + a3\n               ~~~~~~~~^~~~\n               Double(\
    \     )\n/tmp/tmpp93ghg4x.swift:50:24: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return a1 + a2 + a3\n       \
    \        ~~~~~~~~^~~~\n               Double(     )\n/tmp/tmpp93ghg4x.swift:53:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a1 + a2 + a3\n               ~~~~~~~~^~~~\n               Double(\
    \     )\n/tmp/tmpp93ghg4x.swift:56:24: error: cannot convert "
  stdout: ''
  timestamp: 1660014391
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(b, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvaj69kht.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpvaj69kht.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpvaj69kht.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpvaj69kht.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpvaj69kht.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpvaj69kht.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpvaj69kht.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpvaj69kht.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpvaj69kht.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpvaj69kht.swift:17:12: error: cannot find 'round' in\
    \ scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = Math.sqrt(a1)\n    let a3 = -b +\
    \ Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n    let a5 = Math.sqrt(a3)\n\
    \    let a6 = Math.sqrt(a4)\n    let a7 = Math.sqrt(a5)\n    let a8 = -b + Math.sqrt(a3)\n\
    \    let a9 = -b - Math.sqrt(a3)\n    let a10 = Math.sqrt(a9)\n    let a11 = Math.sqrt(a10)\n\
    \    let a12 = Math.sqrt(a11)\n    let a13 = -b + Math.sqrt(a9)\n    let a14 =\
    \ -b - Math.sqrt(a9)\n    let a15 = Math.sqrt(a14)\n    let a16 = Math.sqrt(a15)\n\
    \    let a17 = -b + Math.sqrt(a14)\n    let a18 = -b - Math.sqrt(a14)\n    let\
    \ a19 = Math.sqrt(a17)\n    let a20 = Math.sqrt(a18)\n    let a21 = Math.sqrt(a19)\n\
    \    let a22 = -b + Math.sqrt(a17)\n    let a23 = -b - Math.sqrt(a17)\n    let\
    \ a24 = Math.sqrt(a22)\n    let a25 = Math.sqrt(a23)\n    let a26 = Math.sqrt(a24)\n\
    \    let a27 = -b + Math.sqrt(a22)\n    let a28 = -b - Math.sqrt(a22)\n    let\
    \ a29 = Math.sqrt(a27)\n    let a30 = Math.sqrt(a28)\n    let a31 = Math.sqrt(a29)\n\
    \    let a32 = -b + Math.sqrt(a27)\n    let a33 = -b - Math.sqrt(a27)\n    let\
    \ a34 = Math.sqrt(a32)\n    let a35 = Math.sqrt(a33)\n    let a36 = Math.sqrt(a34)\n\
    \    let a37 = -b + Math.sqrt(a32)\n    let a38 = -b - Math.sqrt(a32)\n    let\
    \ a39 = Math.sqrt(a37)\n    let a40 = Math.sqrt(a38)\n    let a41 = Math.sqrt(a39)\n\
    \    let a42 = -b + Math.sqrt(a37)\n    let a43 = -b - Math.sqrt(a37)\n    let\
    \ a44 = Math.sqrt(a42)\n    let a45 = Math.sqrt(a43)\n    let a46 = Math.sqrt(a44)\n\
    \    let a47 = -b + Math.sqrt(a42)\n    let a48 = -b - Math.sqrt(a42)\n    let\
    \ a49 = Math.sqrt(a47)\n    let a50 = Math.sqrt(a48)\n    let a51 = Math.sqrt(a49)\n\
    \    let a52 = -b + Math.sqrt(a47)\n    let a53 = -b - Math.sqrt(a47)\n    let\
    \ a54 = Math.sqrt(a5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsei0w34y.swift:67:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpsei0w34y.swift:66:24: note: to match this opening '('\n    let a54\
    \ = Math.sqrt(a5\n                       ^\n/tmp/tmpsei0w34y.swift:14:14: error:\
    \ cannot find 'Math' in scope\n    let a2 = Math.sqrt(a1)\n             ^~~~\n\
    /tmp/tmpsei0w34y.swift:15:19: error: cannot find 'Math' in scope\n    let a3 =\
    \ -b + Math.sqrt(a1)\n                  ^~~~\n/tmp/tmpsei0w34y.swift:16:19: error:\
    \ cannot find 'Math' in scope\n    let a4 = -b - Math.sqrt(a1)\n             \
    \     ^~~~\n/tmp/tmpsei0w34y.swift:17:14: error: cannot find 'Math' in scope\n\
    \    let a5 = Math.sqrt(a3)\n             ^~~~\n/tmp/tmpsei0w34y.swift:18:14:\
    \ error: cannot find 'Math' in scope\n    let a6 = Math.sqrt(a4)\n           \
    \  ^~~~\n/tmp/tmpsei0w34y.swift:19:14: error: cannot find 'Math' in scope\n  \
    \  let a7 = Math.sqrt(a5)\n             ^~~~\n/tmp/tmpsei0w34y.swift:20:19: error:\
    \ cannot find 'Math' in scope\n    let a8 = -b + Math.sqrt(a3)\n             \
    \     ^~~~\n/tmp/tmpsei0w34y.swift:21:19: error: cannot find 'Math' in scope\n\
    \    let a9 = -b - Math.sqrt(a3)\n                  ^~~~\n/tmp/tmpsei0w34y.swift:22:15:\
    \ error: cannot find 'Math' in scope\n    let a10 = Math.sqrt(a9)\n          \
    \    ^~~~\n/tmp/tmpsei0w34y.swift:23:15: error: cannot find 'Math' in scope\n\
    \    let a11 = Math.sqrt(a10)\n              ^~~~\n/tmp/tmpsei0w34y.swift:24:15:\
    \ error: cannot find 'Math' in scope\n    let a12 = Math.sqrt(a11)\n         \
    \     ^~~~\n/tmp/tmpsei0w34y.swift:25:20: error: cannot find 'Math' in scope\n\
    \    let a13 = -b + Math.sqrt(a9)\n                   ^~~~\n/tmp/tmpsei0w34y.swift:26:20:\
    \ error: cannot find 'Math' in scope\n    let a14 = -b - Math.sqrt(a9)\n     \
    \              ^~~~\n/tmp/tmpsei0w34y.swift:27:15: error: cannot find 'Math' in\
    \ scope\n    let a15 = Math.sqrt(a14)\n              ^~~~\n/tmp/tmpsei0w34y.swift:28:15:\
    \ error: cannot find 'Math' in scope\n    let a16 = Math.sqrt(a15)\n         \
    \     ^~~~\n/tmp/tmpsei0w34y.swift:29:20: error: cannot find 'Math' in scope\n\
    \    let a17 = -b + Math.sqrt(a14)\n                   ^~~~\n/tmp/tmpsei"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a + b + c) / 2\n    if area > c {\n        return area\n    }\n\
    \    if area > b {\n        return area\n    }\n    if area > a {\n        return\
    \ area\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp17q_uukf.swift:15:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return area\n               ^~~~\n\
    \               Double( )\n/tmp/tmp17q_uukf.swift:18:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return area\n\
    \               ^~~~\n               Double( )\n/tmp/tmp17q_uukf.swift:21:16:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return area\n               ^~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a+b+c)/2\n\
    \    if s > c {\n        return -1\n    }\n    if s == c {\n        return a *\
    \ b\n    }\n    if s == b {\n        return a * c\n    }\n    if s == a {\n  \
    \      return b * c\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx7xvt4uj.swift:21:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b\n               ~~^~~\n\
    \               Double( )\n/tmp/tmpx7xvt4uj.swift:24:18: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return a *\
    \ c\n               ~~^~~\n               Double( )\n/tmp/tmpx7xvt4uj.swift:27:18:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return b * c\n               ~~^~~\n               Double( )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n    return area < 0.000001 ? -1.0 : area\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphc48g0ux.swift:13:48: error: cannot find 'pow' in scope\n    let\
    \ area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n\
    \                                               ^~~\n/tmp/tmphc48g0ux.swift:13:60:\
    \ error: cannot find 'pow' in scope\n    let area: Double = abs(a * b * c) / Double(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n                                              \
    \             ^~~\n/tmp/tmphc48g0ux.swift:13:72: error: cannot find 'pow' in scope\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                                                      \
    \ ^~~\n/tmp/tmphc48g0ux.swift:13:24: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let area: Double = abs(a * b * c) /\
    \ Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                       ^\n      \
    \                 Double(       )\n"
  stdout: ''
  timestamp: 1660014386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = sqrt(a1)\n    let a3 = sqrt(a2)\n\
    \    let a4 = b * b + 4 * a * c\n    let a5 = sqrt(a4)\n    let a6 = a * b + 4\
    \ * a * c\n    let a7 = a * b - a2 * a2 * c\n    let a8 = a * b - a2 * a2 * c\n\
    \    let a9 = a * b - a2 * a2 * c\n    let a10 = a * b - a2 * a2 * c\n    let\
    \ a11 = a * b - a2 * a2 * c\n    let a12 = a * b - a2 * a2 * c\n    let a13 =\
    \ a * b - a2 * a2 * c\n    let a14 = a * b - a2 * a2 * c\n    let a15 = a * b\
    \ - a2 * a2 * c\n    let a16 = a * b - a2 * a2 * c\n    let a17 = a * b - a2 *\
    \ a2 * c\n    let a18 = a * b - a2 * a2 * c\n    let a19 = a * b - a2 * a2 * c\n\
    \    let a20 = a * b - a2 * a2 * c\n    let a21 = a * b - a2 * a2 * c\n    let\
    \ a22 = a * b - a2 * a2 * c\n    let a23 = a * b - a2 * a2 * c\n    let a24 =\
    \ a * b - a2 * a2 * c\n    let a25 = a * b - a2 * a2 * c\n    let a26 = a * b\
    \ - a2 * a2 * c\n    let a27 = a * b - a2 * a2 * c\n    let a28 = a * b - a2 *\
    \ a2 * c\n    let a29 = a * b - a2 * a2 * c\n    let a30 = a * b - a2 * a2 * c\n\
    \    let a31 = a * b - a2 * a2 * c\n    let a32 = a * b - a2 * a2 * c\n    let\
    \ a33 = a * b - a2 * a2 * c\n    let a34 = a * b - a2 * a2 * c\n    let a35 =\
    \ a * b - a2 * a2 * c\n    let a36 = a * b - a2 * a2 * c\n    let a37 = a * b\
    \ - a2 * a2 * c\n    let a38 = a * b - a2 * a2 * c\n    let a39 = a * b - a2 *\
    \ a2 * c\n    let a40 = a * b - a2 * a2 * c\n    let a41 = a * b - a2 * a2 * c\n\
    \    let a42 = a * b - a2 * a2 * c\n    let a43 = a * b - a2 * a2 * c\n    let\
    \ a44 = a * b - a2 * a2 * c\n    let a45 = a * b - a2 * a2 * c\n    let a46 =\
    \ a * b - a2 * a2 * c\n    let a47 = a * b - a2 * a2 * c\n    let a48 = a * b\
    \ - a2 * a2 * c\n    let a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0_a_6x3w.swift:14:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmp0_a_6x3w.swift:15:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmp0_a_6x3w.swift:17:14:\
    \ error: cannot find 'sqrt' in scope\n    let a5 = sqrt(a4)\n             ^~~~\n\
    /tmp/tmp0_a_6x3w.swift:61:9: error: type annotation missing in pattern\n    let\
    \ a\n        ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c) / 2\n    }\n    if a + c > b {\n       \
    \ return Double(a + c - b) / 2\n    }\n    if b + c > a {\n        return Double(b\
    \ + c - a) / 2\n    }\n    return Double(a + b + c) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps5q8e1kx/tmps5q8e1kx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3459dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace34294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace34294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace342937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5q8e1kx                        0x00005562c21cb2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ace34789460 __libc_start_main +
    245

    6    tmps5q8e1kx                        0x00005562c21caf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * a + b + c)\n    return\
    \ area > 0.0 ? area : -1.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjoizefmd.swift:13:51: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area: Double = Double(a * b * c) /\
    \ Double(2.0 * a + b + c)\n                                                  ^\n\
    \                                                  Int( )\n"
  stdout: ''
  timestamp: 1660014386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sumOfSides = sides.reduce(0, +)\n    if sumOfSides\
    \ > sides.last {\n        return -1\n    }\n    let third = sides.last\n    let\
    \ thirdSquare = side * side\n    let thirdSqrOfSides = thirdSquare * side\n  \
    \  let thirdSqrOfSidesSquare = thirdSqrOfSides * side\n    let thirdSqrOfSidesSquareRoot\
    \ = thirdSqrOfSidesSquare / third\n    let thirdSqrOfSidesSquareRootSquare = thirdSqrOfSidesSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquare\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquare = thirdSqrOfSidesSquareRootSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquare\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquare\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquare\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquare\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquareRoot\
    \ / third\n    let thirdSqrOfSidesSquareRootSquareRootSquareRoot = thirdSqrOfSidesSquareRootSquareRootSquareRoot\
    \ / third\n    let thirdS\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx73my2fr.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sumOfSides > sides.last {\n  \
    \                        ^\n/tmp/tmpx73my2fr.swift:15:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              \
    \ ?? <#default value#>\n/tmp/tmpx73my2fr.swift:15:27: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              !\n\
    /tmp/tmpx73my2fr.swift:19:23: error: cannot find 'side' in scope\n    let thirdSquare\
    \ = side * side\n                      ^~~~\n/tmp/tmpx73my2fr.swift:19:30: error:\
    \ cannot find 'side' in scope\n    let thirdSquare = side * side\n           \
    \                  ^~~~\n/tmp/tmpx73my2fr.swift:20:41: error: cannot find 'side'\
    \ in scope\n    let thirdSqrOfSides = thirdSquare * side\n                   \
    \                     ^~~~\n/tmp/tmpx73my2fr.swift:21:51: error: cannot find 'side'\
    \ in scope\n    let thirdSqrOfSidesSquare = thirdSqrOfSides * side\n         \
    \                                         ^~~~\n/tmp/tmpx73my2fr.swift:36:9: error:\
    \ type annotation missing in pattern\n    let thirdS\n        ^\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp725m4ddj/tmp725m4ddj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0abe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0a8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0a8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0a8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp725m4ddj                        0x000055839853725f <unavailable> + 4703

    5    libc.so.6                          0x00002aab0add4460 __libc_start_main +
    245

    6    tmp725m4ddj                        0x0000558398536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c) / 2\n    }\n    if a + c > b {\n       \
    \ return Double(a + c - b) / 2\n    }\n    if b + c > a {\n        return Double(b\
    \ + c - a) / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpz2nnfr1y/tmpz2nnfr1y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc0a9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc0793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc0793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc07927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2nnfr1y                        0x00005558b01352bf <unavailable> + 4799

    5    libc.so.6                          0x00002b0fc0c88460 __libc_start_main +
    245

    6    tmpz2nnfr1y                        0x00005558b0134f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let a2 = a * a\n    let c1 = c * c - a1 * a\n\
    \    let c2 = c * c\n    let det = a1 * c2 - a2 * c1\n    if det < 0 {\n     \
    \   return -1\n    }\n    let sqrt_det = sqrt(det)\n    return sqrt_det * sqrt_det\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpox95pfqb.swift:21:20: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt_det = sqrt(det)\n                   ^~~~\n/tmp/tmpox95pfqb.swift:22:21:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \    return sqrt_det * sqrt_det\n           ~~~~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    } else {\n        return Double(a +\
    \ b + c - a)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpfa76b_0n/tmpfa76b_0n.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42f2a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42f26fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42f26fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42f26fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfa76b_0n                        0x00005592474ef2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b42f2bf0460 __libc_start_main +
    245

    6    tmpfa76b_0n                        0x00005592474eef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1\
    \ > c1 {\n        return a1 * b1 * c1\n    }\n    if b1 + c1 > a1 {\n        return\
    \ b1 * c1 * a1\n    }\n    if c1 + a1 > b1 {\n        return c1 * a1 * b1\n  \
    \  }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp75iq0ybk.swift:17:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a1 * b1 * c1\n          \
    \     ~~~~~~~~^~~~\n               Double(     )\n/tmp/tmp75iq0ybk.swift:20:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return b1 * c1 * a1\n               ~~~~~~~~^~~~\n               Double(\
    \     )\n/tmp/tmp75iq0ybk.swift:23:24: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return c1 * a1 * b1\n       \
    \        ~~~~~~~~^~~~\n               Double(     )\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = a + b\
    \ + c\n    if s == 0 {\n        return -1\n    }\n    let area = s * s * (s -\
    \ a) * (s - b) * (s - c)\n    return Double(area / s)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpztjq1a4s/tmpztjq1a4s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a0593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a028ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a028a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a02897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztjq1a4s                        0x000055f25d1dd34f <unavailable> + 4943

    5    libc.so.6                          0x00002af5a077f460 __libc_start_main +
    245

    6    tmpztjq1a4s                        0x000055f25d1dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014381
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprosdhndb/tmprosdhndb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88b404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88b0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88b0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88b0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprosdhndb                        0x0000557a35cc62bf <unavailable> + 4799

    5    libc.so.6                          0x00002af88b5f0460 __libc_start_main +
    245

    6    tmprosdhndb                        0x0000557a35cc5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sumOfSides = sides.reduce(0, +)\n    if sumOfSides\
    \ > sides.last {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp230yfjko.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sumOfSides > sides.last {\n  \
    \                        ^\n/tmp/tmp230yfjko.swift:15:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              \
    \ ?? <#default value#>\n/tmp/tmp230yfjko.swift:15:27: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              !\n\
    /tmp/tmp230yfjko.swift:18:46: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmp230yfjko.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmp230yfjko.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n                              \
    \                   !\n/tmp/tmp230yfjko.swift:18:25: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.count)\n                        ^\n/tmp/tmp230yfjko.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmp230yfjko.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last"
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = Math.sqrt(a1)\n    let a3 = -b +\
    \ Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n    let a5 = Math.sqrt(a3)\n\
    \    let a6 = Math.sqrt(a4)\n    if a2 < 0 {\n        return -1\n    }\n    if\
    \ a3 < 0 {\n        return -1\n    }\n    if a4 < 0 {\n        return -1\n   \
    \ }\n    if a5 < 0 {\n        return -1\n    }\n    if a6 < 0 {\n        return\
    \ -1\n    }\n    if a2 > a1 {\n        return a2 / a1\n    }\n    if a3 > a1 {\n\
    \        return a3 / a1\n    }\n    if a4 > a1 {\n        return a4 / a1\n   \
    \ }\n    if a5 > a1 {\n        return a5 / a1\n    }\n    if a6 > a1 {\n     \
    \   return a6 / a1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpv4nwpggr.swift:14:14: error: cannot find 'Math' in scope\n    let\
    \ a2 = Math.sqrt(a1)\n             ^~~~\n/tmp/tmpv4nwpggr.swift:15:19: error:\
    \ cannot find 'Math' in scope\n    let a3 = -b + Math.sqrt(a1)\n             \
    \     ^~~~\n/tmp/tmpv4nwpggr.swift:16:19: error: cannot find 'Math' in scope\n\
    \    let a4 = -b - Math.sqrt(a1)\n                  ^~~~\n/tmp/tmpv4nwpggr.swift:17:14:\
    \ error: cannot find 'Math' in scope\n    let a5 = Math.sqrt(a3)\n           \
    \  ^~~~\n/tmp/tmpv4nwpggr.swift:18:14: error: cannot find 'Math' in scope\n  \
    \  let a6 = Math.sqrt(a4)\n             ^~~~\n/tmp/tmpv4nwpggr.swift:35:19: error:\
    \ no '/' candidates produce the expected contextual result type 'Double'\n   \
    \     return a2 / a1\n                  ^\nSwift.Int:10:24: note: '/' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    public static func\
    \ / (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:8:24:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \                       ^\n/tmp/tmpv4nwpggr.swift:38:19: error: no '/' candidates\
    \ produce the expected contextual result type 'Double'\n        return a3 / a1\n\
    \                  ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected\
    \ contextual result type 'Double'\n    public static func / (lhs: Int, rhs: Int)\
    \ -> Int\n                       ^\nSwift.BinaryInteger:14:17: note: '/' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    static func / (lhs:\
    \ Self, rhs: Self) -> Self\n                ^\nSwift.Duration:8:24: note: '/'\
    \ produces 'Duration', not the expected contextual result type 'Double'\n    public\
    \ static func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \                       ^\n/tmp/tmpv4nwpggr.swift:41:19: error: no '/' candidates\
    \ produce the exp"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first - sides.last)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmposet004m.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmposet004m.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmposet004m.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmposet004m.swift:18:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(sides.last) * Double(sides.last) / Double(sides.first\
    \ - sides.last)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014401
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a +\
    \ b + c) / 2\n    if s > 0 {\n        let area = s * s\n        let area = Double(area)\n\
    \        let area = round(area, 2)\n        return area\n    } else {\n      \
    \  return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp49ne2g0s.swift:19:13: error: invalid redeclaration of 'area'\n\
    \        let area = Double(area)\n            ^\n/tmp/tmp49ne2g0s.swift:18:13:\
    \ note: 'area' previously declared here\n        let area = s * s\n          \
    \  ^\n/tmp/tmp49ne2g0s.swift:20:20: error: cannot find 'round' in scope\n    \
    \    let area = round(area, 2)\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = (a + b + c) / 2\n    let b1 = (a + b) / 2\n    let c1 = (a + c)\
    \ / 2\n    let a2 = (b + c + a) / 2\n    let b2 = (b + c) / 2\n    let c2 = (b\
    \ + a) / 2\n    let a3 = (c + a + b) / 2\n    let b3 = (c + b) / 2\n    let c3\
    \ = (c + a) / 2\n    let a4 = (a + b + c) / 2\n    let b4 = (a + b) / 2\n    let\
    \ c5 = (a + c) / 2\n    let a6 = (b + c + a) / 2\n    let b6 = (b + c) / 2\n \
    \   let c6 = (b + a) / 2\n    let a7 = (c + a + b) / 2\n    let b7 = (c + b) /\
    \ 2\n    let c7 = (c + a) / 2\n    let a8 = (a + b + c) / 2\n    let b8 = (a +\
    \ b) / 2\n    let c8 = (a + c) / 2\n    let a9 = (b + c + a) / 2\n    let b9 =\
    \ (b + c) / 2\n    let c9 = (b + a) / 2\n    let a10 = (c + a + b) / 2\n    let\
    \ b10 = (c + b) / 2\n    let c10 = (c + a) / 2\n    let a11 = (a + b + c) / 2\n\
    \    let b11 = (a + b) / 2\n    let c11 = (a + c) / 2\n    let a12 = (b + c +\
    \ a) / 2\n    let b12 = (b + c) / 2\n    let c12 = (b + a) / 2\n    let a13 =\
    \ (c + a + b) / 2\n    let b13 = (c + b) / 2\n    let c13 = (c + a) / 2\n    let\
    \ a14 = (a + b + c) / 2\n    let b14 = (a + b) / 2\n    let c14 = (a + c) / 2\n\
    \    let a15 = (b + c + a) / 2\n    let b15 = (b + c) / 2\n    let c15 = (b +\
    \ a) / 2\n    let a16 = (c + a + b) / 2\n    let b16 = (c + b) / 2\n    let c16\
    \ = (c + a) / 2\n    let a17 = (a + b + c) / 2\n    let b17 = (a + b) / 2\n  \
    \  let c17 = (a + c) / 2\n    let a18 = (b + c + a) / 2\n    let b18 = (b + c)\
    \ / 2\n    let c18 = (b + a) / 2\n    let a19 = (c + a + b) / 2\n    let b19 =\
    \ (c + b) / 2\n    let c19 = (c + a) / 2\n    let a20 = (a + b + c) / 2\n    let\
    \ b20 = (a + b) / 2\n    let c20 = (a + c) / 2\n    let a21 = (b + c + a) / 2\n\
    \    let b21 = (b + c) / 2\n    let c21 = (b + a) / 2\n    let a22 = (c + a +\
    \ b) / 2\n    let b22\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6hznvflo.swift:74:9: error: type annotation missing in pattern\n\
    \    let b22\n        ^\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = a + b\
    \ + c\n    if s > 0 {\n        let area = s * s * (s - a) * (s - b) * (s - c)\n\
    \        return Double(area / s)\n    } else {\n        return -1\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpwoxgxk36/tmpwoxgxk36.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb5b00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb57f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb57f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb57f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoxgxk36                        0x000056327487e34f <unavailable> + 4943

    5    libc.so.6                          0x00002b0bb5cec460 __libc_start_main +
    245

    6    tmpwoxgxk36                        0x000056327487dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 > b1\
    \ && b1 > c1 {\n        return a1 * b1 * c1\n    }\n    if a1 > c1 && c1 > b1\
    \ {\n        return a1 * c1 * b1\n    }\n    if b1 > c1 && c1 > a1 {\n       \
    \ return b1 * c1 * a1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppythamhb.swift:17:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a1 * b1 * c1\n          \
    \     ~~~~~~~~^~~~\n               Double(     )\n/tmp/tmppythamhb.swift:20:24:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return a1 * c1 * b1\n               ~~~~~~~~^~~~\n               Double(\
    \     )\n/tmp/tmppythamhb.swift:23:24: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return b1 * c1 * a1\n       \
    \        ~~~~~~~~^~~~\n               Double(     )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = Math.sqrt(a1)\n    let a3 = -b +\
    \ Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n    let a5 = Math.sqrt(a3)\n\
    \    let a6 = Math.sqrt(a4)\n    let a7 = Math.sqrt(a5)\n    let a8 = -b + Math.sqrt(a3)\n\
    \    let a9 = -b - Math.sqrt(a3)\n    let a10 = Math.sqrt(a9)\n    let a11 = Math.sqrt(a10)\n\
    \    let a12 = Math.sqrt(a11)\n    let a13 = -b + Math.sqrt(a4)\n    let a14 =\
    \ -b - Math.sqrt(a4)\n    let a15 = Math.sqrt(a14)\n    let a16 = Math.sqrt(a15)\n\
    \    let a17 = -b + Math.sqrt(a5)\n    let a18 = -b - Math.sqrt(a5)\n    let a19\
    \ = Math.sqrt(a17)\n    let a20 = Math.sqrt(a18)\n    let a21 = Math.sqrt(a19)\n\
    \    let a22 = -b + Math.sqrt(a6)\n    let a23 = -b - Math.sqrt(a6)\n    let a24\
    \ = Math.sqrt(a23)\n    let a25 = Math.sqrt(a24)\n    let a26 = -b + Math.sqrt(a7)\n\
    \    let a27 = -b - Math.sqrt(a7)\n    let a28 = Math.sqrt(a26)\n    let a29 =\
    \ Math.sqrt(a27)\n    let a30 = -b + Math.sqrt(a8)\n    let a31 = -b - Math.sqrt(a8)\n\
    \    let a32 = Math.sqrt(a30)\n    let a33 = Math.sqrt(a31)\n    let a34 = -b\
    \ + Math.sqrt(a9)\n    let a35 = -b - Math.sqrt(a9)\n    let a36 = Math.sqrt(a34)\n\
    \    let a37 = Math.sqrt(a35)\n    let a38 = -b + Math.sqrt(a10)\n    let a39\
    \ = -b - Math.sqrt(a10)\n    let a40 = Math.sqrt(a38)\n    let a41 = Math.sqrt(a39)\n\
    \    let a42 = -b + Math.sqrt(a11)\n    let a43 = -b - Math.sqrt(a11)\n    let\
    \ a44 = Math.sqrt(a42)\n    let a45 = Math.sqrt(a43)\n    let a46 = -b + Math.sqrt(a12)\n\
    \    let a47 = -b - Math.sqrt(a12)\n    let a48 = Math.sqrt(a46)\n    let a49\
    \ = Math.sqrt(a47)\n    let a50 = -b + Math.sqrt(a13)\n    let a51 = -b - Math.sqrt(a13)\n\
    \    let a52 = Math.sqrt(a50)\n    let a53 = Math.sqrt(a51)\n    let a54 = -b\
    \ + Math.sqrt(a14)\n    let a55\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptj8ibsa8.swift:14:14: error: cannot find 'Math' in scope\n    let\
    \ a2 = Math.sqrt(a1)\n             ^~~~\n/tmp/tmptj8ibsa8.swift:15:19: error:\
    \ cannot find 'Math' in scope\n    let a3 = -b + Math.sqrt(a1)\n             \
    \     ^~~~\n/tmp/tmptj8ibsa8.swift:16:19: error: cannot find 'Math' in scope\n\
    \    let a4 = -b - Math.sqrt(a1)\n                  ^~~~\n/tmp/tmptj8ibsa8.swift:17:14:\
    \ error: cannot find 'Math' in scope\n    let a5 = Math.sqrt(a3)\n           \
    \  ^~~~\n/tmp/tmptj8ibsa8.swift:18:14: error: cannot find 'Math' in scope\n  \
    \  let a6 = Math.sqrt(a4)\n             ^~~~\n/tmp/tmptj8ibsa8.swift:19:14: error:\
    \ cannot find 'Math' in scope\n    let a7 = Math.sqrt(a5)\n             ^~~~\n\
    /tmp/tmptj8ibsa8.swift:20:19: error: cannot find 'Math' in scope\n    let a8 =\
    \ -b + Math.sqrt(a3)\n                  ^~~~\n/tmp/tmptj8ibsa8.swift:21:19: error:\
    \ cannot find 'Math' in scope\n    let a9 = -b - Math.sqrt(a3)\n             \
    \     ^~~~\n/tmp/tmptj8ibsa8.swift:22:15: error: cannot find 'Math' in scope\n\
    \    let a10 = Math.sqrt(a9)\n              ^~~~\n/tmp/tmptj8ibsa8.swift:23:15:\
    \ error: cannot find 'Math' in scope\n    let a11 = Math.sqrt(a10)\n         \
    \     ^~~~\n/tmp/tmptj8ibsa8.swift:24:15: error: cannot find 'Math' in scope\n\
    \    let a12 = Math.sqrt(a11)\n              ^~~~\n/tmp/tmptj8ibsa8.swift:25:20:\
    \ error: cannot find 'Math' in scope\n    let a13 = -b + Math.sqrt(a4)\n     \
    \              ^~~~\n/tmp/tmptj8ibsa8.swift:26:20: error: cannot find 'Math' in\
    \ scope\n    let a14 = -b - Math.sqrt(a4)\n                   ^~~~\n/tmp/tmptj8ibsa8.swift:27:15:\
    \ error: cannot find 'Math' in scope\n    let a15 = Math.sqrt(a14)\n         \
    \     ^~~~\n/tmp/tmptj8ibsa8.swift:28:15: error: cannot find 'Math' in scope\n\
    \    let a16 = Math.sqrt(a15)\n              ^~~~\n/tmp/tmptj8ibsa8.swift:29:20:\
    \ error: cannot find 'Math' in scope\n    let a17 = -b + Math.sqrt(a5)\n     \
    \              ^~~~\n/tmp/tmptj8ibsa8.swift:30:20: error: cannot find 'Math' in\
    \ scope\n    let a18 = -b - Math.sqrt(a5)\n                   ^~~~\n/tmp/tmptj8ibsa8.swift:31:15:\
    \ error: cannot find 'Math' in scope\n    let a19"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = (a + b + c) / 2\n    let b1 = (a + b) / 2\n    let c1 = (a + c)\
    \ / 2\n    let a2 = (b + c) / 2\n    let b2 = (b + a) / 2\n    let c2 = (b + c)\
    \ / 2\n    let a3 = (c + a) / 2\n    let b3 = (c + b) / 2\n    let c3 = (c + a)\
    \ / 2\n    let a4 = (a1 + a2 + a3) / 3\n    let b4 = (b1 + b2 + b3) / 3\n    let\
    \ c4 = (c1 + c2 + c3) / 3\n    let a5 = (a2 + a3 + a4) / 3\n    let b5 = (b2 +\
    \ b3 + b4) / 3\n    let c5 = (c2 + c3 + c5) / 3\n    let a6 = (a3 + a4 + a5) /\
    \ 3\n    let b6 = (b3 + b4 + b6) / 3\n    let c6 = (c3 + c4 + c6) / 3\n    let\
    \ a7 = (a4 + a5 + a6) / 3\n    let b7 = (b4 + b5 + b7) / 3\n    let c7 = (c4 +\
    \ c5 + c7) / 3\n    let a8 = (a5 + a6 + a7) / 3\n    let b8 = (b5 + b6 + b8) /\
    \ 3\n    let c8 = (c5 + c6 + c8) / 3\n    let a9 = (a6 + a7 + a8) / 3\n    let\
    \ b9 = (b6 + b7 + b9) / 3\n    let c9 = (c6 + c7 + c9) / 3\n    let a10 = (a7\
    \ + a8 + a9) / 3\n    let b10 = (b7 + b8 + b10) / 3\n    let c10 = (c7 + c8 +\
    \ c10) / 3\n    let a11 = (a8 + a9 + a10) / 3\n    let b11 = (b8 + b10 + b11)\
    \ / 3\n    let c11 = (c8 + c10 + c11) / 3\n    let a12 = (a9 + a10 + a11) / 3\n\
    \    let b12 = (b9 + b10 + b12) / 3\n    let c12 = (c9 + c10 + c12) / 3\n    let\
    \ a13 = (a10 + a11 + a12) / 3\n    let b13 = (b10 + b11 + b13) / 3\n    let c13\
    \ = (c10 + c11 + c13) / 3\n    let a14 = (a11 + a12 + a13) / 3\n    let b14 =\
    \ (b11 + b12 + b14) / 3\n    let c14 = (c11 + c12 + c14) / 3\n    let a15 = (a12\
    \ + a13 + a14) / 3\n    let b15 = (b12 + b13 + b15) / 3\n    let c15 = (c12 +\
    \ c13 + c15) / 3\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaiszp8d6.swift:58:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpaiszp8d6.swift:27:25: error: use of local variable 'c5' before its\
    \ declaration\n    let c5 = (c2 + c3 + c5) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:27:9:\
    \ note: 'c5' declared here\n    let c5 = (c2 + c3 + c5) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:29:25:\
    \ error: use of local variable 'b6' before its declaration\n    let b6 = (b3 +\
    \ b4 + b6) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:29:9: note:\
    \ 'b6' declared here\n    let b6 = (b3 + b4 + b6) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:30:25:\
    \ error: use of local variable 'c6' before its declaration\n    let c6 = (c3 +\
    \ c4 + c6) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:30:9: note:\
    \ 'c6' declared here\n    let c6 = (c3 + c4 + c6) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:32:25:\
    \ error: use of local variable 'b7' before its declaration\n    let b7 = (b4 +\
    \ b5 + b7) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:32:9: note:\
    \ 'b7' declared here\n    let b7 = (b4 + b5 + b7) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:33:25:\
    \ error: use of local variable 'c7' before its declaration\n    let c7 = (c4 +\
    \ c5 + c7) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:33:9: note:\
    \ 'c7' declared here\n    let c7 = (c4 + c5 + c7) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:35:25:\
    \ error: use of local variable 'b8' before its declaration\n    let b8 = (b5 +\
    \ b6 + b8) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:35:9: note:\
    \ 'b8' declared here\n    let b8 = (b5 + b6 + b8) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:36:25:\
    \ error: use of local variable 'c8' before its declaration\n    let c8 = (c5 +\
    \ c6 + c8) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:36:9: note:\
    \ 'c8' declared here\n    let c8 = (c5 + c6 + c8) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:38:25:\
    \ error: use of local variable 'b9' before its declaration\n    let b9 = (b6 +\
    \ b7 + b9) / 3\n                        ^\n/tmp/tmpaiszp8d6.swift:38:9: note:\
    \ 'b9' declared here\n    let b9 = (b6 + b7 + b9) / 3\n        ^\n/tmp/tmpaiszp8d6.swift:39:25:\
    \ error: use of local"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a2 = a*a\n    let b2 = b*b\n    let c2 = c*c\n    let ac = a2 + b2\n\
    \    let bc = b2 + c2\n    let ca = ac + bc\n    let area = sqrt(ca)\n    if area\
    \ > 0 {\n        return round(area, 2)\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpt6glq_6l.swift:19:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(ca)\n               ^~~~\n/tmp/tmpt6glq_6l.swift:21:16: error: cannot\
    \ find 'round' in scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr2g5d7ov.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpr2g5d7ov.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpr2g5d7ov.swift:18:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n/tmp/tmpr2g5d7ov.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmpr2g5d7ov.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n                         \
    \   !\n/tmp/tmpr2g5d7ov.swift:18:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmpr2g5d7ov.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n      "
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(2.0 * a + b + c)\n    return\
    \ area >= 0.0 ? area : -1.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2bmi2rvd.swift:13:51: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area: Double = Double(a * b * c) /\
    \ Double(2.0 * a + b + c)\n                                                  ^\n\
    \                                                  Int( )\n"
  stdout: ''
  timestamp: 1660014386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, combine: +)\n    if\
    \ sum > sides.last {\n        return -1\n    }\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first - sides.last)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp87xbef59.swift:14:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n/tmp/tmp87xbef59.swift:15:20:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    if sum > sides.last {\n                   ^\n/tmp/tmp87xbef59.swift:15:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \     ?? <#default value#>\n/tmp/tmp87xbef59.swift:15:20: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sum > sides.last\
    \ {\n                   ^\n                       !\n/tmp/tmp87xbef59.swift:18:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first - sides.last)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014401
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sum) / Double(sides.last)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz254ttqz.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpz254ttqz.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpz254ttqz.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpz254ttqz.swift:18:39: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sum) / Double(sides.last)\n\
    \                                      ^\n/tmp/tmpz254ttqz.swift:18:39: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return Double(sum) / Double(sides.last)\n                               \
    \       ^\n                                           ?? <#default value#>\n/tmp/tmpz254ttqz.swift:18:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sum) / Double(sides.last)\n                       \
    \               ^\n                                          !\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpp0_bloqb/tmpp0_bloqb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb1b996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb1b68db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb1b68d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb1b68c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0_bloqb                        0x00005601f3f572bf <unavailable> + 4799

    5    libc.so.6                          0x00002adb1bb82460 __libc_start_main +
    245

    6    tmpp0_bloqb                        0x00005601f3f56f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    let a2 = a1\
    \ + b1\n    let b2 = b1 + c1\n    let c2 = c1 + a1\n    if a2 > b2 && a2 > c2\
    \ {\n        return a * b * c / 2\n    }\n    if b2 > a2 && b2 > c2 {\n      \
    \  return b * c / 2\n    }\n    if c2 > a2 && c2 > b2 {\n        return c\n  \
    \  }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7gysno7p.swift:20:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n/tmp/tmp7gysno7p.swift:23:22:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return b * c / 2\n               ~~~~~~^~~\n               Double(  )\n\
    /tmp/tmp7gysno7p.swift:26:16: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n        return c\n               ^\n        \
    \       Double( )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return ((a + b + c) / 2) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nz9jrrn.swift:13:25: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return ((a + b + c) / 2) * 0.5\n   \
    \                     ^\n           Double(          )\n"
  stdout: ''
  timestamp: 1660014385
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = Double(sides) / Double(3.0)\n    return round(area, 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyvrjipb.swift:18:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(a\
    \ + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp725m4ddj/tmp725m4ddj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0abe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0a8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0a8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0a8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp725m4ddj                        0x000055839853725f <unavailable> + 4703

    5    libc.so.6                          0x00002aab0add4460 __libc_start_main +
    245

    6    tmp725m4ddj                        0x0000558398536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return (a * b + c * c) / (a * a + b * b + c * c)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3k1rdh7o.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (a * b + c * c) / (a * a + b * b + c * c)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014441
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = sides * (sides - a) * (sides - b) * (sides - c)\n    return Double(area\
    \ / Double(sides))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyob2u9ha.swift:18:24: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Double(area / Double(sides))\n\
    \                  ~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpyob2u9ha.swift:18:24: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    return Double(area / Double(sides))\n                      \
    \ ^\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr2g5d7ov.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpr2g5d7ov.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpr2g5d7ov.swift:18:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n/tmp/tmpr2g5d7ov.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmpr2g5d7ov.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                        ^\n                         \
    \   !\n/tmp/tmpr2g5d7ov.swift:18:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmpr2g5d7ov.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmpr2g5d7ov.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n      "
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    if area > 0 {\n        return area\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyeqj07vf.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyeqj07vf.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyeqj07vf.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyeqj07vf.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyeqj07vf.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyeqj07vf.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyeqj07vf.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyeqj07vf.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyeqj07vf.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) / Double(Double(a + b - c))\n \
    \   }\n    if a + c > b {\n        return Double(-1) / Double(Double(a + c - b))\n\
    \    }\n    if b + c > a {\n        return Double(-1) / Double(Double(b + c -\
    \ a))\n    }\n    return Double(a + b + c) / Double(Double(a + b + c) + Double(b\
    \ + c + a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpjc66voiz/tmpjc66voiz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7448ed9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7448bd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7448bd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7448bcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjc66voiz                        0x000055bce270021f <unavailable> + 4639

    5    libc.so.6                          0x00002b74490c5460 __libc_start_main +
    245

    6    tmpjc66voiz                        0x000055bce26ffeb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides == 0 {\n        return -1\n    }\n  \
    \  let area = sqrt(Double(a * b * c) / sides)\n    return round(area, 2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpacfrcpxp.swift:17:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a * b * c) / sides)\n               ^~~~\n/tmp/tmpacfrcpxp.swift:17:39:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    let area = sqrt(Double(a * b * c) / sides)\n                    ~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~\n/tmp/tmpacfrcpxp.swift:17:39: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Int, Int)\n    let area\
    \ = sqrt(Double(a * b * c) / sides)\n                                      ^\n\
    /tmp/tmpacfrcpxp.swift:18:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0wdsmcma.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp0wdsmcma.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp0wdsmcma.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp0wdsmcma.swift:18:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                        ^\n/tmp/tmp0wdsmcma.swift:18:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmp0wdsmcma.swift:18:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                        ^\n                          \
    \  !\n/tmp/tmp0wdsmcma.swift:18:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                                             ^\n/tmp/tmp0wdsmcma.swift:18:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmp0wdsmcma.swift:18:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.last)\n   \
    \                                          ^\n            "
  stdout: ''
  timestamp: 1660014393
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 && side2 == side3\
    \ {\n        return side1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpck9jq_6r.swift:17:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return side1\n               ^~~~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    let area = sides / 2.0\n    if area > sides {\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_ek2gx8q.swift:14:22: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = sides / 2.0\n       \
    \        ~~~~~ ^ ~~~\n/tmp/tmp_ek2gx8q.swift:14:22: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = sides / 2.0\n                     ^\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1\
    \ > c1 {\n        return a * b * c / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdwwc31zd.swift:17:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - 4 * a * c\n    let a2 = sqrt(a1)\n    let a3 = sqrt(a2)\n\
    \    let a4 = sqrt(a3)\n    let a5 = sqrt(a4)\n    let a6 = sqrt(a5)\n    let\
    \ a7 = sqrt(a6)\n    let a8 = sqrt(a7)\n    let a9 = sqrt(a8)\n    let a10 = sqrt(a9)\n\
    \    let a11 = sqrt(a10)\n    let a12 = sqrt(a11)\n    let a13 = sqrt(a12)\n \
    \   let a14 = sqrt(a13)\n    let a15 = sqrt(a14)\n    let a16 = sqrt(a15)\n  \
    \  let a17 = sqrt(a16)\n    let a18 = sqrt(a17)\n    let a19 = sqrt(a18)\n   \
    \ let a20 = sqrt(a19)\n    let a21 = sqrt(a20)\n    let a22 = sqrt(a21)\n    let\
    \ a23 = sqrt(a22)\n    let a24 = sqrt(a23)\n    let a25 = sqrt(a24)\n    let a26\
    \ = sqrt(a25)\n    let a27 = sqrt(a26)\n    let a28 = sqrt(a27)\n    let a29 =\
    \ sqrt(a28)\n    let a30 = sqrt(a29)\n    let a31 = sqrt(a30)\n    let a32 = sqrt(a31)\n\
    \    let a33 = sqrt(a32)\n    let a34 = sqrt(a33)\n    let a35 = sqrt(a34)\n \
    \   let a36 = sqrt(a35)\n    let a37 = sqrt(a36)\n    let a38 = sqrt(a37)\n  \
    \  let a39 = sqrt(a38)\n    let a40 = sqrt(a39)\n    let a41 = sqrt(a40)\n   \
    \ let a42 = sqrt(a41)\n    let a43 = sqrt(a42)\n    let a44 = sqrt(a43) \n   \
    \ let a45 = sqrt(a44)\n    let a46 = sqrt(a45)\n    let a47 = sqrt(a46)\n    let\
    \ a48 = sqrt(a47)\n    let a49 = sqrt(a48)\n    let a50 = sqrt(a49)\n    let a51\
    \ = sqrt(a50)\n    let a52 = sqrt(a51)\n    let a53 = sqrt(a52)\n    let a54 =\
    \ sqrt(a53)\n    let a55 = sqrt(a54)\n    let a56 = sqrt(a55)\n    let a57 = sqrt(a56)\n\
    \    let a58 = sqrt(a57)\n    let a59 = sqrt(a58)\n    let a60 = sqrt(a59)\n \
    \   let a61 = sqrt(a60)\n    let a62 = sqrt(a61)\n    let a63 = sqrt(a62)\n  \
    \  let a64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpka915o5u.swift:14:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmpka915o5u.swift:15:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmpka915o5u.swift:16:14:\
    \ error: cannot find 'sqrt' in scope\n    let a4 = sqrt(a3)\n             ^~~~\n\
    /tmp/tmpka915o5u.swift:17:14: error: cannot find 'sqrt' in scope\n    let a5 =\
    \ sqrt(a4)\n             ^~~~\n/tmp/tmpka915o5u.swift:18:14: error: cannot find\
    \ 'sqrt' in scope\n    let a6 = sqrt(a5)\n             ^~~~\n/tmp/tmpka915o5u.swift:19:14:\
    \ error: cannot find 'sqrt' in scope\n    let a7 = sqrt(a6)\n             ^~~~\n\
    /tmp/tmpka915o5u.swift:20:14: error: cannot find 'sqrt' in scope\n    let a8 =\
    \ sqrt(a7)\n             ^~~~\n/tmp/tmpka915o5u.swift:21:14: error: cannot find\
    \ 'sqrt' in scope\n    let a9 = sqrt(a8)\n             ^~~~\n/tmp/tmpka915o5u.swift:22:15:\
    \ error: cannot find 'sqrt' in scope\n    let a10 = sqrt(a9)\n              ^~~~\n\
    /tmp/tmpka915o5u.swift:23:15: error: cannot find 'sqrt' in scope\n    let a11\
    \ = sqrt(a10)\n              ^~~~\n/tmp/tmpka915o5u.swift:24:15: error: cannot\
    \ find 'sqrt' in scope\n    let a12 = sqrt(a11)\n              ^~~~\n/tmp/tmpka915o5u.swift:25:15:\
    \ error: cannot find 'sqrt' in scope\n    let a13 = sqrt(a12)\n              ^~~~\n\
    /tmp/tmpka915o5u.swift:26:15: error: cannot find 'sqrt' in scope\n    let a14\
    \ = sqrt(a13)\n              ^~~~\n/tmp/tmpka915o5u.swift:27:15: error: cannot\
    \ find 'sqrt' in scope\n    let a15 = sqrt(a14)\n              ^~~~\n/tmp/tmpka915o5u.swift:28:15:\
    \ error: cannot find 'sqrt' in scope\n    let a16 = sqrt(a15)\n              ^~~~\n\
    /tmp/tmpka915o5u.swift:29:15: error: cannot find 'sqrt' in scope\n    let a17\
    \ = sqrt(a16)\n              ^~~~\n/tmp/tmpka915o5u.swift:30:15: error: cannot\
    \ find 'sqrt' in scope\n    let a18 = sqrt(a17)\n              ^~~~\n/tmp/tmpka915o5u.swift:31:15:\
    \ error: cannot find 'sqrt' in scope\n    let a19 = sqrt(a18)\n              ^~~~\n\
    /tmp/tmpka915o5u.swift:32:15: error: cannot find 'sqrt' in scope\n    let a20\
    \ = sqrt(a19)\n              ^~~~\n/tmp/tmpka915o5u.swif"
  stdout: ''
  timestamp: 1660014381
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sum = a + b + c\n    if sum < 3 {\n        return -1\n    }\n    return\
    \ Double(sum) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpdf_ho87n/tmpdf_ho87n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca9db48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca9d83fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca9d83f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9d83e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf_ho87n                        0x00005625ac19e1cf <unavailable> + 4559

    5    libc.so.6                          0x00002aca9dd34460 __libc_start_main +
    245

    6    tmpdf_ho87n                        0x00005625ac19de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides[2]\
    \ {\n        return Double(sides[2]) / 2.0\n    }\n    return Double(sides[0]\
    \ + sides[1] + sides[2]) / 3.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpqohsy7_r/tmpqohsy7_r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6be9e42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6be9b39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6be9b39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6be9b387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohsy7_r                        0x00005602ce14339f <unavailable> + 5023

    5    libc.so.6                          0x00002b6bea02e460 __libc_start_main +
    245

    6    tmpqohsy7_r                        0x00005602ce143039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    let a2 = a1\
    \ + b1\n    let b2 = b1 + c1\n    let c2 = c1 + a1\n    let a3 = a2 + b2\n   \
    \ let b3 = b2 + c2\n    let c3 = c2 + a2\n    if a3 > b3 && a3 > c3 {\n      \
    \  return a3 * 0.5\n    } else if b3 > a3 && b3 > c3 {\n        return b3 * 0.5\n\
    \    } else {\n        return c3 * 0.5\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f5upsso.swift:23:16: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return a3 * 0.5\n              \
    \ ^\n               Double( )\n/tmp/tmp2f5upsso.swift:25:16: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n        return b3 *\
    \ 0.5\n               ^\n               Double( )\n/tmp/tmp2f5upsso.swift:27:16:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return c3 * 0.5\n               ^\n               Double( )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides <= 0 {\n        return -1\n    }\n  \
    \  let area = sides/2\n    if area > Double(sides) {\n        return -1\n    }\n\
    \    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpa31es_m2.swift:18:13: error: binary operator '>' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if area > Double(sides) {\n    \
    \   ~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpa31es_m2.swift:18:13: note: overloads for '>'\
    \ exist with these partially matching parameter lists: (Int, Int)\n    if area\
    \ > Double(sides) {\n            ^\n/tmp/tmpa31es_m2.swift:21:12: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n    return\
    \ area\n           ^~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return ((b * b) - (4 * a * c)) / (2 * a)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpk42y5aez.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return ((b * b) - (4 * a * c)) / (2 * a)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014411
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpp0_bloqb/tmpp0_bloqb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb1b996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb1b68db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb1b68d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb1b68c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0_bloqb                        0x00005601f3f572bf <unavailable> + 4799

    5    libc.so.6                          0x00002adb1bb82460 __libc_start_main +
    245

    6    tmpp0_bloqb                        0x00005601f3f56f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return ((a + b + c) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpey5ntvuv.swift:13:25: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return ((a + b + c) / 2)\n         \
    \  ~~~~~~~~~~~~~^~~~\n           Double(          )\n"
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, combine: +)\n    if\
    \ sum > sides.last {\n        return -1\n    }\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpf3evt7n_.swift:14:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n/tmp/tmpf3evt7n_.swift:15:20:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    if sum > sides.last {\n                   ^\n/tmp/tmpf3evt7n_.swift:15:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \     ?? <#default value#>\n/tmp/tmpf3evt7n_.swift:15:20: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sum > sides.last\
    \ {\n                   ^\n                       !\n/tmp/tmpf3evt7n_.swift:18:67:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n  \
    \                                                                ^\n/tmp/tmpf3evt7n_.swift:18:67:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n\
    \                                                                  ^\n       \
    \                                                                 ?? <#default\
    \ value#>\n/tmp/tmpf3evt7n_.swift:18:67: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                               \
    \                                   ^\n                                      \
    \                                 !\n/tmp/tmpf3evt7n_.swift:18:25: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n    return\
    \ Double(sides.last) * Double(sides.last) / Double(sides.first)\n            \
    \            ^\n/tmp/tmpf3evt7n_.swift:18:25: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.l"
  stdout: ''
  timestamp: 1660014397
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area = side1 * side2 * side3\n\
    \    if area > 0 {\n        return Double(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps8tst76g/tmps8tst76g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac5bea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac5bb97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac5bb97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac5bb967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8tst76g                        0x000055895c7d82bf <unavailable> + 4799

    5    libc.so.6                          0x00002aac5c08c460 __libc_start_main +
    245

    6    tmps8tst76g                        0x000055895c7d7f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpn3hishmg.swift:13:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow((b - a), 2) + pow((c - a), 2)))\n                  ^~~~\n/tmp/tmpn3hishmg.swift:13:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                       ^~~\n/tmp/tmpn3hishmg.swift:13:42:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b - a), 2) +\
    \ pow((c - a), 2)))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660014380
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = a * b * c\n    let rounded = Double(area).rounded(toPlaces: 2)\n\
    \    return rounded == area ? rounded : -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsv8at6p2.swift:14:32: error: no exact matches in call to instance\
    \ method 'rounded'\n    let rounded = Double(area).rounded(toPlaces: 2)\n    \
    \                           ^\n/tmp/tmpsv8at6p2.swift:14:32: note: candidate expects\
    \ value of type 'FloatingPointRoundingRule' for parameter #1 (got 'Int')\n   \
    \ let rounded = Double(area).rounded(toPlaces: 2)\n                          \
    \     ^\nSwift.FloatingPoint:4:17: note: candidate '() -> Double' requires 0 arguments,\
    \ but 1 was provided\n    public func rounded() -> Self\n                ^\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return Double(sum)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvupaa_89.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpvupaa_89.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpvupaa_89.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double((a+b+c) * (a+b+c+1))\n    return\
    \ area > 0 ? area : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpzfggj1ux/tmpzfggj1ux.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b484e992c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b484e689b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b484e689988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b484e6887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfggj1ux                        0x000055bcde5c71cf <unavailable> + 4559

    5    libc.so.6                          0x00002b484eb7e460 __libc_start_main +
    245

    6    tmpzfggj1ux                        0x000055bcde5c6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    guard sides.count > 3 else {\n        return -1\n\
    \    }\n    let sum = sides.reduce(0, +)\n    if sum > sides[2] {\n        return\
    \ Double(round(Double(sides[0]) / Double(sides[1])))\n    } else {\n        return\
    \ Double(round(Double(sides[2]) / Double(sides[1])))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwkse9lfo.swift:19:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(Double(sides[0]) / Double(sides[1])))\n            \
    \          ^~~~~\n/tmp/tmpwkse9lfo.swift:21:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(Double(sides[2]) / Double(sides[1])))\n \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = a + b + c\n    if sides == 0 {\n        return -1\n    }\n  \
    \  let area = (a * b * c) / sides\n    return Double(round(area))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjx6kbt35.swift:18:19: error: cannot find 'round' in scope\n   \
    \ return Double(round(area))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 || side2 == side3\
    \ {\n        return side1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpap6x53yb.swift:17:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return side1\n               ^~~~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    return ((a + b + c) / 2) * 0.5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nz9jrrn.swift:13:25: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return ((a + b + c) / 2) * 0.5\n   \
    \                     ^\n           Double(          )\n"
  stdout: ''
  timestamp: 1660014385
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a +\
    \ b + c) / 2\n    if s > 0 {\n        return s * sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprv26nm7g.swift:18:20: error: cannot find 'sqrt' in scope\n    \
    \    return s * sqrt(s * (s - a) * (s - b) * (s - c))\n                   ^~~~\n\
    /tmp/tmprv26nm7g.swift:18:16: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return s * sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014407
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let a2 = a * a\n    let c1 = b * b - c * c\n\
    \    let c2 = c * c\n    let det = a1 * c2 - a2 * c1\n    if det < 0 {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(det)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppzj4mj0q.swift:21:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(det)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let a2 = a * a\n    let a3 = a * a\n    let b1\
    \ = 2 * b * b\n    let b2 = b * b\n    let b3 = b * b\n    let c1 = 2 * c * c\n\
    \    let c2 = c * c\n    let c3 = c * c\n    let d = b1 * b2 - a1 * a2\n    if\
    \ d < 0 {\n        return -1\n    }\n    let e = b1 * c2 - a1 * c3\n    if e <\
    \ 0 {\n        return -1\n    }\n    let f = c1 * c2 - b1 * c3\n    if f < 0 {\n\
    \        return -1\n    }\n    let g = a1 * c2 - b1 * a2\n    if g < 0 {\n   \
    \     return -1\n    }\n    let h = c1 * b2 - a1 * b2\n    if h < 0 {\n      \
    \  return -1\n    }\n    let i = a2 * c2 - b2 * c3\n    if i < 0 {\n        return\
    \ -1\n    }\n    let j = a2 * b2 - b2 * a2\n    if j < 0 {\n        return -1\n\
    \    }\n    let k = a2 * c3 - b2 * c3\n    if k < 0 {\n        return -1\n   \
    \ }\n    let l = a3 * b2 - b3 * a2\n    if l < 0 {\n        return -1\n    }\n\
    \    let m = a3 * c2 - c2 * a3\n    if m < 0 {\n        return -1\n    }\n   \
    \ let n = a3 * c3 - c2 * a3\n    if n < 0 {\n        return -1\n    }\n    let\
    \ o = b1 * c3 - c1 * b3\n    if o < 0 {\n        return -1\n    }\n    let p =\
    \ a1 * c3 - c1 * a3\n    if p < 0 {\n        return -1\n    }\n    let q = a1\
    \ * b3 - b1 * a3\n    if q < 0 {\n        return -1\n    }\n    let r = a1 * b2\
    \ - b1 * a2\n    if r < 0 {\n        return -1\n    }\n    let s = b1 * c2 - c1\
    \ * b2\n    if s < 0 {\n        return -1\n    }\n    let t = a1 * c2 - c1 * a2\n\
    \    if t < 0 {\n        return -1\n    }\n    let u = a1 * b2 - b1 * a2\n   \
    \ if u < 0 {\n        return -1\n    }\n    let v = a1 * c3 - c1 * a3\n    if\
    \ v < 0 {\n        return -1\n    }\n    let w = b1 * c2 - c1 * b2\n    if w <\
    \ 0 {\n        return -1\n    }\n    let x = a1 * c2 - c1 * a2\n    if x < 0 {\n\
    \        return -1\n    }\n    let y = b1 * c3 - c1 * b3\n    if y < 0 {\n   \
    \     return -1\n    }\n    let z = a1 * c3 - c1 * a3\n    if z < 0 {\n      \
    \  return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: '/tmp/tmpwcqdgi1t.swift:114:1: error: missing return in global function
    expected to return ''Double''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014382
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    if side1 == side2 && side2 == side3\
    \ {\n        return Double(side1)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpirw4m3hg/tmpirw4m3hg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fc8c6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fc8963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fc8963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fc89627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirw4m3hg                        0x0000561d90f1d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b1fc8e58460 __libc_start_main +
    245

    6    tmpirw4m3hg                        0x0000561d90f1cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014379
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area: Double = side1 * side2\
    \ * side3\n    if area >= 0 {\n        return area\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6em6657_.swift:16:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n"
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1\
    \ > c1 {\n        return a * b * c / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdwwc31zd.swift:17:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014381
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first - sides.last)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmposet004m.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmposet004m.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmposet004m.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmposet004m.swift:18:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(sides.last) * Double(sides.last) / Double(sides.first\
    \ - sides.last)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014401
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a * b * c / 2)\n    }\n    if a + c > b {\n       \
    \ return Double(a * c * b / 2)\n    }\n    if b + c > a {\n        return Double(b\
    \ * c * a)\n    }\n    return Double(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpu823flhi/tmpu823flhi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f2999c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0f2690b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0f2690988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0f268f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu823flhi                        0x000056210680f34f <unavailable> + 4943

    5    libc.so.6                          0x00002ab0f2b85460 __libc_start_main +
    245

    6    tmpu823flhi                        0x000056210680efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014383
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b)\n    }\n    if\
    \ a + c > b {\n        return Double(-1) * Double(b / c)\n    }\n    if b + c\
    \ > a {\n        return Double(-1) * Double(c / a)\n    }\n    return Double(-1)\
    \ * Double(a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmppneepsex/tmppneepsex.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362108cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3620d83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3620d83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3620d827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppneepsex                        0x000055daabe0225f <unavailable> + 4703

    5    libc.so.6                          0x00002b3621278460 __libc_start_main +
    245

    6    tmppneepsex                        0x000055daabe01ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n    if area > 1.0 {\n        return area\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq1ktfz5i.swift:13:48: error: cannot find 'pow' in scope\n    let\
    \ area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n\
    \                                               ^~~\n/tmp/tmpq1ktfz5i.swift:13:60:\
    \ error: cannot find 'pow' in scope\n    let area: Double = abs(a * b * c) / Double(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n                                              \
    \             ^~~\n/tmp/tmpq1ktfz5i.swift:13:72: error: cannot find 'pow' in scope\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                                                      \
    \ ^~~\n/tmp/tmpq1ktfz5i.swift:13:24: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let area: Double = abs(a * b * c) /\
    \ Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                       ^\n      \
    \                 Double(       )\n"
  stdout: ''
  timestamp: 1660014389
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a1 = b * b - a * c\n    let a2 = a * a\n    let a3 = a * a\n    let b1\
    \ = 2 * b * b\n    let b2 = b * b\n    let c1 = 2 * c * c\n    let c2 = c * c\n\
    \    let c3 = c * c\n    let det = a1 * b2 - a2 * b1\n    if det < 0 {\n     \
    \   return -1\n    }\n    let area = sqrt(a1 * a2 + b1 * b2 + c1 * c2 + c2 * c3)\n\
    \    if area < 0 {\n        return -1\n    }\n    return round(area / sqrt(a1\
    \ * a2 + b1 * b2 + c1 * c2 + c2 * c3), 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpuv15xoqb.swift:25:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(a1 * a2 + b1 * b2 + c1 * c2 + c2 * c3)\n               ^~~~\n/tmp/tmpuv15xoqb.swift:29:12:\
    \ error: cannot find 'round' in scope\n    return round(area / sqrt(a1 * a2 +\
    \ b1 * b2 + c1 * c2 + c2 * c3), 2)\n           ^~~~~\n/tmp/tmpuv15xoqb.swift:29:25:\
    \ error: cannot find 'sqrt' in scope\n    return round(area / sqrt(a1 * a2 + b1\
    \ * b2 + c1 * c2 + c2 * c3), 2)\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return Double(sum)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvupaa_89.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpvupaa_89.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpvupaa_89.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660014382
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(d, 2))\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n    let area = (side1\
    \ + side2 + side3) / 2.0\n    if area > 0 {\n        return area\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmy2hedfi.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpmy2hedfi.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpmy2hedfi.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpmy2hedfi.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                ^~~~\n/tmp/tmpmy2hedfi.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                     ^~~\n/tmp/tmpmy2hedfi.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                    \
    \             ^~~\n/tmp/tmpmy2hedfi.swift:14:38: error: cannot find 'd' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                               \
    \      ^\n/tmp/tmpmy2hedfi.swift:15:17: error: cannot find 'sqrt' in scope\n \
    \   let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                ^~~~\n/tmp/tmpmy2hedfi.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                     ^~~\n/tmp/tmpmy2hedfi.swift:15:26: error: cannot find 'd'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \     ^\n/tmp/tmpmy2hedfi.swift:15:34: error: cannot find 'pow' in scope\n   \
    \ let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                                 ^~~\n\
    /tmp/tmpmy2hedfi.swift:15:38: error: cannot find 'e' in scope\n    let side3 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n                                     ^\n"
  stdout: ''
  timestamp: 1660014383
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) + abs(c)\n    let side4 = abs(a) - abs(b) - abs(c)\n\
    \    let area = Double(side1 + side2 + side3 + side4)\n    if area >= 0 {\n  \
    \      return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp5ttxuk9y/tmp5ttxuk9y.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d37b99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d37890b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d37890988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d3788f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttxuk9y                        0x000055558c46d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b6d37d85460 __libc_start_main +
    245

    6    tmp5ttxuk9y                        0x000055558c46cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a +\
    \ b + c) / 2\n    let area = s * s\n    if a > b {\n        if b > c {\n     \
    \       return area\n        } else {\n            return area / 2\n        }\n\
    \    } else {\n        if c > b {\n            return area / 2\n        } else\
    \ {\n            return area\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkv03o5yt.swift:20:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return area\n              \
    \     ^~~~\n                   Double( )\n/tmp/tmpkv03o5yt.swift:22:25: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \         return area / 2\n                   ~~~~~^~~\n                   Double(\
    \ )\n/tmp/tmpkv03o5yt.swift:26:25: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return area / 2\n          \
    \         ~~~~~^~~\n                   Double( )\n/tmp/tmpkv03o5yt.swift:28:20:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return area\n                   ^~~~\n                   Double(\
    \ )\n"
  stdout: ''
  timestamp: 1660014383
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpk54w49kw.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpk54w49kw.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpk54w49kw.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpk54w49kw.swift:18:67: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first)\n                                                    \
    \              ^\n/tmp/tmpk54w49kw.swift:18:67: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                               \
    \                                   ^\n                                      \
    \                                  ?? <#default value#>\n/tmp/tmpk54w49kw.swift:18:67:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n\
    \                                                                  ^\n       \
    \                                                                !\n/tmp/tmpk54w49kw.swift:18:25:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n  \
    \                      ^\n/tmp/tmpk54w49kw.swift:18:25: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                        ^\n    \
    \                         ?? <#default value#>\n/tmp/tmpk54w49kw.swift:18:25:\
    \ note: force-unwrap using '!' to abort execution if the optiona"
  stdout: ''
  timestamp: 1660014397
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1\
    \ + side2 + side3) / 2\n    if area > 0 {\n        return round(area, 2)\n   \
    \ } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbqcx25xa.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpbqcx25xa.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpbqcx25xa.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpbqcx25xa.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpbqcx25xa.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpbqcx25xa.swift:14:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpbqcx25xa.swift:15:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpbqcx25xa.swift:15:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpbqcx25xa.swift:15:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpbqcx25xa.swift:18:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014384
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let s = (a +\
    \ b + c) / 2\n    if s > 0 {\n        let area = s * s\n        let side1 = sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n        let side2 = sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n        let side3 = sqrt(s * (s - a) * (s - b) * (s - c))\n \
    \       if side1 + side2 > side3 {\n            return Double(area)\n        }\
    \ else {\n            return -1\n        }\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxofe2pxq.swift:19:21: error: cannot find 'sqrt' in scope\n    \
    \    let side1 = sqrt(s * (s - a) * (s - b) * (s - c))\n                    ^~~~\n\
    /tmp/tmpxofe2pxq.swift:20:21: error: cannot find 'sqrt' in scope\n        let\
    \ side2 = sqrt(s * (s - a) * (s - b) * (s - c))\n                    ^~~~\n/tmp/tmpxofe2pxq.swift:21:21:\
    \ error: cannot find 'sqrt' in scope\n        let side3 = sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014384
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area = (a + b + c) / 2\n    if area >= c {\n        return area\n   \
    \ }\n    if area >= b {\n        return area - c\n    }\n    return area - b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpirpyv2n0.swift:15:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return area\n               ^~~~\n\
    \               Double( )\n/tmp/tmpirpyv2n0.swift:18:21: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return area\
    \ - c\n               ~~~~~^~~\n               Double( )\n/tmp/tmpirpyv2n0.swift:20:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return area - b\n           ~~~~~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1660014384
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n    if sides > 0 {\n\
    \        return Double(round(sides * 100)) / 100\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1e6s05pp.swift:13:17: error: cannot find 'sqrt' in scope\n    let\
    \ sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp1e6s05pp.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                     ^~~\n/tmp/tmp1e6s05pp.swift:13:34: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                 ^~~\n/tmp/tmp1e6s05pp.swift:13:46: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                             ^~~\n/tmp/tmp1e6s05pp.swift:15:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(sides * 100))\
    \ / 100\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014384
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let sides = [a, b, c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last\
    \ {\n        return -1\n    }\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first - sides.last)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmposet004m.swift:15:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmposet004m.swift:15:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmposet004m.swift:15:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmposet004m.swift:18:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(sides.last) * Double(sides.last) / Double(sides.first\
    \ - sides.last)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014401
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let side1 = abs(a) + abs(b) + abs(c)\n    let side2 = abs(a) + abs(b) - abs(c)\n\
    \    let side3 = abs(a) - abs(b) - abs(c)\n    let area: Double = side1 * side2\
    \ * side3\n    if area >= 0 {\n        return area\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptx_werph.swift:16:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n"
  stdout: ''
  timestamp: 1660014384
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    if a + b > c {\n        return Double(-1) * Double(a / b) * Double(b / c)\n\
    \    }\n    if a + c > b {\n        return Double(-1) * Double(a / c) * Double(c\
    \ / b)\n    }\n    if b + c > a {\n        return Double(-1) * Double(b / c) *\
    \ Double(c / a)\n    }\n    return Double(-1) * Double(a / b) * Double(b / c)\
    \ * Double(c / a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpslaixpj_/tmpslaixpj_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0024f78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0024c6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0024c6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0024c6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpslaixpj_                        0x000056317382925f <unavailable> + 4703

    5    libc.so.6                          0x00002b0025164460 __libc_start_main +
    245

    6    tmpslaixpj_                        0x0000563173828ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014384
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let area: Double = Double(a * b * c) / Double(a * b + c * c)\n    if area\
    \ >= 1.0 {\n        return area\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpubq7r84p/tmpubq7r84p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace134e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace131dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace131da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace131d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubq7r84p                        0x00005611ef5f41cf <unavailable> + 4559

    5    libc.so.6                          0x00002ace136cf460 __libc_start_main +
    245

    6    tmpubq7r84p                        0x00005611ef5f3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014384
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1,\
    \ b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n\
    \    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a + b > c\
    \ {\n        return Double(a + b - c)\n    }\n    if a + c > b {\n        return\
    \ Double(a + c - b)\n    }\n    if b + c > a {\n        return Double(b + c -\
    \ a)\n    }\n    return Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprosdhndb/tmprosdhndb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88b404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88b0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88b0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88b0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprosdhndb                        0x0000557a35cc62bf <unavailable> + 4799

    5    libc.so.6                          0x00002af88b5f0460 __libc_start_main +
    245

    6    tmprosdhndb                        0x0000557a35cc5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014380
