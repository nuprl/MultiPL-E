name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string:\
  \ \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n///\
  \ >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    var result = string\n    var longestPalindrome = string\n    var\
    \ longestPalindromeLength = 0\n    for i := 0; i < len(string); i++ {\n      \
    \  var currentChar = string[i]\n        var currentPalindrome = string\n     \
    \   var currentPalindromeLength = 0\n        for j := 0; j < len(string); j++\
    \ {\n            if j == i {\n                continue\n            }\n      \
    \      var currentChar2 = string[j]\n            if currentChar2 == currentChar\
    \ {\n                currentPalindromeLength += 1\n            } else {\n    \
    \            break\n            }\n        }\n        if currentPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = currentPalindrome\n\
    \            longestPalindromeLength = currentPalindromeLength\n        }\n  \
    \  }\n    for i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n\
    \        var currentPalindrome = string\n        var currentPalindromeLength =\
    \ 0\n        for j := 0; j < len(string); j++ {\n            if j == i {\n   \
    \             continue\n            }\n            var currentChar2 = string[j]\n\
    \            if currentChar2 == currentChar {\n                currentPalindromeLength\
    \ += 1\n            } else {\n                break\n            }\n        }\n\
    \        if currentPalindromeLength == longestPalindromeLength {\n           \
    \ currentPalindrome = currentPalindrome + string[longestPalindromeLength]\n  \
    \      }\n        result = currentPalindrome + result\n    }\n    return result",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = string.length\n\
    \    var longestPalindromeSuffix = \"\"\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixStart = 0\n    var longestPalindromeSuffixEnd\
    \ = string.length\n    var longestPalindromeSuffixIndex = longestPalindromeSuffixStart\n\
    \    for index in 0..<longestPalindromeEnd {\n        let character = string[index]\n\
    \        if character == longestPalindrome[longestPalindromeSuffixIndex] {\n \
    \           longestPalindromeSuffixIndex += 1\n            if longestPalindromeSuffixIndex\
    \ == longestPalindromeSuffixLength {\n                longestPalindromeSuffixIndex\
    \ = 0\n                longestPalindromeSuffixLength += 1\n            }\n   \
    \     } else {\n            longestPalindromeSuffixIndex = 0\n            longestPalindromeSuffixLength\
    \ = 1\n        }\n        if longestPalindromeSuffixIndex == longestPalindromeSuffixLength\
    \ {\n            longestPalindromeSuffixIndex = 0\n            longestPalindromeSuffixLength\
    \ += 1\n        }\n        if longestPalindromeSuffixLength > longestPalindromeLength\
    \ {\n            longestPalindromeLength = longestPalindromeSuffixLength\n   \
    \         longestPalindromeStart = longestPalindromeSuffixStart\n            longestPalindromeEnd\
    \ = longestPalindromeSuffixEnd\n            longestPalindromeSuffix = string[longestPalindromeSuffixStart..<longestPalindromeSuffixEnd]\n\
    \        }\n        if longestPalindromeLength == longestPalindromeEnd {\n   \
    \         longestPalindromeLength += 1\n            longestPalindromeEnd = longestPalindromeEnd\
    \ + 1\n        }\n        if longestPalindromeLength > longestPalindromeStart\
    \ {\n            result = result + string[longestPalindromeStart..<longestPalindromeEnd]\n\
    \            longestPalindromeStart = longestPalindromeStart + 1\n           \
    \ longestPalindromeEnd = longestPalindromeEnd + 1\n        }\n    }\n    if longestPalindromeLength\
    \ == longestPalindromeEnd {\n        result = result + string[longestPalindromeStart..<longestPalindromeEnd]\n\
    \    }\n    return result", "    var result = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentCharLength = string.distance(from: String.Index(encodedOffset:\
    \ index), to: String.Index(encodedOffset: index + 1))\n        if currentCharLength\
    \ > longestPalindromeLength {\n            longestPalindrome = string\n      \
    \      longestPalindromeLength = currentCharLength\n            longestPalindromeIndex\
    \ = index\n        }\n    }\n    if longestPalindromeLength > 0 {\n        let\
    \ longestPalindromeSuffix = string[longestPalindromeIndex..<string.count]\n  \
    \      let reversedLongestPalindromeSuffix = longestPalindromeSuffix.reversed()\n\
    \        result = result + reversedLongestPalindromeSuffix\n    }\n    return\
    \ result", "    if string == \"\" {\n        return \"\"\n    }\n    var reversed\
    \ = \"\"\n    var longest = 0\n    for i := 0; i < len(string); i++ {\n      \
    \  if string[i] != string[longest] {\n            longest = i\n        }\n   \
    \ }\n    for i := 0; i < len(string); i++ {\n        if string[i] != string[longest]\
    \ {\n            reversed = reversed + string[i]\n        }\n    }\n    return\
    \ reversed + string[longest]", "    if string == \"\" {\n        return \"\"\n\
    \    }\n    var longestPalindrome = string\n    var longestPalindromeLen = 0\n\
    \    var longestPalindromeReverse = \"\"\n    var longestPalindromeReverseLen\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        longestPalindromeLen +=\
    \ 1\n        if longestPalindromeLen > longestPalindromeReverseLen {\n       \
    \     longestPalindromeReverseLen = longestPalindromeLen\n            longestPalindromeReverse\
    \ = string[longestPalindromeReverseLen - longestPalindromeLen + i : longestPalindromeLen\
    \ - longestPalindromeLen + i]\n        }\n        if string[i] == string[len(string)\
    \ - 1 - i] {\n            longestPalindromeLen -= 1\n            if longestPalindromeLen\
    \ > longestPalindromeReverseLen {\n                longestPalindromeReverseLen\
    \ = longestPalindromeLen\n                longestPalindromeReverse = string[longestPalindromeReverseLen\
    \ - longestPalindromeLen + i : longestPalindromeLen - longestPalindromeLen + i]\n\
    \            }\n        }\n    }\n    return longestPalindromeReverse + string[longestPalindromeReverseLen\
    \ : longestPalindromeLen + longestPalindromeReverseLen]", "    var reverse = \"\
    \"\n    var longest = \"\"\n    for character in string {\n        reverse = reverse.characters.reversed()\n\
    \        if character == reverse.first {\n            longest = character + reverse.suffix\n\
    \        }\n    }\n    return longest", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStart\
    \ = 0\n    var longestPalindromeEnd = 0\n    var longestPalindromeStartIndex =\
    \ 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndex2\
    \ = 0\n    var longestPalindromeEndIndex2 = 0\n    var longestPalindromeStartIndex3\
    \ = 0\n    var longestPalindromeEndIndex3 = 0\n    var longestPalindromeStartIndex4\
    \ = 0\n    var longestPalindromeEndIndex4 = 0\n    var longestPalindromeStartIndex5\
    \ = 0\n    var longestPalindromeEndIndex5 = 0\n    var longestPalindromeStartIndex6\
    \ = 0\n    var longestPalindromeEndIndex6 = 0\n    var longestPalindromeStartIndex7\
    \ = 0\n    var longestPalindromeEndIndex7 = 0\n    var longestPalindromeStartIndex8\
    \ = 0\n    var longestPalindromeEndIndex8 = 0\n    var longestPalindromeStartIndex9\
    \ = 0\n    var longestPalindromeEndIndex9 = 0\n    var longestPalindromeStartIndex10\
    \ = 0\n    var longestPalindromeEndIndex10 = 0\n    var longestPalindromeStartIndex11\
    \ = 0\n    var longestPalindromeEndIndex11 = 0\n    var longestPalindromeStartIndex12\
    \ = 0\n    var longestPalindromeEndIndex12 = 0\n    var longestPalindromeStartIndex13\
    \ = 0\n    var longestPalindromeEndIndex13 = 0\n    var longestPalindromeStartIndex14\
    \ = 0\n    var longestPalindromeEndIndex14 = 0\n    var longestPalindromeStartIndex15\
    \ = 0\n    var longestPalindromeEndIndex15 = 0\n    var longestPalindromeStartIndex16\
    \ = 0\n    var longestPalindromeEndIndex16 = 0\n    var longestPalindromeStartIndex17\
    \ = 0\n    var longestPalindromeEndIndex17 = 0\n    var longestPalindromeStartIndex18\
    \ = 0\n    var longestPalindromeEndIndex18 = 0\n    var longestPalindromeStartIndex19\
    \ = 0\n    var longestPalindromeEndIndex19 = 0\n    var longestPalindromeStartIndex20\
    \ = 0\n    var longestPalindromeEndIndex20 = 0\n    var longestPalindromeStartIndex21\
    \ = 0\n    var longestPalindromeEndIndex21 = 0\n    var longestPalindromeStartIndex22\
    \ = 0\n    var longest", "    if string == \"\" {\n        return \"\"\n    }\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome {\n                longestPalindrome = string\n        \
    \        longestPalindromeLength = longestPalindromeLength\n            }\n  \
    \      } else {\n            longestPalindromeLength = 0\n        }\n    }\n \
    \   return longestPalindrome", "    var palindrome = string\n    var reversedString\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.characters.count\n    var longestPalindromeIndex = string.characters.count\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromePrefixIndex = string.characters.count\n    var longestPalindromeSuffixIndex\
    \ = string.characters.count\n\n    for index in 0..<string.characters.count {\n\
    \        let character = string.characters[index]\n        if character == character\
    \ {\n            palindrome.append(character)\n        }\n    }\n\n    for index\
    \ in 0..<string.characters.count {\n        let character = string.characters[index]\n\
    \        if character == character {\n            reversedString.append(character)\n\
    \        }\n    }\n\n    if longestPalindromeLength < string.characters.count\
    \ {\n        longestPalindrome = string\n        longestPalindromeLength = string.characters.count\n\
    \    }\n\n    if longestPalindromeIndex < string.characters.count {\n        longestPalindromePrefix\
    \ = string\n        longestPalindromeIndex = string.characters.count\n    }\n\n\
    \    if longestPalindromePrefixIndex < string.characters.count {\n        longestPalindromeSuffix\
    \ = string\n        longestPalindromePrefixIndex = string.characters.count\n \
    \   }\n\n    if longestPalindromeSuffixIndex < string.characters.count {\n   \
    \     longestPalindromeSuffix = string\n        longestPalindromeSuffixIndex =\
    \ string.characters.count\n    }\n\n    if longestPalindromeLength > longestPalindromeIndex\
    \ {\n        longestPalindrome = string\n        longestPalindromeLength = string.characters.count\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromePrefixIndex {\n  \
    \      longestPalindromePrefix = string\n        longestPalindromeIndex = string.characters.count\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromeSuffixIndex {\n  \
    \      longestPalindromeSuffix = string\n        longestPalindromeSuffixIndex\
    \ = string.characters.count\n    }\n\n    if longestPalindromeLength < longestPalindromePrefixIndex\
    \ {\n        longestPalindrome = string\n        longestPalindromeLength = string.characters.count\n\
    \    }\n\n    if longestPalindromeLength < longestPalindromeSuffixIndex {\n  \
    \      longestPalindromePrefix = string\n        longestPalindromeIndex = string.characters.count\n\
    \    }\n\n    if longestPalindromeLength < ", "    var result = string\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLen = 0\n    var longestPalindromeSuffix\
    \ = 0\n    var longestPalindromeSuffixLen = 0\n    for _ in 0..<string.count {\n\
    \        let longestPalindromeSuffix = string.suffix(longestPalindromeLen)\n \
    \       let longestPalindromeSuffixLen = longestPalindromeSuffix.count\n     \
    \   let longestPalindrome = string.prefix(longestPalindromeLen)\n        let longestPalindromeLen\
    \ = longestPalindrome.count\n        if longestPalindromeLen > longestPalindromeSuffixLen\
    \ {\n            longestPalindromeLen = longestPalindromeSuffixLen\n        }\n\
    \        if longestPalindromeLen > longestPalindromeSuffixLen {\n            longestPalindrome\
    \ = longestPalindromeSuffix\n        }\n        if longestPalindromeLen > longestPalindromeSuffixLen\
    \ {\n            longestPalindrome = longestPalindromeSuffix\n        }\n    \
    \    if longestPalindromeLen > longestPalindromeSuffixLen {\n            longestPalindrome\
    \ = longestPalindromeSuffix\n        }\n        if longestPalindromeLen > longestPalindromeSuffixLen\
    \ {\n            longestPalindrome = longestPalindromeSuffix\n        }\n    \
    \    if longestPalindromeLen > longestPalindromeSuffixLen {\n            longestPalindrome\
    \ = longestPalindromeSuffix\n        }\n        if longestPalindromeLen > longestPalindromeSuffixLen\
    \ {\n            longestPalindrome = longestPalindromeSuffix\n        }\n    \
    \    if longestPalindromeLen > longestPalindromeSuffixLen {\n            longestPalindrome\
    \ = longestPalindromeSuffix\n        }\n        if longestPalindromeLen > longestPalindromeSuffixLen\
    \ {\n            longestPalindrome = longestPalindromeSuffix\n        }\n    \
    \    if longestPalindromeLen > longestPalindromeSuffixLen {\n            longestPalindrome\
    \ = longestPalindromeSuffix\n        }\n        if longestPalindromeLen > longestPalindromeSuffixLen\
    \ {\n            longestPalindrome = longestPalindromeSuffix\n        }\n    \
    \    if longestPalindromeLen > longestPalindromeSuffixLen {\n            longestPalindrome\
    \ = longestPalin", "    var result = string\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n    for length in string.characters.reverse()\
    \ {\n        if length > longestPalindromeLength {\n            longestPalindromeLength\
    \ = length\n            longestPalindrome = string[string.startIndex.advancedBy(longestPalindromeLength)]\n\
    \        }\n    }\n    for length in string.characters.reverse() {\n        if\
    \ length > longestPalindromeLength {\n            longestPalindrome = string[string.startIndex.advancedBy(longestPalindromeLength)]\n\
    \            longestPalindromeLength = length\n        }\n    }\n    return result\
    \ + longestPalindrome", "    var result = \"\"\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for _ in 0..<string.count {\n      \
    \  let reversed = string.reversed()\n        if reversed == longestPalindrome\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > 0 {\n                result += string[longestPalindromeLength..<string.count]\n\
    \            }\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = 1\n        }\n    }\n    if longestPalindromeLength > 0 {\n        result\
    \ += string[longestPalindromeLength..<string.count]\n    }\n    return result",
  "\tlet reversed = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - reversed.characters.count\n\treturn reversed + String(string.characters.prefix(prefixLength))",
  "    var result = \"\"\n    var longest = 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == string[longest] {\n            longest++\n      \
    \  } else {\n            if longest > 0 {\n                result = string[longest-1...longest]\
    \ + result\n            }\n            longest = 0\n        }\n    }\n    if longest\
    \ > 0 {\n        result = string[longest-1...longest] + result\n    }\n    return\
    \ result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindromePrefix = string[longestPalindromeLength..<longestPalindromeLength]\n\
    \            longestPalindromeSuffix = string[longestPalindromeLength..<longestPalindromeLength].reversed()\n\
    \            longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix\n\
    \        }\n    }\n    return longestPalindrome", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string: string)\n\treturn prefix + reverse", "\t\
    let reversed = string.reversed()\n\tlet prefix = reversed.prefix(string: string)\n\
    \treturn prefix + string", "    if string == \"\" {\n        return \"\"\n   \
    \ }\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n \
    \   for i := 0; i < len(string); i++ {\n        var currentPalindrome = string\n\
    \        var currentPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[j] != string[i] {\n                break\n    \
    \        }\n            currentPalindromeLength += 1\n        }\n        if currentPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = string\n      \
    \      longestPalindromeLength = currentPalindromeLength\n        }\n    }\n \
    \   return longestPalindrome + string([]rune(longestPalindrome)...)", "    if\
    \ string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePostfix\
    \ = \"\"\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixSuffix = \"\"\n    var longestPalindromePostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n  \
    \  var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength =\
    \ 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\"\
    \n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix = \"\
    \"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    for character in string {\n\
    \        if character == character {\n            result += character\n      \
    \  } else {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = result\n  \
    \              longestPalindromePrefix = string\n            }\n            result\
    \ = \"\"\n        }\n    }\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindrome = result\n        longestPalindromePrefix = string\n\
    \    }\n    if longestPalindromeLength == 1 {\n        return longestPalindrome\n\
    \    }\n    if longestPalindromeLength > 1 {\n        longestPalindrome = longestPalindromePrefix\
    \ + string\n    }\n    return longestPalindrome", "\tlet reversed = string.reversed()\n\
    \tlet prefixLength = (string.characters.count - reversed.characters.count) / 2\n\
    \tlet prefix = string.substringToIndex(advance(string.startIndex, prefixLength))\n\
    \tlet suffix = string.substringFromIndex(advance(string.startIndex, prefixLength))\n\
    \treturn prefix + reversed + suffix", "    var result = \"\"\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindromePrefixLength = longestPalindromeLength\n   \
    \     }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            result += character\n            longestPalindromeLength += 1\n\
    \        } else {\n            result += character\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindromePrefixLength = longestPalindromeLength\n   \
    \     }\n    }\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            result += character\n            longestPalindromeLength += 1\n\
    \        } else {\n            result += character\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindromePrefixLength = longestPalindromeLength\n   \
    \     }\n    }\n    return result", "    if string == \"\" {\n        return \"\
    \"\n    }\n    var reversed = \"\"\n    var longestPalindrome = \"\"\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-i-1]\
    \ {\n            longestPalindrome = string[i..<i+1]\n            reversed = string[i..<i+1]\n\
    \            break\n        }\n    }\n    return reversed + longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for start in 0..<string.count {\n        let end = string.index(start,\
    \ offsetBy: longestPalindromeLength, limitedBy: string.endIndex) ?? string.endIndex\n\
    \        let prefix = string[start..<end]\n        let reversedPrefix = prefix.reversed()\n\
    \        if longestPalindromeLength < prefix.count {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = prefix.count\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        if longestPalindromePrefixLength < prefix.count {\n\
    \            longestPalindrome = string\n            longestPalindromeLength =\
    \ prefix.count\n            longestPalindromePrefixLength = prefix.count\n   \
    \     }\n        if longestPalindromeLength == prefix.count {\n            if\
    \ longestPalindromePrefixLength == reversedPrefix.count {\n                let\
    \ palindrome = string[start..<end]\n                if palindrome == reversedPrefix\
    \ {\n                    return palindrome\n                }\n            }\n\
    \        }\n    }\n    return \"\"", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for char in string {\n        if char == char.lowercased() {\n \
    \           longestPalindrome += char\n        }\n    }\n    for char in string\
    \ {\n        if char == char.lowercased() {\n            result += char\n    \
    \    }\n    }\n    if longestPalindrome == \"\" {\n        return result\n   \
    \ }\n    longestPalindrome = longestPalindrome.lowercased()\n    result += longestPalindrome\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    return result", "    if string == \"\"\
    \ {\n        return \"\"\n    }\n    \n    var longestPalindrome = string\n  \
    \  var longestPalindromeLength = 0\n    var longestPalindromeIndex = -1\n    \n\
    \    for index in 0..<string.characters.count {\n        let currentChar = string.characters[index]\n\
    \        \n        if currentChar == currentChar.reversed() {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindromeIndex {\n  \
    \              longestPalindromeIndex = longestPalindromeLength\n            \
    \    longestPalindrome = string\n            }\n        } else {\n           \
    \ longestPalindromeLength = 0\n        }\n    }\n    \n    return longestPalindrome",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefixLength = 0\n    for c in string {\n        if longestPalindromeLength\
    \ < longestPalindromePrefixLength {\n            longestPalindromeLength++\n \
    \           longestPalindromePrefixLength = 0\n        }\n        if longestPalindromeLength\
    \ == longestPalindromePrefixLength {\n            longestPalindromePrefixLength++\n\
    \        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindrome = longestPalindrome[longestPalindromeLength..<longestPalindromePrefixLength]\n\
    \            longestPalindromeLength = 0\n            longestPalindromePrefixLength\
    \ = 0\n        }\n        longestPalindrome = longestPalindrome + String(c)\n\
    \    }\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \        } else {\n            if longestPalindromeLength > 0 {\n            \
    \    result += longestPalindrome\n                longestPalindrome = \"\"\n \
    \               longestPalindromeLength = 0\n            }\n            result\
    \ += character\n        }\n    }\n    if longestPalindromeLength > 0 {\n     \
    \   result += longestPalindrome\n    }\n    return result", "    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    for index in 0..<string.count\
    \ {\n        let currentChar = string[index]\n        let currentCharLength =\
    \ currentChar.count\n        if currentCharLength > longestPalindromeLength {\n\
    \            longestPalindrome = string\n            longestPalindromeLength =\
    \ currentCharLength\n            longestPalindromeIndex = index\n            longestPalindromePrefixIndex\
    \ = index\n        }\n        if currentCharLength == longestPalindromeLength\
    \ {\n            if currentChar == string.reverseSubstring(from: longestPalindromePrefixIndex,\
    \ to: longestPalindromeIndex) {\n                longestPalindromePrefixIndex\
    \ = longestPalindromeIndex\n            }\n        }\n    }\n    return longestPalindrome",
  "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for char in string {\n        if char == char.lowercased().reversed()\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \          }\n        } else {\n            longestPalindromeLength = 0\n    \
    \    }\n    }\n    return longestPalindrome", "    var longestPalindrome = \"\"\
    \n    var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    var longestPalindromePostfix = \"\
    \"\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixSuffix = \"\"\n    var longestPalindromePostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n  \
    \  var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength =\
    \ 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\"\
    \n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix = \"\
    \"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPost", "    var result = \"\"\n    var\
    \ longestPalindrome = string\n    var longestPalindromeLength = 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1] {\n\
    \            longestPalindromeLength++\n        } else {\n            if longestPalindromeLength\
    \ > 0 {\n                result += string[longestPalindromeLength-longestPalindromeLength+i:]\n\
    \            }\n            longestPalindromeLength = 1\n            result +=\
    \ string[i]\n        }\n    }\n    if longestPalindromeLength > 0 {\n        result\
    \ += string[longestPalindromeLength-longestPalindromeLength+i:]\n    }\n    return\
    \ result", "    var result = \"\"\n    var longest = 0\n    for c in string {\n\
    \        if c != string[longest] {\n            longest = longest\n        } else\
    \ {\n            longest = longest + 1\n        }\n    }\n    for i := longest\
    \ - 1; i >= 0; i-- {\n        result = result + string[i]\n    }\n    return result",
  "    if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n\n    for index in 0..<string.characters.count {\n        let char = string.characters[index]\n\
    \        if char == char.lowercased().reversed().first {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = index\n            longestPalindromeIndex\
    \ = index\n            longestPalindromePrefixIndex = index\n            longestPalindromeSuffixIndex\
    \ = index\n            break\n        }\n    }\n\n    if longestPalindromeLength\
    \ == 0 {\n        return string\n    }\n\n    var longestPalindromePrefix = string\n\
    \    longestPalindromePrefix.characters[longestPalindromePrefixIndex] = char.lowercased().reversed().first\n\
    \    longestPalindromePrefix.characters[longestPalindromePrefixIndex + 1] = char.lowercased().reversed().last\n\
    \n    var longestPalindromeSuffix = string\n    longestPalindromeSuffix.characters[longestPalindromeSuffixIndex]\
    \ = char.lowercased().reversed().last\n    longestPalindromeSuffix.characters[longestPalindromeSuffixIndex\
    \ + 1] = char.lowercased().reversed().first\n\n    return longestPalindromePrefix\
    \ + string[longestPalindromePrefixIndex..<longestPalindromeSuffixIndex] + longestPalindromeSuffix",
  "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(where: string.startIndex)\n\
    \tlet suffix = string.suffix(where: string.endIndex)\n\treturn prefix + reverse\
    \ + suffix", "    var result = \"\"\n    var longestPalindrome = \"\"\n    var\
    \ longestPalindromeLength = 0\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        }\n        if character\
    \ == character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = result\n \
    \           }\n            result = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.length {\n        longestPalindrome = result\n    }\n  \
    \  return longestPalindrome", "\tlet reverse = string.reverse()\n\tlet prefix\
    \ = reverse.prefix(string: string)\n\treturn prefix + reverse", "\tlet reverse\
    \ = string.reverse()\n\tlet prefix = string.prefix(string.reverse())\n\treturn\
    \ prefix + reverse", "    if string == \"\" {\n        return \"\"\n    }\n  \
    \  var reversedString = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          reversedString += character\n        } else {\n            if longestPalindromeLength\
    \ == 0 {\n                longestPalindrome = reversedString\n               \
    \ longestPalindromeLength = reversedString.count\n            } else {\n     \
    \           reversedString = reversedString[reversedString.startIndex..<reversedString.endIndex]\n\
    \                longestPalindrome = longestPalindrome[longestPalindrome.startIndex..<longestPalindrome.endIndex]\n\
    \                longestPalindromeLength += 1\n            }\n        }\n    }\n\
    \    return longestPalindrome + reversedString", "    var result = string\n  \
    \  var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength = 0\n\
    \    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = \"\"\n    var longestPalindromePrefixChar\
    \ = \"\"\n\n    while longestPalindromeLength < string.length {\n        longestPalindromeSuffixIndex\
    \ = longestPalindromeLength\n        longestPalindromePrefixIndex = longestPalindromeLength\n\
    \        longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \        longestPalindromePrefixChar = string[longestPalindromePrefixIndex]\n\
    \        if longestPalindromeSuffixChar == longestPalindromePrefixChar {\n   \
    \         longestPalindromeSuffixIndex--\n            longestPalindromePrefixIndex--\n\
    \        }\n        if longestPalindromeSuffixIndex < 0 {\n            longestPalindromeSuffixIndex\
    \ = 0\n        }\n        if longestPalindromePrefixIndex < 0 {\n            longestPalindromePrefixIndex\
    \ = 0\n        }\n        if longestPalindromeSuffixIndex == longestPalindromePrefixIndex\
    \ {\n            longestPalindromeSuffixLength++\n            longestPalindromePrefixLength++\n\
    \            if longestPalindromeSuffixLength > longestPalindromePrefixLength\
    \ {\n                longestPalindrome = string[longestPalindromePrefixIndex..<longestPalindromeSuffixIndex]\n\
    \                longestPalindromeLength = longestPalindromeSuffixLength\n   \
    \             longestPalindromePrefixLength = longestPalindromeSuffixLength\n\
    \                longestPalindromePrefixIndex = longestPalindromeLength\n    \
    \            longestPalindromeSuffixIndex = longestPalindromeLength\n        \
    \        longestPalindromeSuffixChar = string[longestPalindromeSuffixIndex]\n\
    \                longestPalindromePrefixChar = string[longestPalindromePrefixIndex]\n\
    \            }\n        }\n    }\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        result = string[longestPalindromePrefixIndex..<longestPalindromeSuffixIndex]\n\
    \    }\n    return result", "    var palindrome = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = string.length\n\n    for _ in 0..<longestPalindromeLength\
    \ {\n        let index = string.index(longestPalindrome)\n        let reverse\
    \ = string.reversed()\n        let suffixIndex = reverse.index(longestPalindrome)\n\
    \        let suffix = reverse[suffixIndex..<longestPalindromeLength]\n       \
    \ palindrome = string.replacingOccurrences(of: longestPalindrome, with: suffix)\n\
    \        longestPalindrome = palindrome\n        longestPalindromeLength = longestPalindrome.length\n\
    \    }\n\n    return palindrome", "    if string == \"\" {\n        return \"\"\
    \n    }\n    var reversedString = string\n    var longestPalindromicPostfix =\
    \ 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentPostfix = string.index(string.startIndex, offsetBy: longestPalindromicPostfix)\n\
    \        let currentPostfixString = string[currentPostfix]\n        if currentPostfixString\
    \ == currentChar {\n            longestPalindromicPostfix += 1\n        } else\
    \ {\n            break\n        }\n    }\n    reversedString += string[longestPalindromicPostfix..<string.count].reversed()\n\
    \    return reversedString", "    var reverse = \"\"\n    var longest = \"\"\n\
    \    for c in string {\n        if c != string[string.index(string.startIndex,\
    \ offsetBy: 1)] {\n            reverse = reverse + string[string.index(string.startIndex,\
    \ offsetBy: 1)]\n        }\n        reverse = reverse + c\n        if reverse\
    \ == string {\n            longest = longest.prefix(string)\n        }\n    }\n\
    \    return longest", "    var reverse = \"\"\n    var longest = \"\"\n    for\
    \ c in string {\n        reverse = reverse.stringByAppendingString(String(string[c]))\n\
    \        if longest.stringByAppendingString(String(string[c])) == reverse {\n\
    \            longest = longest.stringByAppendingString(String(string[c]))\n  \
    \      }\n    }\n    return longest", "    var result = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for index in 0..<string.count\
    \ {\n        let currentChar = string[index]\n        let reversedChar = string.reversed()[index]\n\
    \        if currentChar == reversedChar {\n            if longestPalindromeLength\
    \ < index {\n                longestPalindrome = string\n                longestPalindromeLength\
    \ = index\n            }\n        } else {\n            if longestPalindromeLength\
    \ > index {\n                longestPalindrome = string\n                longestPalindromeLength\
    \ = index\n            }\n        }\n    }\n    if longestPalindromeLength ==\
    \ string.count {\n        return result\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result = string\n        for index in 0..<longestPalindromeLength\
    \ {\n            let currentChar = string[index]\n            let reversedChar\
    \ = string.reversed()[index]\n            if currentChar == reversedChar {\n \
    \               result += string[index..<string.count]\n            } else {\n\
    \                result += string[index..<string.count].reversed()\n         \
    \   }\n        }\n    }\n    return result", "    if string == \"\" {\n      \
    \  return \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReversed: String = \"\"\n    var longestPalindromeSuffixReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedLength = 0\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversed: String = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversed: String = \"\"\n    var longestPalindromePrefixReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversed: String\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffix", "    var result = \"\"\n  \
    \  var longestPalindrome = \"\"\n    for char in string {\n        if char ==\
    \ char.lowercased() {\n            result += char\n        }\n    }\n    for char\
    \ in string {\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {\n            result += char\n\
    \        }\n        if char == char.lowercased() {", "    var result = \"\"\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ character in string {\n        if character == character {\n            result\
    \ += character\n        } else {\n            if longestPalindromeLength < len(longestPalindrome)\
    \ {\n                longestPalindrome = result\n                longestPalindromeLength\
    \ = len(longestPalindrome)\n            }\n            result = \"\"\n       \
    \ }\n    }\n    if longestPalindromeLength < len(longestPalindrome) {\n      \
    \  longestPalindrome = result\n        longestPalindromeLength = len(longestPalindrome)\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           result += character\n        } else {\n            if longestPalindromeLength\
    \ < len(longestPalindrome) {\n                longestPalindrome = result\n   \
    \             longestPalindromeLength = len(longestPalindrome)\n            }\n\
    \            result = \"\"\n        }\n    }\n    if longestPalindromeLength <\
    \ len(longestPalindrome) {\n        longestPalindrome = result\n        longestPalindromeLength\
    \ = len(longestPalindrome)\n    }\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        } else {\n        \
    \    if longestPalindromeLength < len(longestPalindrome) {\n                longestPalindrome\
    \ = result\n                longestPalindromeLength = len(longestPalindrome)\n\
    \            }\n            result = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ < len(longestPalindrome) {\n        longestPalindrome = result\n        longestPalindromeLength\
    \ = len(longestPalindrome)\n    }\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        } else {\n        \
    \    if longestPalindromeLength < len(longestPalindrome) {\n                longestPalindrome\
    \ = result\n                longestPalindromeLength = len(longestPalindrome)\n\
    \            }\n            result = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ < len(longestPalindrome) {\n        longestPalindrome = result\n        longestPalindromeLength\
    \ = len(longestPalindrome)\n    }\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        } else {\n        \
    \    if longestPalindromeLength < len(longestPalindrome) {\n                longestPalindrome\
    \ = result\n                longestPalindromeLength = len(longestPalindro", " \
    \   var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    for _ in 0..<string.count {\n        let currentChar = string[string.startIndex]\n\
    \        let currentCharLength = string.distance(from: string.startIndex, to:\
    \ string.endIndex)\n        let currentCharPrefix = string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: longestPalindromeLength)]\n        let currentCharSuffixReversed =\
    \ string[string.index(string.endIndex, offsetBy: longestPalindromeLength)..<string.endIndex]\n\
    \        let currentCharSuffix = string[string.index(string.endIndex, offsetBy:\
    \ longestPalindromeLength)..<string.endIndex]\n        let currentCharSuffixReversedLength\
    \ = currentCharSuffixReversed.distance(from: string.startIndex, to: string.endIndex)\n\
    \        if currentCharLength > longestPalindromeLength {\n            longestPalindrome\
    \ = currentChar\n            longestPalindromeLength = currentCharLength\n   \
    \         longestPalindromePrefixLength = currentCharPrefix\n            longestPalindromeSuffixLength\
    \ = currentCharSuffixReversedLength\n        }\n        if currentCharLength ==\
    \ longestPalindromeLength && currentCharPrefix == longestPalindromePrefixLength\
    \ && currentCharSuffixReversed == longestPalindromeSuffixLength {\n          \
    \  result = currentChar + currentCharSuffixReversed\n        }\n    }\n    return\
    \ result", "    if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n\n    for char in string {\n\
    \        if char == char.lowercased() {\n            longestPalindromeLength +=\
    \ 1\n            longestPalindromePrefix = char\n        } else {\n          \
    \  longestPalindromeSuffix += char\n        }\n    }\n\n    for char in string\
    \ {\n        if char == char.lowercased() {\n            longestPalindromeLength\
    \ += 1\n            longestPalindromeSuffix += char\n        } else {\n      \
    \      if longestPalindromeLength > longestPalindromeLength {\n              \
    \  longestPalindrome = longestPalindromePrefix\n                longestPalindromeLength\
    \ = longestPalindromeLength\n                longestPalindromePrefix = char\n\
    \                longestPalindromeSuffix = char\n            } else {\n      \
    \          longestPalindromeSuffix += char\n            }\n        }\n    }\n\n\
    \    return longestPalindrome", "    var reversedString = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for index in 0..<string.characters.count\
    \ {\n        let character = string.characters[index]\n        let reversedCharacter\
    \ = reversedString.characters[index]\n        if character == reversedCharacter\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.characters.count {\n                longestPalindrome =\
    \ string\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    return longestPalindrome", "    var reversed = \"\
    \"\n    var longest = 0\n    for c in string {\n        if c != string[longest]\
    \ {\n            longest = longest\n        } else {\n            longest = longest\
    \ + 1\n        }\n    }\n    for c in string {\n        if c != string[longest]\
    \ {\n            reversed = reversed + string[longest]\n            longest =\
    \ longest - 1\n        } else {\n            reversed = reversed + string[longest]\n\
    \            longest = longest - 1\n        }\n    }\n    return reversed", " \
    \   var longestPalindrome = string\n    var longestPalindromeLength = longestPalindrome.characters.count\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromeReverse = \"\"\n\n    for character in string.characters\
    \ {\n        if character == longestPalindrome[longestPalindromeLength-1] {\n\
    \            longestPalindromeLength -= 1\n        } else {\n            longestPalindromeLength\
    \ += 1\n        }\n        if longestPalindromeLength == 0 {\n            longestPalindromePrefix\
    \ = character\n            longestPalindromeSuffix = character\n            longestPalindromeReverse\
    \ = character\n        }\n    }\n\n    if longestPalindromeLength > 0 {\n    \
    \    longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeReverse\n\
    \    }\n\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        if character == character {\n\
    \            longestPalindrome += character\n        }\n    }\n    for character\
    \ in string {\n        if character == character {\n            result += longestPalindrome\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var longest\
    \ = 0\n    for c in string.unicodeScalars {\n        if !isPalindrome(c) {\n \
    \           continue\n        }\n        if c.value > longest {\n            longest\
    \ = c.value\n        }\n    }\n    for c in string.unicodeScalars {\n        if\
    \ !isPalindrome(c) {\n            continue\n        }\n        if c.value < longest\
    \ {\n            continue\n        }\n        if c.value == longest {\n      \
    \      result += string(c.value)\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \               longestPalindromeLength = longestPalindrome.length\n         \
    \   }\n        } else {\n            longestPalindromeLength = 0\n        }\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           result += string[longestPalindromeLength - longestPalindrome.length\
    \ + longestPalindromeLength]\n        } else {\n            result += character\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStart\
    \ = 0\n    var longestPalindromeEnd = string.length\n\n    for index in 0..<string.count\
    \ {\n        let currentChar = string[index]\n        let currentCharLength =\
    \ currentChar.utf16.count\n\n        if currentCharLength > longestPalindromeLength\
    \ {\n            longestPalindromeLength = currentCharLength\n            longestPalindromeStart\
    \ = index\n            longestPalindromeEnd = index\n        }\n\n        if currentCharLength\
    \ == longestPalindromeLength {\n            longestPalindromeEnd = index\n   \
    \     }\n    }\n\n    for index in 0..<string.count {\n        let currentChar\
    \ = string[index]\n        let currentCharLength = currentChar.utf16.count\n\n\
    \        if currentCharLength > longestPalindromeLength {\n            longestPalindromeLength\
    \ = currentCharLength\n            longestPalindromeStart = index\n          \
    \  longestPalindromeEnd = index\n        }\n\n        if currentCharLength ==\
    \ longestPalindromeLength {\n            longestPalindromeEnd = index\n      \
    \  }\n    }\n\n    for index in 0..<string.count {\n        let currentChar =\
    \ string[index]\n        let currentCharLength = currentChar.utf16.count\n\n \
    \       if currentCharLength > longestPalindromeLength {\n            longestPalindromeLength\
    \ = currentCharLength\n            longestPalindromeStart = index\n          \
    \  longestPalindromeEnd = index\n        }\n\n        if currentCharLength ==\
    \ longestPalindromeLength {\n            longestPalindromeEnd = index\n      \
    \  }\n    }\n\n    for index in 0..<string.count {\n        let currentChar =\
    \ string[index]\n        let currentCharLength = currentChar.utf16.count\n\n \
    \       if currentCharLength > longestPalindromeLength {\n            longestPalindromeLength\
    \ = currentCharLength\n            longestPalindromeStart = index\n          \
    \  longestPalindromeEnd = index\n        }\n\n        if currentCharLength ==\
    \ longestPalindromeLength {\n            longestPalindromeEnd = index\n      \
    \  }\n    }\n\n    for index in 0..<string.count {\n        let currentChar =\
    \ string[index]\n        let currentCharLength = currentChar.utf16.count\n\n \
    \       if currentCharLength > longestPalindromeLength {\n            longestPalindromeLength\
    \ = currentCharLength\n            longestPalindromeStart = index\n          \
    \  longestPalindromeEnd = index\n        }\n\n        if currentCharLength ==\
    \ longestPalindromeLength {\n", "\tlet reversed = string.reversed()\n\tlet prefix\
    \ = reversed.prefix(string: string)\n\tlet suffix = reversed.suffix(string: string)\n\
    \treturn prefix + suffix", "    let reverse = string.reversed()\n    let prefix\
    \ = string.prefix(string.reversed())\n    return prefix + reverse", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = -1\n    var longestPalindromePrefix =\
    \ \"\"\n    for index in 0..<string.count {\n        let char = string[index]\n\
    \        if char == char.reversed() {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = index\n            longestPalindromeIndex\
    \ = index\n            longestPalindromePrefix = string\n        }\n    }\n  \
    \  if longestPalindromeLength == 0 {\n        return string\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeIndex {\n        longestPalindrome = string\n        longestPalindromeLength\
    \ = longestPalindromeIndex\n        longestPalindromeIndex = longestPalindromeLength\n\
    \        longestPalindromePrefix = string\n    }\n    if longestPalindromeLength\
    \ < string.count {\n        let chars = Array(string[longestPalindromeIndex..<string.count])\n\
    \        let reversedChars = Array(chars.reversed())\n        result = String(chars\
    \ + reversedChars)\n    }\n    return result", "    var longestPalindrome = \"\
    \"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n\n    for character in string {\n  \
    \      if character == character {\n            longestPalindromeLength += 1\n\
    \        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = longestPalindromePrefix\n           \
    \     longestPalindromeLength = longestPalindromeLength\n                longestPalindromePrefix\
    \ = \"\"\n                longestPalindromeSuffix = \"\"\n            }\n    \
    \        longestPalindromeLength = 1\n            longestPalindromePrefix = longestPalindromePrefix\
    \ + character\n        }\n    }\n\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindrome = longestPalindromePrefix\n        longestPalindromeLength\
    \ = longestPalindromeLength\n        longestPalindromePrefix = \"\"\n        longestPalindromeSuffix\
    \ = \"\"\n    }\n\n    for character in string {\n        if character == character\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > longestPalindromeLength {\n                longestPalindrome\
    \ = longestPalindromePrefix + character\n                longestPalindromeLength\
    \ = longestPalindromeLength\n                longestPalindromePrefix = \"\"\n\
    \                longestPalindromeSuffix = \"\"\n            }\n            longestPalindromeLength\
    \ = 1\n            longestPalindromePrefix = longestPalindromePrefix + character\n\
    \        }\n    }\n\n    return longestPalindrome", "\tlet reversed = string.reversed()\n\
    \tlet prefixLength = string.characters.count\n\tlet suffixLength = reversed.characters.count\n\
    \tlet longestPalindrome = reversed\n\tlet prefixString = string\n\tlet suffixString\
    \ = reversed\n\t\n\tif prefixLength > suffixLength {\n\t\tprefixString = string.reversed()\n\
    \t\tsuffixString = string\n\t}\n\t\n\tlet prefixReversed = prefixString.reversed()\n\
    \tlet suffixReversed = suffixString.reversed()\n\t\n\tlet longestPalindromeLength\
    \ = longestPalindrome.characters.count\n\t\n\tif prefixLength > suffixLength {\n\
    \t\tprefixReversed = prefixString.reversed()\n\t\tsuffixReversed = suffixString.reversed()\n\
    \t}\n\t\n\tlet prefixReversedLength = prefixReversed.characters.count\n\tlet suffixReversedLength\
    \ = suffixReversed.characters.count\n\t\n\tif prefixLength > suffixLength {\n\t\
    \tprefixReversed = prefixString.reversed()\n\t\tsuffixReversed = suffixString.reversed()\n\
    \t}\n\t\n\tlet prefixPalindrome = prefixReversed\n\tlet suffixPalindrome = suffixReversed\n\
    \t\n\tif prefixLength > suffixLength {\n\t\tprefixPalindrome = prefixReversed.reversed()\n\
    \t\tsuffixPalindrome = suffixReversed.reversed()\n\t}\n\t\n\tlet prefixPalindromeLength\
    \ = prefixPalindrome.characters.count\n\tlet suffixPalindromeLength = suffixPalindrome.characters.count\n\
    \t\n\tif prefixLength > suffixLength {\n\t\tprefixPalindrome = prefixReversed.reversed()\n\
    \t\tsuffixPalindrome = suffixReversed.reversed()\n\t}\n\t\n\tlet prefixPalindromeReversed\
    \ = prefixPalindrome.reversed()\n\tlet suffixPalindromeReversed = suffixPalindrome.reversed()\n\
    \t\n\tif prefixLength > suffixLength {\n\t\tprefixPalindromeReversed = prefixPalindrome.reversed()\n\
    \t\tsuffixPalindromeReversed = suffixPalindrome.reversed()\n\t}\n\t\n\tlet prefixPalindromeReversedLength\
    \ = prefixPalindromeReversed.characters.count\n\tlet suffixPalindromeReversedLength\
    \ = suffixPalindromeReversed.characters.count\n\t\n\tif prefixLength > suffixLength\
    \ {\n\t\tprefixPalindromeReversed = prefixPalindrome.reversed()\n\t\tsuffixPalindromeReversed\
    \ = suffixPalindrome.reversed()\n\t}\n\t\n\tlet prefixPalindromePalin", "    var\
    \ reversedString = \"\"\n    var longestPalindrome = \"\"\n    for letter in string\
    \ {\n        reversedString += String(letter)\n    }\n    for letter in reversedString\
    \ {\n        if letter == letter {\n            longestPalindrome += String(letter)\n\
    \        }\n    }\n    return longestPalindrome", "    var longestPalindrome =\
    \ string\n    var longestPalindromeLength = 0\n    for _ in 0..<string.count {\n\
    \        let currentPalindrome = string\n        let currentPalindromeLength =\
    \ string.count\n        let currentLongestPalindrome = longestPalindrome\n   \
    \     let currentLongestPalindromeLength = longestPalindromeLength\n        let\
    \ currentLongestPalindromeIndex = longestPalindrome.startIndex\n        let currentLongestPalindromeLength\
    \ = longestPalindromeLength\n        let currentLongestPalindromeIndex = longestPalindrome.startIndex\n\
    \        let currentLongestPalindromeLength = longestPalindromeLength\n      \
    \  let currentLongestPalindromeIndex = longestPalindrome.startIndex\n        let\
    \ currentLongestPalindromeLength = longestPalindromeLength\n        let currentLongestPalindromeIndex\
    \ = longestPalindrome.startIndex\n        let currentLongestPalindromeLength =\
    \ longestPalindromeLength\n        let currentLongestPalindromeIndex = longestPalindrome.startIndex\n\
    \        let currentLongestPalindromeLength = longestPalindromeLength\n      \
    \  let currentLongestPalindromeIndex = longestPalindrome.startIndex\n        let\
    \ currentLongestPalindromeLength = longestPalindromeLength\n        let currentLongestPalindromeIndex\
    \ = longestPalindrome.startIndex\n        let currentLongestPalindromeLength =\
    \ longestPalindromeLength\n        let currentLongestPalindromeIndex = longestPalindrome.startIndex\n\
    \        let currentLongestPalindromeLength = longestPalindromeLength\n      \
    \  let currentLongestPalindromeIndex = longestPalindrome.startIndex\n        let\
    \ currentLongestPalindromeLength = longestPalindromeLength\n        let currentLongestPalindromeIndex\
    \ = longestPalindrome.startIndex\n        let currentLongestPalindromeLength =\
    \ longestPalindromeLength\n        let currentLongestPalindromeIndex = longestPalindrome.startIndex\n\
    \        let currentLongestPalindromeLength = longestPalindromeLength\n      \
    \  let currentLongestPalindromeIndex = longestPalindrome.startIndex\n        let\
    \ currentLongestPalindromeLength = longestPalindromeLength\n        let currentLongestPalindromeIndex\
    \ = longestPalindrome.startIndex\n        let currentLongestPalindromeLength =\
    \ longestPalindromeLength\n        let currentLongestPalin", "    var result =\
    \ string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseLength = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseLength = 0\n   \
    \ var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestP", "\tlet reversed = string.reversed()\n\tlet prefix =\
    \ reversed.prefix(string: string)\n\treturn prefix + reversed", "    var result\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindromeSuffixEndIndex\
    \ = string.length\n    var longestPalindromeSuffixStartIndex = string.length\n\
    \    var longestPalindromeSuffixEndIndex = string.length\n    var longestPalindromeSuffixStartIndex\
    \ = string.length\n    var longestPalindromeSuffixEndIndex = string.length\n \
    \   var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindromeSuffixEndIndex\
    \ = string.length\n    var longestPalindromeSuffixStartIndex = string.length\n\
    \    var longestPalindromeSuffixEndIndex = string.length\n    var longestPalindromeSuffixStartIndex\
    \ = string.length\n    var longestPalindromeSuffixEndIndex = string.length\n \
    \   var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindromeSuffixEndIndex\
    \ = string.length\n    var longestPalindromeSuffixStartIndex = string.length\n\
    \    var longestPalindromeSuffixEndIndex = string.length\n    var longestPalindromeSuffixStartIndex\
    \ = string.length\n    var longestPalindromeSuffixEndIndex = string.length\n \
    \   var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindromeSuffixEndIndex\
    \ = string.length\n    var longestPalindromeSuffixStartIndex = string.length\n\
    \    var longestPalindromeSuffixEndIndex = string.length\n    var longestPalindromeSuffixStartIndex\
    \ = string.length\n    var longestPalindromeSuffixEndIndex = string.length\n \
    \   var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindromeSuffixEndIndex\
    \ = string.length\n    var longestPalindromeSuffixStartIndex = string.length\n\
    \    var longestPalindromeSuffixEndIndex = string.length\n    var longestPalindromeSuffixStartIndex\
    \ = string.length\n    var longestPalindromeSuffixEndIndex = string.length\n \
    \   var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindromeSuffixEndIndex\
    \ = string.length\n    var longestPalindromeSuffixStartIndex = string.length\n\
    \    var longestPalindromeSuffixEndIndex = string.length\n    var longestPalindromeSuffixStartIndex\
    \ = string.length\n    var longestPalindromeSuffixEndIndex = string.length\n \
    \   var longestPalindromeSuffixStartIndex = string.length\n    var longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for start in 0..<string.count\
    \ {\n        var reversedString = string.reversed()\n        var reversedStringLength\
    \ = reversedString.count\n        var palindrome = string[start..<start+longestPalindromeLength]\n\
    \        var palindromeLength = palindrome.count\n        if palindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = palindrome\n  \
    \          longestPalindromeLength = palindromeLength\n        }\n        if palindromeLength\
    \ == longestPalindromeLength {\n            if palindrome != longestPalindrome\
    \ {\n                longestPalindrome = palindrome\n                longestPalindromeLength\
    \ = palindromeLength\n            }\n        }\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    \n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    \n    for index in 0..<string.characters.count {\n        let character\
    \ = string.characters[index]\n        \n        if character == character {\n\
    \            continue\n        }\n        \n        let reversedCharacter = reverseString(character)\n\
    \        \n        if reversedCharacter == character {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = index\n            longestPalindromeIndex\
    \ = index\n            break\n        }\n        \n        if longestPalindromeLength\
    \ > index {\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = index\n            longestPalindromeIndex = index\n        }\n    }\n    \n\
    \    return longestPalindrome", "    if string == \"\" {\n        return \"\"\n\
    \    }\n\n    var reverse = \"\"\n    var longestPalindrome = \"\"\n\n    for\
    \ c in string {\n        if longestPalindrome == \"\" {\n            longestPalindrome\
    \ = c\n        }\n\n        if longestPalindrome == c {\n            longestPalindrome\
    \ += c\n        } else {\n            longestPalindrome += c + reverse\n     \
    \   }\n\n        reverse = reverse[..<longestPalindrome.count]\n    }\n\n    return\
    \ longestPalindrome", "    var result = \"\"\n    var longestPalindrome = \"\"\
    \n    var longestPalindromeLength = 0\n    for character in string {\n       \
    \ if character == character {\n            longestPalindromeLength += 1\n    \
    \        if longestPalindromeLength > longestPalindrome.count {\n            \
    \    longestPalindrome = String(character)\n            }\n        } else {\n\
    \            if longestPalindromeLength > longestPalindrome.count {\n        \
    \        longestPalindrome = String(character)\n            }\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    if longestPalindromeLength > longestPalindrome.count\
    \ {\n        longestPalindrome = String(character)\n    }\n    for character in\
    \ string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.count {\n \
    \               longestPalindrome = String(character)\n            }\n       \
    \ } else {\n            if longestPalindromeLength > longestPalindrome.count {\n\
    \                longestPalindrome = String(character)\n            }\n      \
    \      longestPalindromeLength = 0\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.count {\n        longestPalindrome = String(character)\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = String(character)\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindrome.count\
    \ {\n                longestPalindrome = String(character)\n            }\n  \
    \          longestPalindromeLength = 0\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.count {\n        longestPalindrome = String(character)\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = String(character)\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindrome.count\
    \ {\n                longestPalindrome = String(character)\n            }\n  \
    \          longestPalindromeLength = 0\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.count {\n        longestPalindrome = String(character)\n\
    \    }", "\tlet reverse = string.reversed()\n\tlet prefix = string.prefix(string.reversed())\n\
    \treturn prefix + reverse", "\tlet reversed = string.reversed()\n\tlet prefix\
    \ = reversed.prefix(string: string)\n\treturn prefix + reversed", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += ", "    var result = \"\"\n    var longestPalindrome = \"\"\n   \
    \ for letter in string {\n        if letter == letter {\n            result +=\
    \ letter\n        } else {\n            longestPalindrome += letter\n        }\n\
    \    }\n    for letter in string {\n        if letter == letter {\n          \
    \  result += letter\n        } else {\n            result += longestPalindrome\n\
    \        }\n    }\n    return result", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var reversedString = string\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    for index in 0..<string.characters.count\
    \ {\n        let currentChar = string.characters[index]\n        let currentCharIsPalindrome\
    \ = currentChar == reversedString.characters[index]\n        if currentCharIsPalindrome\
    \ {\n            if longestPalindromeLength < index {\n                longestPalindrome\
    \ = string\n                longestPalindromeLength = index\n            }\n \
    \       } else {\n            if longestPalindromeLength > index {\n         \
    \       reversedString = string\n                longestPalindrome = string\n\
    \                longestPalindromeLength = index\n            }\n        }\n \
    \   }\n    return longestPalindrome", "    var palindrome = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = string\n    var longestPalindromeSuffix = string\n    var longestPalindromePostfix\
    \ = string\n    var longestPalindromePostfixLength = string.length\n    var longestPalindromePostfixPrefix\
    \ = string\n    var longestPalindromePostfixSuffix = string\n    var longestPalindromePostfixPostfix\
    \ = string\n    var longestPalindromePostfixPostfixLength = string.length\n  \
    \  var longestPalindromePostfixPostfixPrefix = string\n    var longestPalindromePostfixPostfixSuffix\
    \ = string\n    var longestPalindromePostfixPostfixPostfix = string\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = string.length\n    var longestPalindromePostfixPostfixPostfixPrefix = string\n\
    \    var longestPalindromePostfixPostfixPostfixSuffix = string\n    var longestPalindromePostfixPostfixPostfixPostfix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixLength = string.length\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPrefix = string\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixSuffix = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = string.length\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = string.length\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = string\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = string.length\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reverse = \"\"\n \
    \   var longestPalindrome = \"\"\n    for i := 0; i < len(string); i++ {\n   \
    \     if string[i] != string[len(string)-i-1] {\n            longestPalindrome\
    \ = longestPalindrome + string[i]\n        } else {\n            reverse = reverse\
    \ + string[len(string)-i-1]\n        }\n    }\n    return longestPalindrome +\
    \ reverse", "\tlet maxLen = string.characters.count\n\tlet maxIndex = string.characters.reversed().index(of:\
    \ string.characters.first!)\n\tlet maxPalindrome = string.substring(to: maxIndex).reversed()\n\
    \treturn string + maxPalindrome", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPost", "\tlet reversedString = reverseString(string)\n\
    \tlet prefixString = string.prefix(string.reversed())\n\treturn prefixString +\
    \ reversedString", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for character in string\
    \ {\n        let reversedCharacter = reverseString(character)\n        if longestPalindromeLength\
    \ < longestPalindromePrefixLength {\n            longestPalindrome = character\n\
    \            longestPalindromeLength = longestPalindromePrefixLength\n       \
    \ }\n        if longestPalindromeLength == longestPalindromePrefixLength && character\
    \ == reversedCharacter {\n            longestPalindrome = longestPalindrome +\
    \ reversedCharacter\n            longestPalindromeLength = longestPalindromePrefixLength\
    \ + 1\n        }\n        if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n            longestPalindromePrefixLength = longestPalindromeLength\n   \
    \     }\n    }\n    return longestPalindrome", "\tlet reverse = string.reversed()\n\
    \tlet longestPalindrome = string.prefix(longestPalindrome(string: reverse))\n\t\
    return longestPalindrome + reverse", "    let maxLen = string.characters.count\n\
    \    let maxLenPalindrome = maxLen / 2\n    let maxLenPalindromePadded = maxLenPalindrome\
    \ + maxLen % 2\n    let maxLenPalindromePaddedString = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPadded = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPaddedString = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPaddedStringPadded = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPaddedStringPaddedString = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPaddedStringPaddedStringPadded = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedString = String(maxLenPalindromePadded)\n\
    \    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPadded\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPaddedString\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPadded\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedString\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPadded\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedString\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindromePaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPaddedStringPadded\
    \ = String(maxLenPalindromePadded)\n    let maxLenPalindrome", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    for letter in string {\n        if letter == letter {\n            result\
    \ += letter\n        }\n        if letter == string[string.index(letter, offsetBy:\
    \ 1)] {\n            longestPalindrome = letter\n            longestPalindromeLength\
    \ += 1\n        }\n    }\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindromeLength = 0\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return string\n    }\n    if longestPalindromeLength == 1 {\n\
    \        return string + string[string.index(longestPalindrome, offsetBy: 1)]\n\
    \    }\n    if longestPalindromeLength > 1 {\n        result += string[string.index(longestPalindrome,\
    \ offsetBy: 1)]\n        for _ in 1...longestPalindromeLength {\n            result\
    \ += string[string.index(longestPalindrome, offsetBy: 1)]\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    var longest = 0\n    for c in\
    \ string {\n        if c == string[longest] {\n            longest++\n       \
    \ } else {\n            longest = 0\n        }\n        if longest > 0 {\n   \
    \         result += string[longest-1...longest]\n        }\n        result +=\
    \ string[longest-1...longest]\n    }\n    return result", "    var result = \"\
    \"\n    var longestPalindrome = \"\"\n    for character in string {\n        if\
    \ character == character {\n            longestPalindrome += character\n     \
    \   } else {\n            if longestPalindrome != \"\" {\n                result\
    \ += longestPalindrome\n                longestPalindrome = \"\"\n           \
    \ }\n            result += character\n        }\n    }\n    if longestPalindrome\
    \ != \"\" {\n        result += longestPalindrome\n    }\n    return result", " \
    \   if string == \"\" {\n        return \"\"\n    }\n    var reverse = \"\"\n\
    \    var longestPalindrome = \"\"\n    for i := 0; i < len(string); i++ {\n  \
    \      var prefix = string[:i]\n        var suffix = string[i:]\n        if isPalindrome(suffix,\
    \ prefix) {\n            longestPalindrome = prefix + suffix\n            reverse\
    \ = reverse + longestPalindrome\n        }\n    }\n    return reverse", "    var\
    \ reversedString = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n\n    for character in string {\n        reversedString += String(character).reversed()\n\
    \        if longestPalindromeLength < reversedString.count {\n            longestPalindrome\
    \ = reversedString\n            longestPalindromeLength = reversedString.count\n\
    \        }\n    }\n\n    return longestPalindrome", "    var result = \"\"\n \
    \   var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ character in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > 0 {\n     \
    \           result += string[longestPalindromeLength..<longestPalindromeLength+longestPalindromeLength]\n\
    \                longestPalindromeLength = 0\n            }\n            result\
    \ += character\n        }\n    }\n    if longestPalindromeLength > 0 {\n     \
    \   result += string[longestPalindromeLength..<longestPalindromeLength+longestPalindromeLength]\n\
    \    }\n    return result", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n    var longestPalindrome = string\n    var longestPalindromeLength = 0\n\
    \    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        if currentChar == currentChar.reversed() {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.count {\n \
    \               longestPalindrome = string\n            }\n        } else {\n\
    \            longestPalindromeLength = 0\n        }\n    }\n    return longestPalindrome",
  "    let maxPalindromeLength = string.characters.reversed().prefix(string.characters.count).reduce(0)\
    \ {\n        (maxLength, char) -> Int in\n        let maxLength = maxLength >\
    \ char.characters.count ? maxLength : char.characters.count\n        return maxLength\n\
    \    }\n    let maxPalindrome = string.characters.reversed().prefix(maxPalindromeLength).reduce(\"\
    \") {\n        (result, char) -> String in\n        return result + String(char.reversed())\n\
    \    }\n    return maxPalindrome + string[maxPalindromeLength..<string.characters.count]",
  "    var reversed = \"\"\n    var longestPalindrome = \"\"\n    for character in\
    \ string {\n        if character == character {\n            reversed = reversed.appending(character)\n\
    \        } else {\n            longestPalindrome = longestPalindrome.appending(character)\n\
    \        }\n    }\n    if longestPalindrome == \"\" {\n        return string\n\
    \    }\n    if longestPalindrome.characters.count < string.characters.count {\n\
    \        return string\n    }\n    if longestPalindrome.characters.count == string.characters.count\
    \ {\n        return longestPalindrome\n    }\n    if longestPalindrome.characters.count\
    \ > string.characters.count {\n        return string\n    }\n    return reversed",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeReverse\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        longestPalindromeLength\
    \ = 0\n        longestPalindromePrefix = \"\"\n        longestPalindromeSuffix\
    \ = \"\"\n        longestPalindromePrefixLength = 0\n        longestPalindromeSuffixLength\
    \ = 0\n        longestPalindromeSuffixReverse = \"\"\n        longestPalindromePrefixReverse\
    \ = \"\"\n        longestPalindromeReverse = \"\"\n        for j := 0; j < len(string);\
    \ j++ {\n            if i == j {\n                continue\n            }\n  \
    \          if string[i] == string[j] {\n                longestPalindromeLength\
    \ += 1\n                longestPalindromePrefix += string[i]\n               \
    \ longestPalindromePrefixLength += 1\n                longestPalindromeSuffix\
    \ += string[j]\n                longestPalindromeSuffixLength += 1\n         \
    \       longestPalindromeSuffixReverse += string[j][::-1]\n                longestPalindromePrefixReverse\
    \ += string[i][::-1]\n            } else {\n                if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                    longestPalindrome = longestPalindromePrefix\n\
    \                    longestPalindromeLength = longestPalindromePrefixLength\n\
    \                    longestPalindromePrefix = longestPalindromePrefixReverse\n\
    \                    longestPalindromePrefixLength = longestPalindromeSuffixLength\n\
    \                    longestPalindromeSuffixReverse = longestPalindromeSuffix\n\
    \                    longestPalindromeSuffix = longestPalindromeSuffixReverse\n\
    \                }\n                if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                    longestPalindrome = longestPalindromeSuffix\n       \
    \             longestPalindromeLength = longestPalindromeSuffixLength\n      \
    \              longestPalindromeSuffix = longestPalindromeSuffixReverse\n    \
    \                longestPalindromeSuffixLength = longestPalindromePrefixLength\n\
    \                    longestPalindromePrefixReverse = longestPalindromePrefix\n\
    \                    longestPalindromePrefix = longest", "\tlet reverse = string.reversed()\n\
    \tlet prefix = reverse.prefix(string: string)\n\treturn prefix + reverse", " \
    \   if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength++\n            if longestPalindromeLength\
    \ > longestPalindromeLength {\n                longestPalindrome = longestPalindromePrefix\n\
    \                longestPalindromeLength = longestPalindromeLength\n         \
    \   }\n        } else {\n            longestPalindromeLength = 0\n           \
    \ longestPalindromePrefix = string[0:i]\n        }\n    }\n    return longestPalindrome\
    \ + string[len(longestPalindromePrefix):]", "    var reverseString = \"\"\n  \
    \  var longestPalindrome = \"\"\n    for character in string {\n        reverseString\
    \ = reverseString + String(character)\n        if longestPalindrome == \"\" {\n\
    \            longestPalindrome = reverseString\n        } else {\n           \
    \ if longestPalindrome == reverseString {\n                longestPalindrome =\
    \ longestPalindrome + String(character)\n            } else {\n              \
    \  longestPalindrome = longestPalindrome + String(character) + reverseString\n\
    \            }\n        }\n    }\n    return longestPalindrome", "    var reversedString\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixIndex = longestPalindromeLength\n    var\
    \ longestPalindromeSuffixIndex = longestPalindromeLength\n    var longestPalindromePrefixChar\
    \ = longestPalindromePrefixLength\n    var longestPalindromeSuffixChar = longestPalindromeSuffixLength\n\
    \n    for char in reversedString {\n        if char == longestPalindromePrefixChar\
    \ {\n            longestPalindromePrefixLength += 1\n            longestPalindromePrefixIndex\
    \ = longestPalindromeLength\n        } else {\n            longestPalindromeSuffixLength\
    \ += 1\n            longestPalindromeSuffixIndex = longestPalindromeLength\n \
    \       }\n    }\n\n    if longestPalindromePrefixLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindromePrefixChar = longestPalindromeSuffixChar\n     \
    \   longestPalindromeSuffixChar = longestPalindromePrefixChar\n    } else {\n\
    \        longestPalindromePrefixChar = longestPalindromePrefixLength\n       \
    \ longestPalindromeSuffixChar = longestPalindromeSuffixLength\n    }\n\n    for\
    \ char in reversedString {\n        if char == longestPalindromePrefixChar {\n\
    \            longestPalindromeLength += 1\n            longestPalindromePrefixIndex\
    \ = longestPalindromeLength\n        } else {\n            longestPalindromeLength\
    \ += 1\n            longestPalindromeSuffixIndex = longestPalindromeLength\n \
    \       }\n    }\n\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = reversedString[longestPalindromePrefixIndex...longestPalindromeSuffixIndex]\n\
    \    } else {\n        longestPalindrome = reversedString[longestPalindromeSuffixIndex...longestPalindromePrefixIndex]\n\
    \    }\n\n    return longestPalindrome", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var reversed = string\n    var longestPalindrome = \"\"\n \
    \   var longestPalindromeLength = 0\n    for _ in 0..<string.count {\n       \
    \ let start = reversed.index(of: string.first!)\n        let end = reversed.index(of:\
    \ string.last!)\n        let substring = reversed[start..<end]\n        if substring\
    \ == string {\n            longestPalindrome = substring\n            longestPalindromeLength\
    \ = end - start\n        }\n        reversed = reversed[..<reversed.index(of:\
    \ substring, offsetBy: -1)]\n    }\n    return longestPalindrome + reversed",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        longestPalindromeLength\
    \ = 0\n        longestPalindromePrefix = \"\"\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[i] == string[j] {\n                longestPalindromeLength\
    \ += 1\n                longestPalindromePrefix += string[i]\n            }\n\
    \        }\n        if longestPalindromeLength > longestPalindromeLength {\n \
    \           longestPalindrome = longestPalindromePrefix\n            longestPalindromeLength\
    \ = longestPalindromeLength\n        }\n    }\n    return longestPalindrome",
  "    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    for character\
    \ in string {\n        if character == character {\n            palindrome +=\
    \ character\n        }\n        if character == palindrome[longestPalindrome.count-1]\
    \ {\n            longestPalindrome += character\n        }\n    }\n    return\
    \ longestPalindrome + palindrome", "    var result = \"\"\n    var longest = 0\n\
    \    for c in string {\n        if c != string[longest] {\n            longest\
    \ = longest\n        } else {\n            longest = longest + 1\n        }\n\
    \    }\n    for c in string {\n        if c == string[longest] {\n           \
    \ result = result + string[longest]\n            longest = longest + 1\n     \
    \   } else {\n            result = result + string[longest]\n        }\n    }\n\
    \    return result", "\tlet reverse = string.reversed()\n\tlet prefix = reverse.prefix(string:\
    \ string)\n\tlet suffix = reverse.suffix(string: string)\n\treturn prefix + suffix",
  "    var result = \"\"\n    var longest = 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == string[longest] {\n            longest++\n      \
    \  } else {\n            longest = 0\n        }\n        if longest > 0 {\n  \
    \          result += string[longest]\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[longest] {\n            result += string[i]\n\
    \        }\n    }\n    return result", "    var longestPalindrome = \"\"\n   \
    \ var longestPalindromeLength = 0\n    var longestPalindromePrefixLength = 0\n\
    \    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeString\
    \ = \"\"\n    var longestPalindromeStringLength = 0\n    var longestPalindromeStringIndex\
    \ = 0\n    var longestPalindromeStringString = \"\"\n    var longestPalindromeStringStringLength\
    \ = 0\n    var longestPalindromeStringStringIndex = 0\n    var longestPalindromeStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringLength = 0\n    var longestPalindromeStringStringStringIndex\
    \ = 0\n    var longestPalindromeStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringIndex = 0\n    var longestPalindromeStringStringStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringStringLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringIndex = 0\n    var longestPalindromeStringStringStringStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringStringIndex = 0\n\
    \    var longestPalindromeStringStringStringStringStringString = \"\"\n    var\
    \ longestPalindromeStringStringStringStringStringStringStringLength = 0\n    var\
    \ longestPalindromeStringStringStringStringStringStringStringIndex = 0\n    var\
    \ longestPalindromeStringStringStringStringStringStringStringString = \"\"\n \
    \   var longestPalindromeStringStringStringStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringStringStringStringIndex\
    \ = 0\n    var longestPalindromeStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringStringStringStringStringIndex\
    \ = 0\n    var longestPalindromeStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringStringStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringStringStringStringStringStringIndex\
    \ = 0\n    var longestPalindromeStringStringStringStringStringString", "    if\
    \ string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome =\
    \ \"\"\n    var longestPalindromeLength = 0\n\n    for i := 0; i < len(string);\
    \ i++ {\n        longestPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[i] == string[j] {\n                longestPalindromeLength\
    \ += 1\n            } else {\n                break\n            }\n        }\n\
    \n        if longestPalindromeLength > longestPalindromeLength {\n           \
    \ longestPalindrome = string[i..<longestPalindromeLength]\n        }\n    }\n\n\
    \    return longestPalindrome + string[longestPalindromeLength..<len(string)].reversed()",
  "    var reversed = string\n    var longestPalindrome = string\n    for _ in 0..<string.characters.count\
    \ {\n        let longestPalindrome = longestPalindrome.replacingOccurrences(of:\
    \ longestPalindrome.characters.last!, with: \"\")\n        reversed = reversed.replacingOccurrences(of:\
    \ reversed.characters.first!, with: \"\")\n        if longestPalindrome == reversed\
    \ {\n            return longestPalindrome\n        }\n    }\n    return \"\"",
  "    var result = \"\"\n    var longestPalindrome = string\n    for _ in 0..<string.count\
    \ {\n        let index = longestPalindrome.index(longestPalindrome.startIndex,\
    \ offsetBy: 1)\n        let reversedString = longestPalindrome.replacingCharacters(in:\
    \ longestPalindrome.startIndex..<index, with: longestPalindrome[index...])\n \
    \       if reversedString == longestPalindrome {\n            result += reversedString\n\
    \        } else {\n            result += reversedString + longestPalindrome[index...]\n\
    \        }\n        longestPalindrome = longestPalindrome[index...]\n    }\n \
    \   return result", "    let reversed = string.reversed()\n    let prefix = reversed.prefix(string:\
    \ string)\n    let suffix = reversed.suffix(string: string)\n    return prefix\
    \ + suffix", "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = string.length\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixReverseReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength =\
    \ 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n \
    \   var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindro",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          result += character\n        } else {\n            if longestPalindromeLength\
    \ < len(result) - 1 {\n                longestPalindrome = result\n          \
    \      longestPalindromeLength = len(result)\n            }\n            result\
    \ = character\n        }\n    }\n    if longestPalindromeLength < len(result)\
    \ - 1 {\n        longestPalindrome = result\n        longestPalindromeLength =\
    \ len(result)\n    }\n    if longestPalindromeLength > 0 {\n        result +=\
    \ string(longestPalindrome[longestPalindromeLength ..< 0])\n    }\n    return\
    \ result", "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > longestPalindromeLength {\n                longestPalindrome\
    \ = longestPalindromePrefix\n                longestPalindromeLength = longestPalindromeLength\n\
    \                longestPalindromePrefix = string\n            }\n           \
    \ longestPalindromeLength = 1\n            longestPalindromePrefix = string[:i]\n\
    \        }\n    }\n    if longestPalindromeLength > longestPalindromeLength {\n\
    \        longestPalindrome = longestPalindromePrefix\n        longestPalindromeLength\
    \ = longestPalindromeLength\n    }\n    return longestPalindrome", "    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n            longestPalindromePrefixLength = 0\n        }\n    }\n    if\
    \ longestPalindromeLength > longestPalindromePrefixLength {\n        longestPalindrome\
    \ = string\n    } else {\n        longestPalindrome = string[longestPalindromePrefixLength..<longestPalindromeLength].reversed()\n\
    \    }\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for char in string {\n        if char == char.lowercased() {\n \
    \           longestPalindrome += char\n        }\n    }\n    for char in longestPalindrome\
    \ {\n        if char == char.lowercased() {\n            result += char\n    \
    \    }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    return result", "    if\
    \ string == \"\" {\n        return \"\"\n    }\n    var reversed = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] == string[len(string) - i -\
    \ 1] {\n            reversed = reversed[0:len(reversed) - 1] + string[len(string)\
    \ - i - 1]\n            longestPalindrome = string[0:len(string) - i - 1] + reversed\n\
    \            longestPalindromeLength = len(longestPalindrome)\n        } else\
    \ {\n            reversed = reversed[0:len(reversed) - 1] + string[i]\n      \
    \  }\n    }\n    if longestPalindromeLength > len(string) {\n        return \"\
    \"\n    }\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            result += character\n      \
    \      continue\n        }\n        if longestPalindromeLength < character.count\
    \ {\n            longestPalindrome = character\n            longestPalindromeLength\
    \ = character.count\n        }\n    }\n    if longestPalindromeLength == 0 {\n\
    \        return result\n    }\n    longestPalindrome = longestPalindrome.reversed()\n\
    \    for character in string {\n        if character == character {\n        \
    \    result += character\n            continue\n        }\n        if longestPalindromeLength\
    \ < character.count {\n            longestPalindrome = character\n           \
    \ longestPalindromeLength = character.count\n        }\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return result\n    }\n    result += longestPalindrome\n    return\
    \ result", "    var result = \"\"\n    var longestPalindrome = \"\"\n    for character\
    \ in string {\n        if character == character {\n            result += character\n\
    \        } else {\n            longestPalindrome += character\n        }\n   \
    \ }\n    for character in string {\n        if character == character {\n    \
    \        result += character\n        } else {\n            result += longestPalindrome\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        let reversedCharacter = String(character).reversed()\n\
    \        if character == reversedCharacter {\n            result += character\n\
    \        } else {\n            result += reversedCharacter\n        }\n      \
    \  if result.count > longestPalindrome.count {\n            longestPalindrome\
    \ = result\n            result = \"\"\n        }\n    }\n    if longestPalindrome.count\
    \ > 0 {\n        result += longestPalindrome\n    }\n    return result", "   \
    \ var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for start in 0..<string.count {\n        var end = start\n        for\
    \ _ in 0..<string.count {\n            end += 1\n            if string[end] !=\
    \ string[start] {\n                break\n            }\n        }\n        if\
    \ end - start > longestPalindromeLength {\n            longestPalindromeLength\
    \ = end - start\n            longestPalindrome = string[start..<end]\n       \
    \ }\n    }\n    if longestPalindromeLength == 0 {\n        return \"\"\n    }\n\
    \    if longestPalindromeLength == 1 {\n        return string\n    }\n    if longestPalindromeLength\
    \ > 1 {\n        var reversed = string\n        for _ in 0..<longestPalindromeLength\
    \ {\n            reversed = reversed!.dropLast()\n        }\n        return reversed!\
    \ + longestPalindrome\n    }\n    return \"\"", "\tlet longestPalindrome = longestPalindrome(string:\
    \ string)\n\tlet reversedString = reverseString(string: string)\n\treturn longestPalindrome\
    \ + reversedString", "    var result = \"\"\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n    for character in string {\n        let\
    \ reversedCharacter = reverseString(character)\n        if character == reversedCharacter\
    \ {\n            result += character\n        } else {\n            if longestPalindromeLength\
    \ < character.count {\n                longestPalindrome = character\n       \
    \         longestPalindromeLength = character.count\n            }\n         \
    \   result += reversedCharacter\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result += reverseString(longestPalindrome)\n    }\n    return\
    \ result", "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = character\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindromeLength = 0\n                result = result\
    \ + longestPalindrome\n                longestPalindrome = character\n       \
    \     } else {\n                result = result + character\n            }\n \
    \       }\n    }\n    result = result + longestPalindrome\n    return result",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLen\
    \ = 0\n    var longestPalindromeIndex = -1\n    for index in 0..<string.characters.count\
    \ {\n        let char = string.characters[index]\n        let reversedChar = String(char.reversed())\n\
    \        if reversedChar == string {\n            if longestPalindromeLen < index\
    \ {\n                longestPalindrome = string\n                longestPalindromeLen\
    \ = index\n                longestPalindromeIndex = index\n            }\n   \
    \     }\n    }\n    if longestPalindromeLen > 0 {\n        result = string\n \
    \       for index in 0..<longestPalindromeLen {\n            let char = longestPalindrome[index]\n\
    \            result = result + char\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    var longestPalindrome = \"\"\n    for c in string {\n\
    \        if isPalindrome(character: c) {\n            if longestPalindrome ==\
    \ \"\" {\n                longestPalindrome = c\n            } else {\n      \
    \          longestPalindrome = longestPalindrome + c\n            }\n        }\
    \ else {\n            if longestPalindrome != \"\" {\n                result =\
    \ longestPalindrome + result\n                longestPalindrome = \"\"\n     \
    \       }\n            result = c + result\n        }\n    }\n    if longestPalindrome\
    \ != \"\" {\n        result = longestPalindrome + result\n    }\n    return result",
  "\tlet reverse = string.reversed()\n\tlet prefixLength = string.characters.count\
    \ - reverse.characters.count\n\tlet postfix = string.characters.suffix(from: prefixLength)\n\
    \treturn string + reverse.characters.prefix(from: prefixLength) + postfix", "\t\
    let reversed = string.reversed()\n\tlet prefix = reversed.prefix(string: string)\n\
    \treturn prefix + reversed", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n    var longestPalindromeReverse = \"\
    \"\n    for character in string.characters {\n        if character == longestPalindrome[longestPalindromeLength-1]\
    \ {\n            longestPalindromeLength--\n        } else {\n            longestPalindromePrefix\
    \ += String(character)\n        }\n    }\n    for character in string.characters\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeLength++\n        } else {\n            longestPalindromeSuffix\
    \ += String(character)\n        }\n    }\n    for character in string.characters\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeReverse = String(character) + String(longestPalindromeReverse)\n\
    \        } else {\n            longestPalindromeReverse += String(character)\n\
    \        }\n    }\n    longestPalindrome = longestPalindromePrefix + longestPalindromeReverse\
    \ + longestPalindromeSuffix\n    return longestPalindrome", "    var result =\
    \ \"\"\n    var longestPalindrome = string\n    var longestPalindromeLength =\
    \ longestPalindrome.characters.count\n    var longestPalindromeIndex = longestPalindrome.startIndex\n\
    \    var longestPalindromeEnd = longestPalindromeIndex\n    for index in 0..<longestPalindromeLength\
    \ {\n        let character = longestPalindrome[index]\n        if character ==\
    \ longestPalindrome[longestPalindromeIndex] {\n            longestPalindromeIndex\
    \ += 1\n        } else {\n            longestPalindromeEnd = longestPalindromeIndex\n\
    \        }\n    }\n    longestPalindromeEnd = longestPalindromeIndex\n    for\
    \ index in 0..<longestPalindromeLength {\n        let character = longestPalindrome[index]\n\
    \        if character == longestPalindrome[longestPalindromeIndex] {\n       \
    \     longestPalindromeIndex += 1\n        } else {\n            longestPalindromeEnd\
    \ = longestPalindromeIndex\n        }\n    }\n    if longestPalindromeLength >\
    \ 0 {\n        let longestPalindromePrefix = longestPalindrome[longestPalindromeIndex..<longestPalindromeEnd]\n\
    \        let longestPalindromeSuffix = longestPalindrome[longestPalindromeEnd..<longestPalindromeLength]\n\
    \        let longestPalindromeReversedPrefix = longestPalindromePrefix.reversed()\n\
    \        let longestPalindromeReversedSuffix = longestPalindromeSuffix.reversed()\n\
    \        result = longestPalindromePrefix + longestPalindromeReversedPrefix +\
    \ longestPalindromeSuffix + longestPalindromeReversedSuffix\n    }\n    return\
    \ result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromeIndex = longestPalindrome.startIndex\n\
    \    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\
    \n    var longestPalindromeSuffixIndex = longestPalindrome.startIndex\n    var\
    \ longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixChar = \"\"\
    \n    var longestPalindromeSuffixCharIndex = longestPalindrome.startIndex\n  \
    \  var longestPalindromeSuffixCharCount = 1\n    var longestPalindromeSuffixCharReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseIndex = longestPalindrome.startIndex\n\
    \    var longestPalindromeSuffixCharReverseCount = 1\n    var longestPalindromeSuffixCharReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseReverseIndex = longestPalindrome.startIndex\n\
    \    var longestPalindromeSuffixCharReverseReverseCount = 1\n    var longestPalindromeSuffixCharReverseReverseChar\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseReverseCharIndex = longestPalindrome.startIndex\n\
    \    var longestPalindromeSuffixCharReverseReverseCharCount = 1\n    var longestPalindromeSuffixCharReverseReverseCharReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseReverseCharReverseIndex =\
    \ longestPalindrome.startIndex\n    var longestPalindromeSuffixCharReverseReverseCharReverseCount\
    \ = 1\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverse = \"\
    \"\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseIndex =\
    \ longestPalindrome.startIndex\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseCount\
    \ = 1\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseReverseChar\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseCharIndex\
    \ = longestPalindrome.startIndex\n    var longestPalindromeSuffixCharReverseReverseCharReverseCharReverseCount\
    \ = 1\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseCharReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseCharIndex\
    \ = longestPalindrome.startIndex\n    var longestPalindromeSuffixCharReverseReverseCharReverseCharReverseCount\
    \ = 1\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseCharReverse\
    \ = \"\"\n    var longestPalindromeSuffixCharReverseReverseCharReverseReverseCharReverseIndex\
    \ = longestPalindrome.startIndex", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = character\n            }\n        } else {\n   \
    \         if longestPalindromeLength > longestPalindromeLength {\n           \
    \     result += longestPalindrome\n                longestPalindromeLength = 0\n\
    \            }\n            result += character\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.length {\n        result += longestPalindrome\n    }\n \
    \   return result", "    if string == \"\" {\n        return \"\"\n    }\n   \
    \ var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var currentChar = string[i]\n\
    \        var currentCharLength = i + 1\n        var currentCharPrefix = \"\"\n\
    \        var currentCharSuffix = \"\"\n        var currentCharPostfix = \"\"\n\
    \        var currentCharPostfixLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if j == i {\n                continue\n            }\n  \
    \          var currentCharPrev = string[j-1]\n            var currentCharNext\
    \ = string[j]\n            var currentCharPrevLength = j - 1\n            var\
    \ currentCharNextLength = j\n            if currentCharPrevLength == 0 {\n   \
    \             currentCharPrev = \"\"\n            }\n            if currentCharNextLength\
    \ == 0 {\n                currentCharNext = \"\"\n            }\n            if\
    \ currentCharLength > currentCharPrevLength {\n                currentCharLength\
    \ = currentCharPrevLength\n            }\n            if currentCharLength > currentCharNextLength\
    \ {\n                currentCharLength = currentCharNextLength\n            }\n\
    \            if currentCharLength > longestPalindromeLength {\n              \
    \  longestPalindrome = string\n                longestPalindromeLength = currentCharLength\n\
    \                longestPalindromePrefix = string[0:i]\n                longestPalindromeSuffix\
    \ = string[i:]\n                longestPalindromePostfix = string[0:j]\n     \
    \           longestPalindromePostfixLength = j\n            }\n            if\
    \ currentCharLength == longestPalindromeLength {\n                if currentChar\
    \ == currentCharPrev {\n                    currentCharPrev = currentChar\n  \
    \                  currentCharPrevLength = currentCharLength\n               \
    \ } else {\n                    currentCharPrev = \"\"\n                    currentCharPrevLength\
    \ = 0\n                }\n                if currentChar == currentCharNext {\n\
    \                    currentCharNext = currentChar\n                    currentCharNextLength\
    \ = currentCharLength\n                } else {\n                    currentCharNext\
    \ = \"\"\n                    currentCharNextLength = 0\n                }\n \
    \           }\n            if currentCharLength == longestPalindromeLength {\n\
    \                if currentChar == currentCharPrev {\n                    currentCharPrev\
    \ = currentChar\n                    currentCharPrevLength = currentCharLength\n\
    \                } else {\n                    currentCharPrev = \"\"\n      \
    \              currentCharPrevLength = 0\n                }\n                if\
    \ currentChar == currentCharNext {\n                    currentCharNext = ", " \
    \   if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    for index in 0..<string.count\
    \ {\n        let char = string[index]\n        let charLength = string.distance(from:\
    \ string.startIndex, to: index)\n        if charLength > longestPalindromeLength\
    \ {\n            longestPalindromeLength = charLength\n            longestPalindromeIndex\
    \ = index\n        }\n        if char == char.reversed() {\n            longestPalindromeSuffixIndex\
    \ = index\n            longestPalindromeSuffixLength = charLength\n          \
    \  longestPalindromeSuffixString = string[index..<longestPalindromeSuffixIndex]\n\
    \        }\n    }\n    if longestPalindromeSuffixLength > longestPalindromeLength\
    \ {\n        longestPalindromeLength = longestPalindromeSuffixLength\n       \
    \ longestPalindromeSuffixIndex = longestPalindromeIndex\n        longestPalindromeSuffixString\
    \ = string[longestPalindromeSuffixIndex..<string.count]\n    }\n    longestPalindrome\
    \ = string[longestPalindromeIndex..<longestPalindromeSuffixIndex]\n    return\
    \ longestPalindrome", "    var result = \"\"\n    var longestPalindrome = \"\"\
    \n    for character in string {\n        if character == character {\n       \
    \     result += character\n        }\n        if character == string[string.index(before:\
    \ character)] {\n            result += string[string.index(before: character)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 1)] {\n            result += string[string.index(before: character, after: 1)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 2)] {\n            result += string[string.index(before: character, after: 2)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 3)] {\n            result += string[string.index(before: character, after: 3)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 4)] {\n            result += string[string.index(before: character, after: 4)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 5)] {\n            result += string[string.index(before: character, after: 5)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 6)] {\n            result += string[string.index(before: character, after: 6)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 7)] {\n            result += string[string.index(before: character, after: 7)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 8)] {\n            result += string[string.index(before: character, after: 8)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 9)] {\n            result += string[string.index(before: character, after: 9)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 10)] {\n            result += string[string.index(before: character, after:\
    \ 10)]\n        }\n        if character == string[string.index(before: character,\
    \ after: 11)] {\n            result += string[string.index(before: character,\
    \ after: 11)]\n        }\n        if character == string[string.index(before:\
    \ character, after: 12)] {\n            result += string[string.index(before:\
    \ character, after: 12)]\n        }\n        if character == string[string.index(before:\
    \ character, after: 13)] {\n            result += string[string.index(before:\
    \ character, after: 13)]\n        }\n        if character == string[string.index(before:\
    \ character, after: 14)] {\n            result += string[string.index(before:\
    \ character, after: 14)]", "    var palindrome = string\n    var reverse = \"\"\
    \n    var prefixLength = 0\n    var suffixLength = 0\n    for _ in 0..<string.count\
    \ {\n        let character = string[string.startIndex]\n        let index = string.index(before:\
    \ string.endIndex, offsetBy: 1)\n        let nextCharacter = string[index]\n \
    \       if character == nextCharacter {\n            reverse = reverse + String(character)\n\
    \            prefixLength += 1\n        } else {\n            reverse = reverse\
    \ + String(character) + String(nextCharacter)\n            suffixLength += 1\n\
    \        }\n        if suffixLength == prefixLength {\n            palindrome\
    \ = palindrome + reverse\n            reverse = \"\"\n            prefixLength\
    \ = 0\n            suffixLength = 0\n        }\n    }\n    return palindrome",
  "\tlet reversedString = reverseString(string)\n\tlet longestPalindrome = longestPalindromeFromReversedString(reversedString)\n\
    \treturn string + longestPalindrome", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-i-1]\
    \ {\n            longestPalindromeLength++\n            if longestPalindromeLength\
    \ > longestPalindromePostfixLength {\n                longestPalindromePostfixLength\
    \ = longestPalindromeLength\n                longestPalindromePostfix = string[i..]\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \      }\n    }\n    if longestPalindromeLength > longestPalindromePostfixLength\
    \ {\n        longestPalindromePostfix = string[i..]\n    }\n    longestPalindromePrefix\
    \ = string[i..longestPalindromePostfix.startIndex]\n    longestPalindromeSuffix\
    \ = string[longestPalindromePostfix.endIndex..]\n    return longestPalindromePrefix\
    \ + longestPalindromePostfix.reverse() + longestPalindromeSuffix", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var reverse = \"\"\n    var longest\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == string[len(string)-1-i]\
    \ {\n            longest = i\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if i == longest {\n            reverse = reverse + string[i]\n\
    \        } else {\n            reverse = reverse + string[i] + string[len(string)-1-i]\n\
    \        }\n    }\n    return reverse", "    var longestPalindrome = string\n\
    \    var longestPalindromeLength = longestPalindrome.characters.count\n    for\
    \ index in 0..<longestPalindromeLength {\n        let currentChar = longestPalindrome[index]\n\
    \        let nextChar = longestPalindrome[index + 1]\n        if currentChar ==\
    \ nextChar {\n            longestPalindrome = longestPalindrome.replacingCharacters(in:\
    \ NSRange(location: index, length: 1), with: nextChar)\n            longestPalindromeLength\
    \ = longestPalindrome.characters.count\n        }\n    }\n    return longestPalindrome",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for start in 0..<string.count {\n        var postfix = string[start..<string.count]\n\
    \        var reversedPostfix = string.reversed()[start..<string.count]\n     \
    \   if postfix == reversedPostfix {\n            longestPalindrome = string\n\
    \            longestPalindromeLength = start\n        }\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return \"\"\n    }\n    result = string\n    for start in 0..<longestPalindromeLength\
    \ {\n        result = result + string[longestPalindromeLength..<longestPalindromeLength+start]\n\
    \    }\n    return result", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromePrefixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    for letter in string {\n        if letter == letter {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n                longestPalindromePrefixLength = longestPalindromeLength\n\
    \                longestPalindromePrefixString = string\n            }\n     \
    \   } else {\n            if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffixLength = longestPalindromeLength\n\
    \                longestPalindromeSuffixString = string\n            }\n     \
    \   }\n    }\n    if longestPalindromeLength > longestPalindromeSuffixLength {\n\
    \        longestPalindromeSuffixString = string\n    }\n    if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n        longestPalindromePrefixString = string\n\
    \    }\n    if longestPalindromePrefixString == longestPalindromeSuffixString\
    \ {\n        return string\n    }\n    if longestPalindromePrefixString == longestPalindromeSuffixStringReverse\
    \ {\n        return longestPalindromePrefixString + string\n    }\n    if longestPalindromeSuffixString\
    \ == longestPalindromePrefixStringReverse {\n        return longestPalindromeSuffixString\
    \ + string\n    }\n    if longestPalindromePrefixString == longestPalindromeSuffixStringReverse\
    \ {\n        return longestPalindromePrefixString + longestPalindromeSuffixString\
    \ + string\n    }\n    if longestPalindromePrefixString == longestPalindromeSuffixStringReverse\
    \ {\n        return longestPalindromePrefixString + longestPalindromeSuffixString\
    \ + longestPalindromePrefixStringReverse + string\n    }\n    if longestPalindromePrefixString\
    \ == longestPalindromeSuffixStringReverse {\n        return longestPalindromePrefixString\
    \ + longestPalindromeSuffixString + longestPalindromeSuffixStringReverse + string\n\
    \    }\n    if longestPalindromePrefixString == longestPalindromeSuffixStringReverse\
    \ {\n        return longestPalindromePrefix", "    var reverse = \"\"\n    var\
    \ longest = \"\"\n    for char in string {\n        reverse = reverse + String(char)\n\
    \        if longest.characters.count < reverse.characters.count {\n          \
    \  longest = String(char)\n        }\n    }\n    return reverse + longest", " \
    \   if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    for char in string {\n \
    \       if char == char.lowercased() {\n            longestPalindromeLength +=\
    \ 1\n            if longestPalindromeLength > longestPalindromePrefixLength {\n\
    \                longestPalindromePrefix = string[longestPalindromePrefixLength..<longestPalindromeLength]\n\
    \                longestPalindromePrefixLength = longestPalindromeLength\n   \
    \         }\n            if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffix = string[longestPalindromeSuffixLength..<longestPalindromeLength]\n\
    \                longestPalindromeSuffixLength = longestPalindromeLength\n   \
    \         }\n        }\n    }\n    if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n        longestPalindrome = longestPalindromePrefix + string[longestPalindromePrefixLength..<longestPalindromeLength].reversed()\
    \ + longestPalindromeSuffix\n    }\n    return longestPalindrome", "    var result\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    for index in 0..<string.characters.count\
    \ {\n        let char = string.characters[index]\n        if char == char.reverse()\
    \ {\n            longestPalindrome = char + longestPalindrome\n            longestPalindromeLength\
    \ = longestPalindrome.characters.count\n            longestPalindromeIndex = index\n\
    \        }\n    }\n    if longestPalindromeLength > 0 {\n        result = string\
    \ + longestPalindrome\n    }\n    return result", "    let longestPalindrome =\
    \ longestPalindrome(string: string)\n    let reversedString = reverseString(string:\
    \ string)\n    return longestPalindrome + reversedString", "    var result = \"\
    \"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n  \
    \  for character in string {\n        if character == character {\n          \
    \  longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    longestPalindromeLength += 1\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = character\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.length {\n   \
    \             longestPalindrome = character\n            }\n        }\n    }\n\
    \    for character in string {", "    if string == \"\" {\n        return \"\"\
    \n    }\n    var reverse = \"\"\n    var longest = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == string[len(string)-1-i] {\n            longest\
    \ = i\n        }\n    }\n    for i := longest; i < len(string); i++ {\n      \
    \  reverse += string[i]\n    }\n    return reverse + string[longest:]", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    for c in string {\n   \
    \     if isPalindrome(string(string: c)) {\n            longestPalindrome = string(string:\
    \ c)\n        }\n    }\n    for c in string {\n        if isPalindrome(string(string:\
    \ c)) {\n            result += string(string: c)\n        }\n    }\n    if longestPalindrome\
    \ != \"\" {\n        result += string(string: longestPalindrome)\n    }\n    return\
    \ result", "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    for index in 0..<string.count {\n\
    \        let currentChar = string[index]\n        let currentCharLength = currentChar.count\n\
    \        if currentCharLength > longestPalindromeLength {\n            longestPalindromeLength\
    \ = currentCharLength\n            longestPalindrome = currentChar\n         \
    \   longestPalindromeIndex = index\n        }\n    }\n    let longestPalindromeSuffix\
    \ = string.suffix(from: longestPalindromeIndex)\n    let longestPalindromePrefixReversed\
    \ = longestPalindromeSuffix.reversed()\n    let longestPalindromePrefixReversedLength\
    \ = longestPalindromePrefixReversed.count\n    if longestPalindromePrefixReversedLength\
    \ > longestPalindromeLength {\n        result = longestPalindromePrefixReversed\n\
    \    } else {\n        result = longestPalindrome\n    }\n    return result",
  "    var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    for char in string {\n        if char ==\
    \ char.lowercased() {\n            longestPalindromeLength += 1\n            if\
    \ longestPalindromeLength > longestPalindromeLength {\n                longestPalindrome\
    \ = longestPalindromePrefix\n                longestPalindromeLength = longestPalindromeLength\n\
    \                longestPalindromePrefix = \"\"\n            }\n            longestPalindromePrefix\
    \ += char\n        } else {\n            longestPalindromeLength = 0\n       \
    \     longestPalindromePrefix = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeLength {\n        longestPalindrome = longestPalindromePrefix\n\
    \    }\n    return longestPalindrome", "    var longestPalindrome = string\n \
    \   var longestPalindromeLength = longestPalindrome.characters.count\n    var\
    \ longestPalindromeIndex = longestPalindrome.startIndex\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromeReverse\
    \ = \"\"\n\n    for index in 0..<longestPalindromeLength {\n        let char =\
    \ longestPalindrome[index]\n        let reverse = String(char).reversed()\n  \
    \      if char == reverse {\n            longestPalindromePrefix = String(char)\
    \ + longestPalindromePrefix\n            longestPalindromeSuffix = String(reverse)\
    \ + longestPalindromeSuffix\n            longestPalindromeReverse = String(reverse)\
    \ + longestPalindromeReverse\n            longestPalindromeIndex += 1\n      \
    \  }\n    }\n\n    if longestPalindromeIndex == 0 {\n        return string\n \
    \   }\n\n    if longestPalindromeIndex == longestPalindromeLength {\n        return\
    \ longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeReverse\n\
    \    }\n\n    if longestPalindromeIndex > longestPalindromeLength {\n        return\
    \ longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeReverse\n\
    \    }\n\n    if longestPalindromeIndex < longestPalindromeLength {\n        let\
    \ charBeforePalindrome = longestPalindrome[longestPalindromeIndex - 1]\n     \
    \   let reverseCharBeforePalindrome = String(charBeforePalindrome).reversed()\n\
    \        let charAfterPalindrome = longestPalindrome[longestPalindromeIndex]\n\
    \        let reverseCharAfterPalindrome = String(charAfterPalindrome).reversed()\n\
    \n        if charBeforePalindrome == reverseCharBeforePalindrome {\n         \
    \   return longestPalindromePrefix + reverseCharBeforePalindrome + longestPalindromeSuffix\
    \ + reverseCharAfterPalindrome + longestPalindromeReverse\n        }\n\n     \
    \   if charAfterPalindrome == reverseCharBeforePalindrome {\n            return\
    \ longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeReverse\n\
    \        }\n\n        return longestPalindromePrefix + longestPalindromeSuffix\
    \ + longestPalindromeReverse\n    }\n\n    return longestPalindromePrefix + longestPalindromeSuffix\
    \ + longestPalindromeReverse", "    var result = \"\"\n    var longest = 0\n \
    \   for i := 0; i < len(string); i++ {\n        if string[i] != string[longest]\
    \ {\n            longest = i\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if i == longest {\n            result += string[i]\n        }\
    \ else {\n            result += string[i] + string[longest]\n        }\n    }\n\
    \    return result", "    let maxLength: Int = string.characters.count\n    let\
    \ reversedString = string.reversed()\n    var palindrome = \"\"\n    for i in\
    \ 0..<maxLength {\n        if string.characters.count > i {\n            let substring\
    \ = string.substringWithRange(i..<string.characters.count)\n            let reversedSubstring\
    \ = reversedString.substringWithRange(i..<reversedString.characters.count)\n \
    \           if substring == reversedSubstring {\n                palindrome =\
    \ palindrome.replacingOccurrences(of: substring, with: reversedSubstring)\n  \
    \          }\n        }\n    }\n    return palindrome", "    var result = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeStart = 0\n    var longestPalindromeEnd = string.length\n \
    \   for start in 0..<string.length - 1 {\n        let end = start + longestPalindromeLength\n\
    \        let substring = string.substring(from: start, to: end)\n        if substring.lowercased()\
    \ == substring.lowercased().reversed() {\n            longestPalindromeLength\
    \ = end - start\n            longestPalindromeStart = start\n            longestPalindromeEnd\
    \ = end\n            longestPalindrome = substring\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result = string.substring(from: longestPalindromeStart, to: longestPalindromeEnd)\n\
    \    }\n    return result", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n\
    \    for i := 0; i < len(string); i++ {\n        var currentPalindrome = \"\"\n\
    \        var currentPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[i] == string[j] {\n                currentPalindrome\
    \ += string[i]\n                currentPalindromeLength += 1\n            } else\
    \ {\n                break\n            }\n        }\n        if currentPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = currentPalindrome\n\
    \            longestPalindromeLength = currentPalindromeLength\n        }\n  \
    \  }\n    return longestPalindrome + string(string.reverse())", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix =\
    \ \"\"\n    var longestPalindromePostfix = \"\"\n\n    for character in string\
    \ {\n        if character == character {\n            result += character\n  \
    \      } else {\n            longestPalindrome = longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n            longestPalindromeLength += 1\n     \
    \       longestPalindromePrefix = longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n            longestPalindromeSuffix = longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n            longestPalindromePostfix = longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n        }\n    }\n\n    if longestPalindromeLength\
    \ > 0 {\n        result = longestPalindromePrefix + longestPalindromeSuffix +\
    \ longestPalindromePostfix + result\n    }\n\n    return result", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var reversed = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        longestPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[j] != string[i] {\n                break\n    \
    \        }\n            longestPalindromeLength += 1\n        }\n        if longestPalindromeLength\
    \ > longestPalindromeLength {\n            longestPalindrome = string\n      \
    \  }\n    }\n    for i := 0; i < len(string); i++ {\n        longestPalindromeLength\
    \ = 0\n        for j := 0; j < len(string); j++ {\n            if string[j] !=\
    \ string[i] {\n                break\n            }\n            longestPalindromeLength\
    \ += 1\n        }\n        if longestPalindromeLength == longestPalindromeLength\
    \ {\n            reversed = string[longestPalindromeLength : len(string)] + reversed\n\
    \        }\n    }\n    return reversed", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        var currentChar = string[i]\n        var currentPalindromePrefix\
    \ = \"\"\n        var currentPalindromeSuffix = \"\"\n        var currentPalindromeLength\
    \ = 0\n        for j := 0; j < len(string); j++ {\n            if j == i {\n \
    \               continue\n            }\n            var currentChar = string[j]\n\
    \            var currentPalindromePrefix = longestPalindromePrefix\n         \
    \   var currentPalindromeSuffix = longestPalindromeSuffix\n            var currentPalindromeLength\
    \ = 0\n            if currentChar == currentPalindromePrefix[currentPalindromeLength]\
    \ {\n                currentPalindromeLength += 1\n                currentPalindromePrefix\
    \ = currentPalindromePrefix[currentPalindromeLength]\n            } else {\n \
    \               currentPalindromeLength = 0\n                currentPalindromePrefix\
    \ = \"\"\n                currentPalindromeSuffix = currentPalindromeSuffix[0:currentPalindromeLength]\n\
    \            }\n            if currentPalindromeLength > longestPalindromeLength\
    \ {\n                longestPalindrome = currentPalindromeSuffix\n           \
    \     longestPalindromeLength = currentPalindromeLength\n                longestPalindromePrefix\
    \ = currentPalindromePrefix\n            }\n        }\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n\n    // Find longest postfix\
    \ that is a palindrome\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] != string[len(string)-1-i]\
    \ {\n            break\n        }\n        longestPalindromeLength += 1\n    }\n\
    \n    // Append reverse of longest postfix that comes before palindromic suffix\n\
    \    var reversedLongestPalindrome = string\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        reversedLongestPalindrome += string[len(string)-1-i]\n    }\n\
    \n    return longestPalindrome + reversedLongestPalindrome", "\tlet reversedString\
    \ = reverseString(string)\n\tlet prefixString = string.prefix(where: string.startIndex)\n\
    \tlet suffixString = string.suffix(where: string.endIndex)\n\tlet prefixReversedString\
    \ = reverseString(prefixString)\n\tlet suffixReversedString = reverseString(suffixString)\n\
    \treturn prefixString + reversedString + suffixReversedString", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength =\
    \ 0\n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentCharLength = string.distance(from: String.Index(encodedOffset:\
    \ index), to: String.Index(encodedOffset: index + 1))\n        if currentCharLength\
    \ > longestPalindromeLength {\n            longestPalindrome = string\n      \
    \      longestPalindromeLength = currentCharLength\n            longestPalindromePrefixLength\
    \ = index\n        }\n        if currentChar == currentChar.reversed() {\n   \
    \         longestPalindrome = string\n            longestPalindromeLength = currentCharLength\n\
    \            longestPalindromePrefixLength = index\n        }\n    }\n    let\
    \ longestPalindromeSuffix = string[longestPalindromePrefixLength..<string.count]\n\
    \    let longestPalindromeSuffixReversed = string.reversed()[longestPalindromePrefixLength..<string.count]\n\
    \    return longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeSuffixReversed",
  "    if string == \"\" {\n        return \"\"\n    }\n    var palindrome = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLength = 0\n   \
    \ var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfixLengthReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestPalindromePostfixLengthReverseReverse\
    \ = 0\n    var longestPalindromePostfixLengthReverseReverse = 0\n    var longestP",
  "    var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix: String\
    \ = \"\"\n\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindromePrefix = string[longestPalindromeLength..<longestPalindromeLength]\n\
    \            longestPalindromeSuffix = string[longestPalindromeLength..<longestPalindromeLength]\n\
    \            longestPalindrome = string\n        }\n    }\n\n    return longestPalindromePrefix\
    \ + longestPalindromeSuffix + longestPalindrome", "\tlet reverse = string.reversed()\n\
    \tlet prefix = string.prefix(string.reversed())\n\treturn prefix + reverse", " \
    \   var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = 0\n\
    \    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex =\
    \ 0\n    var longestPalindromeStartIndexInReverse = 0\n    var longestPalindromeEndIndexInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseInReverse = 0\n    var longestPalindromeEndIndexInReverseInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse = 0\n  \
    \  var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var\
    \ longestPalindromeStartIndexInReverseInReverseInReverse = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse = 0\n  \
    \  var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var\
    \ longestPalindromeStartIndexInReverseInReverseInReverse = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse = 0\n  \
    \  var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var\
    \ longestPalindromeStartIndexInReverseInReverseInReverse = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse = 0\n  \
    \  var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse = 0\n    var\
    \ longestPalindromeStartIndexInReverseInReverseInReverse = 0\n    var longestPalindromeEndIndexInReverseInReverseInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseInReverseInReverse = 0\n  \
    \  var ", "    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix =\
    \ \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n\n    for character in string {\n        if character == character {\n\
    \            longestPalindrome = longestPalindrome[longestPalindromeLength..<longestPalindromeLength+longestPalindromePrefixLength]\n\
    \            longestPalindromeLength += 1\n            longestPalindromePrefix\
    \ = longestPalindromePrefix[longestPalindromePrefixLength..<longestPalindromePrefixLength+longestPalindromeSuffixLength]\n\
    \            longestPalindromePrefixLength += 1\n            longestPalindromeSuffix\
    \ = longestPalindromeSuffix[longestPalindromeSuffixLength..<longestPalindromeSuffixLength+longestPalindromeLength]\n\
    \            longestPalindromeSuffixLength += 1\n        } else {\n          \
    \  longestPalindrome = longestPalindrome[longestPalindromeLength..<longestPalindromeLength+longestPalindromePrefixLength]\n\
    \            longestPalindromeLength += 1\n            longestPalindromePrefix\
    \ = longestPalindromePrefix[longestPalindromePrefixLength..<longestPalindromePrefixLength+longestPalindromeSuffixLength]\n\
    \            longestPalindromePrefixLength += 1\n            longestPalindromeSuffix\
    \ = longestPalindromeSuffix[longestPalindromeSuffixLength..<longestPalindromeSuffixLength+longestPalindromeLength]\n\
    \            longestPalindromeSuffixLength += 1\n            longestPalindrome\
    \ = longestPalindrome[longestPalindromeLength..<longestPalindromeLength+longestPalindromePrefixLength]\n\
    \            longestPalindromeLength += 1\n            longestPalindromePrefix\
    \ = longestPalindromePrefix[longestPalindromePrefixLength..<longestPalindromePrefixLength+longestPalindromeSuffixLength]\n\
    \            longestPalindromePrefixLength += 1\n            longestPalindromeSuffix\
    \ = longestPalindromeSuffix[longestPalindromeSuffixLength..<longestPalindromeSuffixLength+longestPalindromeLength]\n\
    \            longestPalindromeSuffixLength += 1\n", "    var result = \"\"\n \
    \   var longestPalindrome = \"\"\n    for character in string {\n        if character\
    \ == character {\n            longestPalindrome += character\n        }\n    }\n\
    \    for character in string {\n        if character == character {\n        \
    \    result += character + longestPalindrome\n        }\n    }\n    return result",
  "    var result = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseLength = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseLength = 0\n   \
    \ var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse", "    var result = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLen = 0\n    for\
    \ index in 0..<string.count {\n        let char = string[index]\n        let reversedChar\
    \ = String(char.reversed())\n        if reversedChar == char {\n            longestPalindrome\
    \ = string\n            longestPalindromeLen = index\n            break\n    \
    \    }\n        if reversedChar.count > longestPalindromeLen {\n            longestPalindrome\
    \ = string\n            longestPalindromeLen = reversedChar.count\n        }\n\
    \    }\n    if longestPalindromeLen > 0 {\n        let reversedString = string[longestPalindromeLen..<string.count]\n\
    \        result = reversedString + reversedChar\n    }\n    return result", " \
    \   var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            longestPalindromeLength = 0\n   \
    \     }\n    }\n    if longestPalindromeLength > longestPalindrome.length {\n\
    \        longestPalindrome = string\n    }\n    for character in string {\n  \
    \      if character == character {\n            result += character\n        }\
    \ else {\n            result += character + reverseString(string: longestPalindrome)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStart\
    \ = 0\n    var longestPalindromeEnd = string.length\n    for i := 0; i < string.length;\
    \ i++ {\n        longestPalindromeLength = 0\n        longestPalindromeStart =\
    \ longestPalindromeEnd\n        for j := longestPalindromeStart; j < longestPalindromeEnd;\
    \ j++ {\n            if string[i] == string[j] {\n                longestPalindromeLength\
    \ += 1\n                if longestPalindromeLength > longestPalindromeLength {\n\
    \                    longestPalindrome = string[longestPalindromeStart:longestPalindromeEnd]\n\
    \                    longestPalindromeLength = longestPalindromeEnd\n        \
    \        }\n            } else {\n                break\n            }\n     \
    \   }\n        if longestPalindromeLength > longestPalindromeLength {\n      \
    \      result = result + string[longestPalindromeStart:longestPalindromeLength]\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for letter in string {\n        if letter == letter {\n        \
    \    result += letter\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: 1)] {\n            longestPalindrome = letter\n        }\n    }\n\
    \    if longestPalindrome == \"\" {\n        return result\n    }\n    result\
    \ += string[string.index(longestPalindrome, offsetBy: 1)]\n    for letter in string\
    \ {\n        if letter != string[string.index(letter, offsetBy: 1)] {\n      \
    \      result += letter\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = string.length\n\
    \n    for index in 0..<string.count {\n        let currentChar = string[index]\n\
    \        let currentCharLength = currentChar.utf8.count\n\n        if currentCharLength\
    \ > longestPalindromeLength {\n            longestPalindromeLength = currentCharLength\n\
    \            longestPalindromeStart = index\n        }\n\n        if currentCharLength\
    \ == longestPalindromeLength {\n            if currentChar == string.reversedSubstring(from:\
    \ longestPalindromeStart, to: longestPalindromeStart + longestPalindromeLength)\
    \ {\n                result += string[longestPalindromeStart..<longestPalindromeStart\
    \ + longestPalindromeLength]\n                longestPalindromeEnd = longestPalindromeStart\
    \ + longestPalindromeLength\n            }\n        }\n    }\n\n    if longestPalindromeEnd\
    \ < string.length {\n        result += string[longestPalindromeEnd..<string.length]\n\
    \    }\n\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStart\
    \ = 0\n    var longestPalindromeEnd = 0\n    var longestPalindromeLengthStart\
    \ = 0\n    var longestPalindromeLengthEnd = 0\n    var longestPalindromeLengthStartReverse\
    \ = 0\n    var longestPalindromeLengthEndReverse = 0\n    var longestPalindromeLengthStartReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverse = 0\n    var longestPalindromeLengthStartReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverseReverse = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n  \
    \  var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n  \
    \  var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n  \
    \  var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n  \
    \  var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n\
    \    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n    var longestPalindromeLengthStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeLengthEndReverseReverseReverseReverse = 0\n  \
    \  var longestPalindromeLengthStartReverseReverseReverseReverse = 0\n    var longestP",
  "    if string == \"\" {\n        return \"\"\n    }\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        longestPalindromeLength = 0\n        for j := 0; j < len(string);\
    \ j++ {\n            if string[i] == string[j] {\n                longestPalindromeLength\
    \ += 1\n            }\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = string[longestPalindromeLength..<len(string)]\
    \ + string[longestPalindromeLength..<len(string)].reverse()\n        }\n    }\n\
    \    return longestPalindrome", "    var result = \"\"\n    var longest = 0\n\
    \    for c in string {\n        if c != string[longest] {\n            longest\
    \ = longest\n        } else {\n            longest = longest + 1\n        }\n\
    \    }\n    for i := longest - 1; i >= 0; i-- {\n        result = result + string[i]\n\
    \    }\n    return result", "\tlet reversedString = reverseString(string)\n\t\
    let longestPalindrome = longestPalindromeFromReversedString(reversedString)\n\t\
    return string + longestPalindrome", "    var reversedString = string\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for character\
    \ in reversedString {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = reversedString\n            }\n        }\
    \ else {\n            longestPalindromeLength = 0\n        }\n    }\n    return\
    \ longestPalindrome", "    var result = \"\"\n    var longest = 0\n    for character\
    \ in string {\n        if character == character[longest] {\n            longest++\n\
    \        } else {\n            longest = 0\n        }\n        if longest > 0\
    \ {\n            result += String(character[longest...])\n        }\n    }\n \
    \   if longest > 0 {\n        result += String(character[longest...])\n    }\n\
    \    return result", "    var result = \"\"\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n    for character in string {\n        if\
    \ character == character {\n            longestPalindromeLength += 1\n       \
    \     if longestPalindromeLength > longestPalindrome.length {\n              \
    \  longestPalindrome = string\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ character {\n            result += character\n        } else {\n           \
    \ result += character + longestPalindrome[longestPalindrome.length - longestPalindromeLength]\n\
    \        }\n    }\n    return result", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    var reversed = \"\"\n    var longest = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if string[i] != string[string.length - 1 - i]\
    \ {\n            longest = i\n            break\n        }\n    }\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] != string[string.length - 1\
    \ - i] {\n            reversed = reversed + string[i]\n        }\n    }\n    return\
    \ string + reversed", "\tlet reversed = string.reversed()\n\tlet prefix = reversed.prefix(string:\
    \ string)\n\tlet suffix = reversed.suffix(string: string)\n\treturn prefix + suffix",
  "\tlet length = string.characters.count\n\tlet reverse = string.reverse()\n\tlet\
    \ prefix = reverse.substringToIndex(advance(string.startIndex, length - 1))\n\t\
    return prefix + reverse", "\tlet reversed = string.reversed()\n\tlet prefixLength\
    \ = string.count - reversed.count\n\treturn string + reversed[prefixLength..<string.count]",
  "\tlet reverse = string.reversed()\n\tlet prefix = reverse.prefix(string: string)\n\
    \treturn prefix + reverse", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n    var longestPalindrome = string\n    var longestPalindromeLength = string.length\n\
    \    var longestPalindromeIndex = string.length - 1\n    for index in 0..<longestPalindromeLength\
    \ {\n        let currentChar = string[index]\n        let nextChar = string[index\
    \ + 1]\n        if currentChar == nextChar {\n            longestPalindromeIndex\
    \ -= 1\n        } else {\n            break\n        }\n    }\n    for index in\
    \ 0..<longestPalindromeLength {\n        let currentChar = string[index]\n   \
    \     let nextChar = string[index + 1]\n        if currentChar == nextChar {\n\
    \            longestPalindromeLength -= 1\n        } else {\n            break\n\
    \        }\n    }\n    if longestPalindromeLength > longestPalindromeIndex {\n\
    \        longestPalindrome = string[longestPalindromeIndex..<longestPalindromeLength].reversed()\n\
    \    }\n    return longestPalindrome", "    var reversedString = \"\"\n    var\
    \ longestPalindrome = \"\"\n    for character in string {\n        reversedString\
    \ += String(character).reversed()\n        if longestPalindrome == \"\" {\n  \
    \          longestPalindrome = reversedString\n        } else {\n            if\
    \ longestPalindrome == reversedString {\n                longestPalindrome = longestPalindrome\
    \ + character\n            } else {\n                return longestPalindrome\n\
    \            }\n        }\n    }\n    return longestPalindrome", "    var reversedString\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    for character in string {\n        if character == character {\n    \
    \        reversedString += character\n        } else {\n            if longestPalindromeLength\
    \ < reversedString.count {\n                longestPalindrome = reversedString\n\
    \                longestPalindromeLength = reversedString.count\n            }\n\
    \            reversedString = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ < reversedString.count {\n        longestPalindrome = reversedString\n     \
    \   longestPalindromeLength = reversedString.count\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n    var reversed = \"\"\n\
    \    var longest = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ != string[longest] {\n            longest = i\n        }\n    }\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] != string[longest] {\n     \
    \       reversed = reversed + string[i]\n        }\n    }\n    return reversed\
    \ + string[longest]", "    var palindrome = \"\"\n    var longestPalindrome =\
    \ \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex =\
    \ 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixStartIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndex = 0\n    var longestPalindromeSuffixStartIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var\
    \ longestPalindromeSuffixStartIndexIsPalindrome = false\n    var longestPalindromeSuffixEndIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixStartIndexIsPalindrome = false\n   \
    \ var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var longestPalindromeSuffixStartIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var\
    \ longestPalindromeSuffixStartIndexIsPalindrome = false\n    var longestPalindromeSuffixEndIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixStartIndexIsPalindrome = false\n   \
    \ var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var longestPalindromeSuffixStartIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var\
    \ longestPalindromeSuffixStartIndexIsPalindrome = false\n    var longestPalindromeSuffixEndIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixStartIndexIsPalindrome = false\n   \
    \ var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var longestPalindromeSuffixStartIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var\
    \ longestPalindromeSuffixStartIndexIsPalindrome = false\n    var longestPalindromeSuffixEndIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixStartIndexIsPalindrome = false\n   \
    \ var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var longestPalindromeSuffixStartIndexIsPalindrome\
    \ = false\n    var longestPalindromeSuffixEndIndexIsPalindrome = false\n    var\
    \ longestPalindromeSuffixStartIndexIsP", "    let longestPalindrome = longestPalindrome(string:\
    \ string)\n    let reversedString = reverseString(string: string)\n    return\
    \ longestPalindrome + reversedString", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    for index in 0..<string.count {\n        let char = string[index]\n\
    \        if char == char.reversed() {\n            result += string[index..<string.count]\n\
    \            longestPalindrome = string[index..<string.count]\n            longestPalindromeLength\
    \ = longestPalindrome.count\n            longestPalindromeIndex = index\n    \
    \    }\n    }\n    if longestPalindromeLength > 0 {\n        result += string[longestPalindromeIndex..<string.count]\n\
    \    }\n    return result", "    if string == \"\" {\n        return \"\"\n  \
    \  }\n\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n\
    \    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex =\
    \ 0\n\n    for index in 0..<string.characters.count {\n        let currentChar\
    \ = string.characters[index]\n\n        if currentChar == currentChar.reversed()\
    \ {\n            let currentPalindrome = string.substring(from: longestPalindromeStartIndex,\
    \ to: longestPalindromeEndIndex)\n            if currentPalindrome.characters.count\
    \ == longestPalindromeLength {\n                longestPalindrome = currentPalindrome\n\
    \                longestPalindromeLength = currentPalindrome.characters.count\n\
    \                longestPalindromeStartIndex = index\n                longestPalindromeEndIndex\
    \ = index\n            } else {\n                longestPalindromeLength = 0\n\
    \                longestPalindromeStartIndex = index\n                longestPalindromeEndIndex\
    \ = index\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n            longestPalindromeStartIndex = index\n            longestPalindromeEndIndex\
    \ = index\n        }\n    }\n\n    return longestPalindrome", "    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = string\n            }\n        } else {\n      \
    \      longestPalindromeLength = 0\n        }\n    }\n    return longestPalindrome",
  "    if string == \"\" {\n        return \"\"\n    }\n\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n\n    for character in string\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            longestPalindromeLength = 0\n        }\n\
    \n        if longestPalindromeLength > longestPalindromePrefixLength {\n     \
    \       longestPalindromePrefixLength = longestPalindromeLength\n        }\n\n\
    \        if longestPalindromeLength > longestPalindromeSuffixLength {\n      \
    \      longestPalindromeSuffixLength = longestPalindromeLength\n        }\n\n\
    \        if longestPalindromeLength > longestPalindromePrefixLength && longestPalindromeLength\
    \ > longestPalindromeSuffixLength {\n            longestPalindrome = string\n\
    \        }\n    }\n\n    return longestPalindrome", "    if string == \"\" {\n\
    \        return \"\"\n    }\n    var reversed = \"\"\n    var longest = 0\n  \
    \  for i := 0; i < len(string); i++ {\n        if string[i] != string[longest]\
    \ {\n            longest = i\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] != string[longest] {\n            reversed = string[longest]\
    \ + string[i] + reversed\n        }\n    }\n    return reversed"]
stop_tokens:
- "\n}"
