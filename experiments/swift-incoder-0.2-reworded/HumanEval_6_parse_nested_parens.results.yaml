language: swift
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_levels = [Int]()\n    var paren_max_levels\
    \ = [Int]()\n    var paren_levels_str = [String]()\n    var paren_max_levels_str\
    \ = [String]()\n    var paren_levels_str_len = 0\n    var paren_max_levels_str_len\
    \ = 0\n    var paren_levels_str_lens = [Int]()\n    var paren_max_levels_str_lens\
    \ = [Int]()\n    var paren_levels_str_lens_len = 0\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_lens\
    \ = [Int]()\n    var paren_levels_str_lens_lens_len = 0\n    var paren_max_levels_str_lens_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens_lens = [Int]()\n    var paren_max_levels_str_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_str_lens_lens_lens_len = 0\n    var paren_max_levels_str_lens_lens_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens_lens_lens = [Int]()\n    var paren_max_levels_str_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_str_lens_lens_lens_lens_len = 0\n    var paren_max_levels_str_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens_lens_lens_lens = [Int]()\n    var paren_max_levels_str_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_str_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_max_levels_str_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_str_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_max_levels_str_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_str_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_max_levels_str_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens_lens_lens_lens_lens_lens = [Int\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp98mtsnck.swift:42:67: error: expected ']' in container literal\
    \ expression\n    var paren_levels_str_lens_lens_lens_lens_lens_lens_lens = [Int\n\
    \                                                                  ^\n/tmp/tmp98mtsnck.swift:42:63:\
    \ note: to match this opening '['\n    var paren_levels_str_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int\n                                                              ^\n/tmp/tmp98mtsnck.swift:42:63:\
    \ error: expected member name or constructor call after type name\n    var paren_levels_str_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int\n                                                              ^\n/tmp/tmp98mtsnck.swift:42:64:\
    \ note: add arguments after the type to construct a value of the type\n    var\
    \ paren_levels_str_lens_lens_lens_lens_lens_lens_lens = [Int\n               \
    \                                                ^\n                         \
    \                                         ()\n/tmp/tmp98mtsnck.swift:42:64: note:\
    \ use '.self' to reference the type object\n    var paren_levels_str_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int\n                                                               ^\n \
    \                                                                 .self\n/tmp/tmp98mtsnck.swift:8:9:\
    \ warning: initialization of variable 'level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp98mtsnck.swift:9:9: warning: initialization of variable 'max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp98mtsnck.swift:10:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp98mtsnck.swift:11:9: warning: initialization of variable 'paren_max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_max_level = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp98mtsnck.swift:12:9:\
    \ warning: i"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_index2 = 0\n    var paren_char_index3\
    \ = 0\n    var paren_char_index4 = 0\n    var paren_char_index5 = 0\n    var paren_char_index6\
    \ = 0\n    var paren_char_index7 = 0\n    var paren_char_index8 = 0\n    var paren_char_index9\
    \ = 0\n    var paren_char_index10 = 0\n    var paren_char_index11 = 0\n    var\
    \ paren_char_index12 = 0\n    var paren_char_index13 = 0\n    var paren_char_index14\
    \ = 0\n    var paren_char_index15 = 0\n    var paren_char_index16 = 0\n    var\
    \ paren_char_index17 = 0\n    var paren_char_index18 = 0\n    var paren_char_index19\
    \ = 0\n    var paren_char_index20 = 0\n    var paren_char_index21 = 0\n    var\
    \ paren_char_index22 = 0\n    var paren_char_index23 = 0\n    var paren_char_index24\
    \ = 0\n    var paren_char_index25 = 0\n    var paren_char_index26 = 0\n    var\
    \ paren_char_index27 = 0\n    var paren_char_index28 = 0\n    var paren_char_index29\
    \ = 0\n    var paren_char_index30 = 0\n    var paren_char_index31 = 0\n    var\
    \ paren_char_index32 = 0\n    var paren_char_index33 = 0\n    var paren_char_index34\
    \ = 0\n    var paren_char_index35 = 0\n    var paren_char_index36 = 0\n    var\
    \ paren_char_index37 = 0\n    var paren_char_index38 = 0\n    var paren_char_index39\
    \ = 0\n    var paren_char_index40 = 0\n    var paren_char_index41 = 0\n    var\
    \ paren_char_index42 = 0\n    var paren_char_index43 = 0\n    var paren_char_index44\
    \ = 0\n    var paren_char_index45 = 0\n    var paren_char_index46 = 0\n    var\
    \ paren_char_index47 = 0\n    var paren_char_index48 = 0\n    var paren_char_index49\
    \ = 0\n    var paren_char_index50 = 0\n    var paren_char_index51 = 0\n    var\
    \ paren_char_index52 = 0\n    var paren_char_index53 = 0\n    var paren_char_index54\
    \ = 0\n    var paren_char_index55 = 0\n    var paren_char_index56 = 0\n    var\
    \ paren_char_index57 = 0\n    var paren_char_index58 = 0\n    var paren_char_index59\
    \ = 0\n    var paren_char_index60\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7d85ik.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char_index60\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_next = 0\n    var paren_char_next_index = 0\n    var\
    \ paren_char_next_count = 0\n    var paren_char_next_next_index = 0\n    var paren_char_next_next_count\
    \ = 0\n    var paren_char_next_next_next_index = 0\n    var paren_char_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_index = 0\n    var\
    \ paren_char_next_next_next_next_next_next_next_count = 0\n    var paren_char_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_count = 0\n\
    \    var paren_char_next_next_next_next_next_next_next_next_index = 0\n    var\
    \ paren_char_next_next_next_next_next_next_next_next_next_count = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6y65_vql.swift:29:9: error: invalid redeclaration of 'paren_char_next_next_next_next_next_next_next_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_index = 0\n        ^\n\
    /tmp/tmp6y65_vql.swift:27:9: note: 'paren_char_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp6y65_vql.swift:36:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_next_count'\n    var\
    \ paren_char_next_next_next_next_next_next_next_next_next_next_count = 0\n   \
    \     ^\n/tmp/tmp6y65_vql.swift:34:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_count'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmp6y65_vql.swift:37:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_next_index'\n    var\
    \ paren_char_next_next_next_next_next_next_next_next_next_next_index = 0\n   \
    \     ^\n/tmp/tmp6y65_vql.swift:35:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp6y65_vql.swift:42:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count'\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmp6y65_vql.swift:40:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmp6y65_vql.swift:43:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp6y65_vql.swift:41:9: note: 'paren_char_next_next_next_next_next_next_next"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_chars: [String] = []\n    var paren_char_indexes: [Int] =\
    \ []\n    var paren_char_indexes_to_remove: [Int] = []\n    var paren_char_indexes_to_add:\
    \ [Int] = []\n    var paren_char_indexes_to_add_count: [Int] = []\n    var paren_char_indexes_to_add_counts:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max: [Int] = []\n    var\
    \ paren_char_indexes_to_add_counts_max_index: [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexs:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_count: [Int]\
    \ = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts: [Int] = []\n\
    \    var paren_char_indexes_to_add_counts_max_indexes_counts_max: [Int] = []\n\
    \    var paren_char_indexes_to_add_counts_max_indexes_counts_max_index: [Int]\
    \ = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexs:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_count:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_index:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexs:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexes_count:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexes_counts:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexes_counts_max:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexes_counts_max_index:\
    \ [Int] = []\n    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexes_counts_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1mi24jox.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_char_indexes_to_add_counts_max_indexes_counts_max_indexes_counts_max_indexes_counts_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzx23ifim.swift:23:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23ifim.swift:22:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23ifim.swift:26:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23ifim.swift:25:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23ifim.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23ifim.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23ifim.swift:30:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpzx23if"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp40atbzd8.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp40atbzd8.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp40atbzd8.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp40atbzd8.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp40atbzd8.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp40atbzd8.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp40atbzd8.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp40atbzd8.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp40atbzd8.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp40atbzd8.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp40atbzd8.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp40atbzd8.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp40atbzd8.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc8421e9e.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpc8421e9e.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpc8421e9e.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpc8421e9e.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpc8421e9e.swift:16:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpc8421e9e.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpc8421e9e.swift:17:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpc8421e9e.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpc8421e9e.swift:18:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpc8421e9e.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpc8421e9e.swift:19:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpc8421e9e.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpc8421e9e.swift:20:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpc8421e9e.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpc8421e9e.swift:21:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpc8421e9e.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpc8421e9e.swift:22:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpc8421e9e.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpc8421e9e.swift:23:9: error:"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_count =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_start = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char_count = 0\n   \
    \ var paren_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprnfc0cyo.swift:54:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for char in paren_string {\n        if char == '(' {\n            paren_count\
    \ += 1\n        } else if char == ')' {\n            paren_count -= 1\n      \
    \      if paren_count == 0 {\n                levels.append(level)\n         \
    \   }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdd6mtjp9.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpdd6mtjp9.swift:14:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_char = \"\"\n    var paren_level_char_length = 0\n\
    \    var paren_level_char_length_index = 0\n    var paren_level_char_length_index2\
    \ = 0\n    var paren_level_char_length_index3 = 0\n    var paren_level_char_length_index4\
    \ = 0\n    var paren_level_char_length_index5 = 0\n    var paren_level_char_length_index6\
    \ = 0\n    var paren_level_char_length_index7 = 0\n    var paren_level_char_length_index8\
    \ = 0\n    var paren_level_char_length_index9 = 0\n    var paren_level_char_length_index10\
    \ = 0\n    var paren_level_char_length_index11 = 0\n    var paren_level_char_length_index12\
    \ = 0\n    var paren_level_char_length_index13 = 0\n    var paren_level_char_length_index14\
    \ = 0\n    var paren_level_char_length_index15 = 0\n    var paren_level_char_length_index16\
    \ = 0\n    var paren_level_char_length_index17 = 0\n    var paren_level_char_length_index18\
    \ = 0\n    var paren_level_char_length_index19 = 0\n    var paren_level_char_length_index20\
    \ = 0\n    var paren_level_char_length_index21 = 0\n    var paren_level_char_length_index22\
    \ = 0\n    var paren_level_char_length_index23 = 0\n    var paren_level_char_length_index24\
    \ = 0\n    var paren_level_char_length_index25 = 0\n    var paren_level_char_length_index26\
    \ = 0\n    var paren_level_char_length_index27 = 0\n    var paren_level_char_length_index28\
    \ = 0\n    var paren_level_char_length_index29 = 0\n    var paren_level_char_length_index30\
    \ = 0\n    var paren_level_char_length_index31 = 0\n    var paren_level_char_length_index32\
    \ = 0\n    var paren_level_char_length_index33 = 0\n    var paren_level_char_length_index34\
    \ = 0\n    var paren_level_char_length_index35 = 0\n    var paren_level_char_length_index36\
    \ = 0\n    var paren_level_char_length_index37 = 0\n    var paren_level_char_length_index38\
    \ = 0\n    var paren_level_char_length_index39 = 0\n    var paren_level_char_length_index40\
    \ = 0\n    var paren_level_char_length_index41 = 0\n    var paren_level_char_length_index42\
    \ = 0\n    var paren_level_char_length_index43 = 0\n    var paren_level_char_length_index44\
    \ = 0\n    var paren_level_char_length_index45 = 0\n    var paren_level_char_length_index46\
    \ = 0\n    var paren_level_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt2zfc84r.swift:62:9: error: type annotation missing in pattern\n\
    \    var paren_level_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_stack = [String]()\n    for index,\
    \ char in enumerate(paren_string) {\n        if char == \"(\" {\n            paren_stack.append(String(char))\n\
    \            paren_count++\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n                max_level_index = index\n\
    \            }\n        } else if char == \")\" {\n            level--\n     \
    \       if level == 0 {\n                paren_stack.removeLast()\n          \
    \      paren_count--\n            }\n        }\n    }\n    if paren_count > 0\
    \ {\n        fatalError(\"Unbalanced parenthesis\")\n    }\n    return [max_level_index\
    \ + 1, max_level + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpj3jmxxqv.swift:13:14: error: expected 'in' after for-each pattern\n\
    \    for index, char in enumerate(paren_string) {\n             ^\n/tmp/tmpj3jmxxqv.swift:13:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, char in\
    \ enumerate(paren_string) {\n             ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_char_char_length\
    \ = 0\n    var paren_char_char_char_length = 0\n    var paren_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_length = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_length = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1pwexnxm.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_index = 0\n    var paren_level\
    \ = 0\n    var paren_level_paren_index = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq6_gb8_3.swift:17:9: error: invalid redeclaration of 'paren_level_paren_level_index'\n\
    \    var paren_level_paren_level_index = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:16:9:\
    \ note: 'paren_level_paren_level_index' previously declared here\n    var paren_level_paren_level_index\
    \ = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_paren_level_index'\n    var paren_level_paren_level_index = 0\n\
    \        ^\n/tmp/tmpq6_gb8_3.swift:16:9: note: 'paren_level_paren_level_index'\
    \ previously declared here\n    var paren_level_paren_level_index = 0\n      \
    \  ^\n/tmp/tmpq6_gb8_3.swift:19:9: error: invalid redeclaration of 'paren_level_paren_level_index'\n\
    \    var paren_level_paren_level_index = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:16:9:\
    \ note: 'paren_level_paren_level_index' previously declared here\n    var paren_level_paren_level_index\
    \ = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_paren_level_index'\n    var paren_level_paren_level_index = 0\n\
    \        ^\n/tmp/tmpq6_gb8_3.swift:16:9: note: 'paren_level_paren_level_index'\
    \ previously declared here\n    var paren_level_paren_level_index = 0\n      \
    \  ^\n/tmp/tmpq6_gb8_3.swift:21:9: error: invalid redeclaration of 'paren_level_paren_level_index'\n\
    \    var paren_level_paren_level_index = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:16:9:\
    \ note: 'paren_level_paren_level_index' previously declared here\n    var paren_level_paren_level_index\
    \ = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_paren_level_index'\n    var paren_level_paren_level_index = 0\n\
    \        ^\n/tmp/tmpq6_gb8_3.swift:16:9: note: 'paren_level_paren_level_index'\
    \ previously declared here\n    var paren_level_paren_level_index = 0\n      \
    \  ^\n/tmp/tmpq6_gb8_3.swift:23:9: error: invalid redeclaration of 'paren_level_paren_level_index'\n\
    \    var paren_level_paren_level_index = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:16:9:\
    \ note: 'paren_level_paren_level_index' previously declared here\n    var paren_level_paren_level_index\
    \ = 0\n        ^\n/tmp/tmpq6_gb8_3.swift:24"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_count_max\
    \ = 0\n    var parens_count_max_parens = 0\n    var parens_count_max_parens_count\
    \ = 0\n    var parens_count_max_parens_count_max = 0\n    var parens_count_max_parens_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max = 0\n    var parens_count_max_parens_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max = 0\n   \
    \ var parens_count_max_parens_count_max_count_max_count_max_count = 0\n    var\
    \ parens_count_max_parens_count_max_count_max_count_max_count_max = 0\n    var\
    \ parens_count_max_parens_count_max_count_max_count_max_count_max_count = 0\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9wwv0soc.swift:30:9: error: invalid redeclaration of 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp9wwv0soc.swift:29:9: note: 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp9wwv0soc.swift:33:9: error: invalid redeclaration of\
    \ 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp9wwv0soc.swift:32:9: note: 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp9wwv0soc.swift:34:9: error: invalid redeclaration of\
    \ 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp9wwv0soc.swift:32:9: note: 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp9wwv0soc.swift:37:9: error: type annotation missing\
    \ in pattern\n    var parens_count_max_parens_count_max_count_max_count_max_"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_count = 0\n    var paren_count_stack\
    \ = [Int]()\n    var paren_count_stack_index = 0\n    var paren_count_stack_index2\
    \ = 0\n    var paren_count_stack_index3 = 0\n    var paren_count_stack_index4\
    \ = 0\n    var paren_count_stack_index5 = 0\n    var paren_count_stack_index6\
    \ = 0\n    var paren_count_stack_index7 = 0\n    var paren_count_stack_index8\
    \ = 0\n    var paren_count_stack_index9 = 0\n    var paren_count_stack_index10\
    \ = 0\n    var paren_count_stack_index11 = 0\n    var paren_count_stack_index12\
    \ = 0\n    var paren_count_stack_index13 = 0\n    var paren_count_stack_index14\
    \ = 0\n    var paren_count_stack_index15 = 0\n    var paren_count_stack_index16\
    \ = 0\n    var paren_count_stack_index17 = 0\n    var paren_count_stack_index18\
    \ = 0\n    var paren_count_stack_index19 = 0\n    var paren_count_stack_index20\
    \ = 0\n    var paren_count_stack_index21 = 0\n    var paren_count_stack_index22\
    \ = 0\n    var paren_count_stack_index23 = 0\n    var paren_count_stack_index24\
    \ = 0\n    var paren_count_stack_index25 = 0\n    var paren_count_stack_index26\
    \ = 0\n    var paren_count_stack_index27 = 0\n    var paren_count_stack_index28\
    \ = 0\n    var paren_count_stack_index29 = 0\n    var paren_count_stack_index30\
    \ = 0\n    var paren_count_stack_index31 = 0\n    var paren_count_stack_index32\
    \ = 0\n    var paren_count_stack_index33 = 0\n    var paren_count_stack_index34\
    \ = 0\n    var paren_count_stack_index35 = 0\n    var paren_count_stack_index36\
    \ = 0\n    var paren_count_stack_index37 = 0\n    var paren_count_stack_index38\
    \ = 0\n    var paren_count_stack_index39 = 0\n    var paren_count_stack_index40\
    \ = 0\n    var paren_count_stack_index41 = 0\n    var paren_count_stack_index42\
    \ = 0\n    var paren_count_stack_index43 = 0\n    var paren_count_stack_index44\
    \ = 0\n    var paren_count_stack_index45 = 0\n    var paren_count_stack_index46\
    \ = 0\n    var paren_count_stack_index47 = 0\n    var paren_count_stack_index48\
    \ = 0\n    var paren_count_stack_index49 = 0\n    var paren_count_stack_index50\
    \ = 0\n    var paren_count_stack_index51 = 0\n    var paren_count_stack_index52\
    \ = 0\n    var paren_count_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcpxakk1x.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren_count_\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_chars = [String]()\n    var paren_char_indexes = [Int]()\n\
    \    var paren_char_indexes_count = [Int]()\n    var paren_char_indexes_count_index\
    \ = 0\n    var paren_char_indexes_count_index1 = 0\n    var paren_char_indexes_count_index2\
    \ = 0\n    var paren_char_indexes_count_index3 = 0\n    var paren_char_indexes_count_index4\
    \ = 0\n    var paren_char_indexes_count_index5 = 0\n    var paren_char_indexes_count_index6\
    \ = 0\n    var paren_char_indexes_count_index7 = 0\n    var paren_char_indexes_count_index8\
    \ = 0\n    var paren_char_indexes_count_index9 = 0\n    var paren_char_indexes_count_index10\
    \ = 0\n    var paren_char_indexes_count_index11 = 0\n    var paren_char_indexes_count_index12\
    \ = 0\n    var paren_char_indexes_count_index13 = 0\n    var paren_char_indexes_count_index14\
    \ = 0\n    var paren_char_indexes_count_index15 = 0\n    var paren_char_indexes_count_index16\
    \ = 0\n    var paren_char_indexes_count_index17 = 0\n    var paren_char_indexes_count_index18\
    \ = 0\n    var paren_char_indexes_count_index19 = 0\n    var paren_char_indexes_count_index20\
    \ = 0\n    var paren_char_indexes_count_index21 = 0\n    var paren_char_indexes_count_index22\
    \ = 0\n    var paren_char_indexes_count_index23 = 0\n    var paren_char_indexes_count_index24\
    \ = 0\n    var paren_char_indexes_count_index25 = 0\n    var paren_char_indexes_count_index26\
    \ = 0\n    var paren_char_indexes_count_index27 = 0\n    var paren_char_indexes_count_index28\
    \ = 0\n    var paren_char_indexes_count_index29 = 0\n    var paren_char_indexes_count_index30\
    \ = 0\n    var paren_char_indexes_count_index31 = 0\n    var paren_char_indexes_count_index32\
    \ = 0\n    var paren_char_indexes_count_index33 = 0\n    var paren_char_indexes_count_index34\
    \ = 0\n    var paren_char_indexes_count_index35 = 0\n    var paren_char_indexes_count_index36\
    \ = 0\n    var paren_char_indexes_count_index37 = 0\n    var paren_char_indexes_count_index38\
    \ = 0\n    var paren_char_indexes_count_index39 = 0\n    var paren_char_indexes_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp135qy27d.swift:57:9: error: type annotation missing in pattern\n\
    \    var paren_char_indexes_count_\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_char = \"\"\n    var paren_level_char_length = 0\n\
    \    var paren_level_char_array = [String]()\n    var paren_level_char_array_index\
    \ = 0\n    var paren_level_char_array_length = 0\n    var paren_level_char_array_max\
    \ = 0\n    var paren_level_char_array_max_index = 0\n    var paren_level_char_array_max_length\
    \ = 0\n    var paren_level_char_array_max_char = \"\"\n    var paren_level_char_array_max_char_length\
    \ = 0\n    var paren_level_char_array_max_char_array = [String]()\n    var paren_level_char_array_max_char_array_index\
    \ = 0\n    var paren_level_char_array_max_char_array_length = 0\n    var paren_level_char_array_max_char_array_max\
    \ = 0\n    var paren_level_char_array_max_char_array_max_index = 0\n    var paren_level_char_array_max_char_array_max_length\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char = \"\"\n    var\
    \ paren_level_char_array_max_char_array_max_char_length = 0\n    var paren_level_char_array_max_char_array_max_char_array\
    \ = [String]()\n    var paren_level_char_array_max_char_array_max_char_array_index\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char_array_length = 0\n\
    \    var paren_level_char_array_max_char_array_max_char_array_max = 0\n    var\
    \ paren_level_char_array_max_char_array_max_char_array_max_index = 0\n    var\
    \ paren_level_char_array_max_char_array_max_char_array_max_length = 0\n    var\
    \ paren_level_char_array_max_char_array_max_char_array_max_char = \"\"\n    var\
    \ paren_level_char_array_max_char_array_max_char_array_max_char_length = 0\n \
    \   var paren_level_char_array_max_char_array_max_char_array_max_char_array =\
    \ [String]()\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_index\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_length\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_max\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_max_index\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_max_length\
    \ = 0\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_max_char\
    \ = \"\"\n    var paren_level_char_array_max_char_array_max_char_array_max_char_array_max_char_length\
    \ = 0\n    var paren_level_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa2waq7ky.swift:48:9: error: type annotation missing in pattern\n\
    \    var paren_level_\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_next = 0\n    var paren_char_next_index = 0\n    var\
    \ paren_char_next_count = 0\n    var paren_char_next_next_index = 0\n    var paren_char_next_next_count\
    \ = 0\n    var paren_char_next_next_next_index = 0\n    var paren_char_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_index = 0\n    var\
    \ paren_char_next_next_next_next_next_next_next_count = 0\n    var paren_char_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_count = 0\n    var\
    \ paren_char_next_next_next_next_next_next_next_next_index = 0\n    var paren_char_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_index = 0\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_count = 0\n \
    \   var paren_char_next_next_next_next_next_next_next_next_next_index = 0\n  \
    \  var paren_char_next_next_next_next_next_next_next_next_next_count = 0\n   \
    \ var paren_char_next_next_next_next_next_next_next_next_next_index = 0\n    var\
    \ paren_char_next_next_next_next_next_next_next_next_next_count = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiomrj18o.swift:29:9: error: invalid redeclaration of 'paren_char_next_next_next_next_next_next_next_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_index = 0\n        ^\n\
    /tmp/tmpiomrj18o.swift:27:9: note: 'paren_char_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:30:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_count'\n    var paren_char_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:28:9: note: 'paren_char_next_next_next_next_next_next_next_count'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:33:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_index'\n    var paren_char_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:31:9: note: 'paren_char_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:36:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_count'\n    var paren_char_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:34:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_count'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_count\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:37:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_index'\n    var paren_char_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:35:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmpiomrj18o.swift:38:9: error: invalid redeclaration of\
    \ 'p"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var max_level_group_count = 0\n    var groups = [String]()\n    for\
    \ c in paren_string.unicodeScalars {\n        if c == parenthesisOpeningBracket\
    \ {\n            level += 1\n            if level > max_level {\n            \
    \    max_level = level\n                max_level_group = level\n            \
    \    max_level_group_count = 0\n            }\n        } else if c == parenthesisClosingBracket\
    \ {\n            level -= 1\n            if level < 0 {\n                level\
    \ = 0\n            }\n        } else if c == parenthesisOpeningBracket.unicodeScalars\
    \ {\n            level = 0\n        }\n        if level == 0 {\n            groups.append(String(unicodeScalars:\
    \ c))\n        }\n    }\n    if level > 0 {\n        max_level_group_count = level\n\
    \    }\n    if max_level_group_count > 0 {\n        max_level_group = max_level_group_count\n\
    \    }\n    return max_level_group\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgqdtxu3_.swift:14:17: error: cannot find 'parenthesisOpeningBracket'\
    \ in scope\n        if c == parenthesisOpeningBracket {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqdtxu3_.swift:21:24: error: cannot find 'parenthesisClosingBracket' in\
    \ scope\n        } else if c == parenthesisClosingBracket {\n                \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgqdtxu3_.swift:26:24: error: cannot\
    \ find 'parenthesisOpeningBracket' in scope\n        } else if c == parenthesisOpeningBracket.unicodeScalars\
    \ {\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgqdtxu3_.swift:30:27:\
    \ error: no exact matches in call to initializer \n            groups.append(String(unicodeScalars:\
    \ c))\n                          ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(unicodeScalars:)', expected: '(_:)')\n    @inlinable\
    \ public init(_ scalar: Unicode.Scalar)\n                      ^\nSwift.String:4:23:\
    \ note: incorrect labels for candidate (have: '(unicodeScalars:)', expected: '(_:)')\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmpgqdtxu3_.swift:39:12: error: cannot convert\
    \ return expression of type 'Int' to return type '[Int]'\n    return max_level_group\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var paren_level = 0\n    var paren_parens = 0\n    var paren_parens_level\
    \ = 0\n    var paren_parens_parens = 0\n    var paren_parens_parens_level = 0\n\
    \    var paren_parens_parens_parens = 0\n    var paren_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens = 0\n  \
    \  var paren_parens_parens_parens_parens_parens_parens_parens_level = 0\n    var\
    \ paren_parens_parens_parens_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcbzq_gv8.swift:37:9: error: invalid redeclaration of 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmpcbzq_gv8.swift:35:9: note: 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\
    \ previously declared here\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for\
    \ ch in paren_string.characters {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(paren_count)\n     \
    \       }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpj8dwum_4.swift:11:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpj8dwum_4.swift:13:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpj8dwum_4.swift:10:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_count = 0\n    var paren_count_stack\
    \ = [Int]()\n    var paren_count_stack_index = 0\n    var paren_count_stack_index2\
    \ = 0\n    var paren_count_stack_index3 = 0\n    var paren_count_stack_index4\
    \ = 0\n    var paren_count_stack_index5 = 0\n    var paren_count_stack_index6\
    \ = 0\n    var paren_count_stack_index7 = 0\n    var paren_count_stack_index8\
    \ = 0\n    var paren_count_stack_index9 = 0\n    var paren_count_stack_index10\
    \ = 0\n    var paren_count_stack_index11 = 0\n    var paren_count_stack_index12\
    \ = 0\n    var paren_count_stack_index13 = 0\n    var paren_count_stack_index14\
    \ = 0\n    var paren_count_stack_index15 = 0\n    var paren_count_stack_index16\
    \ = 0\n    var paren_count_stack_index17 = 0\n    var paren_count_stack_index18\
    \ = 0\n    var paren_count_stack_index19 = 0\n    var paren_count_stack_index20\
    \ = 0\n    var paren_count_stack_index21 = 0\n    var paren_count_stack_index22\
    \ = 0\n    var paren_count_stack_index23 = 0\n    var paren_count_stack_index24\
    \ = 0\n    var paren_count_stack_index25 = 0\n    var paren_count_stack_index26\
    \ = 0\n    var paren_count_stack_index27 = 0\n    var paren_count_stack_index28\
    \ = 0\n    var paren_count_stack_index29 = 0\n    var paren_count_stack_index30\
    \ = 0\n    var paren_count_stack_index31 = 0\n    var paren_count_stack_index32\
    \ = 0\n    var paren_count_stack_index33 = 0\n    var paren_count_stack_index34\
    \ = 0\n    var paren_count_stack_index35 = 0\n    var paren_count_stack_index36\
    \ = 0\n    var paren_count_stack_index37 = 0\n    var paren_count_stack_index38\
    \ = 0\n    var paren_count_stack_index39 = 0\n    var paren_count_stack_index40\
    \ = 0\n    var paren_count_stack_index41 = 0\n    var paren_count_stack_index42\
    \ = 0\n    var paren_count_stack_index43 = 0\n    var paren_count_stack_index44\
    \ = 0\n    var paren_count_stack_index45 = 0\n    var paren_count_stack_index46\
    \ = 0\n    var paren_count_stack_index47 = 0\n    var paren_count_stack_index48\
    \ = 0\n    var paren_count_stack_index49 = 0\n    var paren_count_stack_index50\
    \ = 0\n    var paren_count_stack_index51 = 0\n    var paren_count_stack_index52\
    \ = 0\n    var paren_count_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcpxakk1x.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren_count_\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnyb_7xu7.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    for idx, char in\
    \ enumerate(paren_string) {\n        if char == \"(\" {\n            paren_count\
    \ += 1\n            levels.append(paren_level)\n            paren_level += 1\n\
    \        } else if char == \")\" {\n            paren_count -= 1\n           \
    \ if paren_count == 0 {\n                levels.append(paren_level)\n        \
    \        paren_level -= 1\n            }\n        } else if char == \" \" {\n\
    \            if paren_count > 0 {\n                levels.append(paren_level)\n\
    \                paren_level -= 1\n            }\n        } else {\n         \
    \   levels.append(0)\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprt8gyoqo.swift:13:12: error: expected 'in' after for-each pattern\n\
    \    for idx, char in enumerate(paren_string) {\n           ^\n/tmp/tmprt8gyoqo.swift:13:12:\
    \ error: expected Sequence expression for for-each loop\n    for idx, char in\
    \ enumerate(paren_string) {\n           ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char: Char\n    var paren_char_next:\
    \ Char\n    var paren_char_prev: Char\n    var paren_char_prev2: Char\n    var\
    \ paren_char_next2: Char\n    var paren_char_prev3: Char\n    var paren_char_next3:\
    \ Char\n    var paren_char_prev4: Char\n    var paren_char_next4: Char\n    var\
    \ paren_char_prev5: Char\n    var paren_char_next5: Char\n    var paren_char_prev6:\
    \ Char\n    var paren_char_next6: Char\n    var paren_char_prev7: Char\n    var\
    \ paren_char_next7: Char\n    var paren_char_prev8: Char\n    var paren_char_next8:\
    \ Char\n    var paren_char_prev9: Char\n    var paren_char_next9: Char\n    var\
    \ paren_char_prev10: Char\n    var paren_char_next10: Char\n    var paren_char_prev11:\
    \ Char\n    var paren_char_next11: Char\n    var paren_char_prev12: Char\n   \
    \ var paren_char_next12: Char\n    var paren_char_prev13: Char\n    var paren_char_next13:\
    \ Char\n    var paren_char_prev14: Char\n    var paren_char_next14: Char\n   \
    \ var paren_char_prev15: Char\n    var paren_char_next15: Char\n    var paren_char_prev16:\
    \ Char\n    var paren_char_next16: Char\n    var paren_char_prev17: Char\n   \
    \ var paren_char_next17: Char\n    var paren_char_prev18: Char\n    var paren_char_next18:\
    \ Char\n    var paren_char_prev19: Char\n    var paren_char_next19: Char\n   \
    \ var paren_char_prev20: Char\n    var paren_char_next20: Char\n    var paren_char_prev21:\
    \ Char\n    var paren_char_next21: Char\n    var paren_char_prev22: Char\n   \
    \ var paren_char_next22: Char\n    var paren_char_prev23: Char\n    var paren_char_next23:\
    \ Char\n    var paren_char_prev24: Char\n    var paren_char_next24: Char\n   \
    \ var paren_char_prev25: Char\n    var paren_char_next25: Char\n    var paren_char_prev26:\
    \ Char\n    var paren_char_next26: Char\n    var paren_char_prev27: Char\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm5c6hsz_.swift:15:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpm5c6hsz_.swift:16:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpm5c6hsz_.swift:17:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpm5c6hsz_.swift:18:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev2: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:19:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next2: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:20:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev3: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:21:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next3: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:22:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev4: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:23:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next4: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:24:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev5: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:25:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next5: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:26:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev6: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:27:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next6: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:28:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev7: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:29:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next7: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:30:27: error: cannot find type 'Char' in scope\n\
    \    var paren_"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = \"\"\n    for c in paren_string.unicodeScalars {\n        if paren_char_count\
    \ == 0 {\n            paren_chars = String(c)\n        } else {\n            paren_chars\
    \ = paren_chars + String(c)\n        }\n        if paren_chars.contains(\"(\"\
    ) {\n            paren_char_count++\n        }\n        if paren_chars.contains(\"\
    )\") {\n            paren_char_count--\n        }\n        if paren_char_count\
    \ == 0 {\n            paren_count++\n        }\n        if paren_char_count >\
    \ max_level_parens {\n            max_level = level\n            max_level_parens\
    \ = paren_count\n        }\n        level++\n    }\n    return Array(max_level..<max_level\
    \ + max_level_parens)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp88vuqknt.swift:21:29: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_char_count++\n                     \
    \       ^~\n/tmp/tmp88vuqknt.swift:24:29: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            paren_char_count--\n              \
    \              ^~\n/tmp/tmp88vuqknt.swift:27:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmp88vuqknt.swift:33:14: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start_index\
    \ = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n\
    \    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var\
    \ paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index\
    \ = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n\
    \    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var\
    \ paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index\
    \ = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n\
    \    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var\
    \ paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index\
    \ = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n\
    \    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var\
    \ paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index\
    \ = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n\
    \    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var\
    \ paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index\
    \ = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n\
    \    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var\
    \ paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index\
    \ = 0\n    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n\
    \    var paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var\
    \ paren_level_end_index = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index\
    \ = 0\n    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n\
    \    var paren_level_start_index = 0\n    var paren_level_end_index = 0\n    var\
    \ paren_level_start_index = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpib6xsukb.swift:21:9: error: invalid redeclaration of 'paren_level_start_index'\n\
    \    var paren_level_start_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:19:9:\
    \ note: 'paren_level_start_index' previously declared here\n    var paren_level_start_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_end_index'\n    var paren_level_end_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:20:9:\
    \ note: 'paren_level_end_index' previously declared here\n    var paren_level_end_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:23:9: error: invalid redeclaration of\
    \ 'paren_level_start_index'\n    var paren_level_start_index = 0\n        ^\n\
    /tmp/tmpib6xsukb.swift:19:9: note: 'paren_level_start_index' previously declared\
    \ here\n    var paren_level_start_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_end_index'\n    var paren_level_end_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:20:9: note: 'paren_level_end_index' previously\
    \ declared here\n    var paren_level_end_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_start_index'\n    var paren_level_start_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:19:9: note: 'paren_level_start_index'\
    \ previously declared here\n    var paren_level_start_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:26:9:\
    \ error: invalid redeclaration of 'paren_level_end_index'\n    var paren_level_end_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:20:9: note: 'paren_level_end_index' previously\
    \ declared here\n    var paren_level_end_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:27:9:\
    \ error: invalid redeclaration of 'paren_level_start_index'\n    var paren_level_start_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:19:9: note: 'paren_level_start_index'\
    \ previously declared here\n    var paren_level_start_index = 0\n        ^\n/tmp/tmpib6xsukb.swift:28:9:\
    \ error: invalid redeclaration of 'paren_level_end_index'\n    var paren_level_end_index\
    \ = 0\n        ^\n/tmp/tmpib6xsukb.swift:20:9: note: 'paren_level_end_index' previously\
    \ declared here\n    "
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_pos = 0\n    var paren_char_len = paren_string.characters.count\n\
    \    var paren_char_char_pos = 0\n    var paren_char_char_len = paren_char.characters.count\n\
    \    var paren_char_len = paren_string.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6iqba0ij.swift:60:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp6iqba0ij.swift:15:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    var paren_char_len = paren_string.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6iqba0ij.swift:17:42: error: 'characters' is unavailable:\
    \ Please use String directly\n    var paren_char_char_len = paren_char.characters.count\n\
    \                                         ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp6iqba0ij.swift:18:39: error: 'characters'\
    \ is unavailable: Please use String directly\n    var paren_char_len = paren_string.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6iqba0ij.swift:18:9: error: invalid redeclaration of\
    \ 'paren_char_len'\n    var paren_char_len = paren_string.characters.count\n \
    \       ^\n/tmp/tmp6iqba0ij.swift:15:9: note: 'paren_char_len' previously declared\
    \ here\n    var paren_char_len = paren_string.characters.count\n        ^\n/tmp/tmp6iqba0ij.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_char_pos'\n    var paren_char_char_pos\
    \ = 0\n        ^\n/tmp/tmp6iqba0ij.swift:16:9: note: 'paren_char_char_pos' previously\
    \ declared here\n    var paren_char_char_pos = 0\n        ^\n/tmp/tmp6iqba0ij.swift:20:42:\
    \ error: 'characters' is unavailable: Please use String directly\n    var paren_char_char_len\
    \ = paren_char.characters.count\n                                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6iqba0ij.swift:20:9:\
    \ error: invalid redeclaration of 'paren_char_char_len'\n    var paren_char_char_len\
    \ = paren_char.charact"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_char_count = 0\n   \
    \ var paren_open_char_count = 0\n    var paren_close_char_count = 0\n    var paren_level_char\
    \ = \"\"\n    var paren_open_char = \"\"\n    var paren_close_char = \"\"\n  \
    \  var paren_level_char_count = 0\n    var paren_open_char_count = 0\n    var\
    \ paren_close_char_count = 0\n    var paren_level_char_array = [Int]()\n    var\
    \ paren_open_char_array = [Int]()\n    var paren_close_char_array = [Int]()\n\
    \    var paren_level_char_array_count = 0\n    var paren_open_char_array_count\
    \ = 0\n    var paren_close_char_array_count = 0\n    var paren_level_char_array_string\
    \ = \"\"\n    var paren_open_char_array_string = \"\"\n    var paren_close_char_array_string\
    \ = \"\"\n    var paren_level_char_array_string_count = 0\n    var paren_open_char_array_string_count\
    \ = 0\n    var paren_close_char_array_string_count = 0\n    var paren_level_char_array_string_array\
    \ = [Int]()\n    var paren_open_char_array_string_array = [Int]()\n    var paren_close_char_array_string_array\
    \ = [Int]()\n    var paren_level_char_array_string_array_count = 0\n    var paren_open_char_array_string_array_count\
    \ = 0\n    var paren_close_char_array_string_array_count = 0\n    var paren_level_char_array_string_array_string\
    \ = \"\"\n    var paren_open_char_array_string_array_string = \"\"\n    var paren_close_char_array_string_array_string\
    \ = \"\"\n    var paren_level_char_array_string_array_string_count = 0\n    var\
    \ paren_open_char_array_string_array_string_count = 0\n    var paren_close_char_array_string_array_string_count\
    \ = 0\n    var paren_level_char_array_string_array_string_array = [Int]()\n  \
    \  var paren_open_char_array_string_array_string_array = [Int]()\n    var paren_close_char_array_string_array_string_array\
    \ = [Int]()\n    var paren_level_char_array_string_array_string_array_count =\
    \ 0\n    var paren_open_char_array_string_array_string_array_count = 0\n    var\
    \ paren_close_char_array_string_array_string_array_count = 0\n    var paren_level_char_array_string_array_string_array_string\
    \ = \"\"\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbafisve5.swift:28:9: error: invalid redeclaration of 'paren_level_char_count'\n\
    \    var paren_level_char_count = 0\n        ^\n/tmp/tmpbafisve5.swift:22:9: note:\
    \ 'paren_level_char_count' previously declared here\n    var paren_level_char_count\
    \ = 0\n        ^\n/tmp/tmpbafisve5.swift:29:9: error: invalid redeclaration of\
    \ 'paren_open_char_count'\n    var paren_open_char_count = 0\n        ^\n/tmp/tmpbafisve5.swift:23:9:\
    \ note: 'paren_open_char_count' previously declared here\n    var paren_open_char_count\
    \ = 0\n        ^\n/tmp/tmpbafisve5.swift:30:9: error: invalid redeclaration of\
    \ 'paren_close_char_count'\n    var paren_close_char_count = 0\n        ^\n/tmp/tmpbafisve5.swift:24:9:\
    \ note: 'paren_close_char_count' previously declared here\n    var paren_close_char_count\
    \ = 0\n        ^\n/tmp/tmpbafisve5.swift:62:9: error: type annotation missing\
    \ in pattern\n    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmz9fm0an.swift:78:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmz9fm0an.swift:15:23: error: empty collection literal requires an\
    \ explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpmz9fm0an.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:17:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmpmz9fm0an.swift:13:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmpmz9fm0an.swift:18:30: error:\
    \ empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:18:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpmz9fm0an.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpmz9fm0an.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpmz9fm0an.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmpmz9fm0an.swift:20:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:20:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpmz9fm0an.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpmz9fm0an.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpmz9fm0an.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmpmz9fm0an.swift:22:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:22:"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_index2 = 0\n    var paren_levels_index3 = 0\n    var\
    \ paren_levels_index4 = 0\n    var paren_levels_index5 = 0\n    var paren_levels_index6\
    \ = 0\n    var paren_levels_index7 = 0\n    var paren_levels_index8 = 0\n    var\
    \ paren_levels_index9 = 0\n    var paren_levels_index10 = 0\n    var paren_levels_index11\
    \ = 0\n    var paren_levels_index12 = 0\n    var paren_levels_index13 = 0\n  \
    \  var paren_levels_index14 = 0\n    var paren_levels_index15 = 0\n    var paren_levels_index16\
    \ = 0\n    var paren_levels_index17 = 0\n    var paren_levels_index18 = 0\n  \
    \  var paren_levels_index19 = 0\n    var paren_levels_index20 = 0\n    var paren_levels_index21\
    \ = 0\n    var paren_levels_index22 = 0\n    var paren_levels_index23 = 0\n  \
    \  var paren_levels_index24 = 0\n    var paren_levels_index25 = 0\n    var paren_levels_index26\
    \ = 0\n    var paren_levels_index27 = 0\n    var paren_levels_index28 = 0\n  \
    \  var paren_levels_index29 = 0\n    var paren_levels_index30 = 0\n    var paren_levels_index31\
    \ = 0\n    var paren_levels_index32 = 0\n    var paren_levels_index33 = 0\n  \
    \  var paren_levels_index34 = 0\n    var paren_levels_index35 = 0\n    var paren_levels_index36\
    \ = 0\n    var paren_levels_index37 = 0\n    var paren_levels_index38 = 0\n  \
    \  var paren_levels_index39 = 0\n    var paren_levels_index40 = 0\n    var paren_levels_index41\
    \ = 0\n    var paren_levels_index42 = 0\n    var paren_levels_index43 = 0\n  \
    \  var paren_levels_index44 = 0\n    var paren_levels_index45 = 0\n    var paren_levels_index46\
    \ = 0\n    var paren_levels_index47 = 0\n    var paren_levels_index48 = 0\n  \
    \  var paren_levels_index49 = 0\n    var paren_levels_index50 = 0\n    var paren_levels_index51\
    \ = 0\n    var paren_levels_index52 = 0\n    var paren_levels_index53 = 0\n  \
    \  var paren_levels_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi8lg_nys.swift:65:9: error: type annotation missing in pattern\n\
    \    var paren_levels_index\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_current\
    \ = 0\n    var paren_levels_count_current_max = 0\n    var paren_levels_count_current_min\
    \ = 0\n    var paren_levels_count_current_sum = 0\n    var paren_levels_count_current_sum2\
    \ = 0\n    var paren_levels_count_current_sum3 = 0\n    var paren_levels_count_current_sum4\
    \ = 0\n    var paren_levels_count_current_sum5 = 0\n    var paren_levels_count_current_sum6\
    \ = 0\n    var paren_levels_count_current_sum7 = 0\n    var paren_levels_count_current_sum8\
    \ = 0\n    var paren_levels_count_current_sum9 = 0\n    var paren_levels_count_current_sum10\
    \ = 0\n    var paren_levels_count_current_sum11 = 0\n    var paren_levels_count_current_sum12\
    \ = 0\n    var paren_levels_count_current_sum13 = 0\n    var paren_levels_count_current_sum14\
    \ = 0\n    var paren_levels_count_current_sum15 = 0\n    var paren_levels_count_current_sum16\
    \ = 0\n    var paren_levels_count_current_sum17 = 0\n    var paren_levels_count_current_sum18\
    \ = 0\n    var paren_levels_count_current_sum19 = 0\n    var paren_levels_count_current_sum20\
    \ = 0\n    var paren_levels_count_current_sum21 = 0\n    var paren_levels_count_current_sum22\
    \ = 0\n    var paren_levels_count_current_sum23 = 0\n    var paren_levels_count_current_sum24\
    \ = 0\n    var paren_levels_count_current_sum25 = 0\n    var paren_levels_count_current_sum26\
    \ = 0\n    var paren_levels_count_current_sum27 = 0\n    var paren_levels_count_current_sum28\
    \ = 0\n    var paren_levels_count_current_sum29 = 0\n    var paren_levels_count_current_sum30\
    \ = 0\n    var paren_levels_count_current_sum31 = 0\n    var paren_levels_count_current_sum32\
    \ = 0\n    var paren_levels_count_current_sum33 = 0\n    var paren_levels_count_current_sum34\
    \ = 0\n    var paren_levels_count_current_sum35 = 0\n    var paren_levels_count_current_sum36\
    \ = 0\n    var paren_levels_count_current_sum37 = 0\n    var paren_levels_count_current_sum38\
    \ = 0\n    var paren_levels_count_current_sum39 = 0\n    var paren_level\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzxnf7y4v.swift:57:9: error: type annotation missing in pattern\n\
    \    var paren_level\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    for s in paren_string.characters {\n        if\
    \ s == '(' {\n            level += 1\n            if level > max_level {\n   \
    \             max_level = level\n                max_level_parens = parens\n \
    \           }\n        } else if s == ')' {\n            level -= 1\n        \
    \    if level < 0 {\n                panic(\"unbalanced parentheses\")\n     \
    \       }\n            if level > max_level {\n                max_level = level\n\
    \                max_level_parens = parens\n            }\n        } else {\n\
    \            parens += 1\n        }\n    }\n    if parens > max_level_parens {\n\
    \        panic(\"unbalanced parentheses\")\n    }\n    return [max_level + 1,\
    \ max_level_parens + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsnvlun6j.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if s == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpsnvlun6j.swift:19:24: error: single-quoted string literal found, use '\"\
    '\n        } else if s == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpsnvlun6j.swift:12:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for s in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsnvlun6j.swift:22:17: error: cannot find 'panic' in scope\n     \
    \           panic(\"unbalanced parentheses\")\n                ^~~~~\n/tmp/tmpsnvlun6j.swift:33:9:\
    \ error: cannot find 'panic' in scope\n        panic(\"unbalanced parentheses\"\
    )\n        ^~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_stack = [String]()\n    var\
    \ paren_stack_string = \"\"\n    var paren_stack_string_count = 0\n    var paren_stack_level\
    \ = 0\n    var paren_stack_max_level = 0\n    var paren_stack_level_count = 0\n\
    \    var paren_stack_level_char_count = 0\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren_stack_level_char = \"\
    \"\n    var paren_stack_level_char = \"\"\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4efpnusb.swift:20:9: error: invalid redeclaration of 'paren_stack_level_char'\n\
    \    var paren_stack_level_char = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:19:9:\
    \ note: 'paren_stack_level_char' previously declared here\n    var paren_stack_level_char\
    \ = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:21:9: error: invalid redeclaration\
    \ of 'paren_stack_level_char'\n    var paren_stack_level_char = \"\"\n       \
    \ ^\n/tmp/tmp4efpnusb.swift:19:9: note: 'paren_stack_level_char' previously declared\
    \ here\n    var paren_stack_level_char = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:22:9:\
    \ error: invalid redeclaration of 'paren_stack_level_char'\n    var paren_stack_level_char\
    \ = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:19:9: note: 'paren_stack_level_char'\
    \ previously declared here\n    var paren_stack_level_char = \"\"\n        ^\n\
    /tmp/tmp4efpnusb.swift:23:9: error: invalid redeclaration of 'paren_stack_level_char'\n\
    \    var paren_stack_level_char = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:19:9:\
    \ note: 'paren_stack_level_char' previously declared here\n    var paren_stack_level_char\
    \ = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:24:9: error: invalid redeclaration\
    \ of 'paren_stack_level_char'\n    var paren_stack_level_char = \"\"\n       \
    \ ^\n/tmp/tmp4efpnusb.swift:19:9: note: 'paren_stack_level_char' previously declared\
    \ here\n    var paren_stack_level_char = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:25:9:\
    \ error: invalid redeclaration of 'paren_stack_level_char'\n    var paren_stack_level_char\
    \ = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:19:9: note: 'paren_stack_level_char'\
    \ previously declared here\n    var paren_stack_level_char = \"\"\n        ^\n\
    /tmp/tmp4efpnusb.swift:26:9: error: invalid redeclaration of 'paren_stack_level_char'\n\
    \    var paren_stack_level_char = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:19:9:\
    \ note: 'paren_stack_level_char' previously declared here\n    var paren_stack_level_char\
    \ = \"\"\n        ^\n/tmp/tmp4efpnusb.swift:27:9: error: invalid redeclaration\
    \ of 'paren_stack_level_char'\n    var paren_stack_level_char = \"\"\n       \
    \ ^\n/tmp/tmp4efpnusb.swift:19:9: note: 'paren_stack_level_char' previously decl"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = \"\"\n    for c in paren_string.unicodeScalars {\n        if paren_char_count\
    \ == 0 {\n            paren_chars += c\n        }\n        if paren_char_count\
    \ == 1 {\n            paren_char_count = 0\n            paren_chars += c\n   \
    \     }\n        if paren_char_count == 2 {\n            paren_char_count = 0\n\
    \            paren_chars += c\n        }\n        if paren_char_count == 3 {\n\
    \            paren_char_count = 0\n            paren_chars += c\n        }\n \
    \       if paren_char_count == 4 {\n            paren_char_count = 0\n       \
    \     paren_chars += c\n        }\n        if paren_char_count == 5 {\n      \
    \      paren_char_count = 0\n            paren_chars += c\n        }\n       \
    \ if paren_char_count == 6 {\n            paren_char_count = 0\n            paren_chars\
    \ += c\n        }\n        if paren_char_count == 7 {\n            paren_char_count\
    \ = 0\n            paren_chars += c\n        }\n        if paren_char_count ==\
    \ 8 {\n            paren_char_count = 0\n            paren_chars += c\n      \
    \  }\n        if paren_char_count == 9 {\n            paren_char_count = 0\n \
    \           paren_chars += c\n        }\n        if paren_char_count == 10 {\n\
    \            paren_char_count = 0\n            paren_chars += c\n        }\n \
    \       if paren_char_count == 11 {\n            paren_char_count = 0\n      \
    \      paren_chars += c\n        }\n        if paren_char_count == 12 {\n    \
    \        paren_char_count = 0\n            paren_chars += c\n        }\n     \
    \   if paren_char_count == 13 {\n            paren_char_count = 0\n          \
    \  paren_chars += c\n        }\n        if paren_char_count == 14 {\n        \
    \    paren_char_count = 0\n            paren_chars += c\n        }\n        if\
    \ paren_char_count == 15 {\n            paren_char_count = 0\n            paren_chars\
    \ += c\n        }\n        if paren_char_count == 16 {\n            paren_char_count\
    \ = 0\n            paren_chars += c\n        }\n        if paren_char_count ==\
    \ 17 {\n            paren_char_count = 0\n            paren_chars += c\n     \
    \   }\n        if paren_char_count == 18 {\n            paren_char_count = 0\n\
    \            paren_chars += c\n        }\n        if paren_char_count == 19 {\n\
    \            paren_char_count = 0\n            paren_chars += c\n        }\n \
    \       if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4xa81aba.swift:94:11: error: expected expression, var, or let in\
    \ 'if' condition\n        if \n          ^\n/tmp/tmp4xa81aba.swift:112:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp4xa81aba.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp4xa81aba.swift:16:25:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            paren_chars += c\n                        ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n/tmp/tmp4xa81aba.swift:20:25:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            paren_chars += c\n                        ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n/tmp/tmp4xa81aba.swift:24:25:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            paren_chars += c\n                        ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n/tmp/tmp4xa81aba.swift:28:25:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            paren_chars += c\n                        ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Othe"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    for char in paren_string.characters {\n        if char == '('\
    \ {\n            level += 1\n            levels.append(level)\n        } else\
    \ if char == ')' {\n            level -= 1\n            if level == 0 {\n    \
    \            levels = levels[0..<levels.count-1]\n                levels.append(level)\n\
    \            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc92hf2by.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpc92hf2by.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpc92hf2by.swift:11:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc92hf2by.swift:18:32: error: cannot assign value of\
    \ type 'ArraySlice<Int>' to type '[Int]'\n                levels = levels[0..<levels.count-1]\n\
    \                         ~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    for char in paren_string {\n        if char == \"(\" {\n       \
    \     parens_count += 1\n            parens_string += char\n        } else if\
    \ char == \")\" {\n            parens_count -= 1\n            if parens_count\
    \ == 0 {\n                levels.append(level)\n                parens_level =\
    \ 0\n            } else {\n                parens_level += parens_count\n    \
    \        }\n            parens_string += char\n        } else {\n            parens_string\
    \ += char\n        }\n        if parens_level == 0 {\n            level = 0\n\
    \        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvi4sfzea.swift:17:30: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            parens_string += char\n    \
    \                         ^\n/tmp/tmpvi4sfzea.swift:26:30: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            parens_string\
    \ += char\n                             ^\n/tmp/tmpvi4sfzea.swift:28:30: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            parens_string += char\n                             ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    for char in paren_string.characters {\n        if char == '('\
    \ {\n            level += 1\n            if level > max_level {\n            \
    \    max_level = level\n            }\n        } else if char == ')' {\n     \
    \       level -= 1\n            if level < 0 {\n                level = 0\n  \
    \          }\n        } else {\n            level = 0\n        }\n        levels.append(level)\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf1yttky4.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpf1yttky4.swift:17:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpf1yttky4.swift:11:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_levels_size =\
    \ 0\n    var paren_levels_sizes = [Int]()\n    var paren_levels_sizes_sum = 0\n\
    \    var paren_levels_sizes_sums = [Int]()\n    var paren_levels_sizes_sums_max\
    \ = 0\n    var paren_levels_sizes_sums_max_index = 0\n    var paren_levels_sizes_sums_max_indexs\
    \ = [Int]()\n    var paren_levels_sizes_sums_max_indexs_sum = 0\n    var paren_levels_sizes_sums_max_indexs_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_max_indexs_sums_max = 0\n    var\
    \ paren_levels_sizes_sums_max_indexs_sums_max_index = 0\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs\
    \ = [Int]()\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sum =\
    \ 0\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums = [Int]()\n\
    \    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max = 0\n   \
    \ var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_index = 0\n\
    \    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs =\
    \ [Int]()\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sum\
    \ = 0\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max\
    \ = 0\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_index\
    \ = 0\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs\
    \ = [Int]()\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sum\
    \ = 0\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0tuamyo1.swift:35:103: error: expected ']' in container literal\
    \ expression\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int\n                                                                   \
    \                                   ^\n/tmp/tmp0tuamyo1.swift:35:99: note: to\
    \ match this opening '['\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int\n                                                                   \
    \                               ^\n/tmp/tmp0tuamyo1.swift:35:99: error: expected\
    \ member name or constructor call after type name\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int\n                                                                   \
    \                               ^\n/tmp/tmp0tuamyo1.swift:35:100: note: add arguments\
    \ after the type to construct a value of the type\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int\n                                                                   \
    \                                ^\n                                         \
    \                                                             ()\n/tmp/tmp0tuamyo1.swift:35:100:\
    \ note: use '.self' to reference the type object\n    var paren_levels_sizes_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums_max_indexs_sums\
    \ = [Int\n                                                                   \
    \                                ^\n                                         \
    \                                                             .self\n/tmp/tmp0tuamyo1.swift:8:9:\
    \ warning: initialization of variable 'levels' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp0tuamyo1.swift:9:9: warning: initialization of variable 'paren_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens\
    \ = [Int]()\n    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpogkzf411.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count\
    \ = 0\n    var paren_level_parens_count_max = 0\n    var paren_level_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count = 0\n    var paren_level_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens = 0\n    var\
    \ paren_level_parens_count_max_parens_count_max_parens_count = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2r0iaepd.swift:34:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for ch in paren_string.unicodeScalars {\n\
    \        if ch == '(' {\n            paren_count += 1\n            paren_level\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(level)\n           \
    \     level = 0\n            }\n        } else if ch == ' ' {\n            level\
    \ = 0\n        } else {\n            level += 1\n        }\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9h0fw9rj.swift:13:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmp9h0fw9rj.swift:16:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmp9h0fw9rj.swift:22:25: error: single-quoted\
    \ string literal found, use '\"'\n        } else if ch == ' ' {\n            \
    \            ^~~\n                        \" \"\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    var levels_stack = [Int]()\n    var paren_count = 0\n    var\
    \ paren_count_stack = [Int]()\n    var paren_count_stack_index = 0\n    var paren_count_stack_size\
    \ = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n\
    \    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n   \
    \ var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n    var\
    \ paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n    var paren_count_stack_index\
    \ = 0\n    var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n\
    \    var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n   \
    \ var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n    var\
    \ paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size\
    \ = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n\
    \    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n   \
    \ var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n    var\
    \ paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n    var paren_count_stack_index\
    \ = 0\n    var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n\
    \    var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n   \
    \ var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n    var\
    \ paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size\
    \ = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n\
    \    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n   \
    \ var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n    var\
    \ paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n    var paren_count_stack_index\
    \ = 0\n    var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n\
    \    var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n   \
    \ var paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n    var\
    \ paren_count_stack_size = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size\
    \ = 0\n    var paren_count_stack_index = 0\n    var paren_count_stack_size = 0\n\
    \    var paren_count_stack_index = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1o6azusy.swift:16:9: error: invalid redeclaration of 'paren_count_stack_index'\n\
    \    var paren_count_stack_index = 0\n        ^\n/tmp/tmp1o6azusy.swift:14:9:\
    \ note: 'paren_count_stack_index' previously declared here\n    var paren_count_stack_index\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:17:9: error: invalid redeclaration of\
    \ 'paren_count_stack_size'\n    var paren_count_stack_size = 0\n        ^\n/tmp/tmp1o6azusy.swift:15:9:\
    \ note: 'paren_count_stack_size' previously declared here\n    var paren_count_stack_size\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:18:9: error: invalid redeclaration of\
    \ 'paren_count_stack_index'\n    var paren_count_stack_index = 0\n        ^\n\
    /tmp/tmp1o6azusy.swift:14:9: note: 'paren_count_stack_index' previously declared\
    \ here\n    var paren_count_stack_index = 0\n        ^\n/tmp/tmp1o6azusy.swift:19:9:\
    \ error: invalid redeclaration of 'paren_count_stack_size'\n    var paren_count_stack_size\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:15:9: note: 'paren_count_stack_size'\
    \ previously declared here\n    var paren_count_stack_size = 0\n        ^\n/tmp/tmp1o6azusy.swift:20:9:\
    \ error: invalid redeclaration of 'paren_count_stack_index'\n    var paren_count_stack_index\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:14:9: note: 'paren_count_stack_index'\
    \ previously declared here\n    var paren_count_stack_index = 0\n        ^\n/tmp/tmp1o6azusy.swift:21:9:\
    \ error: invalid redeclaration of 'paren_count_stack_size'\n    var paren_count_stack_size\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:15:9: note: 'paren_count_stack_size'\
    \ previously declared here\n    var paren_count_stack_size = 0\n        ^\n/tmp/tmp1o6azusy.swift:22:9:\
    \ error: invalid redeclaration of 'paren_count_stack_index'\n    var paren_count_stack_index\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:14:9: note: 'paren_count_stack_index'\
    \ previously declared here\n    var paren_count_stack_index = 0\n        ^\n/tmp/tmp1o6azusy.swift:23:9:\
    \ error: invalid redeclaration of 'paren_count_stack_size'\n    var paren_count_stack_size\
    \ = 0\n        ^\n/tmp/tmp1o6azusy.swift:15:9: note: 'paren_count_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_string_count = 0\n    var\
    \ parens_string = \"\"\n    var parens_string_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_count = 0\n    var parens_string = \"\"\n    var\
    \ parens_string_count = 0\n    var parens_string = \"\"\n    var parens_string_count\
    \ = 0\n    var parens_string = \"\"\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp92572zk1.swift:88:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp92572zk1.swift:15:9: error: invalid redeclaration of 'parens_string'\n\
    \    var parens_string = \"\"\n        ^\n/tmp/tmp92572zk1.swift:13:9: note: 'parens_string'\
    \ previously declared here\n    var parens_string = \"\"\n        ^\n/tmp/tmp92572zk1.swift:16:9:\
    \ error: invalid redeclaration of 'parens_string_count'\n    var parens_string_count\
    \ = 0\n        ^\n/tmp/tmp92572zk1.swift:14:9: note: 'parens_string_count' previously\
    \ declared here\n    var parens_string_count = 0\n        ^\n/tmp/tmp92572zk1.swift:17:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmp92572zk1.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp92572zk1.swift:18:9:\
    \ error: invalid redeclaration of 'parens_string_count'\n    var parens_string_count\
    \ = 0\n        ^\n/tmp/tmp92572zk1.swift:14:9: note: 'parens_string_count' previously\
    \ declared here\n    var parens_string_count = 0\n        ^\n/tmp/tmp92572zk1.swift:19:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmp92572zk1.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp92572zk1.swift:20:9:\
    \ error: invalid redeclaration of 'parens_string_count'\n    var parens_string_count\
    \ = 0\n        ^\n/tmp/tmp92572zk1.swift:14:9: note: 'parens_string_count' previously\
    \ declared here\n    var parens_string_count = 0\n        ^\n/tmp/tmp92572zk1.swift:21:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmp92572zk1.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmp92572zk1.swift:22:9:\
    \ error: invalid redeclaration of 'parens_string_count'\n    var parens_string_count\
    \ = 0\n        ^\n/tmp/tmp92572zk1.swift:14:9: note: 'parens_string_count' previously\
    \ declared here\n    var parens_string_count = 0\n        ^\n/tmp/tmp92572zk1.swift:23:9:\
    \ error: invalid redeclaration of 'parens_stri"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_max = 0\n    var paren_level_parens_count_max_min\
    \ = 0\n    var paren_level_parens_count_max_min_index = 0\n    var paren_level_parens_count_max_min_index_index\
    \ = 0\n    var paren_level_parens_count_max_min_index2 = 0\n    var paren_level_parens_count_max_min_index2_index\
    \ = 0\n    var paren_level_parens_count_max_min_index3 = 0\n    var paren_level_parens_count_max_min_index3_index\
    \ = 0\n    var paren_level_parens_count_max_min_index4 = 0\n    var paren_level_parens_count_max_min_index4_index\
    \ = 0\n    var paren_level_parens_count_max_min_index5 = 0\n    var paren_level_parens_count_max_min_index5_index\
    \ = 0\n    var paren_level_parens_count_max_min_index6 = 0\n    var paren_level_parens_count_max_min_index6_index\
    \ = 0\n    var paren_level_parens_count_max_min_index7 = 0\n    var paren_level_parens_count_max_min_index7_index\
    \ = 0\n    var paren_level_parens_count_max_min_index8 = 0\n    var paren_level_parens_count_max_min_index8_index\
    \ = 0\n    var paren_level_parens_count_max_min_index9 = 0\n    var paren_level_parens_count_max_min_index9_index\
    \ = 0\n    var paren_level_parens_count_max_min_index10 = 0\n    var paren_level_parens_count_max_min_index10_index\
    \ = 0\n    var paren_level_parens_count_max_min_index11 = 0\n    var paren_level_parens_count_max_min_index11_index\
    \ = 0\n    var paren_level_parens_count_max_min_index12 = 0\n    var paren_level_parens_count_max_min_index12_index\
    \ = 0\n    var paren_level_parens_count_max_min_index13 = 0\n    var paren_level_parens_count_max_min_index13_index\
    \ = 0\n    var paren_level_parens_count_max_min_index14 = 0\n    var paren_level_parens_count_max_min_index14_index\
    \ = 0\n    var paren_level_parens_count_max_min_index15 = 0\n    var paren_level_parens_count_max_min_index15_index\
    \ = 0\n    var paren_level_parens_count_max_min_index16 = 0\n    var paren_level_parens_count_max_min_index16_index\
    \ = 0\n    var paren_level_parens_count_max_min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf55m7xl4.swift:50:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_max_min\n        ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjivacvxb.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpjivacvxb.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpjivacvxb.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpjivacvxb.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpjivacvxb.swift:16:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpjivacvxb.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpjivacvxb.swift:17:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpjivacvxb.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpjivacvxb.swift:18:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpjivacvxb.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpjivacvxb.swift:19:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpjivacvxb.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpjivacvxb.swift:20:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpjivacvxb.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpjivacvxb.swift:21:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpjivacvxb.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpjivacvxb.swift:22:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpjivacvxb.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpjivacvxb.swift:23:9: error:"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n\
    \    var parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp62jydy73.swift:74:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp62jydy73.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp62jydy73.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp62jydy73.swift:10:9:\
    \ warning: initialization of variable 'parens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp62jydy73.swift:11:9: warning: initialization of variable 'parens_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_level = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:12:9:\
    \ warning: initialization of variable 'parens_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:13:9: warning: initialization\
    \ of variable 'parens_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var parens_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp62jydy73.swift:14:9: warning: initialization of variable 'parens_string_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_string_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:15:9:\
    \ warning: initialization of variable 'parens_string_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_string_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:16:9: warning:\
    \ initialization of variable 'parens_string_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens_string_index3 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:17:9: warning: initialization\
    \ of variable 'parens_string_index4' was never used; consider"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = \"\"\n    for char in paren_string {\n        paren_chars = paren_chars +\
    \ char\n        if char == \"(\" {\n            paren_count = paren_count + 1\n\
    \            if paren_count > max_level_parens {\n                max_level_parens\
    \ = paren_count\n                max_level = level\n            }\n        }\n\
    \        if char == \")\" {\n            paren_count = paren_count - 1\n     \
    \       if paren_count < 0 {\n                panic(\"unexpected \")\")\n    \
    \        }\n        }\n        level = level + 1\n    }\n    if paren_count >\
    \ max_level_parens {\n        max_level_parens = paren_count\n        max_level\
    \ = level\n    }\n    return [max_level, max_level_parens]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7t2lg57r.swift:26:37: error: unterminated string literal\n    \
    \            panic(\"unexpected \")\")\n                                    ^\n\
    /tmp/tmp7t2lg57r.swift:15:37: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        paren_chars = paren_chars + char\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_char_count = 0\n   \
    \ var paren_level_char = \"\"\n    var paren_level_chars = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index =\
    \ 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n\
    \    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n \
    \   var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n  \
    \  var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n   \
    \ var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var\
    \ paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes =\
    \ []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n\
    \    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n \
    \   var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n  \
    \  var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n   \
    \ var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var\
    \ paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index =\
    \ 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n\
    \    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n \
    \   var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n  \
    \  var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n   \
    \ var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var\
    \ paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes =\
    \ []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n\
    \    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n \
    \   var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n  \
    \  var paren_level_char_index = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5f4fhf7k.swift:14:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmp5f4fhf7k.swift:16:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmp5f4fhf7k.swift:17:9: error: invalid redeclaration\
    \ of 'paren_level_char_index'\n    var paren_level_char_index = 0\n        ^\n\
    /tmp/tmp5f4fhf7k.swift:15:9: note: 'paren_level_char_index' previously declared\
    \ here\n    var paren_level_char_index = 0\n        ^\n/tmp/tmp5f4fhf7k.swift:18:36:\
    \ error: empty collection literal requires an explicit type\n    var paren_level_char_indexes\
    \ = []\n                                   ^~\n/tmp/tmp5f4fhf7k.swift:18:9: error:\
    \ invalid redeclaration of 'paren_level_char_indexes'\n    var paren_level_char_indexes\
    \ = []\n        ^\n/tmp/tmp5f4fhf7k.swift:16:9: note: 'paren_level_char_indexes'\
    \ previously declared here\n    var paren_level_char_indexes = []\n        ^\n\
    /tmp/tmp5f4fhf7k.swift:19:9: error: invalid redeclaration of 'paren_level_char_index'\n\
    \    var paren_level_char_index = 0\n        ^\n/tmp/tmp5f4fhf7k.swift:15:9: note:\
    \ 'paren_level_char_index' previously declared here\n    var paren_level_char_index\
    \ = 0\n        ^\n/tmp/tmp5f4fhf7k.swift:20:36: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_indexes = []\n         \
    \                          ^~\n/tmp/tmp5f4fhf7k.swift:20:9: error: invalid redeclaration\
    \ of 'paren_level_char_indexes'\n    var paren_level_char_indexes = []\n     \
    \   ^\n/tmp/tmp5f4fhf7k.swift:16:9: note: 'paren_level_char_indexes' previously\
    \ declared here\n    var paren_level_char_indexes = []\n        ^\n/tmp/tmp5f4fhf7k.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_char_index'\n    var paren_level_char_index\
    \ = 0\n        ^\n/tmp/tmp5f4fhf7k.swift:15:9: note: 'paren_level_char_index'\
    \ previously declared here\n    var paren_level_char_index = 0\n        ^\n/tmp/tmp5f4fhf7k.swift:22:36:\
    \ error: empty collection literal requires an explici"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk5zif71a.swift:16:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmpk5zif71a.swift:14:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpk5zif71a.swift:15:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmpk5zif71a.swift:14:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpk5zif71a.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:15:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpk5zif71a.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:14:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpk5zif71a.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:15:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpk5zif71a.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:14:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpk5zif71a.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpk5zif71a.swift:15:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpv9m3gl3h.swift:15:9: error: invalid redeclaration of 'paren_levels_count_max'\n\
    \    var paren_levels_count_max = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:13:9: note:\
    \ 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:16:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:14:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:17:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max'\n    var paren_levels_count_max = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:13:9:\
    \ note: 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:18:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:14:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:19:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max'\n    var paren_levels_count_max = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:13:9:\
    \ note: 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:20:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:14:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:21:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max'\n    var paren_levels_count_max = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:13:9:\
    \ note: 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:22:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmpv9m3gl3h.swift:14:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    v"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2kauzhao.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n \
    \       ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = paren_string.split(\" \"\
    ).map({ String($0) })\n    for paren_group in paren_groups {\n        if paren_group\
    \ == \"()\" {\n            paren_count += 1\n        }\n        if paren_group\
    \ == \"()()\" {\n            paren_count += 1\n            level += 1\n      \
    \  }\n        if paren_group == \"(())\" {\n            paren_count += 1\n   \
    \         level += 1\n        }\n        if paren_group == \"(()())\" {\n    \
    \        paren_count += 1\n            level += 1\n            level += 1\n  \
    \      }\n        if paren_group == \"(())()\" {\n            paren_count += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \    }\n        if paren_group == \"(()())()\" {\n            paren_count += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \        level += 1\n        }\n        if paren_group == \"(()())()()\" {\n \
    \           paren_count += 1\n            level += 1\n            level += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \    }\n        if paren_group == \"(()())()()()\" {\n            paren_count\
    \ += 1\n            level += 1\n            level += 1\n            level += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \    }\n        if paren_group == \"(()())()()()()\" {\n            paren_count\
    \ += 1\n            level += 1\n            level += 1\n            level += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \        level += 1\n        }\n        if paren_group == \"(()())()()()()()\"\
    \ {\n            paren_count += 1\n            level += 1\n            level +=\
    \ 1\n            level += 1\n            level += 1\n            level += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \    }\n        if paren_group == \"(()())()()()()()()\" {\n            paren_count\
    \ += 1\n            level += 1\n            level += 1\n            level += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \        level += 1\n            level += 1\n            level += 1\n        }\n\
    \        if paren_group == \"(()())()()()()()()\" {\n            paren_count +=\
    \ 1\n            level += 1\n            level += 1\n            level += 1\n\
    \            level += 1\n            level += 1\n            level += 1\n    \
    \        level += 1\n            level += 1\n            level += 1\n        \
    \    level += 1\n        }\n        if paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsyq_6njz.swift:106:17: error: expected '{' after 'if' condition\n\
    \        if paren\n                ^\n/tmp/tmpsyq_6njz.swift:124:67: error: expected\
    \ '}' at end of brace statement\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])\n                                                                  ^\n\
    /tmp/tmpsyq_6njz.swift:7:57: note: to match this opening '{'\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n                                                       \
    \ ^\n/tmp/tmpsyq_6njz.swift:12:37: error: no exact matches in call to instance\
    \ method 'split'\n    var paren_groups = paren_string.split(\" \").map({ String($0)\
    \ })\n                                    ^\nSwift.Sequence:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n/tmp/tmpsyq_6njz.swift:110:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    for c in paren_string {\n        if c == '(' {\n            parens_count\
    \ += 1\n            parens_string += c\n            parens_level += 1\n      \
    \  } else if c == ')' {\n            parens_count -= 1\n            parens_level\
    \ -= 1\n            if parens_level == 0 {\n                levels.append(parens_count)\n\
    \            }\n            parens_string += c\n        } else if parens_level\
    \ == 0 {\n            levels.append(parens_count)\n        }\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk6tr1weq.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpk6tr1weq.swift:19:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpk6tr1weq.swift:17:30: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            parens_string +=\
    \ c\n                             ^\n/tmp/tmpk6tr1weq.swift:25:30: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       parens_string += c\n                             ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_start = 0\n    var paren_end = 0\n    var paren_nesting = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_start = 0\n    var paren_nesting_end = 0\n    var\
    \ paren_nesting_nesting = 0\n    var paren_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_start = 0\n    var paren_nesting_nesting_end = 0\n   \
    \ var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_start = 0\n    var paren_nesting_nesting_nesting_nesting_end\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpn23qb1gr.swift:50:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpn23qb1gr.swift:29:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpn23qb1gr.swift:25:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpn23qb1gr.swift:30:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_start'\n\
    \    var paren_nesting_nesting_nesting_nesting_start = 0\n        ^\n/tmp/tmpn23qb1gr.swift:26:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_start' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_start = 0\n        ^\n/tmp/tmpn23qb1gr.swift:31:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_end'\n\
    \    var paren_nesting_nesting_nesting_nesting_end = 0\n        ^\n/tmp/tmpn23qb1gr.swift:27:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_end' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_end = 0\n        ^\n/tmp/tmpn23qb1gr.swift:32:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpn23qb1gr.swift:28:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpn23qb1gr.swift:33:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpn23qb1gr.swift:25:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpn23qb1gr.swift:34:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_start'\n\
    \    var paren_nesting_nesting_nesting_nesting_start = 0\n        ^\n/tmp/tmpn23qb1gr.swift:26:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_start"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjgwwktiv.swift:26:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:25:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:30:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    for c in paren_string {\n        if c == '(' {\n      \
    \      paren_count++\n        } else if c == ')' {\n            paren_count--\n\
    \            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level++\n    }\n    return levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr372vnfk.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpr372vnfk.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpr372vnfk.swift:13:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmpr372vnfk.swift:15:24: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            paren_count--\n                   \
    \    ^~\n/tmp/tmpr372vnfk.swift:20:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        paren_level++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_count_paren = 0\n    var paren_count_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren = 0\n    var paren_count_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren = 0\n    var paren_count_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_count_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1o2e4tad.swift:26:9: error: invalid redeclaration of 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp1o2e4tad.swift:25:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp1o2e4tad.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp1o2e4tad.swift:28:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp1o2e4tad.swift:31:9: error: type annotation missing\
    \ in pattern\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           levels[level] = parens\n            parens += 1\n        } else if\
    \ char == ')' {\n            levels[level] = parens\n            parens -= 1\n\
    \        } else if char == ' ' {\n            levels[level] = parens\n       \
    \ }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaqya9yuk.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpaqya9yuk.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpaqya9yuk.swift:18:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpaqya9yuk.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count\
    \ == 0 {\n            levels.append(paren_level)\n        }\n        switch c\
    \ {\n        case .OpenSquareBracket:\n            paren_count += 1\n        case\
    \ .CloseSquareBracket:\n            paren_count -= 1\n        case .OpenParenthesis:\n\
    \            paren_level += 1\n        case .CloseParenthesis:\n            paren_level\
    \ -= 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzkejlehq.swift:16:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket:\n             ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzkejlehq.swift:18:15: error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n\
    \        case .CloseSquareBracket:\n             ~^~~~~~~~~~~~~~~~~~\n/tmp/tmpzkejlehq.swift:20:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenParenthesis:\n\
    \             ~^~~~~~~~~~~~~~~\n/tmp/tmpzkejlehq.swift:22:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseParenthesis'\n        case .CloseParenthesis:\n        \
    \     ~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_char_count = 0\n    var paren_level_char_index = 0\n\
    \    var paren_level_char = \"\"\n    var paren_level_chars = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes =\
    \ []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n\
    \    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n \
    \   var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n  \
    \  var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n   \
    \ var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var\
    \ paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index =\
    \ 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n\
    \    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n \
    \   var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n  \
    \  var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n   \
    \ var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var\
    \ paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes =\
    \ []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n\
    \    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n \
    \   var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n  \
    \  var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n   \
    \ var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var\
    \ paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index =\
    \ 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n\
    \    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n \
    \   var paren_level_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm2hrx_pq.swift:17:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmpm2hrx_pq.swift:18:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmpm2hrx_pq.swift:19:9: error: invalid redeclaration\
    \ of 'paren_level_char_index'\n    var paren_level_char_index = 0\n        ^\n\
    /tmp/tmpm2hrx_pq.swift:15:9: note: 'paren_level_char_index' previously declared\
    \ here\n    var paren_level_char_index = 0\n        ^\n/tmp/tmpm2hrx_pq.swift:20:36:\
    \ error: empty collection literal requires an explicit type\n    var paren_level_char_indexes\
    \ = []\n                                   ^~\n/tmp/tmpm2hrx_pq.swift:20:9: error:\
    \ invalid redeclaration of 'paren_level_char_indexes'\n    var paren_level_char_indexes\
    \ = []\n        ^\n/tmp/tmpm2hrx_pq.swift:18:9: note: 'paren_level_char_indexes'\
    \ previously declared here\n    var paren_level_char_indexes = []\n        ^\n\
    /tmp/tmpm2hrx_pq.swift:21:9: error: invalid redeclaration of 'paren_level_char_index'\n\
    \    var paren_level_char_index = 0\n        ^\n/tmp/tmpm2hrx_pq.swift:15:9: note:\
    \ 'paren_level_char_index' previously declared here\n    var paren_level_char_index\
    \ = 0\n        ^\n/tmp/tmpm2hrx_pq.swift:22:36: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_indexes = []\n         \
    \                          ^~\n/tmp/tmpm2hrx_pq.swift:22:9: error: invalid redeclaration\
    \ of 'paren_level_char_indexes'\n    var paren_level_char_indexes = []\n     \
    \   ^\n/tmp/tmpm2hrx_pq.swift:18:9: note: 'paren_level_char_indexes' previously\
    \ declared here\n    var paren_level_char_indexes = []\n        ^\n/tmp/tmpm2hrx_pq.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_char_index'\n    var paren_level_char_index\
    \ = 0\n        ^\n/tmp/tmpm2hrx_pq.swift:15:9: note: 'paren_level_char_index'\
    \ previously declared here\n    var paren_level_char_index = 0\n        ^\n/tmp/tmpm2hrx_pq.swift:24:36:\
    \ error: empty collection literal requires an explici"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_index2 = 0\n    var paren_char_index3 = 0\n    var paren_char_index4\
    \ = 0\n    var paren_char_index5 = 0\n    var paren_char_index6 = 0\n    var paren_char_index7\
    \ = 0\n    var paren_char_index8 = 0\n    var paren_char_index9 = 0\n    var paren_char_index10\
    \ = 0\n    var paren_char_index11 = 0\n    var paren_char_index12 = 0\n    var\
    \ paren_char_index13 = 0\n    var paren_char_index14 = 0\n    var paren_char_index15\
    \ = 0\n    var paren_char_index16 = 0\n    var paren_char_index17 = 0\n    var\
    \ paren_char_index18 = 0\n    var paren_char_index19 = 0\n    var paren_char_index20\
    \ = 0\n    var paren_char_index21 = 0\n    var paren_char_index22 = 0\n    var\
    \ paren_char_index23 = 0\n    var paren_char_index24 = 0\n    var paren_char_index25\
    \ = 0\n    var paren_char_index26 = 0\n    var paren_char_index27 = 0\n    var\
    \ paren_char_index28 = 0\n    var paren_char_index29 = 0\n    var paren_char_index30\
    \ = 0\n    var paren_char_index31 = 0\n    var paren_char_index32 = 0\n    var\
    \ paren_char_index33 = 0\n    var paren_char_index34 = 0\n    var paren_char_index35\
    \ = 0\n    var paren_char_index36 = 0\n    var paren_char_index37 = 0\n    var\
    \ paren_char_index38 = 0\n    var paren_char_index39 = 0\n    var paren_char_index40\
    \ = 0\n    var paren_char_index41 = 0\n    var paren_char_index42 = 0\n    var\
    \ paren_char_index43 = 0\n    var paren_char_index44 = 0\n    var paren_char_index45\
    \ = 0\n    var paren_char_index46 = 0\n    var paren_char_index47 = 0\n    var\
    \ paren_char_index48 = 0\n    var paren_char_index49 = 0\n    var paren_char_index50\
    \ = 0\n    var paren_char_index51 = 0\n    var paren_char_index52 = 0\n    var\
    \ paren_char_index53 = 0\n    var paren_char_index54 = 0\n    var paren_char_index55\
    \ = 0\n    var paren_char_index56 = 0\n    var paren_char_index57 = 0\n    var\
    \ paren_char_index58 = 0\n    var paren_char_index59 = 0\n    var paren_char_index60\
    \ = 0\n    var paren_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbeb1h39o.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for char in paren_string.characters {\n        if char == '(' {\n    \
    \        parens_count += 1\n            parens_string += char\n        } else\
    \ if char == ')' {\n            parens_count -= 1\n            if parens_count\
    \ == 0 {\n                parens += parens_count\n                parens_count\
    \ = 0\n            }\n            parens_string += char\n        } else if char\
    \ == ' ' {\n            if parens_count > 0 {\n                parens += parens_count\n\
    \                parens_count = 0\n            }\n            parens_string +=\
    \ char\n        } else {\n            parens_string += char\n        }\n     \
    \   if parens_count > max_level_parens {\n            max_level_parens = parens_count\n\
    \            max_level = level\n        }\n        level += 1\n    }\n    if parens_count\
    \ > max_level_parens {\n        max_level_parens = parens_count\n        max_level\
    \ = level\n    }\n    return [max_level, max_level_parens, parens, parens_string]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxpidodjf.swift:15:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpxpidodjf.swift:18:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpxpidodjf.swift:25:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpxpidodjf.swift:14:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxpidodjf.swift:17:30: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            parens_string\
    \ += char\n                             ^\n/tmp/tmpxpidodjf.swift:24:30: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            parens_string += char\n                             ^\n/tmp/tmpxpidodjf.swift:30:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            parens_string += char\n                             ^\n/tmp/tmpxpidodjf.swift:32:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            parens_string += char\n                             ^\n/tmp/tmpxpidodjf.swift:44:50:\
    \ error: cannot convert value of type 'String' to expected element type 'Int'\n\
    \    return [max_level, max_level_parens, parens, parens_string]\n           \
    \                                      ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_index2\
    \ = 0\n    var paren_level_stack_index3 = 0\n    var paren_level_stack_index4\
    \ = 0\n    var paren_level_stack_index5 = 0\n    var paren_level_stack_index6\
    \ = 0\n    var paren_level_stack_index7 = 0\n    var paren_level_stack_index8\
    \ = 0\n    var paren_level_stack_index9 = 0\n    var paren_level_stack_index10\
    \ = 0\n    var paren_level_stack_index11 = 0\n    var paren_level_stack_index12\
    \ = 0\n    var paren_level_stack_index13 = 0\n    var paren_level_stack_index14\
    \ = 0\n    var paren_level_stack_index15 = 0\n    var paren_level_stack_index16\
    \ = 0\n    var paren_level_stack_index17 = 0\n    var paren_level_stack_index18\
    \ = 0\n    var paren_level_stack_index19 = 0\n    var paren_level_stack_index20\
    \ = 0\n    var paren_level_stack_index21 = 0\n    var paren_level_stack_index22\
    \ = 0\n    var paren_level_stack_index23 = 0\n    var paren_level_stack_index24\
    \ = 0\n    var paren_level_stack_index25 = 0\n    var paren_level_stack_index26\
    \ = 0\n    var paren_level_stack_index27 = 0\n    var paren_level_stack_index28\
    \ = 0\n    var paren_level_stack_index29 = 0\n    var paren_level_stack_index30\
    \ = 0\n    var paren_level_stack_index31 = 0\n    var paren_level_stack_index32\
    \ = 0\n    var paren_level_stack_index33 = 0\n    var paren_level_stack_index34\
    \ = 0\n    var paren_level_stack_index35 = 0\n    var paren_level_stack_index36\
    \ = 0\n    var paren_level_stack_index37 = 0\n    var paren_level_stack_index38\
    \ = 0\n    var paren_level_stack_index39 = 0\n    var paren_level_stack_index40\
    \ = 0\n    var paren_level_stack_index41 = 0\n    var paren_level_stack_index42\
    \ = 0\n    var paren_level_stack_index43 = 0\n    var paren_level_stack_index44\
    \ = 0\n    var paren_level_stack_index45 = 0\n    var paren_level_stack_index46\
    \ = 0\n    var paren_level_stack_index47 = 0\n    var paren_level_stack_index48\
    \ = 0\n    var paren_level_stack_index49 = 0\n    var paren_level_stack_index50\
    \ = 0\n    var paren_level_stack_index51 = 0\n    var paren_level_stack_index52\
    \ = 0\n    var paren_level_stack_index53\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpz24du1y8.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_index53\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  for char in paren_string.characters {\n        if char == \"(\" {\n       \
    \     paren_levels_string += String(char)\n            paren_level++\n       \
    \ }\n        if char == \")\" {\n            paren_levels_string += String(char)\n\
    \            paren_level--\n            if paren_level == 0 {\n              \
    \  paren_levels.append(paren_level)\n            }\n        }\n    }\n    for\
    \ paren_level in paren_levels {\n        if paren_level > max_level {\n      \
    \      max_level = paren_level\n        }\n    }\n    return paren_levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp08dd38dw.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp08dd38dw.swift:16:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_level++\n                       ^~\n\
    /tmp/tmp08dd38dw.swift:20:24: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            paren_level--\n                       ^~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for c in paren_string.characters {\n    \
    \    if c == '(' {\n            parens += 1\n            levels.append(level)\n\
    \            parens_count += 1\n        } else if c == ')' {\n            parens\
    \ -= 1\n            if parens == 0 {\n                levels.append(level)\n \
    \               level -= 1\n            }\n            parens_count -= 1\n   \
    \     }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_3v4_4ul.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp_3v4_4ul.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp_3v4_4ul.swift:12:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max2 = 0\n    var paren_levels_count_max2_index = 0\n   \
    \ var paren_levels_count_min2 = 0\n    var paren_levels_count_min2_index = 0\n\
    \    var paren_levels_count_max3 = 0\n    var paren_levels_count_max3_index =\
    \ 0\n    var paren_levels_count_min3 = 0\n    var paren_levels_count_min3_index\
    \ = 0\n    var paren_levels_count_max4 = 0\n    var paren_levels_count_max4_index\
    \ = 0\n    var paren_levels_count_min4 = 0\n    var paren_levels_count_min4_index\
    \ = 0\n    var paren_levels_count_max5 = 0\n    var paren_levels_count_max5_index\
    \ = 0\n    var paren_levels_count_min5 = 0\n    var paren_levels_count_min5_index\
    \ = 0\n    var paren_levels_count_max6 = 0\n    var paren_levels_count_max6_index\
    \ = 0\n    var paren_levels_count_min6 = 0\n    var paren_levels_count_min6_index\
    \ = 0\n    var paren_levels_count_max7 = 0\n    var paren_levels_count_max7_index\
    \ = 0\n    var paren_levels_count_min7 = 0\n    var paren_levels_count_min7_index\
    \ = 0\n    var paren_levels_count_max8 = 0\n    var paren_levels_count_max8_index\
    \ = 0\n    var paren_levels_count_min8 = 0\n    var paren_levels_count_min8_index\
    \ = 0\n    var paren_levels_count_max9 = 0\n    var paren_levels_count_max9_index\
    \ = 0\n    var paren_levels_count_min9 = 0\n    var paren_levels_count_min9_index\
    \ = 0\n    var paren_levels_count_max10 = 0\n    var paren_levels_count_max10_index\
    \ = 0\n    var paren_levels_count_min10 = 0\n    var paren_levels_count_min10_index\
    \ = 0\n    var paren_levels_count_max11 = 0\n    var paren_levels_count_max11_index\
    \ = 0\n    var paren_levels_count_min11 = 0\n    var paren_levels_count_min11_index\
    \ = 0\n    var paren_levels_count_max12 = 0\n    var paren_levels_count_max12_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp48y7f1lu.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp48y7f1lu.swift:9:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp48y7f1lu.swift:10:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp48y7f1lu.swift:11:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp48y7f1lu.swift:12:9: warning: initialization\
    \ of variable 'paren_levels_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp48y7f1lu.swift:13:9: warning: initialization of variable 'paren_levels_count_max'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_count_max = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp48y7f1lu.swift:14:9:\
    \ warning: initialization of variable 'paren_levels_count_max_index' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp48y7f1lu.swift:15:9:\
    \ warning: initialization of variable 'paren_levels_count_min' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_count_min\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp48y7f1lu.swift:16:9: warning:\
    \ initialization of variable 'paren_levels_count_min_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_min_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp48y7f1lu.swift:17:9:\
    \ warning: initialization of varia"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = [String]()\n    var paren_char_index = 0\n    var paren_char_index2 = 0\n\
    \    var paren_char_index3 = 0\n    var paren_char_index4 = 0\n    var paren_char_index5\
    \ = 0\n    var paren_char_index6 = 0\n    var paren_char_index7 = 0\n    var paren_char_index8\
    \ = 0\n    var paren_char_index9 = 0\n    var paren_char_index10 = 0\n    var\
    \ paren_char_index11 = 0\n    var paren_char_index12 = 0\n    var paren_char_index13\
    \ = 0\n    var paren_char_index14 = 0\n    var paren_char_index15 = 0\n    var\
    \ paren_char_index16 = 0\n    var paren_char_index17 = 0\n    var paren_char_index18\
    \ = 0\n    var paren_char_index19 = 0\n    var paren_char_index20 = 0\n    var\
    \ paren_char_index21 = 0\n    var paren_char_index22 = 0\n    var paren_char_index23\
    \ = 0\n    var paren_char_index24 = 0\n    var paren_char_index25 = 0\n    var\
    \ paren_char_index26 = 0\n    var paren_char_index27 = 0\n    var paren_char_index28\
    \ = 0\n    var paren_char_index29 = 0\n    var paren_char_index30 = 0\n    var\
    \ paren_char_index31 = 0\n    var paren_char_index32 = 0\n    var paren_char_index33\
    \ = 0\n    var paren_char_index34 = 0\n    var paren_char_index35 = 0\n    var\
    \ paren_char_index36 = 0\n    var paren_char_index37 = 0\n    var paren_char_index38\
    \ = 0\n    var paren_char_index39 = 0\n    var paren_char_index40 = 0\n    var\
    \ paren_char_index41 = 0\n    var paren_char_index42 = 0\n    var paren_char_index43\
    \ = 0\n    var paren_char_index44 = 0\n    var paren_char_index45 = 0\n    var\
    \ paren_char_index46 = 0\n    var paren_char_index47 = 0\n    var paren_char_index48\
    \ = 0\n    var paren_char_index49 = 0\n    var paren_char_index50 = 0\n    var\
    \ paren_char_index51 = 0\n    var paren_char_index52 = 0\n    var paren_char_index53\
    \ = 0\n    var paren_char_index54 = 0\n    var paren_char_index55 = 0\n    var\
    \ paren_char_index56 = 0\n    var paren_char_index57 = 0\n    var paren_char_index58\
    \ = 0\n    var paren_char_index59 = 0\n    var paren_char_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5zyihb7t.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char_index\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_char_level =\
    \ 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsqmn8dnr.swift:36:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    for c in paren_string.unicodeScalars {\n        if parens_level\
    \ == 0 {\n            parens_level = 1\n            parens_string = string(c)\n\
    \        } else if parens_level == 1 {\n            parens_level = 2\n       \
    \     parens_string = string(c)\n        } else if parens_level == 2 && parens_string\
    \ == string(c) {\n            parens_count += 1\n        } else {\n          \
    \  parens_count = 0\n        }\n        if parens_count == parens_level {\n  \
    \          levels.append(level)\n            parens = 0\n            parens_level\
    \ = 0\n            parens_count = 0\n            parens_string = string(c)\n \
    \       }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm62xv_fk.swift:17:29: error: cannot find 'string' in scope\n  \
    \          parens_string = string(c)\n                            ^~~~~~\n/tmp/tmpm62xv_fk.swift:20:29:\
    \ error: cannot find 'string' in scope\n            parens_string = string(c)\n\
    \                            ^~~~~~\n/tmp/tmpm62xv_fk.swift:21:57: error: cannot\
    \ find 'string' in scope\n        } else if parens_level == 2 && parens_string\
    \ == string(c) {\n                                                        ^~~~~~\n\
    /tmp/tmpm62xv_fk.swift:31:29: error: cannot find 'string' in scope\n         \
    \   parens_string = string(c)\n                            ^~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_count2\
    \ = 0\n    var paren_open_count2 = 0\n    var paren_close_count2 = 0\n    var\
    \ paren_level_count3 = 0\n    var paren_open_count3 = 0\n    var paren_close_count3\
    \ = 0\n    var paren_level_count4 = 0\n    var paren_open_count4 = 0\n    var\
    \ paren_close_count4 = 0\n    var paren_level_count5 = 0\n    var paren_open_count5\
    \ = 0\n    var paren_close_count5 = 0\n    var paren_level_count6 = 0\n    var\
    \ paren_open_count6 = 0\n    var paren_close_count6 = 0\n    var paren_level_count7\
    \ = 0\n    var paren_open_count7 = 0\n    var paren_close_count7 = 0\n    var\
    \ paren_level_count8 = 0\n    var paren_open_count8 = 0\n    var paren_close_count8\
    \ = 0\n    var paren_level_count9 = 0\n    var paren_open_count9 = 0\n    var\
    \ paren_close_count9 = 0\n    var paren_level_count10 = 0\n    var paren_open_count10\
    \ = 0\n    var paren_close_count10 = 0\n    var paren_level_count11 = 0\n    var\
    \ paren_open_count11 = 0\n    var paren_close_count11 = 0\n    var paren_level_count12\
    \ = 0\n    var paren_open_count12 = 0\n    var paren_close_count12 = 0\n    var\
    \ paren_level_count13 = 0\n    var paren_open_count13 = 0\n    var paren_close_count13\
    \ = 0\n    var paren_level_count14 = 0\n    var paren_open_count14 = 0\n    var\
    \ paren_close_count14 = 0\n    var paren_level_count15 = 0\n    var paren_open_count15\
    \ = 0\n    var paren_close_count15 = 0\n    var paren_level_count16 = 0\n    var\
    \ paren_open_count16 = 0\n    var paren_close_count16 = 0\n    var paren_level_count17\
    \ = 0\n    var paren_open_count17 = 0\n    var paren_close_count17 = 0\n    var\
    \ paren_level_count18 = 0\n    var paren_open_count18 = 0\n    var paren_close_count18\
    \ = 0\n    var paren_level_count19 = 0\n    var paren_open_count19 = 0\n    var\
    \ paren_close_count19 = 0\n    var paren_level_count20 = 0\n    var paren_open_count20\
    \ = 0\n    var paren_close_count20 = 0\n    var paren_level_count21 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjqluznyi.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpjqluznyi.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpjqluznyi.swift:10:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpjqluznyi.swift:11:9: warning: initialization of variable 'paren_open'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_open = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpjqluznyi.swift:12:9:\
    \ warning: initialization of variable 'paren_close' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_close = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpjqluznyi.swift:13:9: warning: initialization of variable 'paren_level_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjqluznyi.swift:14:9:\
    \ warning: initialization of variable 'paren_open_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_open_count =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjqluznyi.swift:15:9: warning: initialization\
    \ of variable 'paren_close_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_close_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpjqluznyi.swift:16:9: warning: initialization of variable 'paren_level_count2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_count2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjqluznyi.swift:17:9:\
    \ warning: initialization of variable 'paren_open_count2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_open_count2 =\
    \ 0\n  "
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_index\
    \ = 0\n    var paren_group_string = \"\"\n    var paren_group_count = 0\n    var\
    \ paren_group_level = 0\n    var paren_group_max_level = 0\n    var paren_group_max_level_index\
    \ = 0\n    var paren_group_paren_count = 0\n    var paren_group_paren_groups =\
    \ [String]()\n    var paren_group_paren_group_index = 0\n    var paren_group_paren_group_string\
    \ = \"\"\n    var paren_group_paren_group_count = 0\n    var paren_group_paren_group_level\
    \ = 0\n    var paren_group_paren_group_max_level = 0\n    var paren_group_paren_group_max_level_index\
    \ = 0\n    var paren_group_paren_group_paren_count = 0\n    var paren_group_paren_group_paren_groups\
    \ = [String]()\n    var paren_group_paren_group_paren_group_index = 0\n    var\
    \ paren_group_paren_group_paren_group_string = \"\"\n    var paren_group_paren_group_paren_group_count\
    \ = 0\n    var paren_group_paren_group_paren_group_level = 0\n    var paren_group_paren_group_paren_group_max_level\
    \ = 0\n    var paren_group_paren_group_paren_group_max_level_index = 0\n    var\
    \ paren_group_paren_group_paren_group_paren_count = 0\n    var paren_group_paren_group_paren_group_paren_groups\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_index\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_string = \"\"\n\
    \    var paren_group_paren_group_paren_group_paren_group_count = 0\n    var paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_max_level = 0\n\
    \    var paren_group_paren_group_paren_group_paren_group_max_level_index = 0\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_count = 0\n   \
    \ var paren_group_paren_group_paren_group_paren_group_paren_groups = [String]()\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_group_index = 0\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_group_string =\
    \ \"\"\n    var paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n    var paren_group_paren_group_paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpslkxlyen.swift:49:9: error: type annotation missing in pattern\n\
    \    var paren_group_paren_group_paren\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_paren_level = 0\n    var paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_level = 0\n    var paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n   \
    \ var paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsuktvqrc.swift:27:9: error: invalid redeclaration of 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n\
    \        ^\n/tmp/tmpsuktvqrc.swift:26:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:29:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:28:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:31:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:30:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:32:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:30:9: note: 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\
    \ previously declared here\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n        ^\n/tmp/tmpsuktvqrc.swift:33:9: error: invalid redeclaration of\
    \ 'paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level'\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_string_len = 0\n    var paren_levels_string_len2\
    \ = 0\n    var paren_levels_string_len3 = 0\n    var paren_levels_string_len4\
    \ = 0\n    var paren_levels_string_len5 = 0\n    var paren_levels_string_len6\
    \ = 0\n    var paren_levels_string_len7 = 0\n    var paren_levels_string_len8\
    \ = 0\n    var paren_levels_string_len9 = 0\n    var paren_levels_string_len10\
    \ = 0\n    var paren_levels_string_len11 = 0\n    var paren_levels_string_len12\
    \ = 0\n    var paren_levels_string_len13 = 0\n    var paren_levels_string_len14\
    \ = 0\n    var paren_levels_string_len15 = 0\n    var paren_levels_string_len16\
    \ = 0\n    var paren_levels_string_len17 = 0\n    var paren_levels_string_len18\
    \ = 0\n    var paren_levels_string_len19 = 0\n    var paren_levels_string_len20\
    \ = 0\n    var paren_levels_string_len21 = 0\n    var paren_levels_string_len22\
    \ = 0\n    var paren_levels_string_len23 = 0\n    var paren_levels_string_len24\
    \ = 0\n    var paren_levels_string_len25 = 0\n    var paren_levels_string_len26\
    \ = 0\n    var paren_levels_string_len27 = 0\n    var paren_levels_string_len28\
    \ = 0\n    var paren_levels_string_len29 = 0\n    var paren_levels_string_len30\
    \ = 0\n    var paren_levels_string_len31 = 0\n    var paren_levels_string_len32\
    \ = 0\n    var paren_levels_string_len33 = 0\n    var paren_levels_string_len34\
    \ = 0\n    var paren_levels_string_len35 = 0\n    var paren_levels_string_len36\
    \ = 0\n    var paren_levels_string_len37 = 0\n    var paren_levels_string_len38\
    \ = 0\n    var paren_levels_string_len39 = 0\n    var paren_levels_string_len40\
    \ = 0\n    var paren_levels_string_len41 = 0\n    var paren_levels_string_len42\
    \ = 0\n    var paren_levels_string_len43 = 0\n    var paren_levels_string_len44\
    \ = 0\n    var paren_levels_string_len45 = 0\n    var paren_levels_string_len46\
    \ = 0\n    var paren_levels_string_len47 = 0\n    var paren_level\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpn_wkvk7q.swift:61:9: error: type annotation missing in pattern\n\
    \    var paren_level\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_is_open = false\n    var paren_char_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_next_is_open = false\n    var paren_char_next_is_close\
    \ = false\n    var paren_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfohoi822.swift:19:9: error: invalid redeclaration of 'paren_char_next_is_open'\n\
    \    var paren_char_next_is_open = false\n        ^\n/tmp/tmpfohoi822.swift:17:9:\
    \ note: 'paren_char_next_is_open' previously declared here\n    var paren_char_next_is_open\
    \ = false\n        ^\n/tmp/tmpfohoi822.swift:20:9: error: invalid redeclaration\
    \ of 'paren_char_next_is_close'\n    var paren_char_next_is_close = false\n  \
    \      ^\n/tmp/tmpfohoi822.swift:18:9: note: 'paren_char_next_is_close' previously\
    \ declared here\n    var paren_char_next_is_close = false\n        ^\n/tmp/tmpfohoi822.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_next_is_open'\n    var paren_char_next_is_open\
    \ = false\n        ^\n/tmp/tmpfohoi822.swift:17:9: note: 'paren_char_next_is_open'\
    \ previously declared here\n    var paren_char_next_is_open = false\n        ^\n\
    /tmp/tmpfohoi822.swift:22:9: error: invalid redeclaration of 'paren_char_next_is_close'\n\
    \    var paren_char_next_is_close = false\n        ^\n/tmp/tmpfohoi822.swift:18:9:\
    \ note: 'paren_char_next_is_close' previously declared here\n    var paren_char_next_is_close\
    \ = false\n        ^\n/tmp/tmpfohoi822.swift:23:9: error: invalid redeclaration\
    \ of 'paren_char_next_is_open'\n    var paren_char_next_is_open = false\n    \
    \    ^\n/tmp/tmpfohoi822.swift:17:9: note: 'paren_char_next_is_open' previously\
    \ declared here\n    var paren_char_next_is_open = false\n        ^\n/tmp/tmpfohoi822.swift:24:9:\
    \ error: invalid redeclaration of 'paren_char_next_is_close'\n    var paren_char_next_is_close\
    \ = false\n        ^\n/tmp/tmpfohoi822.swift:18:9: note: 'paren_char_next_is_close'\
    \ previously declared here\n    var paren_char_next_is_close = false\n       \
    \ ^\n/tmp/tmpfohoi822.swift:25:9: error: invalid redeclaration of 'paren_char_next_is_open'\n\
    \    var paren_char_next_is_open = false\n        ^\n/tmp/tmpfohoi822.swift:17:9:\
    \ note: 'paren_char_next_is_open' previously declared here\n    var paren_char_next_is_open\
    \ = false\n        ^\n/tmp/tmpfohoi822.swift:26:9: error: invalid redeclaration\
    \ of 'paren_char_next_is_close'\n    var paren_char_next_is_close = fa"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_char = 0\n    var paren_nesting = 0\n    var paren_char_count = 0\n  \
    \  var paren_nesting_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_nesting_count_in_paren = 0\n    var paren_char_in_paren = 0\n    var paren_nesting_char_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group = 0\n    var paren_nesting_count_in_paren_group\
    \ = 0\n    var paren_char_in_paren_group = 0\n    var paren_nesting_char_in_paren_group\
    \ = 0\n    var paren_char_count = 0\n    var paren_nesting_count = 0\n    var\
    \ paren_char_count_in_paren = 0\n    var paren_nesting_count_in_paren = 0\n  \
    \  var paren_char_in_paren = 0\n    var paren_nesting_char_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_nesting_count_in_paren_group\
    \ = 0\n    var paren_char_in_paren_group = 0\n    var paren_nesting_char_in_paren_group\
    \ = 0\n    var paren_char_count = 0\n    var paren_nesting_count = 0\n    var\
    \ paren_char_count_in_paren = 0\n    var paren_nesting_count_in_paren = 0\n  \
    \  var paren_char_in_paren = 0\n    var paren_nesting_char_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_nesting_count_in_paren_group\
    \ = 0\n    var paren_char_in_paren_group = 0\n    var paren_nesting_char_in_paren_group\
    \ = 0\n    var paren_char_count = 0\n    var paren_nesting_count = 0\n    var\
    \ paren_char_count_in_paren = 0\n    var paren_nesting_count_in_paren = 0\n  \
    \  var paren_char_in_paren = 0\n    var paren_nesting_char_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_nesting_count_in_paren_group\
    \ = 0\n    var paren_char_in_paren_group = 0\n    var paren_nesting_char_in_paren_group\
    \ = 0\n    var paren_char_count = 0\n    var paren_nesting_count = 0\n    var\
    \ paren_char_count_in_paren = 0\n    var paren_nesting_count_in_paren = 0\n  \
    \  var paren_char_in_paren = 0\n    var paren_nesting_char_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_nesting_count_in_paren_group\
    \ = 0\n    var paren_char_in_paren_group = 0\n    var paren_nesting_char_in_paren_group\
    \ = 0\n    var paren_char_count = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiyu28pov.swift:22:9: error: invalid redeclaration of 'paren_char_count'\n\
    \    var paren_char_count = 0\n        ^\n/tmp/tmpiyu28pov.swift:12:9: note: 'paren_char_count'\
    \ previously declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmpiyu28pov.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_count'\n    var paren_nesting_count\
    \ = 0\n        ^\n/tmp/tmpiyu28pov.swift:13:9: note: 'paren_nesting_count' previously\
    \ declared here\n    var paren_nesting_count = 0\n        ^\n/tmp/tmpiyu28pov.swift:24:9:\
    \ error: invalid redeclaration of 'paren_char_count_in_paren'\n    var paren_char_count_in_paren\
    \ = 0\n        ^\n/tmp/tmpiyu28pov.swift:14:9: note: 'paren_char_count_in_paren'\
    \ previously declared here\n    var paren_char_count_in_paren = 0\n        ^\n\
    /tmp/tmpiyu28pov.swift:25:9: error: invalid redeclaration of 'paren_nesting_count_in_paren'\n\
    \    var paren_nesting_count_in_paren = 0\n        ^\n/tmp/tmpiyu28pov.swift:15:9:\
    \ note: 'paren_nesting_count_in_paren' previously declared here\n    var paren_nesting_count_in_paren\
    \ = 0\n        ^\n/tmp/tmpiyu28pov.swift:26:9: error: invalid redeclaration of\
    \ 'paren_char_in_paren'\n    var paren_char_in_paren = 0\n        ^\n/tmp/tmpiyu28pov.swift:16:9:\
    \ note: 'paren_char_in_paren' previously declared here\n    var paren_char_in_paren\
    \ = 0\n        ^\n/tmp/tmpiyu28pov.swift:27:9: error: invalid redeclaration of\
    \ 'paren_nesting_char_in_paren'\n    var paren_nesting_char_in_paren = 0\n   \
    \     ^\n/tmp/tmpiyu28pov.swift:17:9: note: 'paren_nesting_char_in_paren' previously\
    \ declared here\n    var paren_nesting_char_in_paren = 0\n        ^\n/tmp/tmpiyu28pov.swift:28:9:\
    \ error: invalid redeclaration of 'paren_char_count_in_paren_group'\n    var paren_char_count_in_paren_group\
    \ = 0\n        ^\n/tmp/tmpiyu28pov.swift:18:9: note: 'paren_char_count_in_paren_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group = 0\n    \
    \    ^\n/tmp/tmpiyu28pov.swift:29:9: error: invalid redeclaration of 'paren_nesting_count_in_paren_group'\n\
    \    var paren_nesting_count_in_paren_group = 0\n        ^\n/tmp/tmpiyu28pov.swift"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_count_max = 0\n    var\
    \ paren_level_count_max_index = 0\n    var paren_level_count_max_index2 = 0\n\
    \    var paren_level_count_max_index3 = 0\n    var paren_level_count_max_index4\
    \ = 0\n    var paren_level_count_max_index5 = 0\n    var paren_level_count_max_index6\
    \ = 0\n    var paren_level_count_max_index7 = 0\n    var paren_level_count_max_index8\
    \ = 0\n    var paren_level_count_max_index9 = 0\n    var paren_level_count_max_index10\
    \ = 0\n    var paren_level_count_max_index11 = 0\n    var paren_level_count_max_index12\
    \ = 0\n    var paren_level_count_max_index13 = 0\n    var paren_level_count_max_index14\
    \ = 0\n    var paren_level_count_max_index15 = 0\n    var paren_level_count_max_index16\
    \ = 0\n    var paren_level_count_max_index17 = 0\n    var paren_level_count_max_index18\
    \ = 0\n    var paren_level_count_max_index19 = 0\n    var paren_level_count_max_index20\
    \ = 0\n    var paren_level_count_max_index21 = 0\n    var paren_level_count_max_index22\
    \ = 0\n    var paren_level_count_max_index23 = 0\n    var paren_level_count_max_index24\
    \ = 0\n    var paren_level_count_max_index25 = 0\n    var paren_level_count_max_index26\
    \ = 0\n    var paren_level_count_max_index27 = 0\n    var paren_level_count_max_index28\
    \ = 0\n    var paren_level_count_max_index29 = 0\n    var paren_level_count_max_index30\
    \ = 0\n    var paren_level_count_max_index31 = 0\n    var paren_level_count_max_index32\
    \ = 0\n    var paren_level_count_max_index33 = 0\n    var paren_level_count_max_index34\
    \ = 0\n    var paren_level_count_max_index35 = 0\n    var paren_level_count_max_index36\
    \ = 0\n    var paren_level_count_max_index37 = 0\n    var paren_level_count_max_index38\
    \ = 0\n    var paren_level_count_max_index39 = 0\n    var paren_level_count_max_index40\
    \ = 0\n    var paren_level_count_max_index41 = 0\n    var paren_level_count_max_index42\
    \ = 0\n    var paren_level_count_max_index43 = 0\n    var paren_level_count_max_index44\
    \ = 0\n    var paren_level_count_max_index45 = 0\n    var paren_level_count_max_index46\
    \ = 0\n    var paren_level_count_max_index47 = 0\n    var paren_level_count_max_index48\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpexhv9yz3.swift:61:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpexhv9yz3.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpexhv9yz3.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpexhv9yz3.swift:10:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpexhv9yz3.swift:11:9: warning: initialization of variable 'paren_level_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpexhv9yz3.swift:12:9:\
    \ warning: initialization of variable 'paren_level_count_max' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_count_max\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpexhv9yz3.swift:13:9: warning:\
    \ initialization of variable 'paren_level_count_max_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_count_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpexhv9yz3.swift:14:9:\
    \ warning: initialization of variable 'paren_level_count_max_index2' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_level_count_max_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpexhv9yz3.swift:15:9:\
    \ warning: initialization of variable 'paren_level_count_max_index3' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_level_count_max_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpexhv9yz3.swift:16:9:\
    \ warning: initialization of variable 'paren_level_count_max_index4' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_level_cou"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counters = [Int]()\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_indexs = [Int]()\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n    var paren_level_counters_index\
    \ = 0\n    var paren_level_counters_index = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmph6br6mnv.swift:17:9: error: invalid redeclaration of 'paren_level_counters_index'\n\
    \    var paren_level_counters_index = 0\n        ^\n/tmp/tmph6br6mnv.swift:15:9:\
    \ note: 'paren_level_counters_index' previously declared here\n    var paren_level_counters_index\
    \ = 0\n        ^\n/tmp/tmph6br6mnv.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_counters_index'\n    var paren_level_counters_index = 0\n     \
    \   ^\n/tmp/tmph6br6mnv.swift:15:9: note: 'paren_level_counters_index' previously\
    \ declared here\n    var paren_level_counters_index = 0\n        ^\n/tmp/tmph6br6mnv.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_counters_index'\n    var paren_level_counters_index\
    \ = 0\n        ^\n/tmp/tmph6br6mnv.swift:15:9: note: 'paren_level_counters_index'\
    \ previously declared here\n    var paren_level_counters_index = 0\n        ^\n\
    /tmp/tmph6br6mnv.swift:20:9: error: invalid redeclaration of 'paren_level_counters_index'\n\
    \    var paren_level_counters_index = 0\n        ^\n/tmp/tmph6br6mnv.swift:15:9:\
    \ note: 'paren_level_counters_index' previously declared here\n    var paren_level_counters_index\
    \ = 0\n        ^\n/tmp/tmph6br6mnv.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_counters_index'\n    var paren_level_counters_index = 0\n     \
    \   ^\n/tmp/tmph6br6mnv.swift:15:9: note: 'paren_level_counters_index' previously\
    \ declared here\n    var paren_level_counters_index = 0\n        ^\n/tmp/tmph6br6mnv.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_counters_index'\n    var paren_level_counters_index\
    \ = 0\n        ^\n/tmp/tmph6br6mnv.swift:15:9: note: 'paren_level_counters_index'\
    \ previously declared here\n    var paren_level_counters_index = 0\n        ^\n\
    /tmp/tmph6br6mnv.swift:23:9: error: invalid redeclaration of 'paren_level_counters_index'\n\
    \    var paren_level_counters_index = 0\n        ^\n/tmp/tmph6br6mnv.swift:15:9:\
    \ note: 'paren_level_counters_index' previously declared here\n    var paren_level_counters_index\
    \ = 0\n        ^\n/tmp/tmph6br6mnv.swift:24:9: error: invalid redeclaration of\
    \ 'paren_level_counters_index'\n    var paren_level"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_groups = paren_string.characters\n\
    \        .filter({$0 != \"(\" && $0 != \")\"})\n        .map {\n            guard\
    \ let group = $0 else {\n                return \"\"\n            }\n        \
    \    guard let group_count = group.characters.count else {\n                return\
    \ \"\"\n            }\n            let group_level = group.characters.count\n\
    \            if group_level > level {\n                level = group_level\n \
    \               max_level = group_level\n                max_level_index = group.startIndex\n\
    \            }\n            paren_count += group_count\n            return group\n\
    \        }\n    guard paren_count > 0 else {\n        return []\n    }\n    var\
    \ levels = [Int]()\n    for i in 0..<paren_count {\n        if paren_groups[i].characters.count\
    \ > level {\n            levels.append(level)\n            level = paren_groups[i].characters.count\n\
    \            max_level = level\n            max_level_index = i\n        }\n \
    \   }\n    levels.append(level)\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmpqk6v7q.swift:18:43: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'characters'\n            guard let group_count =\
    \ group.characters.count else {\n                                    ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6ardhl9j.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     parens_count += 1\n            parens_level += 1\n        } else if c ==\
    \ ')' {\n            parens_count -= 1\n            parens_level -= 1\n      \
    \      if parens_count == 0 {\n                levels.append(parens_level)\n \
    \           }\n        } else if c == ' ' {\n            if parens_level == 0\
    \ {\n                levels.append(parens_level)\n            }\n        }\n \
    \   }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7vu7aqbl.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp7vu7aqbl.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp7vu7aqbl.swift:24:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == ' ' {\n                       ^~~\n\
    \                       \" \"\n/tmp/tmp7vu7aqbl.swift:14:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in paren_string.characters\
    \ {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7vu7aqbl.swift:9:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp7vu7aqbl.swift:10:9: warning:\
    \ initialization of variable 'parens' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var parens = 0\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp7vu7aqbl.swift:13:9: warning: initialization of variable 'parens_level_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_level_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_index\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           paren_groups[paren_group_index] = String()\n            paren_group_index\
    \ += 1\n            paren_groups[paren_group_index] = String(char)\n         \
    \   paren_group_index += 1\n            paren_count += 1\n        } else if char\
    \ == ')' {\n            paren_group_index -= 1\n            if paren_group_index\
    \ < 0 {\n                paren_group_index = 0\n            }\n            if\
    \ paren_groups[paren_group_index] == String(char) {\n                paren_groups[paren_group_index]\
    \ = String()\n                paren_group_index += 1\n                paren_count\
    \ += 1\n            } else {\n                paren_groups[paren_group_index]\
    \ = String(char)\n                paren_group_index += 1\n                paren_count\
    \ += 1\n            }\n        } else if char == ' ' {\n            if paren_groups[paren_group_index]\
    \ == String(char) {\n                paren_groups[paren_group_index] = String()\n\
    \                paren_group_index += 1\n                paren_count += 1\n  \
    \          } else {\n                paren_groups[paren_group_index] = String(char)\n\
    \                paren_group_index += 1\n                paren_count += 1\n  \
    \          }\n        } else {\n            if paren_groups[paren_group_index]\
    \ == String(char) {\n                paren_groups[paren_group_index] = String()\n\
    \                paren_group_index += 1\n                paren_count += 1\n  \
    \          } else {\n                paren_groups[paren_group_index] = String(char)\n\
    \                paren_group_index += 1\n                paren_count += 1\n  \
    \          }\n        }\n        if paren_count > max_level_parens {\n       \
    \     max_level_parens = paren_count\n        }\n        if paren_count == max_level_parens\
    \ {\n            max_level = level\n        }\n        level += 1\n    }\n   \
    \ return max_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc_xma_hb.swift:15:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpc_xma_hb.swift:21:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpc_xma_hb.swift:35:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpc_xma_hb.swift:14:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpc_xma_hb.swift:64:12: error: cannot convert\
    \ return expression of type 'Int' to return type '[Int]'\n    return max_level\n\
    \           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_parens\
    \ = 0\n    var paren_parens_count = 0\n    var paren_parens_level = 0\n    var\
    \ paren_parens_parens = 0\n    var paren_parens_parens_count = 0\n    var paren_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens = 0\n    var paren_parens_parens_parens_count\
    \ = 0\n    var paren_parens_parens_parens_level = 0\n    var paren_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_count = 0\n    var paren_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_count\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_level = 0\n    var paren_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_count = 0\n   \
    \ var paren_parens_parens_parens_parens_parens_parens_level = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_count =\
    \ 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_level = 0\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens = 0\n \
    \   var paren_parens_parens_parens_parens_parens_parens_parens_parens_count =\
    \ 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_count\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_count\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsffmdm0l.swift:42:9: error: type annotation missing in pattern\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_stack = [String]()\n    var paren_level = [Int]()\n    for\
    \ index in 0..<paren_string.characters.count {\n        let char = paren_string.characters[index]\n\
    \        if char == \"(\" {\n            paren_stack.append(char)\n          \
    \  paren_level.append(level)\n            level++\n        } else if char == \"\
    )\" {\n            level--\n            if level == 0 {\n                let index\
    \ = paren_stack.count - 1\n                let last_char = paren_stack[index]\n\
    \                if last_char == \"(\" {\n                    paren_stack.removeLast()\n\
    \                    paren_level.removeLast()\n                }\n           \
    \ }\n        } else if char == \" \" {\n            if paren_stack.count > 0 {\n\
    \                let index = paren_stack.count - 1\n                let last_char\
    \ = paren_stack[index]\n                if last_char == \"(\" {\n            \
    \        paren_stack.removeLast()\n                    paren_level.removeLast()\n\
    \                }\n            }\n        }\n    }\n    if paren_stack.count\
    \ > 0 {\n        let index = paren_stack.count - 1\n        let last_char = paren_stack[index]\n\
    \        if last_char == \"(\" {\n            paren_stack.removeLast()\n     \
    \       paren_level.removeLast()\n        }\n    }\n    if paren_stack.count >\
    \ 0 {\n        max_level = paren_level.count\n        max_level_index = index\n\
    \    }\n    return paren_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa83jlztj.swift:13:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<paren_string.characters.count {\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa83jlztj.swift:14:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa83jlztj.swift:14:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa83jlztj.swift:16:32:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            paren_stack.append(char)\n                               ^\n/tmp/tmpa83jlztj.swift:18:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n/tmp/tmpa83jlztj.swift:20:18: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            level--\n        \
    \         ^~\n/tmp/tmpa83jlztj.swift:50:27: error: cannot find 'index' in scope\n\
    \        max_level_index = index\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n\
    \    var parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp62jydy73.swift:74:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp62jydy73.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp62jydy73.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp62jydy73.swift:10:9:\
    \ warning: initialization of variable 'parens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp62jydy73.swift:11:9: warning: initialization of variable 'parens_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_level = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:12:9:\
    \ warning: initialization of variable 'parens_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:13:9: warning: initialization\
    \ of variable 'parens_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var parens_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp62jydy73.swift:14:9: warning: initialization of variable 'parens_string_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_string_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:15:9:\
    \ warning: initialization of variable 'parens_string_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_string_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:16:9: warning:\
    \ initialization of variable 'parens_string_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens_string_index3 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp62jydy73.swift:17:9: warning: initialization\
    \ of variable 'parens_string_index4' was never used; consider"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_count_max\
    \ = 0\n    var paren_level_paren_count_max_max = 0\n    var paren_level_paren_count_max_min\
    \ = 0\n    var paren_level_paren_count_max_min_index = 0\n    var paren_level_paren_count_max_min_count\
    \ = 0\n    var paren_level_paren_count_max_min_count_max = 0\n    var paren_level_paren_count_max_min_count_max_max\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min = 0\n    var paren_level_paren_count_max_min_count_max_min_index\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count = 0\n    var\
    \ paren_level_paren_count_max_min_count_max_min_count_max = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_index\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_index\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_index\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_index\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n    var paren_level_paren_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9_4iqqx8.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp9_4iqqx8.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp9_4iqqx8.swift:10:9: warning: initialization of variable 'max_level_paren'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_paren = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp9_4iqqx8.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp9_4iqqx8.swift:12:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp9_4iqqx8.swift:13:9:\
    \ warning: initialization of variable 'paren_level_paren' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_paren =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9_4iqqx8.swift:14:9: warning: initialization\
    \ of variable 'paren_level_paren_count' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_level_paren_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp9_4iqqx8.swift:15:9: warning: initialization of variable 'paren_level_paren_count_max'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_paren_count_max = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp9_4iqqx8.swift:16:9: warning: initialization of variable 'paren_level_paren_count_max_max'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_paren_count_max_max = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp9_4iqqx8.swift:17:9: warning: initialization of variable 'paren_level_pare"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8mmv7dn2.swift:38:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8mmv7dn2.swift:32:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:31:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:34:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:35:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_gr"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4yd3v164.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp4yd3v164.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_char_char_length = 0\n    var paren_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp65do8psk.swift:33:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmp65do8psk.swift:32:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmp65do8psk.swift:36:9: error: type annotation missing\
    \ in pattern\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         levels[level] = parens\n            parens += 1\n        } else if c\
    \ == ')' {\n            levels[level] = parens\n            parens -= 1\n    \
    \        if parens == 0 {\n                levels[level] = level\n           \
    \     level += 1\n            }\n        }\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp31vt9uvl.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp31vt9uvl.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_count = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_char_next\
    \ = \"\"\n    var paren_char_prev = \"\"\n    var paren_char_next2 = \"\"\n  \
    \  var paren_char_prev2 = \"\"\n    var paren_char_next3 = \"\"\n    var paren_char_prev3\
    \ = \"\"\n    var paren_char_next4 = \"\"\n    var paren_char_prev4 = \"\"\n \
    \   var paren_char_next5 = \"\"\n    var paren_char_prev5 = \"\"\n    var paren_char_next6\
    \ = \"\"\n    var paren_char_prev6 = \"\"\n    var paren_char_next7 = \"\"\n \
    \   var paren_char_prev7 = \"\"\n    var paren_char_next8 = \"\"\n    var paren_char_prev8\
    \ = \"\"\n    var paren_char_next9 = \"\"\n    var paren_char_prev9 = \"\"\n \
    \   var paren_char_next10 = \"\"\n    var paren_char_prev10 = \"\"\n    var paren_char_next11\
    \ = \"\"\n    var paren_char_prev11 = \"\"\n    var paren_char_next12 = \"\"\n\
    \    var paren_char_prev12 = \"\"\n    var paren_char_next13 = \"\"\n    var paren_char_prev13\
    \ = \"\"\n    var paren_char_next14 = \"\"\n    var paren_char_prev14 = \"\"\n\
    \    var paren_char_next15 = \"\"\n    var paren_char_prev15 = \"\"\n    var paren_char_next16\
    \ = \"\"\n    var paren_char_prev16 = \"\"\n    var paren_char_next17 = \"\"\n\
    \    var paren_char_prev17 = \"\"\n    var paren_char_next18 = \"\"\n    var paren_char_prev18\
    \ = \"\"\n    var paren_char_next19 = \"\"\n    var paren_char_prev19 = \"\"\n\
    \    var paren_char_next20 = \"\"\n    var paren_char_prev20 = \"\"\n    var paren_char_next21\
    \ = \"\"\n    var paren_char_prev21 = \"\"\n    var paren_char_next22 = \"\"\n\
    \    var paren_char_prev22 = \"\"\n    var paren_char_next23 = \"\"\n    var paren_char_prev23\
    \ = \"\"\n    var paren_char_next24 = \"\"\n    var paren_char_prev24 = \"\"\n\
    \    var paren_char_next25 = \"\"\n    var paren_char_prev25 = \"\"\n    var paren_char_next26\
    \ = \"\"\n    var paren_char_prev26 = \"\"\n    var paren_char_next27 = \"\"\n\
    \    var paren_char_prev27 = \"\"\n    var paren_char_next28 = \"\"\n    var paren_char_prev28\
    \ = \"\"\n    var paren_char_next29 = \"\"\n    var paren_char_prev29 = \"\"\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqtao2nui.swift:74:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpqtao2nui.swift:8:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpqtao2nui.swift:9:9: warning: initialization\
    \ of variable 'max_level' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpqtao2nui.swift:10:9:\
    \ warning: initialization of variable 'max_level_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var max_level_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpqtao2nui.swift:11:9: warning: initialization\
    \ of variable 'max_level_paren_index' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level_paren_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpqtao2nui.swift:12:9: warning: initialization of variable 'paren_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpqtao2nui.swift:13:9:\
    \ warning: initialization of variable 'paren_char_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_count =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqtao2nui.swift:14:9: warning: initialization\
    \ of variable 'paren_char_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_char_index = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpqtao2nui.swift:15:9: warning: initialization of variable 'paren_char'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpqtao2nui.swift:16:9:\
    \ warning: initialization of variable 'paren_char_next' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_next = \"\
    \"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpqtao2nui.swift:17:9: warning: initialization\
    \ of variable 'paren_char_prev' was never used; con"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  var paren_levels_count = 0\n    var paren_levels_string_count = 0\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_string_count\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_string_count = 0\n    var paren_levels_string = \"\"\n   \
    \ var paren_levels_count = 0\n    var paren_levels_string_count = 0\n    var paren_levels_string\
    \ = \"\"\n    var paren_levels_count = 0\n    var paren_levels_string_count =\
    \ 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var\
    \ paren_levels_string_count = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count\
    \ = 0\n    var paren_levels_string_count = 0\n    var paren_levels_string = \"\
    \"\n    var paren_levels_count = 0\n    var paren_levels_string_count = 0\n  \
    \  var paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_string_count\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_string_count = 0\n    var paren_levels_string = \"\"\n   \
    \ var paren_levels_count = 0\n    var paren_levels_string_count = 0\n    var paren_levels_string\
    \ = \"\"\n    var paren_levels_count = 0\n    var paren_levels_string_count =\
    \ 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var\
    \ paren_levels_string_count = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count\
    \ = 0\n    var paren_levels_string_count = 0\n    var paren_levels_string = \"\
    \"\n    var paren_levels_count = 0\n    var paren_levels_string_count = 0\n  \
    \  var paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_string_count\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_string_count = 0\n    var paren_levels_string = \"\"\n   \
    \ var paren_levels_count = 0\n    var paren_levels_string_count = 0\n    var paren_levels_string\
    \ = \"\"\n    var paren_levels_count = 0\n    var paren_levels_string_count =\
    \ 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var\
    \ paren_levels_string_count = 0\n    var paren_levels_string = \"\"\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppu5vvr0i.swift:15:9: error: invalid redeclaration of 'paren_levels_string'\n\
    \    var paren_levels_string = \"\"\n        ^\n/tmp/tmppu5vvr0i.swift:12:9: note:\
    \ 'paren_levels_string' previously declared here\n    var paren_levels_string\
    \ = \"\"\n        ^\n/tmp/tmppu5vvr0i.swift:16:9: error: invalid redeclaration\
    \ of 'paren_levels_count'\n    var paren_levels_count = 0\n        ^\n/tmp/tmppu5vvr0i.swift:13:9:\
    \ note: 'paren_levels_count' previously declared here\n    var paren_levels_count\
    \ = 0\n        ^\n/tmp/tmppu5vvr0i.swift:17:9: error: invalid redeclaration of\
    \ 'paren_levels_string_count'\n    var paren_levels_string_count = 0\n       \
    \ ^\n/tmp/tmppu5vvr0i.swift:14:9: note: 'paren_levels_string_count' previously\
    \ declared here\n    var paren_levels_string_count = 0\n        ^\n/tmp/tmppu5vvr0i.swift:18:9:\
    \ error: invalid redeclaration of 'paren_levels_string'\n    var paren_levels_string\
    \ = \"\"\n        ^\n/tmp/tmppu5vvr0i.swift:12:9: note: 'paren_levels_string'\
    \ previously declared here\n    var paren_levels_string = \"\"\n        ^\n/tmp/tmppu5vvr0i.swift:19:9:\
    \ error: invalid redeclaration of 'paren_levels_count'\n    var paren_levels_count\
    \ = 0\n        ^\n/tmp/tmppu5vvr0i.swift:13:9: note: 'paren_levels_count' previously\
    \ declared here\n    var paren_levels_count = 0\n        ^\n/tmp/tmppu5vvr0i.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_string_count'\n    var paren_levels_string_count\
    \ = 0\n        ^\n/tmp/tmppu5vvr0i.swift:14:9: note: 'paren_levels_string_count'\
    \ previously declared here\n    var paren_levels_string_count = 0\n        ^\n\
    /tmp/tmppu5vvr0i.swift:21:9: error: invalid redeclaration of 'paren_levels_string'\n\
    \    var paren_levels_string = \"\"\n        ^\n/tmp/tmppu5vvr0i.swift:12:9: note:\
    \ 'paren_levels_string' previously declared here\n    var paren_levels_string\
    \ = \"\"\n        ^\n/tmp/tmppu5vvr0i.swift:22:9: error: invalid redeclaration\
    \ of 'paren_levels_count'\n    var paren_levels_count = 0\n        ^\n/tmp/tmppu5vvr0i.swift:13:9:\
    \ note: 'paren_levels_count' previously declared here\n    var paren_levels_count\
    \ = 0\n        ^\n/tmp/tmppu5vvr"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_prev = \"\"\n    var paren_char_next = \"\"\n   \
    \ var paren_char_prev2 = \"\"\n    var paren_char_next2 = \"\"\n    var paren_char_prev3\
    \ = \"\"\n    var paren_char_next3 = \"\"\n    var paren_char_prev4 = \"\"\n \
    \   var paren_char_next4 = \"\"\n    var paren_char_prev5 = \"\"\n    var paren_char_next5\
    \ = \"\"\n    var paren_char_prev6 = \"\"\n    var paren_char_next6 = \"\"\n \
    \   var paren_char_prev7 = \"\"\n    var paren_char_next7 = \"\"\n    var paren_char_prev8\
    \ = \"\"\n    var paren_char_next8 = \"\"\n    var paren_char_prev9 = \"\"\n \
    \   var paren_char_next9 = \"\"\n    var paren_char_prev10 = \"\"\n    var paren_char_next10\
    \ = \"\"\n    var paren_char_prev11 = \"\"\n    var paren_char_next11 = \"\"\n\
    \    var paren_char_prev12 = \"\"\n    var paren_char_next12 = \"\"\n    var paren_char_prev13\
    \ = \"\"\n    var paren_char_next13 = \"\"\n    var paren_char_prev14 = \"\"\n\
    \    var paren_char_next14 = \"\"\n    var paren_char_prev15 = \"\"\n    var paren_char_next15\
    \ = \"\"\n    var paren_char_prev16 = \"\"\n    var paren_char_next16 = \"\"\n\
    \    var paren_char_prev17 = \"\"\n    var paren_char_next17 = \"\"\n    var paren_char_prev18\
    \ = \"\"\n    var paren_char_next18 = \"\"\n    var paren_char_prev19 = \"\"\n\
    \    var paren_char_next19 = \"\"\n    var paren_char_prev20 = \"\"\n    var paren_char_next20\
    \ = \"\"\n    var paren_char_prev21 = \"\"\n    var paren_char_next21 = \"\"\n\
    \    var paren_char_prev22 = \"\"\n    var paren_char_next22 = \"\"\n    var paren_char_prev23\
    \ = \"\"\n    var paren_char_next23 = \"\"\n    var paren_char_prev24 = \"\"\n\
    \    var paren_char_next24 = \"\"\n    var paren_char_prev25 = \"\"\n    var paren_char_next25\
    \ = \"\"\n    var paren_char_prev26 = \"\"\n    var paren_char_next26 = \"\"\n\
    \    var paren_char_prev27 = \"\"\n    var paren_char_next27 = \"\"\n    var paren_char_prev28\
    \ = \"\"\n    var paren_char_next28 = \"\"\n    var paren_char_prev29 = \"\"\n\
    \    var paren_char_next29 = \"\"\n    var paren_char_prev30 = \"\"\n    var paren_char_next30\
    \ = \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9x8hc7a5.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp9x8hc7a5.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp9x8hc7a5.swift:10:9: warning: initialization of variable 'max_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9x8hc7a5.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp9x8hc7a5.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9x8hc7a5.swift:13:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp9x8hc7a5.swift:14:9: warning: initialization of variable 'paren_char_prev'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_prev = \"\"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp9x8hc7a5.swift:15:9:\
    \ warning: initialization of variable 'paren_char_next' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_next = \"\
    \"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp9x8hc7a5.swift:16:9: warning: initialization\
    \ of variable 'paren_char_prev2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_char_prev2 = \"\"\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp9x8hc7a5.swift:17:9: warning: initialization of variable 'paren_char_next2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_next2 = \"\""
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string {\n        if c == '(' {\n            paren_count\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n        }\n\
    \        if paren_count == 0 {\n            levels.append(level)\n        }\n\
    \        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0hrrfvd0.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp0hrrfvd0.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_count = 0\n    var paren_level_parens_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count = 0\n    var paren_level_parens_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count = 0\n  \
    \  var paren_level_parens_count_max_count_max_count_max_count = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2z2019ws.swift:21:9: error: invalid redeclaration of 'paren_level_parens_count_max_count_max_count_max_count'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count = 0\n        ^\n\
    /tmp/tmp2z2019ws.swift:20:9: note: 'paren_level_parens_count_max_count_max_count_max_count'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count\
    \ = 0\n        ^\n/tmp/tmp2z2019ws.swift:25:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max'\n   \
    \ var paren_level_parens_count_max_count_max_count_max_count_max_count_max = 0\n\
    \        ^\n/tmp/tmp2z2019ws.swift:24:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp2z2019ws.swift:28:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp2z2019ws.swift:27:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp2z2019ws.swift:29:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp2z2019ws.swift:27:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp2z2019ws.swift:31:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if parens_count == 0 {\n\
    \            parens_string = string(c)\n        } else {\n            parens_string\
    \ = parens_string + string(c)\n        }\n        if parens_count == 0 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 1 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 2 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 3 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 4 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 5 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 6 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 7 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 8 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 9 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 10 {\n  \
    \          parens = parens + 1\n        }\n        if parens_count == 11 {\n \
    \           parens = parens + 1\n        }\n        if parens_count == 12 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 13 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 14 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 15 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 16 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 17 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 18 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 19 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 20 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 21 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 22 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 23 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 24 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 25 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 26 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 27 {\n\
    \            parens = parens + 1\n        }\n        if paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5cuqt1wv.swift:104:17: error: expected '{' after 'if' condition\n\
    \        if paren\n                ^\n/tmp/tmp5cuqt1wv.swift:122:67: error: expected\
    \ '}' at end of brace statement\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])\n                                                                  ^\n\
    /tmp/tmp5cuqt1wv.swift:7:57: note: to match this opening '{'\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n                                                       \
    \ ^\n/tmp/tmp5cuqt1wv.swift:16:29: error: cannot find 'string' in scope\n    \
    \        parens_string = string(c)\n                            ^~~~~~\n/tmp/tmp5cuqt1wv.swift:18:45:\
    \ error: cannot find 'string' in scope\n            parens_string = parens_string\
    \ + string(c)\n                                            ^~~~~~\n/tmp/tmp5cuqt1wv.swift:104:12:\
    \ error: cannot find 'paren' in scope\n        if paren\n           ^~~~~\n/tmp/tmp5cuqt1wv.swift:108:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char_count = 0\n    var paren_char = \"\"\n    for c in paren_string\
    \ {\n        if c == '(' {\n            paren_count += 1\n            paren_char_count\
    \ += 1\n            levels.append(level)\n            level = 0\n        } else\
    \ if c == ')' {\n            paren_count -= 1\n            paren_char_count -=\
    \ 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \            }\n            level = 0\n        } else {\n            level +=\
    \ 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpus6b4vul.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpus6b4vul.swift:19:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpus6b4vul.swift:12:9: warning: initialization of variable\
    \ 'paren_char' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_char_count\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_array = [String]()\n    var\
    \ paren_char_array_index = 0\n    var paren_char_array_index = 0\n    var paren_char_array_count\
    \ = 0\n    var paren_char_array_string = \"\"\n    var paren_char_array_string_length\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_length = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_length\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_length = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_length\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_length = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_length\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_length = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_length\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_length = 0\n    var paren_char_array_string_count\
    \ = 0\n    var paren_char_array_string_index = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjxrg0yyj.swift:17:9: error: invalid redeclaration of 'paren_char_array_index'\n\
    \    var paren_char_array_index = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:16:9: note:\
    \ 'paren_char_array_index' previously declared here\n    var paren_char_array_index\
    \ = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_array_string_index'\n    var paren_char_array_string_index = 0\n\
    \        ^\n/tmp/tmpjxrg0yyj.swift:22:9: note: 'paren_char_array_string_index'\
    \ previously declared here\n    var paren_char_array_string_index = 0\n      \
    \  ^\n/tmp/tmpjxrg0yyj.swift:24:9: error: invalid redeclaration of 'paren_char_array_string_count'\n\
    \    var paren_char_array_string_count = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:21:9:\
    \ note: 'paren_char_array_string_count' previously declared here\n    var paren_char_array_string_count\
    \ = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:25:9: error: invalid redeclaration of\
    \ 'paren_char_array_string_length'\n    var paren_char_array_string_length = 0\n\
    \        ^\n/tmp/tmpjxrg0yyj.swift:20:9: note: 'paren_char_array_string_length'\
    \ previously declared here\n    var paren_char_array_string_length = 0\n     \
    \   ^\n/tmp/tmpjxrg0yyj.swift:26:9: error: invalid redeclaration of 'paren_char_array_string_count'\n\
    \    var paren_char_array_string_count = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:21:9:\
    \ note: 'paren_char_array_string_count' previously declared here\n    var paren_char_array_string_count\
    \ = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:27:9: error: invalid redeclaration of\
    \ 'paren_char_array_string_index'\n    var paren_char_array_string_index = 0\n\
    \        ^\n/tmp/tmpjxrg0yyj.swift:22:9: note: 'paren_char_array_string_index'\
    \ previously declared here\n    var paren_char_array_string_index = 0\n      \
    \  ^\n/tmp/tmpjxrg0yyj.swift:28:9: error: invalid redeclaration of 'paren_char_array_string_index'\n\
    \    var paren_char_array_string_index = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:22:9:\
    \ note: 'paren_char_array_string_index' previously declared here\n    var paren_char_array_string_index\
    \ = 0\n        ^\n/tmp/tmpjxrg0yyj.swift:29:9: error: invalid redec"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiv73htpm.swift:94:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpiv73htpm.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpiv73htpm.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpiv73htpm.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:16:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:17:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:18:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:19:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:20:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:21:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpiv73htpm.swift:22:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpiv73htpm.swift:13:9: note: 'parens_string' pr"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_group = [String]()\n    var paren_group_level\
    \ = [Int]()\n    var paren_group_level_max = [Int]()\n    var paren_group_level_max_index\
    \ = [Int]()\n    var paren_group_level_max_index2 = [Int]()\n    var paren_group_level_max_index3\
    \ = [Int]()\n    var paren_group_level_max_index4 = [Int]()\n    var paren_group_level_max_index5\
    \ = [Int]()\n    var paren_group_level_max_index6 = [Int]()\n    var paren_group_level_max_index7\
    \ = [Int]()\n    var paren_group_level_max_index8 = [Int]()\n    var paren_group_level_max_index9\
    \ = [Int]()\n    var paren_group_level_max_index10 = [Int]()\n    var paren_group_level_max_index11\
    \ = [Int]()\n    var paren_group_level_max_index12 = [Int]()\n    var paren_group_level_max_index13\
    \ = [Int]()\n    var paren_group_level_max_index14 = [Int]()\n    var paren_group_level_max_index15\
    \ = [Int]()\n    var paren_group_level_max_index16 = [Int]()\n    var paren_group_level_max_index17\
    \ = [Int]()\n    var paren_group_level_max_index18 = [Int]()\n    var paren_group_level_max_index19\
    \ = [Int]()\n    var paren_group_level_max_index20 = [Int]()\n    var paren_group_level_max_index21\
    \ = [Int]()\n    var paren_group_level_max_index22 = [Int]()\n    var paren_group_level_max_index23\
    \ = [Int]()\n    var paren_group_level_max_index24 = [Int]()\n    var paren_group_level_max_index25\
    \ = [Int]()\n    var paren_group_level_max_index26 = [Int]()\n    var paren_group_level_max_index27\
    \ = [Int]()\n    var paren_group_level_max_index28 = [Int]()\n    var paren_group_level_max_index29\
    \ = [Int]()\n    var paren_group_level_max_index30 = [Int]()\n    var paren_group_level_max_index31\
    \ = [Int]()\n    var paren_group_level_max_index32 = [Int]()\n    var paren_group_level_max_index33\
    \ = [Int]()\n    var paren_group_level_max_index34 = [Int]()\n    var paren_group_level_max_index35\
    \ = [Int]()\n    var paren_group_level_max_index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplnyecbun.swift:50:9: error: type annotation missing in pattern\n\
    \    var paren_group_level_max_index\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_pos = 0\n    var paren_char_len = paren_string.characters.count\n\
    \    var paren_char_char_pos = 0\n    var paren_char_char_len = paren_char.characters.count\n\
    \    var paren_char_len = paren_string.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_len\
    \ = paren_string.characters.count\n    var paren_char_char_pos = 0\n    var paren_char_char_len\
    \ = paren_char.characters.count\n    var paren_char_len = paren_string.characters.count\n\
    \    var paren_char_char_pos = 0\n    var paren_char_char_len = paren_char.characters.count\n\
    \    var paren_char_len = paren_string.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_len\
    \ = paren_string.characters.count\n    var paren_char_char_pos = 0\n    var paren_char_char_len\
    \ = paren_char.characters.count\n    var paren_char_len = paren_string.characters.count\n\
    \    var paren_char_char_pos = 0\n    var paren_char_char_len = paren_char.characters.count\n\
    \    var paren_char_len = paren_string.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_len\
    \ = paren_string.characters.count\n    var paren_char_char_pos = 0\n    var paren_char_char_len\
    \ = paren_char.characters.count\n    var paren_char_len = paren_string.characters.count\n\
    \    var paren_char_char_pos = 0\n    var paren_char_char_len = paren_char.characters.count\n\
    \    var paren_char_len = paren_string.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_len\
    \ = paren_string.characters.count\n    var paren_char_char_pos = 0\n    var paren_char_char_len\
    \ = paren_char.characters.count\n    var paren_char_len = paren_string.characters.count\n\
    \    var paren_char_char_pos = 0\n    var paren_char_char_len = paren_char.characters.count\n\
    \    var paren_char_len = paren_string.characters.count\n    var paren_char_char_pos\
    \ = 0\n    var paren_char_char_len = paren_char.characters.count\n    var paren_char_len\
    \ = paren_string.characters.count\n    var paren_char_char_pos = 0\n    var paren_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3wmtu462.swift:15:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    var paren_char_len = paren_string.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3wmtu462.swift:17:42: error: 'characters' is unavailable:\
    \ Please use String directly\n    var paren_char_char_len = paren_char.characters.count\n\
    \                                         ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp3wmtu462.swift:18:39: error: 'characters'\
    \ is unavailable: Please use String directly\n    var paren_char_len = paren_string.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3wmtu462.swift:18:9: error: invalid redeclaration of\
    \ 'paren_char_len'\n    var paren_char_len = paren_string.characters.count\n \
    \       ^\n/tmp/tmp3wmtu462.swift:15:9: note: 'paren_char_len' previously declared\
    \ here\n    var paren_char_len = paren_string.characters.count\n        ^\n/tmp/tmp3wmtu462.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_char_pos'\n    var paren_char_char_pos\
    \ = 0\n        ^\n/tmp/tmp3wmtu462.swift:16:9: note: 'paren_char_char_pos' previously\
    \ declared here\n    var paren_char_char_pos = 0\n        ^\n/tmp/tmp3wmtu462.swift:20:42:\
    \ error: 'characters' is unavailable: Please use String directly\n    var paren_char_char_len\
    \ = paren_char.characters.count\n                                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3wmtu462.swift:20:9:\
    \ error: invalid redeclaration of 'paren_char_char_len'\n    var paren_char_char_len\
    \ = paren_char.characters.count\n        ^\n/tmp/tmp3wmtu462.swift:17:9: note:\
    \ 'paren_char_char"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren_level_stack_index53\
    \ = 0\n    var paren_level_stack_index54 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpadty6w32.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_count_paren = 0\n    var paren_level\
    \ = 0\n    var paren_level_paren = 0\n    var paren_level_paren_count = 0\n  \
    \  var paren_level_paren_count_paren = 0\n    var paren_level_paren_count_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren = 0\n    var paren_level_paren_count_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_level_paren_count_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_count_paren_paren_paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5xe9zf7b.swift:33:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_count_paren_paren_paren\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpep18sx0r.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_char = \"\"\n    var paren_level_string = \"\"\n  \
    \  var paren_level_char_index = 0\n    var paren_level_char_indexes = [Int]()\n\
    \    var paren_level_chars = [String]()\n    var paren_level_char_indexes_string\
    \ = [String]()\n    var paren_level_char_indexes_string_index = 0\n    var paren_level_char_indexes_string_indexes\
    \ = [Int]()\n    var paren_level_char_indexes_string_indexes_index = 0\n    var\
    \ paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_indexes_string_indexes_index\
    \ = 0\n    var paren_level_char_indexes_string_indexes_index = 0\n    var paren_level_char_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwr40p_3w.swift:23:9: error: invalid redeclaration of 'paren_level_char_indexes_string_indexes_index'\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:22:9:\
    \ note: 'paren_level_char_indexes_string_indexes_index' previously declared here\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_char_indexes_string_indexes_index'\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:22:9:\
    \ note: 'paren_level_char_indexes_string_indexes_index' previously declared here\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_char_indexes_string_indexes_index'\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:22:9:\
    \ note: 'paren_level_char_indexes_string_indexes_index' previously declared here\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:26:9:\
    \ error: invalid redeclaration of 'paren_level_char_indexes_string_indexes_index'\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:22:9:\
    \ note: 'paren_level_char_indexes_string_indexes_index' previously declared here\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:27:9:\
    \ error: invalid redeclaration of 'paren_level_char_indexes_string_indexes_index'\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:22:9:\
    \ note: 'paren_level_char_indexes_string_indexes_index' previously declared here\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:28:9:\
    \ error: invalid redeclaration of 'paren_level_char_indexes_string_indexes_index'\n\
    \    var paren_level_char_indexes_string_indexes_index = 0\n        ^\n/tmp/tmpwr40p_3w.swift:22:9:\
    \ note: 'paren_level_char_indexes_string_indexes_index' previously declared her"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if paren_char == 0 {\n            paren_char = c\n            level\
    \ = 0\n            paren_count = 0\n            paren_level = 0\n        }\n \
    \       if paren_char == c {\n            paren_count += 1\n        } else {\n\
    \            paren_count = 0\n        }\n        if paren_count == 0 {\n     \
    \       levels.append(level)\n            paren_level = 0\n        }\n       \
    \ if paren_count == 1 {\n            levels.append(level)\n            paren_level\
    \ = 1\n        }\n        level += 1\n        paren_char = c\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl7e1qfq5.swift:15:26: error: cannot assign value of type 'Unicode.Scalar'\
    \ to type 'Int'\n            paren_char = c\n                         ^\n/tmp/tmpl7e1qfq5.swift:20:23:\
    \ error: operator function '==' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if paren_char == c {\n                      ^\nSwift.BinaryInteger:2:24:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    public static func == <Other>(lhs:\
    \ Self, rhs: Other) -> Bool where Other : BinaryInteger\n                    \
    \   ^\n/tmp/tmpl7e1qfq5.swift:34:22: error: cannot assign value of type 'Unicode.Scalar'\
    \ to type 'Int'\n        paren_char = c\n                     ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_char_length_index = 0\n    var paren_char_length_count = 0\n    var paren_char_length_count2\
    \ = 0\n    var paren_char_length_count3 = 0\n    var paren_char_length_count4\
    \ = 0\n    var paren_char_length_count5 = 0\n    var paren_char_length_count6\
    \ = 0\n    var paren_char_length_count7 = 0\n    var paren_char_length_count8\
    \ = 0\n    var paren_char_length_count9 = 0\n    var paren_char_length_count10\
    \ = 0\n    var paren_char_length_count11 = 0\n    var paren_char_length_count12\
    \ = 0\n    var paren_char_length_count13 = 0\n    var paren_char_length_count14\
    \ = 0\n    var paren_char_length_count15 = 0\n    var paren_char_length_count16\
    \ = 0\n    var paren_char_length_count17 = 0\n    var paren_char_length_count18\
    \ = 0\n    var paren_char_length_count19 = 0\n    var paren_char_length_count20\
    \ = 0\n    var paren_char_length_count21 = 0\n    var paren_char_length_count22\
    \ = 0\n    var paren_char_length_count23 = 0\n    var paren_char_length_count24\
    \ = 0\n    var paren_char_length_count25 = 0\n    var paren_char_length_count26\
    \ = 0\n    var paren_char_length_count27 = 0\n    var paren_char_length_count28\
    \ = 0\n    var paren_char_length_count29 = 0\n    var paren_char_length_count30\
    \ = 0\n    var paren_char_length_count31 = 0\n    var paren_char_length_count32\
    \ = 0\n    var paren_char_length_count33 = 0\n    var paren_char_length_count34\
    \ = 0\n    var paren_char_length_count35 = 0\n    var paren_char_length_count36\
    \ = 0\n    var paren_char_length_count37 = 0\n    var paren_char_length_count38\
    \ = 0\n    var paren_char_length_count39 = 0\n    var paren_char_length_count40\
    \ = 0\n    var paren_char_length_count41 = 0\n    var paren_char_length_count42\
    \ = 0\n    var paren_char_length_count43 = 0\n    var paren_char_length_count44\
    \ = 0\n    var paren_char_length_count45 = 0\n    var paren_char_length_count46\
    \ = 0\n    var paren_char_length_count47 = 0\n    var paren_char_length_count48\
    \ = 0\n    var paren_char_length_count49 = 0\n    var paren_char_length_count50\
    \ = 0\n    var paren_char_length_count51 = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsb681_w1.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpsb681_w1.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpsb681_w1.swift:10:9: warning: initialization of variable 'max_level_paren'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_paren = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpsb681_w1.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpsb681_w1.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsb681_w1.swift:13:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpsb681_w1.swift:14:9: warning: initialization of variable 'paren_char_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_index = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsb681_w1.swift:15:9:\
    \ warning: initialization of variable 'paren_char_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_length =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsb681_w1.swift:16:9: warning: initialization\
    \ of variable 'paren_char_length_index' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_char_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpsb681_w1.swift:17:9: warning: initialization of variable 'paren_char_length_count'\
    \ was never used; consider replacing with assignment to '_' or removing i"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp40atbzd8.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp40atbzd8.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp40atbzd8.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp40atbzd8.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp40atbzd8.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp40atbzd8.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp40atbzd8.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp40atbzd8.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp40atbzd8.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp40atbzd8.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp40atbzd8.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp40atbzd8.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp40atbzd8.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    var levels_stack = [Int]()\n    var levels_stack_index = 0\n\
    \    var paren_count = 0\n    for char in paren_string {\n        if char == '('\
    \ {\n            paren_count++\n            levels_stack[levels_stack_index] =\
    \ level\n            levels_stack_index++\n            level++\n        } else\
    \ if char == ')' {\n            level--\n            if levels_stack_index ==\
    \ 0 {\n                levels_stack_index--\n                levels_stack = levels_stack[levels_stack_index..<levels_stack_index-1]\n\
    \            }\n        } else if char == ' ' {\n            if levels_stack_index\
    \ == 0 {\n                levels_stack_index--\n                levels_stack =\
    \ levels_stack[levels_stack_index..<levels_stack_index-1]\n            }\n   \
    \     } else {\n            levels_stack_index--\n            levels_stack = levels_stack[levels_stack_index..<levels_stack_index-1]\n\
    \        }\n        if levels_stack_index == 0 {\n            levels_stack = levels_stack[levels_stack_index..<levels_stack_index-1]\n\
    \        }\n        if level > max_level {\n            max_level = level\n  \
    \      }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg7dqx5zz.swift:15:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpg7dqx5zz.swift:20:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpg7dqx5zz.swift:26:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpg7dqx5zz.swift:16:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_count++\n                       ^~\n/tmp/tmpg7dqx5zz.swift:18:31: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            levels_stack_index++\n\
    \                              ^~\n/tmp/tmpg7dqx5zz.swift:19:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            level++\n   \
    \              ^~\n/tmp/tmpg7dqx5zz.swift:21:18: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            level--\n                 ^~\n/tmp/tmpg7dqx5zz.swift:23:35:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      levels_stack_index--\n                                  ^~\n/tmp/tmpg7dqx5zz.swift:24:44:\
    \ error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n     \
    \           levels_stack = levels_stack[levels_stack_index..<levels_stack_index-1]\n\
    \                               ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg7dqx5zz.swift:28:35: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n                levels_stack_index--\n                       \
    \           ^~\n/tmp/tmpg7dqx5zz.swift:29:44: error: cannot assign value of type\
    \ 'ArraySlice<Int>' to type '[Int]'\n                levels_stack = levels_stack[levels_stack_index..<levels_stack_index-1]\n\
    \                               ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg7dqx5zz.swift:32:31: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_char_char_length = 0\n    var paren_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp35liugid.swift:33:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmp35liugid.swift:32:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmp35liugid.swift:37:9: error: type annotation missing\
    \ in pattern\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_max\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa1g7fkvg.swift:17:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:18:9: error: invalid redeclaration of\
    \ 'parens_level_max_count_index'\n    var parens_level_max_count_index = 0\n \
    \       ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index' previously\
    \ declared here\n    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:19:9:\
    \ error: invalid redeclaration of 'parens_level_max_count_index'\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index'\
    \ previously declared here\n    var parens_level_max_count_index = 0\n       \
    \ ^\n/tmp/tmpa1g7fkvg.swift:20:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:21:9: error: invalid redeclaration of\
    \ 'parens_level_max_count_index'\n    var parens_level_max_count_index = 0\n \
    \       ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index' previously\
    \ declared here\n    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:22:9:\
    \ error: invalid redeclaration of 'parens_level_max_count_index'\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index'\
    \ previously declared here\n    var parens_level_max_count_index = 0\n       \
    \ ^\n/tmp/tmpa1g7fkvg.swift:23:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:24:9: error: invalid redeclara"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == parenthesisOpeningCharacter\
    \ {\n            parens += 1\n        } else if c == parenthesisClosingCharacter\
    \ {\n            parens -= 1\n            if parens == 0 {\n                levels.append(level)\n\
    \            }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptcxhpckh.swift:12:17: error: cannot find 'parenthesisOpeningCharacter'\
    \ in scope\n        if c == parenthesisOpeningCharacter {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptcxhpckh.swift:14:24: error: cannot find 'parenthesisClosingCharacter'\
    \ in scope\n        } else if c == parenthesisClosingCharacter {\n           \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    for idx, char in\
    \ enumerate(paren_string) {\n        if char == '(' {\n            paren_count\
    \ += 1\n            levels.append(paren_level)\n            paren_level += 1\n\
    \            paren_start = idx\n        } else if char == ')' {\n            paren_count\
    \ -= 1\n            if paren_count > 0 {\n                levels.append(paren_level)\n\
    \                paren_level -= 1\n            } else {\n                levels.append(paren_level)\n\
    \                levels.append(paren_level)\n                levels.append(paren_level)\n\
    \                levels.append(paren_level)\n            }\n        }\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprty6t_oq.swift:13:12: error: expected 'in' after for-each pattern\n\
    \    for idx, char in enumerate(paren_string) {\n           ^\n/tmp/tmprty6t_oq.swift:13:12:\
    \ error: expected Sequence expression for for-each loop\n    for idx, char in\
    \ enumerate(paren_string) {\n           ^\n/tmp/tmprty6t_oq.swift:14:20: error:\
    \ single-quoted string literal found, use '\"'\n        if char == '(' {\n   \
    \                ^~~\n                   \"(\"\n/tmp/tmprty6t_oq.swift:19:27:\
    \ error: single-quoted string literal found, use '\"'\n        } else if char\
    \ == ')' {\n                          ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_count_in_group\
    \ = 0\n    var parens_count_in_group_parens = 0\n    var parens_count_in_group_parens_count\
    \ = 0\n    var parens_count_in_group_parens_count_in_group = 0\n    var parens_count_in_group_parens_count_in_group_parens\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count = 0\n\
    \    var parens_count_in_group_parens_count_in_group_parens_count_in_group = 0\n\
    \    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7l4ni7i9.swift:31:9: error: type annotation missing in pattern\n\
    \    var parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_parens_count_in_group_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count = 0\n\
    \    var paren_level_parens_count_max = 0\n    var paren_level_parens_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max = 0\n    var paren_level_parens_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max = 0\n    var paren_level_parens_count_max_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max = 0\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count = 0\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var paren_level_parens_count_max_count_max_count_max_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi4iih1u9.swift:25:9: error: invalid redeclaration of 'paren_level_parens_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:24:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:29:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:27:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:31:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:30:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:34:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmpi4iih1u9.swift:33:9: note: 'paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var paren_level_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = "
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n   \
    \ var level = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_count_index\
    \ = 0\n    var paren_count_stack = [Int]()\n    var paren_count_stack_index =\
    \ 0\n    var paren_count_stack_index2 = 0\n    var paren_count_stack_index3 =\
    \ 0\n    var paren_count_stack_index4 = 0\n    var paren_count_stack_index5 =\
    \ 0\n    var paren_count_stack_index6 = 0\n    var paren_count_stack_index7 =\
    \ 0\n    var paren_count_stack_index8 = 0\n    var paren_count_stack_index9 =\
    \ 0\n    var paren_count_stack_index10 = 0\n    var paren_count_stack_index11\
    \ = 0\n    var paren_count_stack_index12 = 0\n    var paren_count_stack_index13\
    \ = 0\n    var paren_count_stack_index14 = 0\n    var paren_count_stack_index15\
    \ = 0\n    var paren_count_stack_index16 = 0\n    var paren_count_stack_index17\
    \ = 0\n    var paren_count_stack_index18 = 0\n    var paren_count_stack_index19\
    \ = 0\n    var paren_count_stack_index20 = 0\n    var paren_count_stack_index21\
    \ = 0\n    var paren_count_stack_index22 = 0\n    var paren_count_stack_index23\
    \ = 0\n    var paren_count_stack_index24 = 0\n    var paren_count_stack_index25\
    \ = 0\n    var paren_count_stack_index26 = 0\n    var paren_count_stack_index27\
    \ = 0\n    var paren_count_stack_index28 = 0\n    var paren_count_stack_index29\
    \ = 0\n    var paren_count_stack_index30 = 0\n    var paren_count_stack_index31\
    \ = 0\n    var paren_count_stack_index32 = 0\n    var paren_count_stack_index33\
    \ = 0\n    var paren_count_stack_index34 = 0\n    var paren_count_stack_index35\
    \ = 0\n    var paren_count_stack_index36 = 0\n    var paren_count_stack_index37\
    \ = 0\n    var paren_count_stack_index38 = 0\n    var paren_count_stack_index39\
    \ = 0\n    var paren_count_stack_index40 = 0\n    var paren_count_stack_index41\
    \ = 0\n    var paren_count_stack_index42 = 0\n    var paren_count_stack_index43\
    \ = 0\n    var paren_count_stack_index44 = 0\n    var paren_count_stack_index45\
    \ = 0\n    var paren_count_stack_index46 = 0\n    var paren_count_stack_index47\
    \ = 0\n    var paren_count_stack_index48 = 0\n    var paren_count_stack_index49\
    \ = 0\n    var paren_count_stack_index50 = 0\n    var paren_count_stack_index51\
    \ = 0\n    var paren_count_stack_index52 = 0\n    var paren_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9kemy0d3.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.characters {\n        if ch == '(' {\n     \
    \       paren_count += 1\n        } else if ch == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsd3xg4pg.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpsd3xg4pg.swift:14:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpsd3xg4pg.swift:11:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_parens = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_parens = [Int]()\n    var paren_levels_string = \"\"\
    \n    var paren_parens_string = \"\"\n    var paren_levels_string_index = 0\n\
    \    var paren_parens_string_index = 0\n    var paren_levels_string_index2 = 0\n\
    \    var paren_parens_string_index2 = 0\n    var paren_levels_string_index3 =\
    \ 0\n    var paren_parens_string_index3 = 0\n    var paren_levels_string_index4\
    \ = 0\n    var paren_parens_string_index4 = 0\n    var paren_levels_string_index5\
    \ = 0\n    var paren_parens_string_index5 = 0\n    var paren_levels_string_index6\
    \ = 0\n    var paren_parens_string_index6 = 0\n    var paren_levels_string_index7\
    \ = 0\n    var paren_parens_string_index7 = 0\n    var paren_levels_string_index8\
    \ = 0\n    var paren_parens_string_index8 = 0\n    var paren_levels_string_index9\
    \ = 0\n    var paren_parens_string_index9 = 0\n    var paren_levels_string_index10\
    \ = 0\n    var paren_parens_string_index10 = 0\n    var paren_levels_string_index11\
    \ = 0\n    var paren_parens_string_index11 = 0\n    var paren_levels_string_index12\
    \ = 0\n    var paren_parens_string_index12 = 0\n    var paren_levels_string_index13\
    \ = 0\n    var paren_parens_string_index13 = 0\n    var paren_levels_string_index14\
    \ = 0\n    var paren_parens_string_index14 = 0\n    var paren_levels_string_index15\
    \ = 0\n    var paren_parens_string_index15 = 0\n    var paren_levels_string_index16\
    \ = 0\n    var paren_parens_string_index16 = 0\n    var paren_levels_string_index17\
    \ = 0\n    var paren_parens_string_index17 = 0\n    var paren_levels_string_index18\
    \ = 0\n    var paren_parens_string_index18 = 0\n    var paren_levels_string_index19\
    \ = 0\n    var paren_parens_string_index19 = 0\n    var paren_levels_string_index20\
    \ = 0\n    var paren_parens_string_index20 = 0\n    var paren_levels_string_index21\
    \ = 0\n    var paren_parens_string_index21 = 0\n    var paren_levels_string_index22\
    \ = 0\n    var paren_parens_string_index22 = 0\n    var paren_levels_string_index23\
    \ = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuerpiohc.swift:14:9: error: invalid redeclaration of 'paren_parens'\n\
    \    var paren_parens = [Int]()\n        ^\n/tmp/tmpuerpiohc.swift:12:9: note:\
    \ 'paren_parens' previously declared here\n    var paren_parens = 0\n        ^\n\
    /tmp/tmpuerpiohc.swift:62:9: error: type annotation missing in pattern\n    var\
    \ paren_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if parens_count > 0 {\n\
    \            parens_string += c\n            parens_count += 1\n            if\
    \ parens_count == 2 {\n                parens_count = 0\n                parens\
    \ = parens + 1\n                if parens > max_level_parens {\n             \
    \       max_level_parens = parens\n                    max_level = level\n   \
    \             }\n            }\n        } else {\n            if c == \")\" {\n\
    \                parens = parens - 1\n                if parens == 0 {\n     \
    \               level = level - 1\n                }\n            }\n        }\n\
    \    }\n    if parens_count > 0 {\n        parens_string += \")\"\n    }\n   \
    \ return [max_level, max_level_parens, parens_count, parens_string]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvrc3h0u2.swift:16:27: error: operator function '+=' requires that\
    \ 'Unicode.Scalar' conform to 'Sequence'\n            parens_string += c\n   \
    \                       ^\nSwift.RangeReplaceableCollection:4:35: note: where\
    \ 'Other' = 'Unicode.Scalar'\n    @inlinable public static func += <Other>(lhs:\
    \ inout Self, rhs: Other) where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\n/tmp/tmpvrc3h0u2.swift:38:56: error: cannot\
    \ convert value of type 'String' to expected element type 'Int'\n    return [max_level,\
    \ max_level_parens, parens_count, parens_string]\n                           \
    \                            ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for c in paren_string.unicodeScalars {\n\
    \        if parens_count > 0 {\n            levels[level] = parens\n         \
    \   parens = 0\n            parens_count = 0\n        }\n        if c == parenthesisOpeningCharacter\
    \ {\n            parens += 1\n            parens_count += 1\n        } else if\
    \ c == parenthesisClosingCharacter {\n            parens -= 1\n            parens_count\
    \ -= 1\n        }\n    }\n    levels[level] = parens\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpifjfzveu.swift:18:17: error: cannot find 'parenthesisOpeningCharacter'\
    \ in scope\n        if c == parenthesisOpeningCharacter {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpifjfzveu.swift:21:24: error: cannot find 'parenthesisClosingCharacter'\
    \ in scope\n        } else if c == parenthesisClosingCharacter {\n           \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char_count = 0\n    var paren_char = \"\"\n    var paren_char_index\
    \ = 0\n    var paren_char_length = 0\n    var paren_char_length_index = 0\n  \
    \  var paren_char_length_count = 0\n    var paren_char_length_char = \"\"\n  \
    \  var paren_char_length_char_index = 0\n    var paren_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length = 0\n    var paren_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_count = 0\n    var paren_char_length_char_length_char\
    \ = \"\"\n    var paren_char_length_char_length_char_index = 0\n    var paren_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length = 0\n    var paren_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_count = 0\n    var paren_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char = \"\"\n    var\
    \ paren_char_length_char_length_char_length_char_index = 0\n    var paren_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length = 0\n   \
    \ var paren_char_length_char_length_char_length_char_index = 0\n    var paren_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length = 0\n   \
    \ var paren_char_length_char_length_char_length_char_length_index = 0\n    var\
    \ paren_char_length_char_length_char_length_char_length_count = 0\n    var paren_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_count\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var paren_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpouxho48q.swift:27:9: error: invalid redeclaration of 'paren_char_length_char_length_char_index'\n\
    \    var paren_char_length_char_length_char_index = 0\n        ^\n/tmp/tmpouxho48q.swift:24:9:\
    \ note: 'paren_char_length_char_length_char_index' previously declared here\n\
    \    var paren_char_length_char_length_char_index = 0\n        ^\n/tmp/tmpouxho48q.swift:28:9:\
    \ error: invalid redeclaration of 'paren_char_length_char_length_char_count'\n\
    \    var paren_char_length_char_length_char_count = 0\n        ^\n/tmp/tmpouxho48q.swift:25:9:\
    \ note: 'paren_char_length_char_length_char_count' previously declared here\n\
    \    var paren_char_length_char_length_char_count = 0\n        ^\n/tmp/tmpouxho48q.swift:29:9:\
    \ error: invalid redeclaration of 'paren_char_length_char_length_char_length'\n\
    \    var paren_char_length_char_length_char_length = 0\n        ^\n/tmp/tmpouxho48q.swift:26:9:\
    \ note: 'paren_char_length_char_length_char_length' previously declared here\n\
    \    var paren_char_length_char_length_char_length = 0\n        ^\n/tmp/tmpouxho48q.swift:36:9:\
    \ error: invalid redeclaration of 'paren_char_length_char_length_char_length_char_index'\n\
    \    var paren_char_length_char_length_char_length_char_index = 0\n        ^\n\
    /tmp/tmpouxho48q.swift:33:9: note: 'paren_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmpouxho48q.swift:37:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_count'\n    var paren_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmpouxho48q.swift:34:9: note: 'paren_char_length_char_length_char_length_char_count'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmpouxho48q.swift:38:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length'\n    var paren_char_length_char_length_char_length_char_length\
    \ = 0\n        ^\n/tmp/tmpouxho48q.swift:35:9: note: 'paren_char_length_char_length_char_length_char_length'"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_level_count = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_char_count = 0\n    var paren_level_char_start = 0\n\
    \    var paren_level_char_end = 0\n    var paren_level_char_char_count = 0\n \
    \   var paren_level_char_char_start = 0\n    var paren_level_char_char_end = 0\n\
    \    var paren_level_char_char_char_count = 0\n    var paren_level_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_end = 0\n    var paren_level_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_start = 0\n    var paren_level_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_count = 0\n    var paren_level_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_end = 0\n    var paren_level_char_char_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_char_char_start = 0\n    var paren_level_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_level_char_char_char_char_char_char_char_start = 0\n    var paren_level_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_level_char_char_char_char_char_char_char_char_start = 0\n    var\
    \ paren_level_char_char_char_char_char_char_char_char_end = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_end =\
    \ 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_char_char_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwc0knsmb.swift:50:9: error: invalid redeclaration of 'paren_level_char_char_char_char_char_char_char_char_char_char_char_count'\n\
    \    var paren_level_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmpwc0knsmb.swift:47:9: note: 'paren_level_char_char_char_char_char_char_char_char_char_char_char_count'\
    \ previously declared here\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmpwc0knsmb.swift:51:9: error: type annotation missing\
    \ in pattern\n    var paren_level_char_char_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_count\
    \ = 0\n    var parens_level_max = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_parens = 0\n    var parens_level_max_parens_count = 0\n   \
    \ var parens_level_max_parens_count_max = 0\n    var parens_level_max_parens_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count = 0\n    var parens_level_max_parens_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count = 0\n    var\
    \ parens_level_max_parens_count_max_count_max_count = 0\n    var parens_level_max_parens_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count = 0\n\
    \    var parens_level_max_parens_count_max_count_max_count_max_count = 0\n   \
    \ var parens_level_max_parens_count_max_count_max_count_max_count_max = 0\n  \
    \  var parens_level_max_parens_count_max_count_max_count_max_count_max_count =\
    \ 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4qcpcbm0.swift:20:9: error: invalid redeclaration of 'parens_level_max_parens_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:19:9:\
    \ note: 'parens_level_max_parens_count_max_count' previously declared here\n \
    \   var parens_level_max_parens_count_max_count = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:23:9:\
    \ error: invalid redeclaration of 'parens_level_max_parens_count_max_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count_max_count = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:22:9:\
    \ note: 'parens_level_max_parens_count_max_count_max_count' previously declared\
    \ here\n    var parens_level_max_parens_count_max_count_max_count = 0\n      \
    \  ^\n/tmp/tmp4qcpcbm0.swift:26:9: error: invalid redeclaration of 'parens_level_max_parens_count_max_count_max_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count_max_count_max_count = 0\n   \
    \     ^\n/tmp/tmp4qcpcbm0.swift:25:9: note: 'parens_level_max_parens_count_max_count_max_count_max_count'\
    \ previously declared here\n    var parens_level_max_parens_count_max_count_max_count_max_count\
    \ = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:29:9: error: invalid redeclaration of\
    \ 'parens_level_max_parens_count_max_count_max_count_max_count_max_count'\n  \
    \  var parens_level_max_parens_count_max_count_max_count_max_count_max_count =\
    \ 0\n        ^\n/tmp/tmp4qcpcbm0.swift:28:9: note: 'parens_level_max_parens_count_max_count_max_count_max_count_max_count'\
    \ previously declared here\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count\
    \ = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:31:9: error: invalid redeclaration of\
    \ 'parens_level_max_parens_count_max_count_max_count_max_count_max_count_max'\n\
    \    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:30:9: note: 'parens_level_max_parens_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp4qcpcbm0.swift:33:9"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = false\n    var paren_close = false\n    var paren_level_count\
    \ = 0\n    var paren_level_open = 0\n    var paren_level_close = 0\n    var paren_level_open_count\
    \ = 0\n    var paren_level_close_count = 0\n    var paren_level_open_count_max\
    \ = 0\n    var paren_level_close_count_max = 0\n    var paren_level_open_count_min\
    \ = 0\n    var paren_level_close_count_min = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n    var paren_level_close_count_min_index = 0\n    var paren_level_open_count_max_index\
    \ = 0\n    var paren_level_close_count_max_index = 0\n    var paren_level_open_count_min_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp954ehvum.swift:26:9: error: invalid redeclaration of 'paren_level_open_count_min_index'\n\
    \    var paren_level_open_count_min_index = 0\n        ^\n/tmp/tmp954ehvum.swift:22:9:\
    \ note: 'paren_level_open_count_min_index' previously declared here\n    var paren_level_open_count_min_index\
    \ = 0\n        ^\n/tmp/tmp954ehvum.swift:27:9: error: invalid redeclaration of\
    \ 'paren_level_close_count_min_index'\n    var paren_level_close_count_min_index\
    \ = 0\n        ^\n/tmp/tmp954ehvum.swift:23:9: note: 'paren_level_close_count_min_index'\
    \ previously declared here\n    var paren_level_close_count_min_index = 0\n  \
    \      ^\n/tmp/tmp954ehvum.swift:28:9: error: invalid redeclaration of 'paren_level_open_count_max_index'\n\
    \    var paren_level_open_count_max_index = 0\n        ^\n/tmp/tmp954ehvum.swift:24:9:\
    \ note: 'paren_level_open_count_max_index' previously declared here\n    var paren_level_open_count_max_index\
    \ = 0\n        ^\n/tmp/tmp954ehvum.swift:29:9: error: invalid redeclaration of\
    \ 'paren_level_close_count_max_index'\n    var paren_level_close_count_max_index\
    \ = 0\n        ^\n/tmp/tmp954ehvum.swift:25:9: note: 'paren_level_close_count_max_index'\
    \ previously declared here\n    var paren_level_close_count_max_index = 0\n  \
    \      ^\n/tmp/tmp954ehvum.swift:30:9: error: invalid redeclaration of 'paren_level_open_count_min_index'\n\
    \    var paren_level_open_count_min_index = 0\n        ^\n/tmp/tmp954ehvum.swift:22:9:\
    \ note: 'paren_level_open_count_min_index' previously declared here\n    var paren_level_open_count_min_index\
    \ = 0\n        ^\n/tmp/tmp954ehvum.swift:31:9: error: invalid redeclaration of\
    \ 'paren_level_close_count_min_index'\n    var paren_level_close_count_min_index\
    \ = 0\n        ^\n/tmp/tmp954ehvum.swift:23:9: note: 'paren_level_close_count_min_index'\
    \ previously declared here\n    var paren_level_close_count_min_index = 0\n  \
    \      ^\n/tmp/tmp954ehvum.swift:32:9: error: invalid redeclaration of 'paren_level_open_count_max_index'\n\
    \    var paren_level_open_count_max_index = 0\n        ^\n/tmp/tmp954ehvum.swift:24:9:\
    \ note: 'paren_level_open_count_max_index' previousl"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  for char in paren_string.characters {\n        if char == \"(\" {\n       \
    \     paren_level++\n            paren_levels.append(paren_level)\n          \
    \  paren_levels_string += String(char)\n        } else if char == \")\" {\n  \
    \          paren_level--\n            paren_levels_string += String(char)\n  \
    \          if paren_level == 0 {\n                paren_levels = paren_levels.reverse()\n\
    \                level = paren_levels[0]\n            }\n        }\n    }\n  \
    \  if paren_levels_string != \"\" {\n        max_level = level\n    }\n    return\
    \ paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp59g4rx_3.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp59g4rx_3.swift:15:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_level++\n                       ^~\n\
    /tmp/tmp59g4rx_3.swift:19:24: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            paren_level--\n                       ^~\n/tmp/tmp59g4rx_3.swift:22:45:\
    \ error: cannot assign value of type '()' to type '[Int]'\n                paren_levels\
    \ = paren_levels.reverse()\n                               ~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_parens = 0\n  \
    \  var level = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count = 0\n    var parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count =\
    \ 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcdor581u.swift:31:9: error: type annotation missing in pattern\n\
    \    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes = []\n\
    \    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppqubgq0u.swift:15:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmppqubgq0u.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmppqubgq0u.swift:17:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmppqubgq0u.swift:13:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmppqubgq0u.swift:18:9: error:\
    \ invalid redeclaration of 'paren_char'\n    var paren_char = \"\"\n        ^\n\
    /tmp/tmppqubgq0u.swift:14:9: note: 'paren_char' previously declared here\n   \
    \ var paren_char = \"\"\n        ^\n/tmp/tmppqubgq0u.swift:19:23: error: empty\
    \ collection literal requires an explicit type\n    var paren_chars = []\n   \
    \                   ^~\n/tmp/tmppqubgq0u.swift:19:9: error: invalid redeclaration\
    \ of 'paren_chars'\n    var paren_chars = []\n        ^\n/tmp/tmppqubgq0u.swift:15:9:\
    \ note: 'paren_chars' previously declared here\n    var paren_chars = []\n   \
    \     ^\n/tmp/tmppqubgq0u.swift:20:30: error: empty collection literal requires\
    \ an explicit type\n    var paren_char_indexes = []\n                        \
    \     ^~\n/tmp/tmppqubgq0u.swift:20:9: error: invalid redeclaration of 'paren_char_indexes'\n\
    \    var paren_char_indexes = []\n        ^\n/tmp/tmppqubgq0u.swift:16:9: note:\
    \ 'paren_char_indexes' previously declared here\n    var paren_char_indexes =\
    \ []\n        ^\n/tmp/tmppqubgq0u.swift:21:9: error: invalid redeclaration of\
    \ 'paren_char_index'\n    var paren_char_index = 0\n        ^\n/tmp/tmppqubgq0u.swift:13:9:\
    \ note: 'paren_char_index' previously declared here\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmppqubgq0u.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char'\n    var paren_char = \"\"\n        ^\n/tmp/tmppqubgq0u.swift:14:9:\
    \ note: 'paren_char' previously declared here\n    var paren_char = \"\"\n   \
    \     ^\n/tmp/tmppqubgq0u.swift:23:23: error: empty collection literal requires\
    \ an explicit type\n    var pa"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6ardhl9j.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4yd3v164.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp4yd3v164.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  for char in paren_string.characters {\n        if char == \"(\" {\n       \
    \     paren_level++\n            paren_levels.append(paren_level)\n          \
    \  paren_levels_string += String(char)\n        } else if char == \")\" {\n  \
    \          paren_level--\n            if paren_level == 0 {\n                paren_levels\
    \ = paren_levels.reversed()\n                paren_levels_string = paren_levels_string.reversed()\n\
    \                level = paren_levels[0]\n            }\n            paren_levels_string\
    \ += String(char)\n        }\n    }\n    if paren_levels_string == \"\" {\n  \
    \      max_level = 0\n    } else {\n        max_level = paren_levels_string.count\n\
    \    }\n    return paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptdl49nag.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptdl49nag.swift:15:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_level++\n                       ^~\n\
    /tmp/tmptdl49nag.swift:19:24: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            paren_level--\n                       ^~\n/tmp/tmptdl49nag.swift:22:59:\
    \ error: no 'reversed' candidates produce the expected contextual result type\
    \ 'String'\n                paren_levels_string = paren_levels_string.reversed()\n\
    \                                                          ^\nSwift.Sequence:2:40:\
    \ note: 'reversed()' produces '[String.Element]' (aka 'Array<Character>'), not\
    \ the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func reversed() -> [Self.Element]\n                                       ^\n\
    Swift.BidirectionalCollection:2:40: note: 'reversed()' produces 'ReversedCollection<String>',\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func reversed() -> ReversedCollection<Self>\n                              \
    \         ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == \"(\" {\n\
    \            levels[level] = parens\n            parens += 1\n        } else if\
    \ char == \")\" {\n            levels[level] = parens\n            parens -= 1\n\
    \        } else if char == \" \" {\n            levels[level] = parens\n     \
    \   }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5j0yfnzk.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpep18sx0r.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if parens_count == 0 {\n\
    \            parens_string = string(c)\n        } else {\n            parens_string\
    \ = parens_string + string(c)\n        }\n        if parens_count == 0 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 1 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 2 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 3 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 4 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 5 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 6 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 7 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 8 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 9 {\n   \
    \         parens = parens + 1\n        }\n        if parens_count == 10 {\n  \
    \          parens = parens + 1\n        }\n        if parens_count == 11 {\n \
    \           parens = parens + 1\n        }\n        if parens_count == 12 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 13 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 14 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 15 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 16 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 17 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 18 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 19 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 20 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 21 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 22 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 23 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 24 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 25 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 26 {\n\
    \            parens = parens + 1\n        }\n        if parens_count == 27 {\n\
    \            parens = parens + 1\n        }\n        if paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5cuqt1wv.swift:104:17: error: expected '{' after 'if' condition\n\
    \        if paren\n                ^\n/tmp/tmp5cuqt1wv.swift:122:67: error: expected\
    \ '}' at end of brace statement\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])\n                                                                  ^\n\
    /tmp/tmp5cuqt1wv.swift:7:57: note: to match this opening '{'\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n                                                       \
    \ ^\n/tmp/tmp5cuqt1wv.swift:16:29: error: cannot find 'string' in scope\n    \
    \        parens_string = string(c)\n                            ^~~~~~\n/tmp/tmp5cuqt1wv.swift:18:45:\
    \ error: cannot find 'string' in scope\n            parens_string = parens_string\
    \ + string(c)\n                                            ^~~~~~\n/tmp/tmp5cuqt1wv.swift:104:12:\
    \ error: cannot find 'paren' in scope\n        if paren\n           ^~~~~\n/tmp/tmp5cuqt1wv.swift:108:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqdeowu8v.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjgwwktiv.swift:26:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:25:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:30:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  for char in paren_string.characters {\n        if char == \"(\" {\n       \
    \     paren_levels_string += String(char)\n            paren_levels_string +=\
    \ String(char)\n            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_string += String(char)\n\
    \            paren_levels_string += String(char)\n            paren_levels_string\
    \ += String(char)\n            paren_levels_string += String(char)\n         \
    \   paren_levels_string += String(char)\n            paren_levels_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfq8zj01u.swift:79:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpfq8zj01u.swift:13:41:\
    \ note: to match this opening '{'\n    for char in paren_string.characters {\n\
    \                                        ^\n/tmp/tmpfq8zj01u.swift:79:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmpfq8zj01u.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmpfq8zj01u.swift:13:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfq8zj01u.swift:61:13: error: cannot find\
    \ 'paren_levels_' in scope\n            paren_levels_\n            ^~~~~~~~~~~~~\n\
    /tmp/tmpfq8zj01u.swift:65:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_index = 0\n    var paren_char_length\
    \ = 0\n    var paren_char_length_index = 0\n    var paren_char_length_char = 0\n\
    \    var paren_char_length_char_index = 0\n    var paren_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_index = 0\n    var paren_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_index = 0\n    var paren_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_index = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy_u9ry2l.swift:27:9: error: invalid redeclaration of 'paren_char_length_char_length_char_length_index'\n\
    \    var paren_char_length_char_length_char_length_index = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:25:9:\
    \ note: 'paren_char_length_char_length_char_length_index' previously declared\
    \ here\n    var paren_char_length_char_length_char_length_index = 0\n        ^\n\
    /tmp/tmpy_u9ry2l.swift:28:9: error: invalid redeclaration of 'paren_char_length_char_length_char_length_char'\n\
    \    var paren_char_length_char_length_char_length_char = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:26:9:\
    \ note: 'paren_char_length_char_length_char_length_char' previously declared here\n\
    \    var paren_char_length_char_length_char_length_char = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:29:9:\
    \ error: invalid redeclaration of 'paren_char_length_char_length_char_length_index'\n\
    \    var paren_char_length_char_length_char_length_index = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:25:9:\
    \ note: 'paren_char_length_char_length_char_length_index' previously declared\
    \ here\n    var paren_char_length_char_length_char_length_index = 0\n        ^\n\
    /tmp/tmpy_u9ry2l.swift:31:9: error: invalid redeclaration of 'paren_char_length_char_length_char_length_index'\n\
    \    var paren_char_length_char_length_char_length_index = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:25:9:\
    \ note: 'paren_char_length_char_length_char_length_index' previously declared\
    \ here\n    var paren_char_length_char_length_char_length_index = 0\n        ^\n\
    /tmp/tmpy_u9ry2l.swift:32:9: error: invalid redeclaration of 'paren_char_length_char_length_char_length_char_length'\n\
    \    var paren_char_length_char_length_char_length_char_length = 0\n        ^\n\
    /tmp/tmpy_u9ry2l.swift:30:9: note: 'paren_char_length_char_length_char_length_char_length'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length\
    \ = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:33:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_index'\n    var paren_char_length_char_length_char_length_index\
    \ = 0\n        ^\n/tmp/tmpy_u9ry2l.swift:25:9: note: 'paren_"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for index in 0..<paren_string.characters.count {\n        let char = paren_string.characters[index]\n\
    \        if char == \"(\" {\n            parens_count += 1\n            parens_string\
    \ += char\n        } else if char == \")\" {\n            parens_count -= 1\n\
    \            if parens_count == 0 {\n                parens_string += char\n \
    \               parens += parens_count\n            }\n            if parens_count\
    \ > max_level_parens {\n                max_level_parens = parens_count\n    \
    \            max_level = level\n            }\n        }\n        level += parens_count\n\
    \    }\n    if parens_count > max_level_parens {\n        max_level_parens = parens_count\n\
    \        max_level = level\n    }\n    return [max_level, max_level_parens, parens,\
    \ parens_string]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpstln15p6.swift:14:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<paren_string.characters.count {\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpstln15p6.swift:15:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpstln15p6.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpstln15p6.swift:18:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            parens_string += char\n                             ^\n/tmp/tmpstln15p6.swift:22:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                parens_string += char\n                                 ^\n/tmp/tmpstln15p6.swift:36:50:\
    \ error: cannot convert value of type 'String' to expected element type 'Int'\n\
    \    return [max_level, max_level_parens, parens, parens_string]\n           \
    \                                      ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_array = [String]()\n    var\
    \ paren_char_array_index = 0\n    var paren_char_array_count = 0\n    var paren_char_array_string\
    \ = \"\"\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string_index\
    \ = 0\n    var paren_char_array_string_count = 0\n    var paren_char_array_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbl58v7xn.swift:21:9: error: invalid redeclaration of 'paren_char_array_string_count'\n\
    \    var paren_char_array_string_count = 0\n        ^\n/tmp/tmpbl58v7xn.swift:19:9:\
    \ note: 'paren_char_array_string_count' previously declared here\n    var paren_char_array_string_count\
    \ = 0\n        ^\n/tmp/tmpbl58v7xn.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_array_string_index'\n    var paren_char_array_string_index = 0\n\
    \        ^\n/tmp/tmpbl58v7xn.swift:20:9: note: 'paren_char_array_string_index'\
    \ previously declared here\n    var paren_char_array_string_index = 0\n      \
    \  ^\n/tmp/tmpbl58v7xn.swift:23:9: error: invalid redeclaration of 'paren_char_array_string_count'\n\
    \    var paren_char_array_string_count = 0\n        ^\n/tmp/tmpbl58v7xn.swift:19:9:\
    \ note: 'paren_char_array_string_count' previously declared here\n    var paren_char_array_string_count\
    \ = 0\n        ^\n/tmp/tmpbl58v7xn.swift:24:9: error: invalid redeclaration of\
    \ 'paren_char_array_string_index'\n    var paren_char_array_string_index = 0\n\
    \        ^\n/tmp/tmpbl58v7xn.swift:20:9: note: 'paren_char_array_string_index'\
    \ previously declared here\n    var paren_char_array_string_index = 0\n      \
    \  ^\n/tmp/tmpbl58v7xn.swift:25:9: error: invalid redeclaration of 'paren_char_array_string_count'\n\
    \    var paren_char_array_string_count = 0\n        ^\n/tmp/tmpbl58v7xn.swift:19:9:\
    \ note: 'paren_char_array_string_count' previously declared here\n    var paren_char_array_string_count\
    \ = 0\n        ^\n/tmp/tmpbl58v7xn.swift:26:9: error: invalid redeclaration of\
    \ 'paren_char_array_string_index'\n    var paren_char_array_string_index = 0\n\
    \        ^\n/tmp/tmpbl58v7xn.swift:20:9: note: 'paren_char_array_string_index'\
    \ previously declared here\n    var paren_char_array_string_index = 0\n      \
    \  ^\n/tmp/tmpbl58v7xn.swift:27:9: error: invalid redeclaration of 'paren_char_array_string_count'\n\
    \    var paren_char_array_string_count = 0\n        ^\n/tmp/tmpbl58v7xn.swift:19:9:\
    \ note: 'paren_char_array_string_count' previously declared here\n    var paren_char_array_string_count\
    \ = 0\n        ^\n/tmp/tmpbl58v7xn.swift:28"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == \"(\" {\n\
    \            levels[level] = parens\n            parens += 1\n        } else if\
    \ char == \")\" {\n            levels[level] = parens\n            parens -= 1\n\
    \            if parens == 0 {\n                levels[level] = levels[level] +\
    \ 1\n            }\n        } else {\n            levels[level] += 1\n       \
    \ }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpp85u0yut.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2g8rfe2t.swift:26:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp2g8rfe2t.swift:25:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp2g8rfe2t.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp2g8rfe2t.swift:28:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp2g8rfe2t.swift:31:9: error: type annotation missing\
    \ in pattern\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_level\
    \ = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count = 0\n\
    \    var paren_level_parens_count_parens = 0\n    var paren_level_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens = 0\n    var paren_level_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens = 0\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count = 0\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpil1_frkc.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_group = [String]()\n    var paren_group_level\
    \ = [Int]()\n    var paren_group_max_level = [Int]()\n    var paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_count = [Int]()\n    var paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_level = [Int]()\n    var paren_group_paren_group_max_level\
    \ = [Int]()\n    var paren_group_paren_group_max_level_parens = [Int]()\n    var\
    \ paren_group_paren_group_paren_count = [Int]()\n    var paren_group_paren_group_paren_group\
    \ = [String]()\n    for char in paren_string.characters {\n        if char ==\
    \ '(' {\n            paren_count += 1\n            paren_group_level.append(level)\n\
    \            paren_group_paren_count.append(paren_count)\n            paren_group_paren_group.append(paren_group)\n\
    \            paren_group_paren_group_level.append(paren_group_level)\n       \
    \     paren_group_paren_group_max_level.append(max_level)\n            paren_group_paren_group_max_level_parens.append(max_level_parens)\n\
    \            paren_group_paren_group_paren_count.append(paren_group_paren_count)\n\
    \            paren_group_paren_group_paren_group.append(paren_group_paren_group)\n\
    \            paren_group_paren_group_paren_group_level.append(paren_group_paren_level)\n\
    \            paren_group_paren_group_paren_group_max_level.append(max_level_parens)\n\
    \            paren_group_paren_group_paren_group_max_level_parens.append(max_level_parens)\n\
    \            paren_group_paren_group_paren_group_paren_count.append(paren_group_paren_group_paren_count)\n\
    \            paren_group_paren_group_paren_group_paren_group.append(paren_group_paren_group_paren_group)\n\
    \            paren_group_max_level_parens = max(paren_group_max_level_parens,\
    \ max_level_parens)\n            paren_group_max_level = max(paren_group_max_level,\
    \ level)\n            paren_group_paren_count = 0\n            paren_group = [String]()\n\
    \            paren_group_level = [Int]()\n            paren_group_max_level =\
    \ 0\n            paren_group_max_level_parens = 0\n            paren_group_paren_count\
    \ = 0\n            paren_group_paren_group = [String]()\n            paren_group_paren_level\
    \ = [Int]()\n            paren_group_paren_max_level = 0\n            \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi_4y9y1b.swift:24:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpi_4y9y1b.swift:68:67: error: expected '}' at end of brace\
    \ statement\nassert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n\
    \                                                                  ^\n/tmp/tmpi_4y9y1b.swift:23:41:\
    \ note: to match this opening '{'\n    for char in paren_string.characters {\n\
    \                                        ^\n/tmp/tmpi_4y9y1b.swift:68:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmpi_4y9y1b.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmpi_4y9y1b.swift:23:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi_4y9y1b.swift:28:37: error: no exact\
    \ matches in call to instance method 'append'\n            paren_group_paren_group.append(paren_group)\n\
    \                                    ^\nSwift.Array:7:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public\
    \ mutating func append<S>(contentsOf newElements: __owned S) where Element ==\
    \ S.Element, S : Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n/tmp/tmpi_4y9y1b.swift:29:43: error: no exact matches in call to\
    \ instance method 'append'\n            paren_group_paren_grou"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_paren_index = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_index = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_index = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_index = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwomci5kk.swift:38:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_level_count = 0\n    var paren_max_level_count\
    \ = 0\n    var paren_level_count_in_paren = 0\n    var paren_max_level_count_in_paren\
    \ = 0\n    var paren_level_count_in_paren_group = 0\n    var paren_max_level_count_in_paren_group\
    \ = 0\n    var paren_level_count_in_paren_group_group = 0\n    var paren_max_level_count_in_paren_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group = 0\n    var paren_max_level_count_in_paren_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group = 0\n    var\
    \ paren_max_level_count_in_paren_group_group_group_group = 0\n    var paren_level_count_in_paren_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group =\
    \ 0\n    var paren_level_count_in_paren_group_group_group_group_group_group =\
    \ 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_level_count_in_paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp48s3cdmr.swift:35:9: error: invalid redeclaration of 'paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp48s3cdmr.swift:33:9: note: 'paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_max_level_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp48s3cdmr.swift:38:9: error: invalid redeclaration of\
    \ 'paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp48s3cdmr.swift:36:9: note: 'paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_level_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp48s3cdmr.swift:42:9: error: type annotation missing\
    \ in pattern\n    var paren_level_count_in_paren\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    for char in paren_string {\n        switch\
    \ char {\n        case \")\":\n            levels[level] = levels[level] - 1\n\
    \            paren_count = paren_count - 1\n            if paren_count == 0 {\n\
    \                levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n   \
    \             levels[level] = levels[level] + 1\n                levels[level]\
    \ = levels[level] + 1\n                levels[level] = levels[level] + 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpopxix2_y.swift:77:67: error: expected '}' at end of 'switch' statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpopxix2_y.swift:16:21:\
    \ note: to match this opening '{'\n        switch char {\n                   \
    \ ^\n/tmp/tmpopxix2_y.swift:77:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpopxix2_y.swift:15:30:\
    \ note: to match this opening '{'\n    for char in paren_string {\n          \
    \                   ^\n/tmp/tmpopxix2_y.swift:77:67: error: expected '}' at end\
    \ of brace statement\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])\n                                                                  ^\n\
    /tmp/tmpopxix2_y.swift:7:57: note: to match this opening '{'\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n                                                       \
    \ ^\n/tmp/tmpopxix2_y.swift:63:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n/tmp/tmpopxix2_y.swift:16:9: error: switch must be exhaustive\n\
    \        switch char {\n        ^\n/tmp/tmpopxix2_y.swift:16:9: note: do you want\
    \ to add a default clause?\n        switch char {\n        ^\n/tmp/tmpopxix2_y.swift:9:9:\
    \ warning: variable 'level' was never mutated; consider changing to 'let' constant\n\
    \    var level = 0\n    ~~~ ^\n    let\n/tmp/tmpopxix2_y.swift:11:9: warning:\
    \ initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpopxix2_y.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpopxix2_y.swift:13:9:\
    \ warning: initialization of variable 'paren_ch"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_char_length_index = 0\n    var paren_char_length_count = 0\n    var paren_char_length_count2\
    \ = 0\n    var paren_char_length_count3 = 0\n    var paren_char_length_count4\
    \ = 0\n    var paren_char_length_count5 = 0\n    var paren_char_length_count6\
    \ = 0\n    var paren_char_length_count7 = 0\n    var paren_char_length_count8\
    \ = 0\n    var paren_char_length_count9 = 0\n    var paren_char_length_count10\
    \ = 0\n    var paren_char_length_count11 = 0\n    var paren_char_length_count12\
    \ = 0\n    var paren_char_length_count13 = 0\n    var paren_char_length_count14\
    \ = 0\n    var paren_char_length_count15 = 0\n    var paren_char_length_count16\
    \ = 0\n    var paren_char_length_count17 = 0\n    var paren_char_length_count18\
    \ = 0\n    var paren_char_length_count19 = 0\n    var paren_char_length_count20\
    \ = 0\n    var paren_char_length_count21 = 0\n    var paren_char_length_count22\
    \ = 0\n    var paren_char_length_count23 = 0\n    var paren_char_length_count24\
    \ = 0\n    var paren_char_length_count25 = 0\n    var paren_char_length_count26\
    \ = 0\n    var paren_char_length_count27 = 0\n    var paren_char_length_count28\
    \ = 0\n    var paren_char_length_count29 = 0\n    var paren_char_length_count30\
    \ = 0\n    var paren_char_length_count31 = 0\n    var paren_char_length_count32\
    \ = 0\n    var paren_char_length_count33 = 0\n    var paren_char_length_count34\
    \ = 0\n    var paren_char_length_count35 = 0\n    var paren_char_length_count36\
    \ = 0\n    var paren_char_length_count37 = 0\n    var paren_char_length_count38\
    \ = 0\n    var paren_char_length_count39 = 0\n    var paren_char_length_count40\
    \ = 0\n    var paren_char_length_count41 = 0\n    var paren_char_length_count42\
    \ = 0\n    var paren_char_length_count43 = 0\n    var paren_char_length_count44\
    \ = 0\n    var paren_char_length_count45 = 0\n    var paren_char_length_count46\
    \ = 0\n    var paren_char_length_count47 = 0\n    var paren_char_length_count48\
    \ = 0\n    var paren_char_length_count49 = 0\n    var paren_char_length_count50\
    \ = 0\n    var paren_char_length_count51 = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp70yzxtlt.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp70yzxtlt.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp70yzxtlt.swift:10:9: warning: initialization of variable 'max_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp70yzxtlt.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp70yzxtlt.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp70yzxtlt.swift:13:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp70yzxtlt.swift:14:9: warning: initialization of variable 'paren_char_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_index = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp70yzxtlt.swift:15:9:\
    \ warning: initialization of variable 'paren_char_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_length =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp70yzxtlt.swift:16:9: warning: initialization\
    \ of variable 'paren_char_length_index' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_char_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp70yzxtlt.swift:17:9: warning: initialization of variable 'paren_char_length_count'\
    \ was never used; consider replacing with assignment to '_' or removin"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           levels[level] = parens\n            parens += 1\n        } else if\
    \ char == ')' {\n            levels[level] = parens\n            parens -= 1\n\
    \        } else if char == ' ' {\n            levels[level] = parens\n       \
    \ }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaqya9yuk.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpaqya9yuk.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpaqya9yuk.swift:18:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpaqya9yuk.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_parens = 0\n    var paren_parens_level\
    \ = 0\n    var paren_parens_parens = 0\n    var paren_parens_parens_level = 0\n\
    \    var paren_parens_parens_parens = 0\n    var paren_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens = 0\n  \
    \  var paren_parens_parens_parens_parens_parens_parens_parens_level = 0\n    var\
    \ paren_parens_parens_parens_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgsbh19rr.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    for paren\
    \ in paren_string.characters {\n        if paren == ')' {\n            levels[level]\
    \ = level\n            level++\n        } else {\n            level--\n      \
    \  }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1yvr5egr.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == ')' {\n                    ^~~\n             \
    \       \")\"\n/tmp/tmp1yvr5egr.swift:10:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for paren in paren_string.characters {\n   \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1yvr5egr.swift:13:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp1yvr5egr.swift:15:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  level--\n                 ^~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbyv08qtx.swift:77:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpbyv08qtx.swift:14:9: error: invalid redeclaration of 'paren_level_max_count'\n\
    \    var paren_level_max_count = 0\n        ^\n/tmp/tmpbyv08qtx.swift:12:9: note:\
    \ 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:15:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpbyv08qtx.swift:13:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpbyv08qtx.swift:12:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpbyv08qtx.swift:13:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpbyv08qtx.swift:12:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpbyv08qtx.swift:13:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpbyv08qtx.swift:12:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpbyv08qtx.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpbyv08qtx.swift:13:9:\
    \ note: 'paren_level_m"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if parens_level == 0 {\n            parens_count += 1\n        }\n\
    \        if parens_level == 1 && parens_count == 1 {\n            levels.append(level)\n\
    \        }\n        if parens_level == 1 && parens_count == 2 {\n            levels.append(level)\n\
    \            level = 0\n        }\n        if parens_level == 1 && parens_count\
    \ == 3 {\n            levels.append(level)\n            level = 0\n          \
    \  parens = 0\n        }\n        if parens_level == 1 && parens_count == 4 {\n\
    \            levels.append(level)\n            level = 0\n            parens =\
    \ 0\n            parens_count = 0\n        }\n        if parens_level == 1 &&\
    \ parens_count == 5 {\n            levels.append(level)\n            level = 0\n\
    \            parens = 0\n            parens_count = 0\n            parens_level\
    \ = 1\n        }\n        if parens_level == 1 && parens_count == 6 {\n      \
    \      levels.append(level)\n            level = 0\n            parens = 0\n \
    \           parens_count = 0\n            parens_level = 1\n            parens_count\
    \ += 1\n        }\n        if parens_level == 1 && parens_count == 7 {\n     \
    \       levels.append(level)\n            level = 0\n            parens = 0\n\
    \            parens_count = 0\n            parens_level = 1\n            parens_count\
    \ += 1\n            parens_level = 2\n        }\n        if parens_level == 1\
    \ && parens_count == 8 {\n            levels.append(level)\n            level\
    \ = 0\n            parens = 0\n            parens_count = 0\n            parens_level\
    \ = 1\n            parens_count += 1\n            parens_level = 2\n         \
    \   parens_count += 1\n        }\n        if parens_level == 1 && parens_count\
    \ == 9 {\n            levels.append(level)\n            level = 0\n          \
    \  parens = 0\n            parens_count = 0\n            parens_level = 1\n  \
    \          parens_count += 1\n            parens_level = 2\n            parens_count\
    \ += 1\n            parens_level = 3\n        }\n        if parens_level == 1\
    \ && parens_count == 10 {\n            levels.append(level)\n            level\
    \ = 0\n            parens = 0\n            parens_count = 0\n            parens_level\
    \ = 1\n            parens_count += 1\n            parens_level = 2\n         \
    \   parens_count += 1\n            parens_level = 3\n            parens_count\
    \ += 1\n        }\n        if parens_level == 1 && parens_count == 11 {\n    \
    \        levels.append(level)\n            level = 0\n            parens = 0\n\
    \            parens_count = 0\n            parens_level = 1\n            parens_count\
    \ += 1\n            parens_level = 2\n            parens_count += 1\n        \
    \    parens_level = 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6p132zx0.swift:119:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp6p132zx0.swift:13:42:\
    \ note: to match this opening '{'\n    for c in paren_string.unicodeScalars {\n\
    \                                         ^\n/tmp/tmp6p132zx0.swift:119:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp6p132zx0.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp6p132zx0.swift:105:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp6p132zx0.swift:10:9:\
    \ warning: variable 'parens' was written to, but never read\n    var parens =\
    \ 0\n        ^\n/tmp/tmp6p132zx0.swift:13:9: warning: immutable value 'c' was\
    \ never used; consider replacing with '_' or removing it\n    for c in paren_string.unicodeScalars\
    \ {\n        ^\n        _\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    for paren\
    \ in paren_string.characters {\n        if paren == ')' {\n            levels[level]\
    \ = level\n            level++\n        } else {\n            level--\n      \
    \  }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1yvr5egr.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == ')' {\n                    ^~~\n             \
    \       \")\"\n/tmp/tmp1yvr5egr.swift:10:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for paren in paren_string.characters {\n   \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1yvr5egr.swift:13:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp1yvr5egr.swift:15:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  level--\n                 ^~\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var groups = [String]()\n    var group_levels = [Int]()\n    var group_group_levels\
    \ = [Int]()\n    var group_group_group_levels = [Int]()\n    var group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_levels = [Int]()\n    var group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_levels = [Int]()\n\
    \    var group_group_group_group_group_group_group_group_levels = [Int]()\n  \
    \  var group_group_group_group_group_group_group_group_group_levels = [Int]()\n\
    \    var group_group_group_group_group_group_group_group_group_group_levels =\
    \ [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptqhfyc29.swift:34:9: error: invalid redeclaration of 'group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels'\n\
    \    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n        ^\n/tmp/tmptqhfyc29.swift:33:9: note: 'group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels'\
    \ previously declared here\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = [Int]()\n        ^\n/tmp/tmptqhfyc29.swift:36:9: error: type annotation missing\
    \ in pattern\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var\
    \ paren_levels_index = 0\n    var paren_levels_size_index = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_index = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpksn2q19g.swift:17:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpksn2q19g.swift:16:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpksn2q19g.swift:18:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpksn2q19g.swift:16:9: note: 'paren_levels_sizes_index' previously declared\
    \ here\n    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpksn2q19g.swift:19:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpksn2q19g.swift:16:9: note: 'paren_levels_sizes_index'\
    \ previously declared here\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpksn2q19g.swift:20:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpksn2q19g.swift:16:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpksn2q19g.swift:21:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpksn2q19g.swift:16:9: note: 'paren_levels_sizes_index' previously declared\
    \ here\n    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpksn2q19g.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpksn2q19g.swift:16:9: note: 'paren_levels_sizes_index'\
    \ previously declared here\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpksn2q19g.swift:23:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpksn2q19g.swift:16:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpksn2q19g.swift:24:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpksn2q19g.swift:16:9: n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_count_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp51duosss.swift:25:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:24:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:27:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:26:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:29:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:28:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:31:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp51duosss.swift:30:9: note: 'paren_char_count_in_pare"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_level_count = 0\n    var paren_max_level_count\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_level_count_max_max =\
    \ 0\n    var paren_level_count_max_min = 0\n    var paren_level_count_min = 0\n\
    \    var paren_level_count_min_max = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n    var paren_level_count_min_min = 0\n\
    \    var paren_level_count_min_min = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1g2lw562.swift:20:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmp1g2lw562.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmp1g2lw562.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmp1g2lw562.swift:19:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmp1g2lw562.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmp1g2lw562.swift:19:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmp1g2lw562.swift:23:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmp1g2lw562.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmp1g2lw562.swift:24:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmp1g2lw562.swift:19:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmp1g2lw562.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmp1g2lw562.swift:19:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmp1g2lw562.swift:26:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmp1g2lw562.swift:19:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmp1g2lw562.swift:27:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char: Char\n    var paren_char_next: Char\n    var paren_char_prev:\
    \ Char\n    var paren_char_next_prev: Char\n    var paren_char_prev_index: Int\n\
    \    var paren_char_next_index: Int\n    var paren_char_next_next_index: Int\n\
    \    var paren_char_prev_index: Int\n    var paren_char_next_next_index: Int\n\
    \    var paren_char_next_next_next_index: Int\n    var paren_char_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_index: Int\n    var paren_char_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_index: Int\n    var\
    \ paren_char_next_next_next_next_next_next_next_next_index: Int\n    var paren_char_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpms2fdemn.swift:14:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpms2fdemn.swift:15:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpms2fdemn.swift:16:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpms2fdemn.swift:17:31: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next_prev: Char\n                              ^~~~\n/tmp/tmpms2fdemn.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_prev_index'\n    var paren_char_prev_index:\
    \ Int\n        ^\n/tmp/tmpms2fdemn.swift:18:9: note: 'paren_char_prev_index' previously\
    \ declared here\n    var paren_char_prev_index: Int\n        ^\n/tmp/tmpms2fdemn.swift:22:9:\
    \ error: invalid redeclaration of 'paren_char_next_next_index'\n    var paren_char_next_next_index:\
    \ Int\n        ^\n/tmp/tmpms2fdemn.swift:20:9: note: 'paren_char_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_index: Int\n        ^\n\
    /tmp/tmpms2fdemn.swift:32:9: error: invalid redeclaration of 'paren_char_next_next_next_next_next_next_next_next_next_next_next_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n        ^\n/tmp/tmpms2fdemn.swift:31:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n        ^\n/tmp/tmpms2fdemn.swift:34:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n        ^\n/tmp/tmpms2fdemn.swift:33:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n        ^\n/tmp/tmpms2fdemn.swift:35:9: error: invalid redeclar"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char\
    \ = 0\n    var paren_char_next = 0\n    var paren_char_prev = 0\n    var paren_char_prev2\
    \ = 0\n    var paren_char_next2 = 0\n    var paren_char_prev3 = 0\n    var paren_char_next3\
    \ = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4 = 0\n    var paren_char_prev5\
    \ = 0\n    var paren_char_next5 = 0\n    var paren_char_prev6 = 0\n    var paren_char_next6\
    \ = 0\n    var paren_char_prev7 = 0\n    var paren_char_next7 = 0\n    var paren_char_prev8\
    \ = 0\n    var paren_char_next8 = 0\n    var paren_char_prev9 = 0\n    var paren_char_next9\
    \ = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10 = 0\n    var paren_char_prev11\
    \ = 0\n    var paren_char_next11 = 0\n    var paren_char_prev12 = 0\n    var paren_char_next12\
    \ = 0\n    var paren_char_prev13 = 0\n    var paren_char_next13 = 0\n    var paren_char_prev14\
    \ = 0\n    var paren_char_next14 = 0\n    var paren_char_prev15 = 0\n    var paren_char_next15\
    \ = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16 = 0\n    var paren_char_prev17\
    \ = 0\n    var paren_char_next17 = 0\n    var paren_char_prev18 = 0\n    var paren_char_next18\
    \ = 0\n    var paren_char_prev19 = 0\n    var paren_char_next19 = 0\n    var paren_char_prev20\
    \ = 0\n    var paren_char_next20 = 0\n    var paren_char_prev21 = 0\n    var paren_char_next21\
    \ = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22 = 0\n    var paren_char_prev23\
    \ = 0\n    var paren_char_next23 = 0\n    var paren_char_prev24 = 0\n    var paren_char_next24\
    \ = 0\n    var paren_char_prev25 = 0\n    var paren_char_next25 = 0\n    var paren_char_prev26\
    \ = 0\n    var paren_char_next26 = 0\n    var paren_char_prev27 = 0\n    var paren_char_next27\
    \ = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28 = 0\n    var paren_char_prev29\
    \ = 0\n    var paren_char_next29 = 0\n    var paren_char_prev30 = 0\n    var paren_char_next30\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmponh8x3oz.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char_next30\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_stack = [Int]()\n    var paren_stack_pointer = 0\n    var paren_stack_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer = 0\n    var paren_stack_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer = 0\n    var\
    \ paren_stack_pointer_pointer_pointer_pointer_pointer_pointer = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp215oblhe.swift:33:9: error: type annotation missing in pattern\n\
    \    var paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_max\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index = 0\n    var parens_level_max_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa1g7fkvg.swift:17:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:18:9: error: invalid redeclaration of\
    \ 'parens_level_max_count_index'\n    var parens_level_max_count_index = 0\n \
    \       ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index' previously\
    \ declared here\n    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:19:9:\
    \ error: invalid redeclaration of 'parens_level_max_count_index'\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index'\
    \ previously declared here\n    var parens_level_max_count_index = 0\n       \
    \ ^\n/tmp/tmpa1g7fkvg.swift:20:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:21:9: error: invalid redeclaration of\
    \ 'parens_level_max_count_index'\n    var parens_level_max_count_index = 0\n \
    \       ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index' previously\
    \ declared here\n    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:22:9:\
    \ error: invalid redeclaration of 'parens_level_max_count_index'\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9: note: 'parens_level_max_count_index'\
    \ previously declared here\n    var parens_level_max_count_index = 0\n       \
    \ ^\n/tmp/tmpa1g7fkvg.swift:23:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpa1g7fkvg.swift:24:9: error: invalid redeclara"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp40atbzd8.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp40atbzd8.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp40atbzd8.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp40atbzd8.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp40atbzd8.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp40atbzd8.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp40atbzd8.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp40atbzd8.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp40atbzd8.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp40atbzd8.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp40atbzd8.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp40atbzd8.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp40atbzd8.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp40atbzd8.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_levels = [Int]()\n    var paren_max_levels\
    \ = [Int]()\n    var paren_levels_str = [String]()\n    var paren_max_levels_str\
    \ = [String]()\n    var paren_levels_str_index = 0\n    var paren_max_levels_str_index\
    \ = 0\n    var paren_levels_str_len = 0\n    var paren_max_levels_str_len = 0\n\
    \    var paren_levels_str_len_index = 0\n    var paren_max_levels_str_len_index\
    \ = 0\n    var paren_levels_str_len_max = 0\n    var paren_max_levels_str_len_max\
    \ = 0\n    var paren_levels_str_len_max_index = 0\n    var paren_max_levels_str_len_max_index\
    \ = 0\n    var paren_levels_str_len_max_max = 0\n    var paren_max_levels_str_len_max_max\
    \ = 0\n    var paren_levels_str_len_max_max_index = 0\n    var paren_max_levels_str_len_max_max_index\
    \ = 0\n    var paren_levels_str_len_max_max_max = 0\n    var paren_max_levels_str_len_max_max_max\
    \ = 0\n    var paren_levels_str_len_max_max_max_index = 0\n    var paren_max_levels_str_len_max_max_max_index\
    \ = 0\n    var paren_levels_str_len_max_max_max_max = 0\n    var paren_max_levels_str_len_max_max_max_max\
    \ = 0\n    var paren_levels_str_len_max_max_max_max_index = 0\n    var paren_max_levels_str_len_max_max_max_max_index\
    \ = 0\n    var paren_levels_str_len_max_max_max_max_max = 0\n    var paren_max_levels_str_len_max_max_max_max_max\
    \ = 0\n    var paren_levels_str_len_max_max_max_max_max_index = 0\n    var paren_max_levels_str_len_max_max_max_max_max_index\
    \ = 0\n    var paren_levels_str_len_max_max_max_max_max_max_max = 0\n    var paren_max_levels_str_len_max_max_max_max_max_max\
    \ = 0\n    var paren_levels_str_len_max_max_max_max_max_max_index = 0\n    var\
    \ paren_max_levels_str_len_max_max_max_max_max_max_index = 0\n    var paren_levels_str_len_max_max_max_max_max_max_max_max\
    \ = 0\n    var paren_max_levels_str_len_max_max_max_max_max_max_max = 0\n    var\
    \ paren_levels_str_len_max_max_max_max_max_max_max_index = 0\n    var paren_max_levels_str_len_max_max_max_max_max_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6ydz798n.swift:49:9: error: type annotation missing in pattern\n\
    \    var paren_max_levels_str_len_max_max_max_max_max_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    for index\
    \ in 0..<paren_string.characters.count {\n        let char = paren_string.characters[index]\n\
    \        if char == \"(\" {\n            level += 1\n            if level > max_level\
    \ {\n                max_level = level\n                max_level_parens = paren_count\n\
    \            }\n            paren_count += 1\n        } else if char == \")\"\
    \ {\n            level -= 1\n            if level < 0 {\n                assert(false,\
    \ \"Invalid parenthesis string: \\(paren_string)\")\n            }\n         \
    \   paren_count -= 1\n            if paren_count > max_level_parens {\n      \
    \          max_level_parens = paren_count\n            }\n        } else if char\
    \ == \" \" {\n            if level == 0 {\n                assert(false, \"Invalid\
    \ parenthesis string: \\(paren_string)\")\n            }\n            paren_count_parens\
    \ += 1\n        }\n    }\n    assert(paren_count_parens == max_level_parens)\n\
    \    return [max_level]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb6bx7c_a.swift:13:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<paren_string.characters.count {\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb6bx7c_a.swift:14:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb6bx7c_a.swift:14:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_count = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var\
    \ paren_char_level = 0\n    var paren_char_level_count = 0\n    var paren_char_level_char\
    \ = 0\n    var paren_char_level_char_count = 0\n    var paren_char_level_char_count2\
    \ = 0\n    var paren_char_level_char_count3 = 0\n    var paren_char_level_char_count4\
    \ = 0\n    var paren_char_level_char_count5 = 0\n    var paren_char_level_char_count6\
    \ = 0\n    var paren_char_level_char_count7 = 0\n    var paren_char_level_char_count8\
    \ = 0\n    var paren_char_level_char_count9 = 0\n    var paren_char_level_char_count10\
    \ = 0\n    var paren_char_level_char_count11 = 0\n    var paren_char_level_char_count12\
    \ = 0\n    var paren_char_level_char_count13 = 0\n    var paren_char_level_char_count14\
    \ = 0\n    var paren_char_level_char_count15 = 0\n    var paren_char_level_char_count16\
    \ = 0\n    var paren_char_level_char_count17 = 0\n    var paren_char_level_char_count18\
    \ = 0\n    var paren_char_level_char_count19 = 0\n    var paren_char_level_char_count20\
    \ = 0\n    var paren_char_level_char_count21 = 0\n    var paren_char_level_char_count22\
    \ = 0\n    var paren_char_level_char_count23 = 0\n    var paren_char_level_char_count24\
    \ = 0\n    var paren_char_level_char_count25 = 0\n    var paren_char_level_char_count26\
    \ = 0\n    var paren_char_level_char_count27 = 0\n    var paren_char_level_char_count28\
    \ = 0\n    var paren_char_level_char_count29 = 0\n    var paren_char_level_char_count30\
    \ = 0\n    var paren_char_level_char_count31 = 0\n    var paren_char_level_char_count32\
    \ = 0\n    var paren_char_level_char_count33 = 0\n    var paren_char_level_char_count34\
    \ = 0\n    var paren_char_level_char_count35 = 0\n    var paren_char_level_char_count36\
    \ = 0\n    var paren_char_level_char_count37 = 0\n    var paren_char_level_char_count38\
    \ = 0\n    var paren_char_level_char_count39 = 0\n    var paren_char_level_char_count40\
    \ = 0\n    var paren_char_level_char_count41 = 0\n    var paren_char_level_char_count42\
    \ = 0\n    var paren_char_level_char_count43 = 0\n    var paren_char_level_char_count44\
    \ = 0\n    var paren_char_level_char_count45 = 0\n    var paren_char_level_char_count46\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkuq3x0cz.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpkuq3x0cz.swift:9:9: warning:\
    \ initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpkuq3x0cz.swift:10:9: warning: initialization of variable 'paren_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpkuq3x0cz.swift:11:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpkuq3x0cz.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkuq3x0cz.swift:13:9:\
    \ warning: initialization of variable 'paren_char_level' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_level =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkuq3x0cz.swift:14:9: warning: initialization\
    \ of variable 'paren_char_level_count' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_char_level_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpkuq3x0cz.swift:15:9: warning: initialization of variable 'paren_char_level_char'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_level_char = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkuq3x0cz.swift:16:9:\
    \ warning: initialization of variable 'paren_char_level_char_count' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_char_level_char_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkuq3x0cz.swift:17:9:\
    \ warning: initialization of variable 'paren_char_level_char_count2' was nev"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_stack = [String]()\n    for c in paren_string.unicodeScalars\
    \ {\n        if paren_char_count == 0 {\n            paren_char_count = c.count\n\
    \            paren_char = c.value\n        } else {\n            if paren_char_count\
    \ == c.count {\n                paren_char_count = c.count\n                paren_char\
    \ = c.value\n            } else {\n                paren_char_stack.append(paren_char)\n\
    \                paren_char_count = c.count\n                paren_char = c.value\n\
    \            }\n        }\n        if paren_char == \"(\" {\n            level\
    \ += 1\n        } else if paren_char == \")\" {\n            level -= 1\n    \
    \        if level < 0 {\n                max_level_paren = level\n           \
    \     level = 0\n            }\n        }\n        if level > max_level {\n  \
    \          max_level = level\n        }\n    }\n    if paren_char_count != paren_char_stack.count\
    \ {\n        max_level_paren = level\n    }\n    if max_level_paren > max_level\
    \ {\n        max_level = max_level_paren\n    }\n    var max_level_stack = [Int]()\n\
    \    for level in 0..<max_level {\n        max_level_stack.append(level)\n   \
    \ }\n    var max_level_paren_stack = [Int]()\n    for level in 0..<max_level {\n\
    \        max_level_paren_stack.append(max_level_stack[level])\n    }\n    var\
    \ max_level_paren_paren_stack = [Int]()\n    for level in 0..<max_level {\n  \
    \      max_level_paren_paren_stack.append(max_level_paren_stack[level])\n    }\n\
    \    var max_level_paren_paren_paren_stack = [Int]()\n    for level in 0..<max_level\
    \ {\n        max_level_paren_paren_paren_stack.append(max_level_paren_paren_stack[level])\n\
    \    }\n    var max_level_paren_paren_paren_paren_stack = [Int]()\n    for level\
    \ in 0..<max_level {\n        max_level_paren_paren_paren_paren_stack.append(max_level_paren_paren_paren_stack[level])\n\
    \    }\n    var max_level_paren_paren_paren_paren_paren_stack = [Int]()\n    for\
    \ level in 0..<max_level {\n        max_level_paren_paren_paren_paren_paren_stack.append(max_level_paren_paren_paren_paren_stack[level])\n\
    \    }\n    var max_level_paren_paren_paren_paren_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8ms30l9p.swift:17:34: error: value of type 'Unicode.Scalar' has\
    \ no member 'count'\n            paren_char_count = c.count\n                \
    \               ~ ^~~~~\n/tmp/tmp8ms30l9p.swift:18:28: error: cannot assign value\
    \ of type 'UInt32' to type 'String'\n            paren_char = c.value\n      \
    \                   ~~^~~~~\n/tmp/tmp8ms30l9p.swift:20:38: error: value of type\
    \ 'Unicode.Scalar' has no member 'count'\n            if paren_char_count == c.count\
    \ {\n                                   ~ ^~~~~\n/tmp/tmp8ms30l9p.swift:21:38:\
    \ error: value of type 'Unicode.Scalar' has no member 'count'\n              \
    \  paren_char_count = c.count\n                                   ~ ^~~~~\n/tmp/tmp8ms30l9p.swift:22:32:\
    \ error: cannot assign value of type 'UInt32' to type 'String'\n             \
    \   paren_char = c.value\n                             ~~^~~~~\n/tmp/tmp8ms30l9p.swift:25:38:\
    \ error: value of type 'Unicode.Scalar' has no member 'count'\n              \
    \  paren_char_count = c.count\n                                   ~ ^~~~~\n/tmp/tmp8ms30l9p.swift:26:32:\
    \ error: cannot assign value of type 'UInt32' to type 'String'\n             \
    \   paren_char = c.value\n                             ~~^~~~~\n/tmp/tmp8ms30l9p.swift:72:9:\
    \ error: type annotation missing in pattern\n    var max_level_paren_paren_paren_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    for char in paren_string.characters\
    \ {\n        if char == \"(\" {\n            parens_count += 1\n            parens_level\
    \ += 1\n        } else if char == \")\" {\n            parens_count -= 1\n   \
    \         parens_level -= 1\n            if parens_level == 0 {\n            \
    \    levels.append(level)\n            }\n        }\n        level += 1\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdb_gih80.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpdb_gih80.swift:10:9: warning: initialization of variable 'parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens = 0\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char_count = 0\n    var paren_char = \"\"\n    for c in paren_string\
    \ {\n        if c == '(' {\n            paren_count += 1\n            paren_char_count\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n         \
    \   paren_char_count -= 1\n            if paren_count == 0 {\n               \
    \ levels.append(level)\n            }\n        }\n        level += (paren_char_count\
    \ > 0)\n        paren_char = \"\"\n        paren_count = 0\n        paren_char_count\
    \ = 0\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1_td74v6.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp1_td74v6.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp1_td74v6.swift:24:36: error: cannot convert value of type\
    \ 'Bool' to expected argument type 'Int'\n        level += (paren_char_count >\
    \ 0)\n                                   ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_count_paren = 0\n    var paren_count_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren = 0\n    var paren_count_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren = 0\n    var paren_count_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_count_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp224iwe44.swift:26:9: error: invalid redeclaration of 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp224iwe44.swift:25:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp224iwe44.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp224iwe44.swift:27:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp224iwe44.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp224iwe44.swift:27:9: note: 'paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmp224iwe44.swift:31:9: error: type annotation missing\
    \ in pattern\n    var paren_count_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n    var\
    \ parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var parens_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpv2zo23ar.swift:74:9: error: type annotation missing in pattern\n\
    \    var parens_\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8mmv7dn2.swift:38:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8mmv7dn2.swift:32:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:31:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:34:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:35:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp8mmv7dn2.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_gr"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if c == parens.unicodeScalars.first\
    \ {\n            parens_count += 1\n            parens_string += c.unicodeScalars.first\n\
    \        } else {\n            parens_count -= 1\n            parens_string +=\
    \ c.unicodeScalars.first\n            if parens_count == 0 {\n               \
    \ level += 1\n                if level > max_level {\n                    max_level\
    \ = level\n                    max_level_parens = parens_count\n             \
    \   }\n            }\n        }\n    }\n    return Array(max_level_parens + 1).map\
    \ { _ in Array(max_level + 1).map { _ in Array(level + 1).map { _ in Array(parens_count\
    \ + 1).map { _ in Array(parens_string) } } }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe7vl86.swift:48:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpkpe7vl86.swift:7:57:\
    \ note: to match this opening '{'\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n                                                        ^\n/tmp/tmpkpe7vl86.swift:15:24:\
    \ error: value of type 'Int' has no member 'unicodeScalars'\n        if c == parens.unicodeScalars.first\
    \ {\n                ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpkpe7vl86.swift:17:32: error:\
    \ value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n            parens_string\
    \ += c.unicodeScalars.first\n                             ~ ^~~~~~~~~~~~~~\n/tmp/tmpkpe7vl86.swift:20:32:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \       parens_string += c.unicodeScalars.first\n                            \
    \ ~ ^~~~~~~~~~~~~~\n/tmp/tmpkpe7vl86.swift:30:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return Array(max_level_parens + 1).map {\
    \ _ in Array(max_level + 1).map { _ in Array(level + 1).map { _ in Array(parens_count\
    \ + 1).map { _ in Array(parens_string) } } }\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkpe7vl86.swift:34:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824976
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_stack\
    \ = [Int]()\n    var parens_level_stack_count = 0\n    var parens_level_stack_pointer\
    \ = 0\n    var parens_level_stack_pointer_count = 0\n    var parens_level_stack_pointer_max\
    \ = 0\n    var parens_level_stack_pointer_max_count = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var parens_level_stack_pointer_max_index = 0\n    var parens_level_stack_pointer_max_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjirvcyba.swift:20:9: error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n\
    \    var parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:19:9:\
    \ note: 'parens_level_stack_pointer_max_index' previously declared here\n    var\
    \ parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:21:9:\
    \ error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n   \
    \ var parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:19:9:\
    \ note: 'parens_level_stack_pointer_max_index' previously declared here\n    var\
    \ parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:22:9:\
    \ error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n   \
    \ var parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:19:9:\
    \ note: 'parens_level_stack_pointer_max_index' previously declared here\n    var\
    \ parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:23:9:\
    \ error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n   \
    \ var parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:19:9:\
    \ note: 'parens_level_stack_pointer_max_index' previously declared here\n    var\
    \ parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:24:9:\
    \ error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n   \
    \ var parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:19:9:\
    \ note: 'parens_level_stack_pointer_max_index' previously declared here\n    var\
    \ parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:25:9:\
    \ error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n   \
    \ var parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:19:9:\
    \ note: 'parens_level_stack_pointer_max_index' previously declared here\n    var\
    \ parens_level_stack_pointer_max_index = 0\n        ^\n/tmp/tmpjirvcyba.swift:26:9:\
    \ error: invalid redeclaration of 'parens_level_stack_pointer_max_index'\n   \
    \ var parens_level_stack_pointer_max_index ="
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string\
    \ = \"\"\n    var parens_string = \"\"\n    var parens_string = \"\"\n    var\
    \ parens_string = \"\"\n    var parens_string = \"\"\n    var parens_string =\
    \ \"\"\n    var parens_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmjjgfcdi.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpmjjgfcdi.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpmjjgfcdi.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:16:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:17:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:18:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:19:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:20:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:21:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjjgfcdi.swift:22:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpmjjgfcdi.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpmjj"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    for c in paren_string.characters\
    \ {\n        if c == '(' {\n            parens_count += 1\n            parens_level\
    \ += 1\n        } else if c == ')' {\n            parens_count -= 1\n        \
    \    if parens_count < 0 {\n                parens_level -= 1\n            }\n\
    \        }\n        if parens_level == level {\n            levels.append(level)\n\
    \        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmrfme4mu.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpmrfme4mu.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpmrfme4mu.swift:13:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmrfme4mu.swift:10:9: warning: initialization of variable 'parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens = 0\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmz9fm0an.swift:78:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmz9fm0an.swift:15:23: error: empty collection literal requires an\
    \ explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpmz9fm0an.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:17:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmpmz9fm0an.swift:13:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmpmz9fm0an.swift:18:30: error:\
    \ empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:18:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpmz9fm0an.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpmz9fm0an.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpmz9fm0an.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmpmz9fm0an.swift:20:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:20:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpmz9fm0an.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpmz9fm0an.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmpmz9fm0an.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmpmz9fm0an.swift:22:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpmz9fm0an.swift:22:"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_stack = [String]()\n    var paren_stack_level\
    \ = [Int]()\n    var paren_stack_level_index = [Int]()\n    var paren_stack_level_length\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\
    \ = [Int]()\n    var paren_stack_level_length_index = [Int]()\n    var paren_stack_level_length_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpz97hb14i.swift:17:9: error: invalid redeclaration of 'paren_stack_level_length_index'\n\
    \    var paren_stack_level_length_index = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9:\
    \ note: 'paren_stack_level_length_index' previously declared here\n    var paren_stack_level_length_index\
    \ = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:18:9: error: invalid redeclaration\
    \ of 'paren_stack_level_length_index'\n    var paren_stack_level_length_index\
    \ = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9: note: 'paren_stack_level_length_index'\
    \ previously declared here\n    var paren_stack_level_length_index = [Int]()\n\
    \        ^\n/tmp/tmpz97hb14i.swift:19:9: error: invalid redeclaration of 'paren_stack_level_length_index'\n\
    \    var paren_stack_level_length_index = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9:\
    \ note: 'paren_stack_level_length_index' previously declared here\n    var paren_stack_level_length_index\
    \ = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:20:9: error: invalid redeclaration\
    \ of 'paren_stack_level_length_index'\n    var paren_stack_level_length_index\
    \ = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9: note: 'paren_stack_level_length_index'\
    \ previously declared here\n    var paren_stack_level_length_index = [Int]()\n\
    \        ^\n/tmp/tmpz97hb14i.swift:21:9: error: invalid redeclaration of 'paren_stack_level_length_index'\n\
    \    var paren_stack_level_length_index = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9:\
    \ note: 'paren_stack_level_length_index' previously declared here\n    var paren_stack_level_length_index\
    \ = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:22:9: error: invalid redeclaration\
    \ of 'paren_stack_level_length_index'\n    var paren_stack_level_length_index\
    \ = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9: note: 'paren_stack_level_length_index'\
    \ previously declared here\n    var paren_stack_level_length_index = [Int]()\n\
    \        ^\n/tmp/tmpz97hb14i.swift:23:9: error: invalid redeclaration of 'paren_stack_level_length_index'\n\
    \    var paren_stack_level_length_index = [Int]()\n        ^\n/tmp/tmpz97hb14i.swift:16:9:\
    \ note: 'paren_stack_level_length_inde"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for char in paren_string.characters {\n  \
    \      if char == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if char == ')' {\n            paren_count\
    \ -= 1\n            levels.append(paren_level)\n            paren_level = 0\n\
    \        } else if char == ' ' {\n            levels.append(paren_level)\n   \
    \         paren_level = 0\n        } else {\n            paren_level += 1\n  \
    \      }\n    }\n    levels.append(paren_level)\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppkbwt9m7.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmppkbwt9m7.swift:17:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmppkbwt9m7.swift:21:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmppkbwt9m7.swift:12:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmppkbwt9m7.swift:9:9: warning: initialization\
    \ of variable 'level' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_levels = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max2 = 0\n\
    \    var paren_levels_count_min2 = 0\n    var paren_levels_count_max3 = 0\n  \
    \  var paren_levels_count_min3 = 0\n    var paren_levels_count_max4 = 0\n    var\
    \ paren_levels_count_min4 = 0\n    var paren_levels_count_max5 = 0\n    var paren_levels_count_min5\
    \ = 0\n    var paren_levels_count_max6 = 0\n    var paren_levels_count_min6 =\
    \ 0\n    var paren_levels_count_max7 = 0\n    var paren_levels_count_min7 = 0\n\
    \    var paren_levels_count_max8 = 0\n    var paren_levels_count_min8 = 0\n  \
    \  var paren_levels_count_max9 = 0\n    var paren_levels_count_min9 = 0\n    var\
    \ paren_levels_count_max10 = 0\n    var paren_levels_count_min10 = 0\n    var\
    \ paren_levels_count_max11 = 0\n    var paren_levels_count_min11 = 0\n    var\
    \ paren_levels_count_max12 = 0\n    var paren_levels_count_min12 = 0\n    var\
    \ paren_levels_count_max13 = 0\n    var paren_levels_count_min13 = 0\n    var\
    \ paren_levels_count_max14 = 0\n    var paren_levels_count_min14 = 0\n    var\
    \ paren_levels_count_max15 = 0\n    var paren_levels_count_min15 = 0\n    var\
    \ paren_levels_count_max16 = 0\n    var paren_levels_count_min16 = 0\n    var\
    \ paren_levels_count_max17 = 0\n    var paren_levels_count_min17 = 0\n    var\
    \ paren_levels_count_max18 = 0\n    var paren_levels_count_min18 = 0\n    var\
    \ paren_levels_count_max19 = 0\n    var paren_levels_count_min19 = 0\n    var\
    \ paren_levels_count_max20 = 0\n    var paren_levels_count_min20 = 0\n    var\
    \ paren_levels_count_max21 = 0\n    var paren_levels_count_min21 = 0\n    var\
    \ paren_levels_count_max22 = 0\n    var paren_levels_count_min22 = 0\n    var\
    \ paren_levels_count_max23 = 0\n    var paren_levels_count_min23 = 0\n    var\
    \ paren_levels_count_max24 = 0\n    var paren_levels_count_min24 = 0\n    var\
    \ paren_levels_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4jl1hf6x.swift:60:9: error: type annotation missing in pattern\n\
    \    var paren_levels_\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n    var paren_nesting_levels\
    \ = [Int]()\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_levels = [Int]()\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_levels\
    \ = [Int]()\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_levels = [Int]()\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_levels\
    \ = [Int]()\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_levels = [Int]()\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting = 0\n    var paren_nesting_levels = [Int]()\n\
    \    var paren_nesting_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm0ft5rdk.swift:22:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:19:9:\
    \ note: 'paren_nesting_nesting_nesting_level' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting'\n  \
    \  var paren_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:20:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting' previously declared here\n   \
    \ var paren_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:24:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_levels'\n   \
    \ var paren_nesting_nesting_nesting_levels = [Int]()\n        ^\n/tmp/tmpm0ft5rdk.swift:21:9:\
    \ note: 'paren_nesting_nesting_nesting_levels' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_levels = [Int]()\n        ^\n/tmp/tmpm0ft5rdk.swift:25:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_level'\n    var\
    \ paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:19:9:\
    \ note: 'paren_nesting_nesting_nesting_level' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:26:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting'\n  \
    \  var paren_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:20:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting' previously declared here\n   \
    \ var paren_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpm0ft5rdk.swift:27:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_levels'\n   \
    \ var paren_nesting_nesting_nesting_levels = [Int]()\n        ^\n/tmp/tmpm0ft5rdk.swift:21:9:\
    \ note: 'paren_nesting_nesting_nesting_levels' previously declared here\n    var\
    \ paren_nesting_nesting_nesting_levels = [Int]()\n        ^\n/tmp/tmpm0ft5rdk.swift:28:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_level'\n    var\
    \ paren_nesting_n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_max_index2 = 0\n    var paren_levels_count_max_index3 = 0\n\
    \    var paren_levels_count_max_index4 = 0\n    var paren_levels_count_max_index5\
    \ = 0\n    var paren_levels_count_max_index6 = 0\n    var paren_levels_count_max_index7\
    \ = 0\n    var paren_levels_count_max_index8 = 0\n    var paren_levels_count_max_index9\
    \ = 0\n    var paren_levels_count_max_index10 = 0\n    var paren_levels_count_max_index11\
    \ = 0\n    var paren_levels_count_max_index12 = 0\n    var paren_levels_count_max_index13\
    \ = 0\n    var paren_levels_count_max_index14 = 0\n    var paren_levels_count_max_index15\
    \ = 0\n    var paren_levels_count_max_index16 = 0\n    var paren_levels_count_max_index17\
    \ = 0\n    var paren_levels_count_max_index18 = 0\n    var paren_levels_count_max_index19\
    \ = 0\n    var paren_levels_count_max_index20 = 0\n    var paren_levels_count_max_index21\
    \ = 0\n    var paren_levels_count_max_index22 = 0\n    var paren_levels_count_max_index23\
    \ = 0\n    var paren_levels_count_max_index24 = 0\n    var paren_levels_count_max_index25\
    \ = 0\n    var paren_levels_count_max_index26 = 0\n    var paren_levels_count_max_index27\
    \ = 0\n    var paren_levels_count_max_index28 = 0\n    var paren_levels_count_max_index29\
    \ = 0\n    var paren_levels_count_max_index30 = 0\n    var paren_levels_count_max_index31\
    \ = 0\n    var paren_levels_count_max_index32 = 0\n    var paren_levels_count_max_index33\
    \ = 0\n    var paren_levels_count_max_index34 = 0\n    var paren_levels_count_max_index35\
    \ = 0\n    var paren_levels_count_max_index36 = 0\n    var paren_levels_count_max_index37\
    \ = 0\n    var paren_levels_count_max_index38 = 0\n    var paren_levels_count_max_index39\
    \ = 0\n    var paren_levels_count_max_index40 = 0\n    var paren_levels_count_max_index41\
    \ = 0\n    var paren_levels_count_max_index42 = 0\n    var paren_levels_count_max_index43\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpil54p3ma.swift:56:9: error: type annotation missing in pattern\n\
    \    var paren_levels_count_max_index43\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_stack\
    \ = [Int]()\n    var paren_stack_index = 0\n    var paren_stack_top = 0\n    var\
    \ paren_stack_bottom = 0\n    var paren_stack_top_index = 0\n    var paren_stack_bottom_index\
    \ = 0\n    var paren_stack_top_is_open = false\n    var paren_stack_bottom_is_open\
    \ = false\n    var paren_stack_top_is_closed = false\n    var paren_stack_bottom_is_closed\
    \ = false\n    var paren_stack_top_is_opening = false\n    var paren_stack_bottom_is_opening\
    \ = false\n    var paren_stack_top_is_closing = false\n    var paren_stack_bottom_is_closing\
    \ = false\n    var paren_stack_top_is_opened = false\n    var paren_stack_bottom_is_opened\
    \ = false\n    var paren_stack_top_is_closed = false\n    var paren_stack_bottom_is_closed\
    \ = false\n    var paren_stack_top_is_opening = false\n    var paren_stack_bottom_is_opening\
    \ = false\n    var paren_stack_top_is_closing = false\n    var paren_stack_bottom_is_closing\
    \ = false\n    var paren_stack_top_is_opened = false\n    var paren_stack_bottom_is_opened\
    \ = false\n    var paren_stack_top_is_closed = false\n    var paren_stack_bottom_is_closed\
    \ = false\n    var paren_stack_top_is_opening = false\n    var paren_stack_bottom_is_opening\
    \ = false\n    var paren_stack_top_is_closing = false\n    var paren_stack_bottom_is_closing\
    \ = false\n    var paren_stack_top_is_opened = false\n    var paren_stack_bottom_is_opened\
    \ = false\n    var paren_stack_top_is_closed = false\n    var paren_stack_bottom_is_closed\
    \ = false\n    var paren_stack_top_is_opening = false\n    var paren_stack_bottom_is_opening\
    \ = false\n    var paren_stack_top_is_closing = false\n    var paren_stack_bottom_is_closing\
    \ = false\n    var paren_stack_top_is_opened = false\n    var paren_stack_bottom_is_opened\
    \ = false\n    var paren_stack_top_is_closed = false\n    var paren_stack_bottom_is_closed\
    \ = false\n    var paren_stack_top_is_opening = false\n    var paren_stack_bottom_is_opening\
    \ = false\n    var paren_stack_top_is_closing = false\n    var paren_stack_bottom_is_closing\
    \ = false\n    var paren_stack_top_is_opened = false\n    var paren_stack_bottom_is_opened\
    \ = false\n    var paren_stack_top_is_closed = false\n    var paren_stack_bottom_is_closed\
    \ = false\n    var paren_stack_top_is_opening = \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpekqzngmj.swift:63:37: error: expected initial value after '='\n\
    \    var paren_stack_top_is_opening = \n                                    ^\n\
    /tmp/tmpekqzngmj.swift:29:9: error: invalid redeclaration of 'paren_stack_top_is_closed'\n\
    \    var paren_stack_top_is_closed = false\n        ^\n/tmp/tmpekqzngmj.swift:21:9:\
    \ note: 'paren_stack_top_is_closed' previously declared here\n    var paren_stack_top_is_closed\
    \ = false\n        ^\n/tmp/tmpekqzngmj.swift:30:9: error: invalid redeclaration\
    \ of 'paren_stack_bottom_is_closed'\n    var paren_stack_bottom_is_closed = false\n\
    \        ^\n/tmp/tmpekqzngmj.swift:22:9: note: 'paren_stack_bottom_is_closed'\
    \ previously declared here\n    var paren_stack_bottom_is_closed = false\n   \
    \     ^\n/tmp/tmpekqzngmj.swift:31:9: error: invalid redeclaration of 'paren_stack_top_is_opening'\n\
    \    var paren_stack_top_is_opening = false\n        ^\n/tmp/tmpekqzngmj.swift:23:9:\
    \ note: 'paren_stack_top_is_opening' previously declared here\n    var paren_stack_top_is_opening\
    \ = false\n        ^\n/tmp/tmpekqzngmj.swift:32:9: error: invalid redeclaration\
    \ of 'paren_stack_bottom_is_opening'\n    var paren_stack_bottom_is_opening =\
    \ false\n        ^\n/tmp/tmpekqzngmj.swift:24:9: note: 'paren_stack_bottom_is_opening'\
    \ previously declared here\n    var paren_stack_bottom_is_opening = false\n  \
    \      ^\n/tmp/tmpekqzngmj.swift:33:9: error: invalid redeclaration of 'paren_stack_top_is_closing'\n\
    \    var paren_stack_top_is_closing = false\n        ^\n/tmp/tmpekqzngmj.swift:25:9:\
    \ note: 'paren_stack_top_is_closing' previously declared here\n    var paren_stack_top_is_closing\
    \ = false\n        ^\n/tmp/tmpekqzngmj.swift:34:9: error: invalid redeclaration\
    \ of 'paren_stack_bottom_is_closing'\n    var paren_stack_bottom_is_closing =\
    \ false\n        ^\n/tmp/tmpekqzngmj.swift:26:9: note: 'paren_stack_bottom_is_closing'\
    \ previously declared here\n    var paren_stack_bottom_is_closing = false\n  \
    \      ^\n/tmp/tmpekqzngmj.swift:35:9: error: invalid redeclaration of 'paren_stack_top_is_opened'\n\
    \    var paren_stack_top_is_opened = false\n        ^\n/tmp/tmpekqzngmj.swift:"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    for char\
    \ in paren_string.characters {\n        if char == \"(\" {\n            paren_groups.append(String(char))\n\
    \            paren_count += 1\n            level += 1\n            if level >\
    \ max_level {\n                max_level = level\n                max_level_parens\
    \ = paren_count\n            }\n        } else if char == \")\" {\n          \
    \  paren_groups.append(String(char))\n            paren_count -= 1\n         \
    \   level -= 1\n            if level < max_level {\n                max_level\
    \ = level\n                max_level_parens = paren_count\n            }\n   \
    \     } else {\n            paren_groups.append(String(char))\n        }\n   \
    \ }\n    return Array(max_level_parens).map { paren_count }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprc1sz2vi.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprc1sz2vi.swift:34:18: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array(max_level_parens).map { paren_count }\n          \
    \       ^\n                 arrayLiteral: \n/tmp/tmprc1sz2vi.swift:34:40: error:\
    \ contextual type for closure argument list expects 1 argument, which cannot be\
    \ implicitly ignored\n    return Array(max_level_parens).map { paren_count }\n\
    \                                       ^\n                                  \
    \       _ in\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppc1a4v86.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmppc1a4v86.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmppc1a4v86.swift:13:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmppc1a4v86.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmppc1a4v86.swift:14:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmppc1a4v86.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmppc1a4v86.swift:15:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmppc1a4v86.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmppc1a4v86.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmppc1a4v86.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmppc1a4v86.swift:17:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmppc1a4v86.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmppc1a4v86.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmppc1a4v86.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmppc1a4v86.swift:19:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmppc1a4v86.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmppc1a4v86.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmppc1a4v86.swift:10:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmppc1a4v86.swift:21:9: er"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_pointer\
    \ = 0\n    var paren_stack_pointer_max = 0\n    var paren_stack_pointer_max_max\
    \ = 0\n    var paren_stack_pointer_max_min = 0\n    var paren_stack_pointer_min\
    \ = 0\n    var paren_stack_pointer_min_max = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_min_min\
    \ = 0\n    var paren_stack_pointer_min_min = 0\n    var paren_stack_pointer_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpx655z_eb.swift:20:9: error: invalid redeclaration of 'paren_stack_pointer_min_min'\n\
    \    var paren_stack_pointer_min_min = 0\n        ^\n/tmp/tmpx655z_eb.swift:19:9:\
    \ note: 'paren_stack_pointer_min_min' previously declared here\n    var paren_stack_pointer_min_min\
    \ = 0\n        ^\n/tmp/tmpx655z_eb.swift:21:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_min_min'\n    var paren_stack_pointer_min_min = 0\n   \
    \     ^\n/tmp/tmpx655z_eb.swift:19:9: note: 'paren_stack_pointer_min_min' previously\
    \ declared here\n    var paren_stack_pointer_min_min = 0\n        ^\n/tmp/tmpx655z_eb.swift:22:9:\
    \ error: invalid redeclaration of 'paren_stack_pointer_min_min'\n    var paren_stack_pointer_min_min\
    \ = 0\n        ^\n/tmp/tmpx655z_eb.swift:19:9: note: 'paren_stack_pointer_min_min'\
    \ previously declared here\n    var paren_stack_pointer_min_min = 0\n        ^\n\
    /tmp/tmpx655z_eb.swift:23:9: error: invalid redeclaration of 'paren_stack_pointer_min_min'\n\
    \    var paren_stack_pointer_min_min = 0\n        ^\n/tmp/tmpx655z_eb.swift:19:9:\
    \ note: 'paren_stack_pointer_min_min' previously declared here\n    var paren_stack_pointer_min_min\
    \ = 0\n        ^\n/tmp/tmpx655z_eb.swift:24:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_min_min'\n    var paren_stack_pointer_min_min = 0\n   \
    \     ^\n/tmp/tmpx655z_eb.swift:19:9: note: 'paren_stack_pointer_min_min' previously\
    \ declared here\n    var paren_stack_pointer_min_min = 0\n        ^\n/tmp/tmpx655z_eb.swift:25:9:\
    \ error: invalid redeclaration of 'paren_stack_pointer_min_min'\n    var paren_stack_pointer_min_min\
    \ = 0\n        ^\n/tmp/tmpx655z_eb.swift:19:9: note: 'paren_stack_pointer_min_min'\
    \ previously declared here\n    var paren_stack_pointer_min_min = 0\n        ^\n\
    /tmp/tmpx655z_eb.swift:26:9: error: invalid redeclaration of 'paren_stack_pointer_min_min'\n\
    \    var paren_stack_pointer_min_min = 0\n        ^\n/tmp/tmpx655z_eb.swift:19:9:\
    \ note: 'paren_stack_pointer_min_min' previously declared here\n    var paren_stack_pointer_min_min\
    \ = 0\n        ^\n/tmp/tmpx655z_eb.swift:27:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_string = \"\
    \"\n    var paren_level_stack_last_index = 0\n    var paren_level_stack_last_string\
    \ = \"\"\n    var paren_level_stack_last_level = 0\n    var paren_level_stack_last_level_stack\
    \ = [Int]()\n    var paren_level_stack_last_level_stack_index = 0\n    var paren_level_stack_last_level_stack_size\
    \ = 0\n    var paren_level_stack_last_level_stack_string = \"\"\n    var paren_level_stack_last_level_stack_last_index\
    \ = 0\n    var paren_level_stack_last_level_stack_last_string = \"\"\n    var\
    \ paren_level_stack_last_level_stack_last_level = 0\n    var paren_level_stack_last_level_stack_last_level_stack\
    \ = [Int]()\n    var paren_level_stack_last_level_stack_last_level_stack_index\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_size = 0\n\
    \    var paren_level_stack_last_level_stack_last_level_stack_string = \"\"\n \
    \   var paren_level_stack_last_level_stack_last_level_stack_last_index = 0\n \
    \   var paren_level_stack_last_level_stack_last_level_stack_last_string = \"\"\
    \n    var paren_level_stack_last_level_stack_last_level_stack_last_level = 0\n\
    \    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack\
    \ = [Int]()\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_index\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_size\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_string\
    \ = \"\"\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_index\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_string\
    \ = \"\"\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level_stack\
    \ = [Int]()\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level_stack_index\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level_stack_size\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level_stack_string\
    \ = \"\"\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level_stack_last_index\
    \ = 0\n    var paren_level_stack_last_level_stack_last_level_stack_last_level_stack_last_level_stack_last_string\
    \ = \"\"\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpguj2i28b.swift:45:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens = 0\n    var paren_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level = 0\n    var paren_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_count = 0\n    var\
    \ paren_level_parens_level_parens_level_parens_level = 0\n    var paren_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7hi0tu3y.swift:33:9: error: invalid redeclaration of 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens'\n\
    \    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n        ^\n/tmp/tmp7hi0tu3y.swift:31:9: note: 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens'\
    \ previously declared here\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = 0\n        ^\n/tmp/tmp7hi0tu3y.swift:34:9: error: invalid redeclaration of\
    \ 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count'\n\
    \    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n        ^\n/tmp/tmp7hi0tu3y.swift:32:9: note: 'paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count'\
    \ previously declared here\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_count\
    \ = 0\n        ^\n/tmp/tmp7hi0tu3y.swift:38:9: error: type annotation missing\
    \ in pattern\n    var paren_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_count\
    \ = [Int]()\n    var paren_group_level = [Int]()\n    var paren_group_level_parens\
    \ = [Int]()\n    var paren_group_level_parens_count = 0\n    var paren_group_level_parens_count_max\
    \ = 0\n    var paren_group_level_parens_count_min = 0\n    var paren_group_level_parens_count_sum\
    \ = 0\n    var paren_group_level_parens_count_sum_max = 0\n    var paren_group_level_parens_count_sum_min\
    \ = 0\n    var paren_group_level_parens_count_sum_avg = 0\n    var paren_group_level_parens_count_sum_avg_max\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_min = 0\n    var paren_group_level_parens_count_sum_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_max = 0\n    var paren_group_level_parens_count_sum_avg_avg_min\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n    var paren_group_level_parens_count_sum_avg_avg_avg\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5q9wzxxe.swift:29:9: error: invalid redeclaration of 'paren_group_level_parens_count_sum_avg_avg_avg'\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:28:9:\
    \ note: 'paren_group_level_parens_count_sum_avg_avg_avg' previously declared here\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:30:9:\
    \ error: invalid redeclaration of 'paren_group_level_parens_count_sum_avg_avg_avg'\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:28:9:\
    \ note: 'paren_group_level_parens_count_sum_avg_avg_avg' previously declared here\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:31:9:\
    \ error: invalid redeclaration of 'paren_group_level_parens_count_sum_avg_avg_avg'\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:28:9:\
    \ note: 'paren_group_level_parens_count_sum_avg_avg_avg' previously declared here\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:32:9:\
    \ error: invalid redeclaration of 'paren_group_level_parens_count_sum_avg_avg_avg'\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:28:9:\
    \ note: 'paren_group_level_parens_count_sum_avg_avg_avg' previously declared here\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:33:9:\
    \ error: invalid redeclaration of 'paren_group_level_parens_count_sum_avg_avg_avg'\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:28:9:\
    \ note: 'paren_group_level_parens_count_sum_avg_avg_avg' previously declared here\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:34:9:\
    \ error: invalid redeclaration of 'paren_group_level_parens_count_sum_avg_avg_avg'\n\
    \    var paren_group_level_parens_count_sum_avg_avg_avg = 0\n        ^\n/tmp/tmp5q9wzxxe.swift:28:9:\
    \ note: 'paren_group_level_parens_count_sum_avg_avg_avg' "
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_next = 0\n    var paren_char_next2 = 0\n    var paren_char_next3\
    \ = 0\n    var paren_char_next4 = 0\n    var paren_char_next5 = 0\n    var paren_char_next6\
    \ = 0\n    var paren_char_next7 = 0\n    var paren_char_next8 = 0\n    var paren_char_next9\
    \ = 0\n    var paren_char_next10 = 0\n    var paren_char_next11 = 0\n    var paren_char_next12\
    \ = 0\n    var paren_char_next13 = 0\n    var paren_char_next14 = 0\n    var paren_char_next15\
    \ = 0\n    var paren_char_next16 = 0\n    var paren_char_next17 = 0\n    var paren_char_next18\
    \ = 0\n    var paren_char_next19 = 0\n    var paren_char_next20 = 0\n    var paren_char_next21\
    \ = 0\n    var paren_char_next22 = 0\n    var paren_char_next23 = 0\n    var paren_char_next24\
    \ = 0\n    var paren_char_next25 = 0\n    var paren_char_next26 = 0\n    var paren_char_next27\
    \ = 0\n    var paren_char_next28 = 0\n    var paren_char_next29 = 0\n    var paren_char_next30\
    \ = 0\n    var paren_char_next31 = 0\n    var paren_char_next32 = 0\n    var paren_char_next33\
    \ = 0\n    var paren_char_next34 = 0\n    var paren_char_next35 = 0\n    var paren_char_next36\
    \ = 0\n    var paren_char_next37 = 0\n    var paren_char_next38 = 0\n    var paren_char_next39\
    \ = 0\n    var paren_char_next40 = 0\n    var paren_char_next41 = 0\n    var paren_char_next42\
    \ = 0\n    var paren_char_next43 = 0\n    var paren_char_next44 = 0\n    var paren_char_next45\
    \ = 0\n    var paren_char_next46 = 0\n    var paren_char_next47 = 0\n    var paren_char_next48\
    \ = 0\n    var paren_char_next49 = 0\n    var paren_char_next50 = 0\n    var paren_char_next51\
    \ = 0\n    var paren_char_next52 = 0\n    var paren_char_next53 = 0\n    var paren_char_next54\
    \ = 0\n    var paren_char_next55 = 0\n    var paren_char_next56 = 0\n    var paren_char_next57\
    \ = 0\n    var paren_char_next58 = 0\n    var paren_char_next59 = 0\n    var paren_char_next60\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8pqowjy9.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char_next60\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var group = 0\n    var group_count = 0\n    var group_level = 0\n \
    \   var group_group_count = 0\n    var group_group_level = 0\n    var group_group_group_count\
    \ = 0\n    var group_group_group_level = 0\n    var group_group_group_group_count\
    \ = 0\n    var group_group_group_group_level = 0\n    var group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_level = 0\n    var group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_level = 0\n    var group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_level = 0\n    var group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_level = 0\n   \
    \ var group_group_group_group_group_group_group_group_group_count = 0\n    var\
    \ group_group_group_group_group_group_group_group_group_level = 0\n    var group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n    var group_group_group_group_group_group_group_group_group_group_group_group_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1rw9wqmp.swift:39:9: error: invalid redeclaration of 'group_group_group_group_group_group_group_group_group_group_group_group_group_level'\n\
    \    var group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n        ^\n/tmp/tmp1rw9wqmp.swift:37:9: note: 'group_group_group_group_group_group_group_group_group_group_group_group_group_level'\
    \ previously declared here\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n        ^\n/tmp/tmp1rw9wqmp.swift:42:9: error: invalid redeclaration of\
    \ 'group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count'\n\
    \    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n        ^\n/tmp/tmp1rw9wqmp.swift:40:9: note: 'group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count'\
    \ previously declared here\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n        ^\n/tmp/tmp1rw9wqmp.swift:46:9: error: invalid redeclaration of\
    \ 'group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count'\n\
    \    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n        ^\n/tmp/tmp1rw9wqmp.swift:44:9: note: 'group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count'\
    \ previously declared here\n    var group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n        ^\n/tmp/tmp1rw9wqmp.swift:49:9: error: type annotation missing\
    \ in pattern\n    var group_group_group_group_group_group_group_group_group_group_group_group_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count_index = 0\n    var\
    \ paren_char_count_max = 0\n    var paren_char_count_max_index = 0\n    var paren_char_count_min\
    \ = 0\n    var paren_char_count_min_index = 0\n    var paren_char_count_max_paren\
    \ = 0\n    var paren_char_count_max_paren_index = 0\n    var paren_char_count_min_paren\
    \ = 0\n    var paren_char_count_min_paren_index = 0\n    var paren_char_count_max_paren_paren\
    \ = 0\n    var paren_char_count_max_paren_paren_index = 0\n    var paren_char_count_min_paren_paren\
    \ = 0\n    var paren_char_count_min_paren_paren_index = 0\n    var paren_char_count_max_paren_paren_paren\
    \ = 0\n    var paren_char_count_max_paren_paren_paren_index = 0\n    var paren_char_count_min_paren_paren_paren\
    \ = 0\n    var paren_char_count_min_paren_paren_paren_index = 0\n    var paren_char_count_max_paren_paren_paren_paren\
    \ = 0\n    var paren_char_count_max_paren_paren_paren_paren_index = 0\n    var\
    \ paren_char_count_min_paren_paren_paren_paren = 0\n    var paren_char_count_min_paren_paren_paren_paren_index\
    \ = 0\n    var paren_char_count_max_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_char_count_max_paren_paren_paren_paren_paren_index = 0\n    var paren_char_count_min_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_char_count_min_paren_paren_paren_paren_paren_index = 0\n\
    \    var paren_char_count_max_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_char_count_max_paren_paren_paren_paren_paren_paren_index = 0\n    var\
    \ paren_char_count_min_paren_paren_paren_paren_paren_paren = 0\n    var paren_char_count_min_paren_paren_paren_paren_paren_paren_index\
    \ = 0\n    var paren_char_count_max_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_char_count_max_paren_paren_paren_paren_paren_paren_paren_index\
    \ = 0\n    var paren_char_count_min_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_char_count_min_paren_paren_paren_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpepb_8oau.swift:47:9: error: type annotation missing in pattern\n\
    \    var paren_char_count_min_paren_paren_paren_\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n   \
    \ var level = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_count_index\
    \ = 0\n    var paren_count_string = \"\"\n    for index in 0..<paren_string.characters.count\
    \ {\n        let char = paren_string.characters[index]\n        switch char {\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(char)\n        case \"(\":\n            paren_count += 1\n       \
    \     paren_count_string += String(char)\n        case \"(\":\n            paren_count\
    \ += 1\n            paren_count_string += String(char)\n        case \"(\":\n\
    \            paren_count += 1\n            paren_count_string += String(char)\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(char)\n        case \"(\":\n            paren_count += 1\n       \
    \     paren_count_string += String(char)\n        case \"(\":\n            paren_count\
    \ += 1\n            paren_count_string += String(char)\n        case \"(\":\n\
    \            paren_count += 1\n            paren_count_string += String(char)\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(char)\n        case \"(\":\n            paren_count += 1\n       \
    \     paren_count_string += String(char)\n        case \"(\":\n            paren_count\
    \ += 1\n            paren_count_string += String(char)\n        case \"(\":\n\
    \            paren_count += 1\n            paren_count_string += String(char)\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(char)\n        case \"(\":\n            paren_count += 1\n       \
    \     paren_count_string += String(char)\n        case \"(\":\n            paren_count\
    \ += 1\n            paren_count_string += String(char)\n        case \"(\":\n\
    \            paren_count += 1\n            paren_count_string += String(char)\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(char)\n        case \"(\":\n            paren_count += 1\n       \
    \     paren_count_string += String(char)\n        case \"(\":\n            paren_count\
    \ += 1\n            paren_count_string += String(char)\n        case \"(\":\n\
    \            paren_count += 1\n            paren_count_string += String(char)\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(char)\n        case \"(\":\n            paren_count += 1\n       \
    \     paren_count_string += String(char)\n        case \"(\":\n            paren_count\
    \ += 1\n            paren_count_string += String(char)\n        case \"(\":\n\
    \            paren_count += 1\n            paren_count_string += String(char)\n\
    \        case \"(\":\n            paren_count += 1\n            paren_count_string\
    \ += String(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0xac78dl.swift:93:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp0xac78dl.swift:110:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp0xac78dl.swift:15:52:\
    \ note: to match this opening '{'\n    for index in 0..<paren_string.characters.count\
    \ {\n                                                   ^\n/tmp/tmp0xac78dl.swift:110:67:\
    \ error: expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp0xac78dl.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp0xac78dl.swift:15:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in 0..<paren_string.characters.count {\n                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0xac78dl.swift:16:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let char = paren_string.characters[index]\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp0xac78dl.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n        let char = paren_string.characters[index]\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0xac78dl.swift:21:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmp0xac78dl.swift:18:14: no"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var max_level_open = 0\n    var max_level_close = 0\n    var paren_count\
    \ = 0\n    var open_count = 0\n    var close_count = 0\n    var open_paren_count\
    \ = 0\n    var close_paren_count = 0\n    var paren_level = 0\n    var open_paren_level\
    \ = 0\n    var close_paren_level = 0\n    var paren_level_open = 0\n    var paren_level_close\
    \ = 0\n    var open_paren_level_open = 0\n    var open_paren_level_close = 0\n\
    \    var close_paren_level_open = 0\n    var close_paren_level_close = 0\n   \
    \ var paren_level_open_count = 0\n    var paren_level_close_count = 0\n    var\
    \ open_paren_level_open_count = 0\n    var open_paren_level_close_count = 0\n\
    \    var close_paren_level_open_count = 0\n    var close_paren_level_close_count\
    \ = 0\n    var paren_level_open_count_max = 0\n    var paren_level_close_count_max\
    \ = 0\n    var open_paren_level_open_count_max = 0\n    var open_paren_level_close_count_max\
    \ = 0\n    var close_paren_level_open_count_max = 0\n    var close_paren_level_close_count_max\
    \ = 0\n    var paren_level_open_count_max_max = 0\n    var paren_level_close_count_max_max\
    \ = 0\n    var open_paren_level_open_count_max_max = 0\n    var open_paren_level_close_count_max_max\
    \ = 0\n    var close_paren_level_open_count_max_max = 0\n    var close_paren_level_close_count_max_max\
    \ = 0\n    var paren_level_open_count_max_max_max = 0\n    var paren_level_close_count_max_max_max\
    \ = 0\n    var open_paren_level_open_count_max_max_max = 0\n    var open_paren_level_close_count_max_max_max\
    \ = 0\n    var close_paren_level_open_count_max_max_max = 0\n    var close_paren_level_close_count_max_max_max\
    \ = 0\n    var open_paren_level_open_count_max_max_max_max = 0\n    var open_paren_level_close_count_max_max_max_max\
    \ = 0\n    var close_paren_level_open_count_max_max_max_max = 0\n    var close_paren_level_close_count_max_max_max_max\
    \ = 0\n    var open_paren_level_open_count_max_max_max_max_max = 0\n    var open_paren_level_close_count_max_max_max_max_max\
    \ = 0\n    var close_paren_level_open_count_max_max_max_max_max = 0\n    var close_paren_level_close_count_max_max_max_max_max\
    \ = 0\n    var open_paren_level_open_count_max_max_max_max_max_max = 0\n    var\
    \ open_paren_level_close_count_max_max_max_max_max_max = 0\n    var close_paren_level_open_count_max_max_max_max_max_max_max\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzlzcpchl.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpzlzcpchl.swift:8:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpzlzcpchl.swift:9:9: warning: initialization\
    \ of variable 'max_level' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpzlzcpchl.swift:10:9:\
    \ warning: initialization of variable 'max_level_paren' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var max_level_paren = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpzlzcpchl.swift:11:9: warning: initialization\
    \ of variable 'max_level_open' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var max_level_open = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzlzcpchl.swift:12:9: warning: initialization of variable 'max_level_close'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_close = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpzlzcpchl.swift:13:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzlzcpchl.swift:14:9: warning: initialization of variable 'open_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var open_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpzlzcpchl.swift:15:9:\
    \ warning: initialization of variable 'close_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var close_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzlzcpchl.swift:16:9: warning: initialization of variable 'open_paren_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var open_paren_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpzlzcpchl.swift:17:9:\
    \ warning: initialization of variable 'close_paren_count' was never used; consider\
    \ replacing with assignment to '"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count\
    \ > 0 {\n            levels[paren_level] = paren_count\n            paren_count\
    \ = 0\n        }\n        if c == '(' {\n            paren_count += 1\n      \
    \  } else if c == ')' {\n            paren_count -= 1\n        }\n        paren_level\
    \ = (paren_level + 1) % len(levels)\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppc0iyhew.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmppc0iyhew.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmppc0iyhew.swift:21:43: error: cannot find 'len' in scope\n\
    \        paren_level = (paren_level + 1) % len(levels)\n                     \
    \                     ^~~\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_level\
    \ = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count = 0\n\
    \    var paren_level_parens_count_parens = 0\n    var paren_level_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens = 0\n    var paren_level_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens = 0\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count = 0\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpil1_frkc.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjgwwktiv.swift:26:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:25:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:29:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmpjgwwktiv.swift:30:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         levels[level] = parens\n            parens += 1\n        } else if c\
    \ == ')' {\n            levels[level] = parens\n            parens -= 1\n    \
    \        if parens == 0 {\n                levels[level] = levels[level-1] + 1\n\
    \            }\n        } else {\n            levels[level] = levels[level-1]\
    \ + 1\n        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcrxvqh47.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpcrxvqh47.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char: Char\n    var paren_char_next:\
    \ Char\n    var paren_char_prev: Char\n    var paren_char_prev2: Char\n    var\
    \ paren_char_next2: Char\n    var paren_char_prev3: Char\n    var paren_char_next3:\
    \ Char\n    var paren_char_prev4: Char\n    var paren_char_next4: Char\n    var\
    \ paren_char_prev5: Char\n    var paren_char_next5: Char\n    var paren_char_prev6:\
    \ Char\n    var paren_char_next6: Char\n    var paren_char_prev7: Char\n    var\
    \ paren_char_next7: Char\n    var paren_char_prev8: Char\n    var paren_char_next8:\
    \ Char\n    var paren_char_prev9: Char\n    var paren_char_next9: Char\n    var\
    \ paren_char_prev10: Char\n    var paren_char_next10: Char\n    var paren_char_prev11:\
    \ Char\n    var paren_char_next11: Char\n    var paren_char_prev12: Char\n   \
    \ var paren_char_next12: Char\n    var paren_char_prev13: Char\n    var paren_char_next13:\
    \ Char\n    var paren_char_prev14: Char\n    var paren_char_next14: Char\n   \
    \ var paren_char_prev15: Char\n    var paren_char_next15: Char\n    var paren_char_prev16:\
    \ Char\n    var paren_char_next16: Char\n    var paren_char_prev17: Char\n   \
    \ var paren_char_next17: Char\n    var paren_char_prev18: Char\n    var paren_char_next18:\
    \ Char\n    var paren_char_prev19: Char\n    var paren_char_next19: Char\n   \
    \ var paren_char_prev20: Char\n    var paren_char_next20: Char\n    var paren_char_prev21:\
    \ Char\n    var paren_char_next21: Char\n    var paren_char_prev22: Char\n   \
    \ var paren_char_next22: Char\n    var paren_char_prev23: Char\n    var paren_char_next23:\
    \ Char\n    var paren_char_prev24: Char\n    var paren_char_next24: Char\n   \
    \ var paren_char_prev25: Char\n    var paren_char_next25: Char\n    var paren_char_prev26:\
    \ Char\n    var paren_char_next26: Char\n    var paren_char_prev27: Char\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm5c6hsz_.swift:15:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpm5c6hsz_.swift:16:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpm5c6hsz_.swift:17:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpm5c6hsz_.swift:18:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev2: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:19:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next2: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:20:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev3: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:21:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next3: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:22:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev4: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:23:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next4: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:24:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev5: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:25:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next5: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:26:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev6: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:27:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next6: Char\n                          ^~~~\n/tmp/tmpm5c6hsz_.swift:28:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev7: Char\n  \
    \                        ^~~~\n/tmp/tmpm5c6hsz_.swift:29:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next7: Char\n                     \
    \     ^~~~\n/tmp/tmpm5c6hsz_.swift:30:27: error: cannot find type 'Char' in scope\n\
    \    var paren_"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_levels_count = 0\n    var parens_levels_index = 0\n\
    \    var parens_levels_index2 = 0\n    var parens_levels_index3 = 0\n    var parens_levels_index4\
    \ = 0\n    var parens_levels_index5 = 0\n    var parens_levels_index6 = 0\n  \
    \  var parens_levels_index7 = 0\n    var parens_levels_index8 = 0\n    var parens_levels_index9\
    \ = 0\n    var parens_levels_index10 = 0\n    var parens_levels_index11 = 0\n\
    \    var parens_levels_index12 = 0\n    var parens_levels_index13 = 0\n    var\
    \ parens_levels_index14 = 0\n    var parens_levels_index15 = 0\n    var parens_levels_index16\
    \ = 0\n    var parens_levels_index17 = 0\n    var parens_levels_index18 = 0\n\
    \    var parens_levels_index19 = 0\n    var parens_levels_index20 = 0\n    var\
    \ parens_levels_index21 = 0\n    var parens_levels_index22 = 0\n    var parens_levels_index23\
    \ = 0\n    var parens_levels_index24 = 0\n    var parens_levels_index25 = 0\n\
    \    var parens_levels_index26 = 0\n    var parens_levels_index27 = 0\n    var\
    \ parens_levels_index28 = 0\n    var parens_levels_index29 = 0\n    var parens_levels_index30\
    \ = 0\n    var parens_levels_index31 = 0\n    var parens_levels_index32 = 0\n\
    \    var parens_levels_index33 = 0\n    var parens_levels_index34 = 0\n    var\
    \ parens_levels_index35 = 0\n    var parens_levels_index36 = 0\n    var parens_levels_index37\
    \ = 0\n    var parens_levels_index38 = 0\n    var parens_levels_index39 = 0\n\
    \    var parens_levels_index40 = 0\n    var parens_levels_index41 = 0\n    var\
    \ parens_levels_index42 = 0\n    var parens_levels_index43 = 0\n    var parens_levels_index44\
    \ = 0\n    var parens_levels_index45 = 0\n    var parens_levels_index46 = 0\n\
    \    var parens_levels_index47 = 0\n    var parens_levels_index48 = 0\n    var\
    \ parens_levels_index49 = 0\n    var parens_levels_index50 = 0\n    var parens_levels_index51\
    \ = 0\n    var parens_levels_index52 = 0\n    var parens_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3s0_eq2i.swift:67:9: error: type annotation missing in pattern\n\
    \    var parens_\n        ^\n"
  stdout: ''
  timestamp: 1659824948
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_level_count = 0\n    var paren_level_char_count\
    \ = 0\n    var paren_level_char = \"\"\n    var paren_level_chars = []\n    var\
    \ paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index =\
    \ 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n\
    \    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n \
    \   var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n  \
    \  var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n   \
    \ var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var\
    \ paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes =\
    \ []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n\
    \    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n \
    \   var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n  \
    \  var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n   \
    \ var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var\
    \ paren_level_char_index = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index =\
    \ 0\n    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n\
    \    var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n \
    \   var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n  \
    \  var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n   \
    \ var paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var\
    \ paren_level_char_indexes = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes =\
    \ []\n    var paren_level_char_index = 0\n    var paren_level_char_indexes = []\n\
    \    var paren_level_char_index = 0\n    var paren_level_char_indexe\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpu0o5gq06.swift:15:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmpu0o5gq06.swift:17:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmpu0o5gq06.swift:18:9: error: invalid redeclaration\
    \ of 'paren_level_char_index'\n    var paren_level_char_index = 0\n        ^\n\
    /tmp/tmpu0o5gq06.swift:16:9: note: 'paren_level_char_index' previously declared\
    \ here\n    var paren_level_char_index = 0\n        ^\n/tmp/tmpu0o5gq06.swift:19:36:\
    \ error: empty collection literal requires an explicit type\n    var paren_level_char_indexes\
    \ = []\n                                   ^~\n/tmp/tmpu0o5gq06.swift:19:9: error:\
    \ invalid redeclaration of 'paren_level_char_indexes'\n    var paren_level_char_indexes\
    \ = []\n        ^\n/tmp/tmpu0o5gq06.swift:17:9: note: 'paren_level_char_indexes'\
    \ previously declared here\n    var paren_level_char_indexes = []\n        ^\n\
    /tmp/tmpu0o5gq06.swift:20:9: error: invalid redeclaration of 'paren_level_char_index'\n\
    \    var paren_level_char_index = 0\n        ^\n/tmp/tmpu0o5gq06.swift:16:9: note:\
    \ 'paren_level_char_index' previously declared here\n    var paren_level_char_index\
    \ = 0\n        ^\n/tmp/tmpu0o5gq06.swift:21:36: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_indexes = []\n         \
    \                          ^~\n/tmp/tmpu0o5gq06.swift:21:9: error: invalid redeclaration\
    \ of 'paren_level_char_indexes'\n    var paren_level_char_indexes = []\n     \
    \   ^\n/tmp/tmpu0o5gq06.swift:17:9: note: 'paren_level_char_indexes' previously\
    \ declared here\n    var paren_level_char_indexes = []\n        ^\n/tmp/tmpu0o5gq06.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_char_index'\n    var paren_level_char_index\
    \ = 0\n        ^\n/tmp/tmpu0o5gq06.swift:16:9: note: 'paren_level_char_index'\
    \ previously declared here\n    var paren_level_char_index = 0\n        ^\n/tmp/tmpu0o5gq06.swift:23:36:\
    \ error: empty collection literal requires an explici"
  stdout: ''
  timestamp: 1659824948
