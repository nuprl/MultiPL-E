language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s[0]\n    for char in s.characters[1..<len] {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgh8c9k2p.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgh8c9k2p.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgh8c9k2p.swift:24:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n    for char in s.characters[1..<len]\
    \ {\n                ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpgh8c9k2p.swift:24:19: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in s.characters[1..<len] {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.count % 3 == 0 && s.characters.reduce(true)\
    \ { ($0 || $1 == $2) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2kf8wan0.swift:19:74: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 3 were used in closure body\n    return s.count >= 3 && s.count % 3 == 0\
    \ && s.characters.reduce(true) { ($0 || $1 == $2) }\n                        \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    for char in s.characters {\n        if char\
    \ == last {\n            return false\n        }\n        last = char\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpme948kpn.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpme948kpn.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n\
    \    for char in s.dropFirst() {\n        if char != lastChar {\n            return\
    \ false\n        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pg238i5.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c {\n           \
    \ return false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpici5un41.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ s.characters.first {\n            count += 1\n        } else if letter == s.characters.last\
    \ {\n            count -= 1\n        } else {\n            count = 0\n       \
    \ }\n        if count < 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc2n_61ly.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc2n_61ly.swift:21:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        if letter\
    \ == s.characters.first {\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpc2n_61ly.swift:23:31: error: 'characters'\
    \ is unavailable: Please use String directly\n        } else if letter == s.characters.last\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    var\
    \ last: Character?\n    var lastCount: Int = 0\n    for c in s.characters {\n\
    \        if last == nil || last != c {\n            last = c;\n            lastCount\
    \ = 1;\n        } else {\n            lastCount++;\n        }\n        if lastCount\
    \ > 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw_5x3p9.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbw_5x3p9.swift:23:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbw_5x3p9.swift:28:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++;\n                 \
    \    ^~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var count = 0\n  \
    \  for index in 0..<s.count {\n        if s[index] != s[index+1] {\n         \
    \   count += 1\n        }\n    }\n    return count >= 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7epmr94m.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[index]\
    \ != s[index+1] {\n           ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp7epmr94m.swift:24:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != s[index+1] {\n                       ^~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptnb2w8fl.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c {\n           \
    \ return false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpici5un41.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s.characters.last!\n    var isHappy = true\n    for\
    \ char in s.characters[0..<len] {\n        if char == lastChar {\n           \
    \ isHappy = false\n            break\n        }\n        lastChar = char\n   \
    \ }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp8bkacga.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp8bkacga.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp8bkacga.swift:25:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpp8bkacga.swift:25:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    let chars = Array(s.characters)\n    let groups = stride(from: 0,\
    \ to: len - 3, by: 3)\n    return groups.allSatisfy({ chars[$0] == chars[$1] &&\
    \ chars[$1] == chars[$2] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpzcq2dp.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqpzcq2dp.swift:23:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = Array(s.characters)\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpqpzcq2dp.swift:25:30: error: contextual\
    \ closure type '(Int) throws -> Bool' expects 1 argument, but 3 were used in closure\
    \ body\n    return groups.allSatisfy({ chars[$0] == chars[$1] && chars[$1] ==\
    \ chars[$2] })\n                             ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c {\n           \
    \ return false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpici5un41.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar: Character?\
    \ = nil\n    for char in s.characters {\n        if char == lastChar {\n     \
    \       return false\n        }\n        lastChar = char\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp21i8aa4c.swift:23:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_q2mfsuq.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s[0]\n    for char in s.characters[1..<len] {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgh8c9k2p.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgh8c9k2p.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgh8c9k2p.swift:24:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n    for char in s.characters[1..<len]\
    \ {\n                ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpgh8c9k2p.swift:24:19: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in s.characters[1..<len] {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, {$0 && $1 == $2}) ==\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4x0texvp.swift:19:54: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 3 were used in closure body\n    return s.count >= 3 && s.characters.reduce(true,\
    \ {$0 && $1 == $2}) == false\n                                               \
    \      ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        }\n    }\n    return count >= 3 && count == s.count/3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpmp_am5_p/tmpmp_am5_p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513a581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513a278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513a278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513a2777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp_am5_p                        0x000055facf81a59b <unavailable> + 5531

    5    libc.so.6                          0x00002b513a76d460 __libc_start_main +
    245

    6    tmpmp_am5_p                        0x000055facf81a0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n\
    \    for char in s.dropFirst() {\n        if char != lastChar {\n            return\
    \ false\n        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pg238i5.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last: Character?\n\
    \    var distinct: Set<Character> = []\n    for c in s.characters {\n        if\
    \ let last = last {\n            if last != c {\n                return false\n\
    \            }\n        } else {\n            last = c\n        }\n        if\
    \ let _ = distinct {\n            distinct.remove(c)\n        }\n    }\n    return\
    \ distinct.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjregu1ew.swift:24:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjregu1ew.swift:32:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Set<Character>'\n\
    \        if let _ = distinct {\n           ^       ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && s.characters.reduce(true, { (acc, c) -> Bool in\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwd9d8hgq.swift:20:23: error: cannot find 'is_distinct' in scope\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n              \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == nil || last != c {\n           \
    \ last = c\n        } else {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpepe2oc7g.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    while i < s.count {\n        if s[i] == s[j] {\n \
    \           i += 1\n            j += 1\n            k = 0\n        } else {\n\
    \            k += 1\n            if k == 3 {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpazzcjj7a.swift:26:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[j] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpazzcjj7a.swift:26:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[j] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character? = nil\n    var lastCount: Int = 0\n    for c\
    \ in s.characters {\n        if last == nil {\n            last = c\n        \
    \    lastCount = 1\n        } else {\n            if last != c {\n           \
    \     return false\n            }\n            lastCount++\n        }\n    }\n\
    \    if lastCount != 3 {\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeanzgbap.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeanzgbap.swift:25:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeanzgbap.swift:33:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s.characters.last\n    for char in s.characters[0..<(len-2)]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpjg7xyp23.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjg7xyp23.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpjg7xyp23.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<(len-2)] {\n              \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript<R>(bounds: R) -> String\
    \ where R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmpjg7xyp23.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters[0..<(len-2)] {\n                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char != lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp0sf6g306.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.count % 3 == 0 && s.characters.reduce(true)\
    \ { (prev, cur) -> Bool in\n        return prev || !prev && cur == prev\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppw7ficep.swift:20:37: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'Bool'\n        return\
    \ prev || !prev && cur == prev\n                                ~~~ ^  ~~~~\n\
    /tmp/tmppw7ficep.swift:20:37: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Bool, Bool), (Character, Character)\n        return\
    \ prev || !prev && cur == prev\n                                    ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n    while\
    \ i < len {\n        if s[i] == s[i+1] {\n            i += 1\n            j +=\
    \ 1\n            k += 1\n            count += 1\n        } else {\n          \
    \  if count == 3 {\n                return true\n            }\n            count\
    \ = 0\n            i = 0\n            j += 1\n            k += 1\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt_2qx9j.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptt_2qx9j.swift:28:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i+1] {\n           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptt_2qx9j.swift:28:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i+1] {\n                 \
    \  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var distinctCount = 0\n    for index in 0..<len - 3 {\n        if\
    \ s[index] != s[index + 1] || s[index] != s[index + 2] {\n            distinctCount++\n\
    \        }\n    }\n    return distinctCount >= 3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpurdjl6ua.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpurdjl6ua.swift:25:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[index] != s[index + 1] || s[index]\
    \ != s[index + 2] {\n           ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpurdjl6ua.swift:25:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != s[index + 1] || s[index] != s[index + 2] {\n         \
    \              ^~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpurdjl6ua.swift:25:40: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != s[index + 1] || s[index] != s[index + 2] {\n         \
    \                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpurdjl6ua.swift:25:52: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != s[index + 1] || s[index] != s[index + 2] {\n         \
    \                                          ^~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpurdjl6ua.swift:26:26: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            distinctCount++\n\
    \                         ^~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character? = nil\n    for c in s.characters {\n        if\
    \ last == nil {\n            last = c\n            continue\n        }\n     \
    \   if last != c {\n            return false\n        }\n        last = nil\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpex50s633.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpex50s633.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ letter + letter {\n            count += 1\n        }\n    }\n    return count\
    \ >= 3 && count == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqcnd18kf.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqcnd18kf.swift:21:29:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       if letter == letter + letter {\n                     ~~~~~~ ^ ~~~~~~\n\
    /tmp/tmpqcnd18kf.swift:25:37: error: 'characters' is unavailable: Please use String\
    \ directly\n    return count >= 3 && count == s.characters.count\n           \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last: Character?\
    \ = nil\n    for c in s.characters {\n        if last == c {\n            continue\n\
    \        }\n        if last != nil {\n            if last == c {\n           \
    \     return false\n            }\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl0qki4gc.swift:23:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    for c in s.characters {\n        if last ==\
    \ c {\n            return false\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp310qnwk.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpp310qnwk.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        guard prev == true else { return false }\n        return prev &&\
    \ cur != prev\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpie0smw06.swift:21:28: error: conflicting arguments to generic parameter\
    \ 'Self' ('String.Element' vs. 'Bool')\n        return prev && cur != prev\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (result, c) in\n \
    \       guard let index = s.firstIndex(of: c) else { return false }\n        return\
    \ result || (index != 0 && index != s.count - 1 && s[index + 1] == s[index + 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_7d1wnq8.swift:21:33: error: referencing operator function '!='\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \        return result || (index != 0 && index != s.count - 1 && s[index + 1]\
    \ == s[index + 2])\n                                ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n\
    /tmp/tmp_7d1wnq8.swift:21:47: error: referencing operator function '!=' on 'BinaryInteger'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n        return result\
    \ || (index != 0 && index != s.count - 1 && s[index + 1] == s[index + 2])\n  \
    \                                            ^\nSwift.BinaryInteger:1:11: note:\
    \ where 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmp_7d1wnq8.swift:21:67:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        return result || (index != 0 && index != s.count - 1 && s[index\
    \ + 1] == s[index + 2])\n                                                    \
    \              ^\n/tmp/tmp_7d1wnq8.swift:21:83: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n        return result ||\
    \ (index != 0 && index != s.count - 1 && s[index + 1] == s[index + 2])\n     \
    \                                                                            \
    \ ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var lastChar = s[0]\n    for char\
    \ in s.dropFirst() {\n        if char != lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpivew8ht7.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.length\n\
    \    if len < 3 {\n        return false\n    }\n    let chars = s.characters\n\
    \    var lastChar = chars.last\n    for char in chars.dropLast() {\n        if\
    \ char == lastChar.first {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhfyfybt.swift:22:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmprhfyfybt.swift:26:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = s.characters\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprhfyfybt.swift:29:29: error: value of type 'String.Element?'\
    \ (aka 'Optional<Character>') has no member 'first'\n        if char == lastChar.first\
    \ {\n                   ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s {\n        if last == c { return false }\n        last = c\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp8z8y_eyc/tmp8z8y_eyc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9358a41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9358738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9358738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93587377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z8y_eyc                        0x000055aff1b6a888 <unavailable> + 6280

    5    libc.so.6                          0x00002b9358c2d460 __libc_start_main +
    245

    6    tmp8z8y_eyc                        0x000055aff1b6a049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var lastChar = s[0]\n    for char\
    \ in s.dropFirst() {\n        if char == lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv9mzviei.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar: Character?\
    \ = nil\n    for char in s.characters {\n        if char == lastChar! {\n    \
    \        return false\n        }\n        lastChar = char\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq2p77_sx.swift:23:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    for c in s {\n        if last == c {\n   \
    \         return false\n        }\n        last = c\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_vti8c3x.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for c in s {\n        if s.contains(String(repeating:\
    \ c, count: 3)) {\n            count += 1\n        }\n    }\n    return count\
    \ >= 3 && count == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp87smh9ch/tmp87smh9ch.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad135aebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1357e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1357e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1357e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87smh9ch                        0x0000560ed51155eb <unavailable> + 5611

    5    libc.so.6                          0x00002ad135cd7460 __libc_start_main +
    245

    6    tmp87smh9ch                        0x0000560ed5115139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        return prev && cur != prev\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ug9d3a9.swift:20:28: error: conflicting arguments to generic parameter\
    \ 'Self' ('String.Element' vs. 'Bool')\n        return prev && cur != prev\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last == c { return false\
    \ }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmprdp7fymz.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    for c in s.characters {\n        if last ==\
    \ c {\n            return false\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp310qnwk.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpp310qnwk.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if let _ = s.range(of:\
    \ letter) {\n            count += 1\n        }\n    }\n    return count >= 3 &&\
    \ count == s.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmb3sv8e3.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmb3sv8e3.swift:21:22:\
    \ error: value of type 'String' has no member 'range'\n        if let _ = s.range(of:\
    \ letter) {\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar: Character? = nil\n    var isHappy = true\n    for char\
    \ in s.characters {\n        if char == lastChar! {\n            isHappy = false\n\
    \            break\n        }\n        lastChar = char\n    }\n    return isHappy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp023tukcl.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp023tukcl.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == nil || last != c {\n           \
    \ last = c\n        } else {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpepe2oc7g.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ letter {\n            count += 1\n        } else if letter == letter + letter\
    \ {\n            count += 1\n        } else if letter == letter + letter + letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8sercu0r.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8sercu0r.swift:23:36:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter {\n                            ~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmp8sercu0r.swift:25:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n/tmp/tmp8sercu0r.swift:25:45:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter + letter {\n                     \
    \       ~~~~~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmp8sercu0r.swift:29:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    return count >= 3 && count ==\
    \ s.characters.count\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014108
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var lastChar = s[0]\n    for char\
    \ in s.dropFirst() {\n        if char == lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv9mzviei.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptnb2w8fl.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    for c in s.characters {\n        if last\
    \ == c {\n            return false\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp230yx3cm.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp230yx3cm.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        guard prev == false else { return false }\n        return prev &&\
    \ cur == prev\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmettztn6.swift:21:28: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'Bool'\n        return\
    \ prev && cur == prev\n                       ~~~ ^  ~~~~\n/tmp/tmpmettztn6.swift:21:28:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Character, Character)\n        return prev && cur == prev\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvn9bpwlt.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvn9bpwlt.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c { return false\
    \ }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4yme_7sb.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    let set = Set<String>()\n\
    \    for index in 0..<len - 3 {\n        let sub = String(s[index...index + 3])\n\
    \        if !set.contains(sub) {\n            return false\n        }\n      \
    \  set.insert(sub)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpklbjz4og.swift:28:26: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        let sub = String(s[index...index + 3])\n                         ^~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpklbjz4og.swift:32:13: error: cannot\
    \ use mutating member on immutable value: 'set' is a 'let' constant\n        set.insert(sub)\n\
    \        ~~~ ^\n/tmp/tmpklbjz4og.swift:26:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let set = Set<String>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    var lastCount = 0\n    for char in s.characters\
    \ {\n        if char == last {\n            lastCount++\n        } else {\n  \
    \          last = char\n            lastCount = 1\n        }\n        if lastCount\
    \ > 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbp7ubve_.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpbp7ubve_.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbp7ubve_.swift:27:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (result, char) ->\
    \ Bool in\n        return result || char == s.characters.last!\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe1e0my2m.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, char) -> Bool in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpe1e0my2m.swift:20:36: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result || char ==\
    \ s.characters.last!\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    var lastCount = 0\n    for c in s.characters\
    \ {\n        if last == nil || last! != c {\n            last = c\n          \
    \  lastCount = 1\n        } else {\n            lastCount++\n        }\n    }\n\
    \    return lastCount >= 3 && lastCount % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpphe1qefn.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpphe1qefn.swift:25:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpphe1qefn.swift:30:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character?\n    for c in s.characters {\n        if last != nil\
    \ {\n            if c == last! {\n                return false\n            }\n\
    \        }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxxvhb53r.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpxxvhb53r.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.length\n\
    \    if len < 3 {\n        return false\n    }\n    let mut counts = (0..<len).map({\
    \ _ in 0 }).enumerate().map({ $0.1 + 1 }).sorted()\n    for i in 0..<len {\n \
    \       if counts[i] != 1 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpto_zp93f.swift:26:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut counts =\
    \ (0..<len).map({ _ in 0 }).enumerate().map({ $0.1 + 1 }).sorted()\n         \
    \   ^\n/tmp/tmpto_zp93f.swift:26:13: note: join the identifiers together\n   \
    \ let mut counts = (0..<len).map({ _ in 0 }).enumerate().map({ $0.1 + 1 }).sorted()\n\
    \        ~~~~^~~~~~\n        mutcounts\n/tmp/tmpto_zp93f.swift:26:13: note: join\
    \ the identifiers together with camel-case\n    let mut counts = (0..<len).map({\
    \ _ in 0 }).enumerate().map({ $0.1 + 1 }).sorted()\n        ~~~~^~~~~~\n     \
    \   mutCounts\n/tmp/tmpto_zp93f.swift:22:17: error: value of type 'String' has\
    \ no member 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpto_zp93f.swift:26:48:\
    \ error: value of type '[Int]' has no member 'enumerate'\n    let mut counts =\
    \ (0..<len).map({ _ in 0 }).enumerate().map({ $0.1 + 1 }).sorted()\n         \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   let mut seen = Set<String>()\n    for &c in s.chars() {\n        if seen.contains(&c)\
    \ {\n            return false\n        }\n        seen.insert(c)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp35ggc37w.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmp35ggc37w.swift:23:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmp35ggc37w.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmp35ggc37w.swift:24:9: error: expected\
    \ pattern\n    for &c in s.chars() {\n        ^\n/tmp/tmp35ggc37w.swift:24:12:\
    \ error: expected '{' to start the body of for-each loop\n    for &c in s.chars()\
    \ {\n           ^\n/tmp/tmp35ggc37w.swift:19:17: error: value of type 'String'\
    \ has no member 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp35ggc37w.swift:24:9:\
    \ error: '&' may only be used to pass an argument to inout parameter\n    for\
    \ &c in s.chars() {\n        ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n\
    \        return true\n    }\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ for _ in 0..<s.count {\n        if s[i] == s[j] {\n            i += 1\n    \
    \        j += 1\n            k += 1\n        } else if s[i] == s[j] {\n      \
    \      i += 1\n            j += 1\n        } else {\n            k += 1\n    \
    \    }\n    }\n    return k == 3 && i != j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp1sol9lgj.swift:29:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[j] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp1sol9lgj.swift:29:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[j] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp1sol9lgj.swift:33:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == s[j] {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sol9lgj.swift:33:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s[i] == s[j] {\n            \
    \              ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count == 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhxcs1u_.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var prev = \"\"\n    for c in s\
    \ {\n        if prev == c { return false }\n        prev = String(c)\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjlrbw748.swift:22:17: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if prev == c { return\
    \ false }\n           ~~~~ ^  ~\n/tmp/tmpjlrbw748.swift:22:17: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if prev == c { return false }\n                ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        return prev && prev != cur\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmprwkv_fqu.swift:20:29: error: conflicting arguments to generic parameter\
    \ 'Self' ('String.Element' vs. 'Bool')\n        return prev && prev != cur\n \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char != lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp0sf6g306.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.characters.count\n\
    \    if len < 3 {\n        return false\n    }\n    let chars = Array(s.characters)\n\
    \    var i = 0\n    var j = 0\n    while i < len {\n        if chars[i] == chars[j]\
    \ {\n            i += 1\n            j += 1\n        } else {\n            if\
    \ j != 0 {\n                return false\n            }\n            i += 1\n\
    \            j += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpze0t8sn9.swift:22:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpze0t8sn9.swift:26:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = Array(s.characters)\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c {\n           \
    \ return false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpici5un41.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        return prev || !is_distinct(cur, prev)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7pymlo1g.swift:20:25: error: cannot find 'is_distinct' in scope\n\
    \        return prev || !is_distinct(cur, prev)\n                        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count >= 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiv0z5ym_.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    let chars = s.characters\n\
    \    var prevChar = chars.first!\n    var isHappy = true\n    for char in chars.dropFirst()\
    \ {\n        if char != prevChar {\n            isHappy = false\n            break\n\
    \        }\n        prevChar = char\n    }\n    return isHappy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpugmrw1sb.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n        return prev && cur == prev\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3i26ai9o.swift:20:28: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'Bool'\n        return\
    \ prev && cur == prev\n                       ~~~ ^  ~~~~\n/tmp/tmp3i26ai9o.swift:20:28:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Character, Character)\n        return prev && cur == prev\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    let set = Set<String>()\n    for index in stride(from: 0, to: len\
    \ - 3, by: 3) {\n        guard let char = String(s.characters[index ..< index\
    \ + 3]) else {\n            return false\n        }\n        set.insert(char)\n\
    \    }\n    return set.count == len\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv8oni424.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv8oni424.swift:25:33:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n        guard let char = String(s.characters[index\
    \ ..< index + 3]) else {\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpv8oni424.swift:25:35: error: 'characters'\
    \ is unavailable: Please use String directly\n        guard let char = String(s.characters[index\
    \ ..< index + 3]) else {\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpv8oni424.swift:25:15: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        guard\
    \ let char = String(s.characters[index ..< index + 3]) else {\n              ^\
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv8oni424.swift:28:13:\
    \ error: cannot use mutating member on immutable value: 'set' is a 'let' constant\n\
    \        set.insert(char)\n        ~~~ ^\n/tmp/tmpv8oni424.swift:23:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let set = Set<String>()\n    ^~~\n  \
    \  var\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var last: Character? = nil\n\
    \    for c in s.characters {\n        if last == nil {\n            last = c\n\
    \            continue\n        }\n        if last != c {\n            return false\n\
    \        }\n        last = nil\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnouupifk.swift:27:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_q2mfsuq.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    var\
    \ lastChar = s[0]\n    for char in s.characters {\n        if char == lastChar\
    \ {\n            return false\n        }\n        lastChar = char\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwxytg2j5.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwxytg2j5.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwxytg2j5.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, { (acc, c) in\n    \
    \    return acc && is_distinct(s.characters.dropFirst(), c)\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcza_iw64.swift:20:23: error: cannot find 'is_distinct' in scope\n\
    \        return acc && is_distinct(s.characters.dropFirst(), c)\n            \
    \          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_q2mfsuq.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && s.characters.reduce(true, { (acc, c) in\n     \
    \   return acc && is_distinct(s.characters.prefix(3), c)\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvgfmfvl8.swift:20:23: error: cannot find 'is_distinct' in scope\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n              \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    var lastCount: Int = 0\n    for char in\
    \ s.characters {\n        if char == last! {\n            lastCount++\n      \
    \  } else {\n            lastCount = 1\n            last = char\n        }\n \
    \   }\n    return lastCount >= 3 && lastCount % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7o069xjx.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7o069xjx.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7o069xjx.swift:27:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, {$0 && $1 == $2}) ==\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiofibnjk.swift:19:54: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 3 were used in closure body\n    return s.count >= 3 && s.characters.reduce(true,\
    \ {$0 && $1 == $2}) == true\n                                                \
    \     ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    var\
    \ count = 0\n    for c in s.characters {\n        if c == s[count] {\n       \
    \     count += 1\n        } else {\n            count = 0\n        }\n       \
    \ if count == 3 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaocc2bh6.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpaocc2bh6.swift:22:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpaocc2bh6.swift:23:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c == s[count] {\n                ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n        return prev && cur != prev\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqm7b2e9s.swift:20:28: error: conflicting arguments to generic parameter\
    \ 'Self' ('String.Element' vs. 'Bool')\n        return prev && cur != prev\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_q2mfsuq.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var lastChar = s[0]\n    for char\
    \ in s.dropFirst() {\n        if char != lastChar { return false }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6awj15a.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    let chars = Array(s.characters)\n    let charsCount = chars.count\n\
    \    var distinctChars = chars.filter{ $0 != chars.first! }\n    if charsCount\
    \ != distinctChars.count {\n        return false\n    }\n    if chars.count %\
    \ 3 != 0 {\n        return false\n    }\n    let charsGroup = chars.enumerate().map{\
    \ $0.element }\n    let charsGroupCount = charsGroup.count\n    if charsGroupCount\
    \ != distinctChars.count {\n        return false\n    }\n    let charsGroups =\
    \ charsGroup.map{ $0.element }\n    let charsGroupsCount = charsGroups.count\n\
    \    if charsGroupsCount != distinctChars.count {\n        return false\n    }\n\
    \    let charsGroupsDistinct = charsGroups.filter{ $0 != charsGroups.first! }\n\
    \    if charsGroupsDistinct.count != distinctChars.count {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjucvpuy1.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjucvpuy1.swift:23:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = Array(s.characters)\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjucvpuy1.swift:32:28: error: value of\
    \ type '[String.Element]' (aka 'Array<Character>') has no member 'enumerate'\n\
    \    let charsGroup = chars.enumerate().map{ $0.element }\n                  \
    \   ~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if let _ = s.range(of:\
    \ letter) {\n            count += 1\n        }\n    }\n    return count >= 3 &&\
    \ count == s.characters.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpijcnm7xj.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpijcnm7xj.swift:21:22:\
    \ error: value of type 'String' has no member 'range'\n        if let _ = s.range(of:\
    \ letter) {\n                   ~ ^~~~~\n/tmp/tmpijcnm7xj.swift:25:37: error:\
    \ 'characters' is unavailable: Please use String directly\n    return count >=\
    \ 3 && count == s.characters.count / 3\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (result, char) ->\
    \ Bool in\n        return result || (char == s.characters.last!)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt5o6v_ir.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, char) -> Bool in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpt5o6v_ir.swift:20:37: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result || (char ==\
    \ s.characters.last!)\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { ($0 && $1) || ($0\
    \ && is_distinct($1, $2)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjwjknc09.swift:19:77: error: cannot find 'is_distinct' in scope\n\
    \    return s.count >= 3 && s.characters.reduce(true) { ($0 && $1) || ($0 && is_distinct($1,\
    \ $2)) }\n                                                                   \
    \         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        }\n    }\n    return count >= 3 && count == s.count/3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpmp_am5_p/tmpmp_am5_p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513a581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513a278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513a278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513a2777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp_am5_p                        0x000055facf81a59b <unavailable> + 5531

    5    libc.so.6                          0x00002b513a76d460 __libc_start_main +
    245

    6    tmpmp_am5_p                        0x000055facf81a0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c {\n           \
    \ return false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpici5un41.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s.characters.last\n    for char in s.characters.dropLast()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp9ez3q5b1.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9ez3q5b1.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9ez3q5b1.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 { return false }\n    var lastChar\
    \ = s[0]\n    for char in s.dropFirst() {\n        if char != lastChar {\n   \
    \         return false\n        }\n        lastChar = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm_z3ozun.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpm_z3ozun.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var count = 0\n    for index in 0..<len {\n        if s[index] != s[index]\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw_1nw94w.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s[0]\n    for char in s.characters[1..<len] {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgh8c9k2p.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgh8c9k2p.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgh8c9k2p.swift:24:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n    for char in s.characters[1..<len]\
    \ {\n                ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpgh8c9k2p.swift:24:19: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in s.characters[1..<len] {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    return len >= 3\n        && allSatisfyPredicate(\n\
    \            { $0.characters.count == 3 },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $0.characters.enumerated().map\
    \ { $0.element }.contains($0.offsetByIndex(3)) },\n            { $\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtjiwn6a.swift:43:15: error: '$' is not an identifier; use backticks\
    \ to escape it\n            { $\n              ^\n              `$`\n/tmp/tmpwtjiwn6a.swift:47:1:\
    \ error: expected ')' in expression list\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n^\n/tmp/tmpwtjiwn6a.swift:21:31: note: to match this opening\
    \ '('\n        && allSatisfyPredicate(\n                              ^\n/tmp/tmpwtjiwn6a.swift:66:41:\
    \ error: expected '}' at end of brace statement\nassert(is_happy(s: \"iopaxioi\"\
    ) == false)\n                                        ^\n/tmp/tmpwtjiwn6a.swift:18:34:\
    \ note: to match this opening '{'\nfunc is_happy(s: String) -> Bool {\n      \
    \                           ^\n/tmp/tmpwtjiwn6a.swift:19:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwtjiwn6a.swift:21:12: error: cannot find 'allSatisfyPredicate' in\
    \ scope\n        && allSatisfyPredicate(\n           ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwtjiwn6a.swift:43:15:\
    \ error: cannot find '$' in scope\n            { $\n              ^\n/tmp/tmpwtjiwn6a.swift:47:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n        return prev && prev == s.characters.reduce(true, { (prev, cur) ->\
    \ Bool in\n            return prev && prev == s.characters.reduce(true, { (prev,\
    \ cur) -> Bool in\n                return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                    return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                        return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                            return prev && prev ==\
    \ s.characters.reduce(true, { (prev, cur) -> Bool in\n                       \
    \         return prev && prev == s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n                                    return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                        return prev\
    \ && prev == s.characters.reduce(true, { (prev, cur) -> Bool in\n            \
    \                                return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                return\
    \ prev && prev == s.characters.reduce(true, { (prev, cur) -> Bool in\n       \
    \                                             return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \       return prev && prev == s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n                                                            return prev\
    \ && prev == s.characters.reduce(true, { (prev, cur) -> Bool in\n            \
    \                                                    return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \                   return prev && prev == s.characters.reduce(true, { (prev,\
    \ cur) -> Bool in\n                                                          \
    \              return prev && prev == s.characters.reduce(true, { (prev, cur)\
    \ -> Bool in\n                                                               \
    \             return prev && prev == s.characters.reduce(true, { (prev, cur) ->\
    \ Bool in\n                                                                  \
    \              return prev && prev == s.characters.reduce(true, { (prev, cur)\
    \ -> Bool in\n                                                               \
    \                     return prev && prev == s.characters.reduce(true, { (prev,\
    \ cur) -> Bool in\n                                                          \
    \                              return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \                                           return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \                                               return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \                                                   return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \                                                       return prev && prev ==\
    \ s.characters.reduce(true, { (prev, cur) -> Bool in\n                       \
    \                                                                            \
    \         return prev && prev == s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz47mdz3r.swift:49:1: error: expected ')' in expression list\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n^\n/tmp/tmpz47mdz3r.swift:45:151:\
    \ note: to match this opening '('\n                                          \
    \                                                                  return prev\
    \ && prev == s.characters.reduce(true, { (prev, cur) -> Bool in\n            \
    \                                                                            \
    \                                                              ^\n/tmp/tmpz47mdz3r.swift:68:41:\
    \ error: expected '}' at end of closure\nassert(is_happy(s: \"iopaxioi\") == false)\n\
    \                                        ^\n/tmp/tmpz47mdz3r.swift:44:154: note:\
    \ to match this opening '{'\n                                                \
    \                                                        return prev && prev ==\
    \ s.characters.reduce(true, { (prev, cur) -> Bool in\n                       \
    \                                                                            \
    \                                                      ^\n/tmp/tmpz47mdz3r.swift:68:41:\
    \ error: expected '}' at end of closure\nassert(is_happy(s: \"iopaxioi\") == false)\n\
    \                                        ^\n/tmp/tmpz47mdz3r.swift:43:150: note:\
    \ to match this opening '{'\n                                                \
    \                                                    return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \                                                                            \
    \                        ^\n/tmp/tmpz47mdz3r.swift:68:41: error: expected '}'\
    \ at end of closure\nassert(is_happy(s: \"iopaxioi\") == false)\n            \
    \                            ^\n/tmp/tmpz47mdz3r.swift:42:146: note: to match\
    \ this opening '{'\n                                                         \
    \                                       return prev && prev == s.characters.reduce(true,\
    \ { (prev, cur) -> Bool in\n                                                 \
    \   "
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n\
    \    for char in s.dropFirst() {\n        if char != lastChar {\n            return\
    \ false\n        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pg238i5.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n\
    \    for char in s.dropFirst() {\n        if char == lastChar {\n            return\
    \ false\n        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppqc0iimh.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        }\n    }\n    return count >= 3 && count == s.count/3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpmp_am5_p/tmpmp_am5_p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513a581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513a278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513a278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513a2777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp_am5_p                        0x000055facf81a59b <unavailable> + 5531

    5    libc.so.6                          0x00002b513a76d460 __libc_start_main +
    245

    6    tmpmp_am5_p                        0x000055facf81a0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, { (acc, c) -> Bool in\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp19b16a6v.swift:20:23: error: cannot find 'is_distinct' in scope\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n              \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    while i < len {\n        if s[i]\
    \ != s[j] {\n            return false\n        }\n        i += 1\n        j +=\
    \ 1\n        k += 1\n    }\n    return k == 3 && i != len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjow7pqs9.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpjow7pqs9.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] != s[j] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjow7pqs9.swift:27:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] != s[j] {\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var count = 0\n    for index in 0..<len - 3 {\n        if s[index] != s[index\
    \ + 1] {\n            return false\n        }\n        if s[index] != s[index\
    \ + 2] {\n            return false\n        }\n        if s[index] != s[index\
    \ + 3] {\n            return false\n        }\n        count += 1\n    }\n   \
    \ return count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6dlphjp0.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    while i < len {\n        if s[i]\
    \ != s[j] {\n            return false\n        }\n        i += 1\n        j +=\
    \ 1\n        k += 1\n    }\n    return k == 3 && i != len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjow7pqs9.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpjow7pqs9.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] != s[j] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjow7pqs9.swift:27:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] != s[j] {\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        guard prev == false else { return false }\n        return prev ||\
    \ cur == s.characters.last\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphquw2wun.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (prev, cur) -> Bool in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphquw2wun.swift:21:33: error: 'characters'\
    \ is unavailable: Please use String directly\n        return prev || cur == s.characters.last\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s.characters.last!\n    for char in s.characters.dropLast()\
    \ {\n        if char != lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpdvh8j8xd.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdvh8j8xd.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpdvh8j8xd.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    return len >= 3\n        && s.characters.enumerated().forEach\
    \ { index, char in\n            let prevIndex = index - 1\n            let nextIndex\
    \ = index + 1\n            let prevChar = s.characters[prevIndex]\n          \
    \  let nextChar = s.characters[nextIndex]\n            if char == prevChar &&\
    \ char == nextChar {\n                return false\n            }\n        }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp42ovwghc.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp42ovwghc.swift:21:38:\
    \ error: cannot convert value of type '()' to expected argument type 'Bool'\n\
    \        && s.characters.enumerated().forEach { index, char in\n             \
    \                        ^\n/tmp/tmp42ovwghc.swift:27:24: error: unexpected non-void\
    \ return value in void function\n                return false\n              \
    \         ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character?\n    for c\
    \ in s.characters {\n        if last != nil && last == c { return false }\n  \
    \      last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp3thhyb2.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character?\n    for c\
    \ in s.characters {\n        if last == c { return false }\n        last = c\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp51yxrvha.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n\
    \    for char in s.dropFirst() {\n        if char != lastChar {\n            return\
    \ false\n        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pg238i5.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n\
    \        for (i, c) in s.enumerated() {\n            if i != 0 && i != 1 && i\
    \ != 2 {\n                if s[i] != s[i-1] || s[i] != s[i+1] {\n            \
    \        return false\n                }\n            }\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2a3a32um.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s[i] != s[i-1] || s[i] != s[i+1] {\n                   ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2a3a32um.swift:25:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[i] != s[i-1] || s[i] != s[i+1]\
    \ {\n                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2a3a32um.swift:25:38: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s[i] != s[i-1] || s[i] != s[i+1] {\n                     \
    \                ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp2a3a32um.swift:25:46: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s[i] != s[i-1] || s[i] != s[i+1] {\n                              \
    \               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp2a3a32um.swift:23:17: warning: immutable value 'c' was\
    \ never used; consider replacing with '_' or removing it\n        for (i, c) in\
    \ s.enumerated() {\n                ^\n                _\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastChar: Character?\
    \ = nil\n    var distinctChars: [Character] = []\n    for char in s {\n      \
    \  if char == lastChar {\n            distinctChars.append(char)\n        } else\
    \ {\n            if distinctChars.count >= 3 {\n                if distinctChars.isEmpty\
    \ {\n                    return false\n                } else {\n            \
    \        if distinctChars.isEqual(distinctChars.dropLast()) {\n              \
    \          return false\n                    }\n                }\n          \
    \  }\n            distinctChars = [char]\n            lastChar = char\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppd3e8jf6.swift:32:38: error: value of type '[Character]' has no\
    \ member 'isEqual'\n                    if distinctChars.isEqual(distinctChars.dropLast())\
    \ {\n                       ~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (result, char) ->\
    \ Bool in\n        return result || (char == s.characters.last!)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt5o6v_ir.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, char) -> Bool in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpt5o6v_ir.swift:20:37: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result || (char ==\
    \ s.characters.last!)\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ letter {\n            count += 1\n        }\n    }\n    return count >= 3 &&\
    \ count == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppdmn00us.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppdmn00us.swift:25:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    return count\
    \ >= 3 && count == s.characters.count\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < len {\n   \
    \     if s[i] == s[j] {\n            i += 1\n            j += 1\n            k\
    \ = 0\n        } else {\n            k += 1\n            if k == 3 {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpomkbe019.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpomkbe019.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpomkbe019.swift:27:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        } else {\n            count = 0\n        }\n\
    \        if count == 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpgwt80b5u/tmpgwt80b5u.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1ff71ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ff415b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1ff415988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1ff4147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgwt80b5u                        0x00005634bc39536d <unavailable> + 4973

    5    libc.so.6                          0x00002ae1ff90a460 __libc_start_main +
    245

    6    tmpgwt80b5u                        0x00005634bc394ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character? = nil\n    for c in s.characters {\n        if\
    \ last != nil && last != c {\n            return false\n        }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyfwuke52.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyfwuke52.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    var\
    \ lastCharCount = 0\n    for char in s.characters {\n        if char == lastChar\
    \ {\n            lastCharCount += 1\n        } else {\n            lastCharCount\
    \ = 1\n            lastChar = char\n        }\n        if lastCharCount > 3 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpldfsh2xo.swift:26:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpldfsh2xo.swift:28:19: error: 'characters' is\
    \ unavailable: Please use String directly\n    for char in s.characters {\n  \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var count = 0\n    for c in s.characters {\n        if c == s.characters.last\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count >= 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe23m0a6b.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe23m0a6b.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe23m0a6b.swift:25:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        if c == s.characters.last {\n          \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, {\n        guard !$0\
    \ || !$1.isEmpty else { return false }\n        return !$1.contains($2)\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwz8o23ev.swift:19:54: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 3 were used in closure body\n    return s.count >= 3 && s.characters.reduce(true,\
    \ {\n                                                     ^\n/tmp/tmpwz8o23ev.swift:20:16:\
    \ note: anonymous closure parameter '$0' is used here\n        guard !$0 || !$1.isEmpty\
    \ else { return false }\n               ^\n/tmp/tmpwz8o23ev.swift:20:23: note:\
    \ anonymous closure parameter '$1' is used here\n        guard !$0 || !$1.isEmpty\
    \ else { return false }\n                      ^\n/tmp/tmpwz8o23ev.swift:21:17:\
    \ note: anonymous closure parameter '$1' is used here\n        return !$1.contains($2)\n\
    \                ^\n/tmp/tmpwz8o23ev.swift:21:29: note: anonymous closure parameter\
    \ '$2' is used here\n        return !$1.contains($2)\n                       \
    \     ^\n/tmp/tmpwz8o23ev.swift:20:26: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEmpty'\n        guard !$0 || !$1.isEmpty else\
    \ { return false }\n                      ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { $0 && is_distinct($1,\
    \ $2) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpta04x08v.swift:19:62: error: cannot find 'is_distinct' in scope\n\
    \    return s.count >= 3 && s.characters.reduce(true) { $0 && is_distinct($1,\
    \ $2) }\n                                                             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        guard prev == true else { return false }\n        return !prev\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7jjbhfbb.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (prev, cur) -> Bool in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptnb2w8fl.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var lastChar = s[0]\n    for char\
    \ in s.dropFirst() {\n        if char != lastChar { return false }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6awj15a.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    var lastCount: Int = 0\n    for c in s.characters\
    \ {\n        if last == nil {\n            last = c\n            lastCount = 1\n\
    \        } else {\n            if last != c {\n                return false\n\
    \            }\n            lastCount = 1\n            last = c\n        }\n \
    \   }\n    return lastCount >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4jvz8sb5.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4jvz8sb5.swift:25:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if letter ==\
    \ letter + letter {\n            count += 1\n        }\n    }\n    return count\
    \ >= 3 && count == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqcnd18kf.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqcnd18kf.swift:21:29:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       if letter == letter + letter {\n                     ~~~~~~ ^ ~~~~~~\n\
    /tmp/tmpqcnd18kf.swift:25:37: error: 'characters' is unavailable: Please use String\
    \ directly\n    return count >= 3 && count == s.characters.count\n           \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    let\
    \ set = Set<Character>(s.characters)\n    return set.count == len && set.count\
    \ == (set.count / 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxfujya3t.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxfujya3t.swift:21:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    let set\
    \ = Set<Character>(s.characters)\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s[0]\n    for char in s.characters {\n        if char\
    \ != lastChar {\n            return false\n        }\n        lastChar = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpow_ttukx.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpow_ttukx.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpow_ttukx.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar: Character? = nil\n    var lastCharCount:\
    \ Int = 0\n    for char in s.characters {\n        if char == lastChar! {\n  \
    \          lastCharCount += 1\n        } else {\n            lastCharCount = 1\n\
    \            lastChar = char\n        }\n    }\n    return lastCharCount >= 3\
    \ && lastCharCount <= s.count - 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvdrcaedz.swift:27:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptnb2w8fl.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        return prev && prev != cur\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmprwkv_fqu.swift:20:29: error: conflicting arguments to generic parameter\
    \ 'Self' ('String.Element' vs. 'Bool')\n        return prev && prev != cur\n \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s.characters {\n        if let _ = s.range(of:\
    \ letter) {\n            count += 1\n        }\n    }\n    return count >= 3 &&\
    \ count == s.characters.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpijcnm7xj.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpijcnm7xj.swift:21:22:\
    \ error: value of type 'String' has no member 'range'\n        if let _ = s.range(of:\
    \ letter) {\n                   ~ ^~~~~\n/tmp/tmpijcnm7xj.swift:25:37: error:\
    \ 'characters' is unavailable: Please use String directly\n    return count >=\
    \ 3 && count == s.characters.count / 3\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        }\n        else {\n            count = 0\n  \
    \      }\n        if count == 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzn645bp5/tmpzn645bp5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0f995ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0f9655b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0f9655988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0f96547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn645bp5                        0x00005594ff2fd36d <unavailable> + 4973

    5    libc.so.6                          0x00002ae0f9b4a460 __libc_start_main +
    245

    6    tmpzn645bp5                        0x00005594ff2fcff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (result, char) ->\
    \ Bool in\n        return result || char == s.characters.last!\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe1e0my2m.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, char) -> Bool in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpe1e0my2m.swift:20:36: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result || char ==\
    \ s.characters.last!\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, {\n        guard !$0\
    \ || !$1.isEmpty else { return false }\n        return $0.isEqualTo($1)\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6yri92s1.swift:20:26: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEmpty'\n        guard !$0 || !$1.isEmpty else\
    \ { return false }\n                      ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var distinctCount = 0\n    var lastChar = s.characters.last!\n   \
    \ for char in s.characters[0..<len] {\n        if char != lastChar {\n       \
    \     distinctCount++\n        }\n        lastChar = char\n    }\n    return distinctCount\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpezpagi92.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpezpagi92.swift:24:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpezpagi92.swift:25:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpezpagi92.swift:25:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpezpagi92.swift:27:26: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCount++\n                        \
    \ ^~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var lastChar = s[0]\n    for char in s.dropFirst() {\n        if char != lastChar\
    \ {\n            return false\n        }\n        lastChar = char\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi_441wl2.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpi_441wl2.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last: Character?\n\
    \    for c in s.characters {\n        if last == c {\n            continue\n \
    \       }\n        if let last = last {\n            if last != c {\n        \
    \        return false\n            }\n        } else {\n            last = c\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiv7hlfp9.swift:23:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for\
    \ char in s.dropFirst() {\n        if char == lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovyl3r6q.swift:26:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    var lastCount: Int = 0\n    for char in\
    \ s.characters {\n        if char == last {\n            lastCount += 1\n    \
    \    } else {\n            last = char\n            lastCount = 1\n        }\n\
    \    }\n    if lastCount != 3 {\n        return false\n    }\n    var lastChar:\
    \ Character?\n    for char in s.characters {\n        if char == lastChar {\n\
    \            return false\n        }\n        lastChar = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqgn5uwmc.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqgn5uwmc.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqgn5uwmc.swift:37:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in s.characters {\n               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    for char in s.characters {\n        if char\
    \ == last {\n            return false\n        }\n        last = char\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpme948kpn.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpme948kpn.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        } else {\n            count = 0\n        }\n\
    \        if count == 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpgwt80b5u/tmpgwt80b5u.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1ff71ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ff415b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1ff415988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1ff4147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgwt80b5u                        0x00005634bc39536d <unavailable> + 4973

    5    libc.so.6                          0x00002ae1ff90a460 __libc_start_main +
    245

    6    tmpgwt80b5u                        0x00005634bc394ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    var lastCount: Int = 0\n    for c in s {\n\
    \        if last == nil {\n            last = c\n            lastCount = 1\n \
    \       } else if last != c {\n            lastCount = 1\n            last = c\n\
    \        } else {\n            lastCount++\n        }\n    }\n    return lastCount\
    \ >= 3 && lastCount % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gcs497y.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp5gcs497y.swift:33:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last: Character?\
    \ = nil\n    var lastCount = 0\n    for c in s.characters {\n        if last ==\
    \ nil || last != c {\n            last = Character(c)\n            lastCount =\
    \ 1\n        } else {\n            lastCount++\n        }\n    }\n    return lastCount\
    \ >= 3 && lastCount % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx7f1dnrr.swift:24:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpx7f1dnrr.swift:26:20:\
    \ error: no exact matches in call to initializer \n            last = Character(c)\n\
    \                   ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmpx7f1dnrr.swift:29:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    var\
    \ last: Character?\n    for c in s.characters {\n        if last == c { return\
    \ false }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1u0hmqj4.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1u0hmqj4.swift:22:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var lastChar = s[0]\n    for char in s.characters {\n        if char == lastChar\
    \ {\n            continue\n        }\n        if char != lastChar {\n        \
    \    return false\n        }\n        lastChar = char\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu6ulet9u.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpu6ulet9u.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu6ulet9u.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { (prev, cur) -> Bool\
    \ in\n        guard let prev = prev else {\n            return false\n       \
    \ }\n        guard let cur = cur.unicodeScalars.first else {\n            return\
    \ false\n        }\n        return prev != cur\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmveudwrx.swift:26:21: error: conflicting arguments to generic parameter\
    \ 'Self' ('Bool' vs. 'Unicode.Scalar')\n        return prev != cur\n         \
    \           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last != nil && last != c {\n           \
    \ return false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpici5un41.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s.characters.last!\n    var lastCharIndex = s.characters.index(s.startIndex,\
    \ offsetBy: -1)\n    var isHappy = true\n    for index in stride(from: s.characters.count\
    \ - 1, through: 0, by: -1) {\n        if index == 0 {\n            continue\n\
    \        }\n        if s[index] != s[index - 1] {\n            isHappy = false\n\
    \            break\n        }\n    }\n    if isHappy {\n        return true\n\
    \    }\n    if lastCharIndex == s.characters.count - 1 {\n        return true\n\
    \    }\n    if lastCharIndex < s.characters.count - 2 {\n        return false\n\
    \    }\n    return is_happy(s: String(s.characters.suffix(from: lastCharIndex)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5f055oyg.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5f055oyg.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp5f055oyg.swift:24:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var lastCharIndex = s.characters.index(s.startIndex,\
    \ offsetBy: -1)\n                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp5f055oyg.swift:26:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    for index in stride(from: s.characters.count\
    \ - 1, through: 0, by: -1) {\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5f055oyg.swift:30:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != s[index - 1] {\n           ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5f055oyg.swift:30:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[index] != s[index - 1] {\n       \
    \                ^~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp5f055oyg.swift:38:22: error: referencing operator\
    \ function '==' on 'BinaryInteger' requires that 'Strin"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   let mut seen = Set<String>()\n    for c in s.characters {\n        if seen.contains(c)\
    \ {\n            return false\n        }\n        seen.insert(c)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjlvah1vf.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpjlvah1vf.swift:23:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpjlvah1vf.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpjlvah1vf.swift:19:17: error: value\
    \ of type 'String' has no member 'length'\n    let len = s.length\n          \
    \    ~ ^~~~~~\n/tmp/tmpjlvah1vf.swift:24:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjlvah1vf.swift:25:12:\
    \ error: cannot find 'seen' in scope\n        if seen.contains(c) {\n        \
    \   ^~~~\n/tmp/tmpjlvah1vf.swift:28:9: error: cannot find 'seen' in scope\n  \
    \      seen.insert(c)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s.characters.last!\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp6j207zfz.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6j207zfz.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp6j207zfz.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmp6j207zfz.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    for letter in s {\n        if letter == letter {\n\
    \            count += 1\n        }\n    }\n    return count >= 3 && count == s.count/3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpmp_am5_p/tmpmp_am5_p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513a581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513a278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513a278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513a2777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp_am5_p                        0x000055facf81a59b <unavailable> + 5531

    5    libc.so.6                          0x00002b513a76d460 __libc_start_main +
    245

    6    tmpmp_am5_p                        0x000055facf81a0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    for c in s {\n        if last == c {\n   \
    \         return false\n        }\n        last = c\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_vti8c3x.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n \
    \       return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptnb2w8fl.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   let mut seen = Set<String>()\n    for &c in s.chars() {\n        if seen.contains(&c)\
    \ {\n            return false\n        }\n        seen.insert(c)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp35ggc37w.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmp35ggc37w.swift:23:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmp35ggc37w.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmp35ggc37w.swift:24:9: error: expected\
    \ pattern\n    for &c in s.chars() {\n        ^\n/tmp/tmp35ggc37w.swift:24:12:\
    \ error: expected '{' to start the body of for-each loop\n    for &c in s.chars()\
    \ {\n           ^\n/tmp/tmp35ggc37w.swift:19:17: error: value of type 'String'\
    \ has no member 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp35ggc37w.swift:24:9:\
    \ error: '&' may only be used to pass an argument to inout parameter\n    for\
    \ &c in s.chars() {\n        ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count > 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpqs2etnqp.swift:19:29: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count > 3 && s.isHappy()\n                         \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true) { $0 && is_distinct($1,\
    \ $2) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpta04x08v.swift:19:62: error: cannot find 'is_distinct' in scope\n\
    \    return s.count >= 3 && s.characters.reduce(true) { $0 && is_distinct($1,\
    \ $2) }\n                                                             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    for c in s {\n        if last == c {\n   \
    \         return false\n        }\n        last = c\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_vti8c3x.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    var\
    \ last: Character?\n    var isHappy = true\n    for c in s.characters {\n    \
    \    if last == c {\n            isHappy = false\n        } else {\n         \
    \   last = c\n        }\n    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5rvfolaq.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5rvfolaq.swift:23:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var lastChar = s[0]\n    for char\
    \ in s.dropFirst() {\n        if char != lastChar { return false }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6awj15a.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ak07dhm.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy\n                          \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp77tuxksv.swift:19:50: error: value of type 'String' has no member\
    \ 'isDistinct'\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n\
    \                                               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.count % 3 == 0 && s.allSatisfy(is_distinct)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgelnr04z.swift:19:61: error: cannot find 'is_distinct' in scope\n\
    \    return s.count >= 3 && s.count % 3 == 0 && s.allSatisfy(is_distinct)\n  \
    \                                                          ^~~~~~~~~~~\n/tmp/tmpgelnr04z.swift:19:61:\
    \ error: converting non-escaping value to '(String.Element) throws -> Bool' (aka\
    \ '(Character) throws -> Bool') may allow it to escape\n    return s.count >=\
    \ 3 && s.count % 3 == 0 && s.allSatisfy(is_distinct)\n                       \
    \                                     ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var last: Character? = nil\n    for c in s.characters {\n        if last ==\
    \ c {\n            return false\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp310qnwk.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpp310qnwk.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && s.characters.reduce(true, { (prev, cur) -> Bool\
    \ in\n        return prev && cur == prev\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3i26ai9o.swift:20:28: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'Bool'\n        return\
    \ prev && cur == prev\n                       ~~~ ^  ~~~~\n/tmp/tmp3i26ai9o.swift:20:28:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Character, Character)\n        return prev && cur == prev\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.length\n    if len < 3 {\n        return false\n    }\n \
    \   var lastChar = s[0]\n    for char in s.dropFirst() {\n        if char == lastChar\
    \ {\n            return false\n        }\n        lastChar = char\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeuz4ltsk.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpeuz4ltsk.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.characters.count\n    if len < 3 { return false }\n    let\
    \ mut seen = Set<String>()\n    for c in s.characters {\n        if seen.contains(c)\
    \ { return false }\n        seen.insert(c)\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplqw0xzal.swift:21:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmplqw0xzal.swift:21:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmplqw0xzal.swift:21:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmplqw0xzal.swift:19:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmplqw0xzal.swift:22:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplqw0xzal.swift:23:12:\
    \ error: cannot find 'seen' in scope\n        if seen.contains(c) { return false\
    \ }\n           ^~~~\n/tmp/tmplqw0xzal.swift:24:9: error: cannot find 'seen' in\
    \ scope\n        seen.insert(c)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n   \
    \ for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9gsprst.swift:21:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014105
