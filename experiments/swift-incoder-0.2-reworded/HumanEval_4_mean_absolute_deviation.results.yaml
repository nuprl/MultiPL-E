language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n   \
    \     / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpwcug3stw/tmpwcug3stw.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bda5abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bda2a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bda2a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bda2a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcug3stw                        0x0000563c10782473 <unavailable> + 5235

    5    libc.so.6                          0x00002b0bda797460 __libc_start_main +
    245

    6    tmpwcug3stw                        0x0000563c107820c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n        sum2 += number * number\n    }\n\
    \    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvn14n1_h.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n   \
    \     / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpwcug3stw/tmpwcug3stw.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bda5abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bda2a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bda2a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bda2a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcug3stw                        0x0000563c10782473 <unavailable> + 5235

    5    libc.so.6                          0x00002b0bda797460 __libc_start_main +
    245

    6    tmpwcug3stw                        0x0000563c107820c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for n in numbers {\n        sum +=\
    \ n * n\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpgr0dqwhq/tmpgr0dqwhq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc7e5fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc7e2f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc7e2f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc7e2f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgr0dqwhq                        0x00005600d6645563 <unavailable> + 5475

    5    libc.so.6                          0x00002afc7e7e9460 __libc_start_main +
    245

    6    tmpgr0dqwhq                        0x00005600d66451b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpzotq23t7/tmpzotq23t7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac429f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac429c36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac429c36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac429c357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzotq23t7                        0x000055ea5e805413 <unavailable> + 5139

    5    libc.so.6                          0x00002ac42a12b460 __libc_start_main +
    245

    6    tmpzotq23t7                        0x000055ea5e805069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, { $0 + abs($1 - $2) }))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5cnxuro7.swift:10:37: error: contextual closure type '(Double,\
    \ Double) throws -> Double' expects 2 arguments, but 3 were used in closure body\n\
    \    return Double(numbers.reduce(0, { $0 + abs($1 - $2) }))\n               \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824840
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjnjn5nfk.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return numbers.map\
    \ { abs($0 - mean) }.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpr1kkngjv.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpr1kkngjv.swift:11:49:\
    \ error: extraneous argument label 'combine:' in call\n    return numbers.map\
    \ { abs($0 - mean) }.reduce(0, combine: +)\n                                 \
    \               ^   ~~~~~~~~~\n                                              \
    \      \n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmph57pilxz.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2kqkyp1i.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp2kqkyp1i.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmp2kqkyp1i.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean)) /\
    \ Double(numbers.count)\n           ^~~\n/tmp/tmp2kqkyp1i.swift:11:16: error:\
    \ cannot find 'absdiff' in scope\n    return sum(absdiff(numbers, mean)) / Double(numbers.count)\n\
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n        sum2 += number * number\n    }\n\
    \    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvn14n1_h.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpusviat9o.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpusviat9o.swift:11:33:\
    \ error: extraneous argument label 'combine:' in call\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n                                ^   ~~~~~~~~~\n       \
    \                             \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpzotq23t7/tmpzotq23t7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac429f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac429c36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac429c36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac429c357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzotq23t7                        0x000055ea5e805413 <unavailable> + 5139

    5    libc.so.6                          0x00002ac42a12b460 __libc_start_main +
    245

    6    tmpzotq23t7                        0x000055ea5e805069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmph57pilxz.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers:\
    \ numbers, mean: mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvpmgpvr4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpvpmgpvr4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpvpmgpvr4.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers:\
    \ numbers, mean: mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean: mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprpa8xgvo.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmprpa8xgvo.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmprpa8xgvo.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean: mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpusviat9o.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpusviat9o.swift:11:33:\
    \ error: extraneous argument label 'combine:' in call\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n                                ^   ~~~~~~~~~\n       \
    \                             \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return Double(numbers.map\
    \ { abs($0 - mean) }.sum) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphnog6r2j.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmphnog6r2j.swift:11:50:\
    \ error: value of type '[Double]' has no member 'sum'\n    return Double(numbers.map\
    \ { abs($0 - mean) }.sum) / Double(numbers.count)\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n        sum2 += number * number\n    }\n\
    \    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvn14n1_h.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: { (sum, number) ->\
    \ Double in\n        return sum + pow(number - Double(numbers.mean), 2)\n    })\
    \ / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqrg0brlf.swift:11:22: error: cannot find 'pow' in scope\n     \
    \   return sum + pow(number - Double(numbers.mean), 2)\n                     ^~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers, mean: Double(numbers.count))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcmatyz5w.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers, mean: Double(numbers.count))\n           ^~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst())\n\
    \        .map { abs($0 - mean) }\n        .sum / numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpinlr_m4m.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpinlr_m4m.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpinlr_m4m.swift:13:10:\
    \ error: value of type '[T]' has no member 'sum'\n        .sum / numbers.count)\n\
    \         ^~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    for number in numbers {\n      \
    \  sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2ubol75j.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers, numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9vf7fg5h.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers, numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    var sum2: Double = 0.0\n    var\
    \ n: Double = 0.0\n    for number in numbers {\n        sum += number\n      \
    \  sum2 += number * number\n        n += 1\n    }\n    if n == 0.0 { return 0.0\
    \ }\n    return Double(sum / n) - Double(sum2 / n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpvrfcxzid/tmpvrfcxzid.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfbc6bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfbc3b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfbc3b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfbc3b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrfcxzid                        0x00005647188de503 <unavailable> + 5379

    5    libc.so.6                          0x00002acfbc8a7460 __libc_start_main +
    245

    6    tmpvrfcxzid                        0x00005647188de159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmph57pilxz.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum += math.pow((n\
    \ - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpafdr5tii.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpafdr5tii.swift:12:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpafdr5tii.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjnjn5nfk.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2kqkyp1i.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp2kqkyp1i.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmp2kqkyp1i.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean)) /\
    \ Double(numbers.count)\n           ^~~\n/tmp/tmp2kqkyp1i.swift:11:16: error:\
    \ cannot find 'absdiff' in scope\n    return sum(absdiff(numbers, mean)) / Double(numbers.count)\n\
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpusviat9o.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpusviat9o.swift:11:33:\
    \ error: extraneous argument label 'combine:' in call\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n                                ^   ~~~~~~~~~\n       \
    \                             \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpwn5b122b/tmpwn5b122b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f573bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0f5432b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0f5432988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0f54317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn5b122b                        0x000055c22affe473 <unavailable> + 5235

    5    libc.so.6                          0x00002ab0f5927460 __libc_start_main +
    245

    6    tmpwn5b122b                        0x000055c22affe0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    var n: Double\
    \ = 0\n    for n in numbers {\n        sum += n\n        sum2 += n * n\n    }\n\
    \    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpoy4kt91h.swift:17:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for number in numbers {\n        sum +=\
    \ math.pow(number - mean(), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpifmrud3r.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(), 2)\n               ^~~~\n/tmp/tmpifmrud3r.swift:12:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(),\
    \ 2)\n                                 ^~~~\n/tmp/tmpifmrud3r.swift:14:12: error:\
    \ cannot find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmph57pilxz.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()))\
    \ { abs($0 - mean) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpncvj13j_.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpncvj13j_.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpwn5b122b/tmpwn5b122b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f573bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0f5432b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0f5432988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0f54317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn5b122b                        0x000055c22affe473 <unavailable> + 5235

    5    libc.so.6                          0x00002ab0f5927460 __libc_start_main +
    245

    6    tmpwn5b122b                        0x000055c22affe0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpusviat9o.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpusviat9o.swift:11:33:\
    \ error: extraneous argument label 'combine:' in call\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n                                ^   ~~~~~~~~~\n       \
    \                             \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return sum(numbers) / Double(numbers.count)\
    \ - mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqlvajdjr.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpqlvajdjr.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpqlvajdjr.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(numbers) / Double(numbers.count)\
    \ - mean\n           ^~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum += math.pow((n\
    \ - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpafdr5tii.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpafdr5tii.swift:12:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpafdr5tii.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: combine))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa1cuk7po.swift:10:46: error: cannot find 'combine' in scope\n \
    \   return Double(numbers.reduce(0, combine: combine))\n                     \
    \                        ^~~~~~~\n/tmp/tmpa1cuk7po.swift:10:33: error: extraneous\
    \ argument label 'combine:' in call\n    return Double(numbers.reduce(0, combine:\
    \ combine))\n                                ^   ~~~~~~~~~\n                 \
    \                   \n/tmp/tmpa1cuk7po.swift:10:46: error: converting non-escaping\
    \ value to '(Int, Double) throws -> Int' may allow it to escape\n    return Double(numbers.reduce(0,\
    \ combine: combine))\n                                             ^\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum += math.pow((n\
    \ - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpafdr5tii.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpafdr5tii.swift:12:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpafdr5tii.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmph57pilxz.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi8b43kby.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpzotq23t7/tmpzotq23t7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac429f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac429c36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac429c36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac429c357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzotq23t7                        0x000055ea5e805413 <unavailable> + 5139

    5    libc.so.6                          0x00002ac42a12b460 __libc_start_main +
    245

    6    tmpzotq23t7                        0x000055ea5e805069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for n in numbers {\n        sum +=\
    \ n * n\n    }\n    return sqrt(sum / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpc6dkscql.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers, numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9vf7fg5h.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers, numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return Double(numbers.map\
    \ { abs($0 - mean) }.sum) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphnog6r2j.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmphnog6r2j.swift:11:50:\
    \ error: value of type '[Double]' has no member 'sum'\n    return Double(numbers.map\
    \ { abs($0 - mean) }.sum) / Double(numbers.count)\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    for n in\
    \ numbers {\n        sum += n\n        sum2 += n * n\n    }\n    return sqrt(sum2\
    \ / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxscf1w60.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for n in numbers {\n        sum +=\
    \ (n - mean(n))\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpepgcta9f.swift:12:21: error: cannot find 'mean' in scope\n    \
    \    sum += (n - mean(n))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3l69mu07.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n        sum2 += number * number\n    }\n\
    \    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvn14n1_h.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiwp_cpni.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkz5m932f.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkz5m932f.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkz5m932f.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp1brwcxjn/tmp1brwcxjn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc86dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc83d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc83d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc83d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brwcxjn                        0x0000563cb74b6473 <unavailable> + 5235

    5    libc.so.6                          0x00002b5bc88c6460 __libc_start_main +
    245

    6    tmp1brwcxjn                        0x0000563cb74b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5en2m_ek.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5en2m_ek.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers:\
    \ numbers, mean: mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvpmgpvr4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpvpmgpvr4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpvpmgpvr4.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers:\
    \ numbers, mean: mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9zfxyd_3.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824839
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65rasvm4.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp65rasvm4.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824838
