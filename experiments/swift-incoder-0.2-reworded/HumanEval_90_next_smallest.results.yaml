language: swift
name: HumanEval_90_next_smallest
results:
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4jjct5_6/tmp4jjct5_6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affd0638c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affd032fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affd032f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affd032e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jjct5_6                        0x0000564422f38635 <unavailable> + 5685

    5    libc.so.6                          0x00002affd0824460 __libc_start_main +
    245

    6    tmp4jjct5_6                        0x0000564422f38019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpisriio4q.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpkfwgmsal.swift:21:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprfpsj3j1/tmprfpsj3j1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfpsj3j1                        0x0000561e614cd635 <unavailable> + 5685

    5    libc.so.6                          0x00002aff0c0f9460 __libc_start_main +
    245

    6    tmprfpsj3j1                        0x0000561e614cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgpiwcc0x.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpchriw2j3/tmpchriw2j3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff5118cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff50e83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff50e83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff50e827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchriw2j3                        0x00005596c634e601 <unavailable> + 5633

    5    libc.so.6                          0x00002aff51378460 __libc_start_main +
    245

    6    tmpchriw2j3                        0x00005596c634e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp1upyq2ik/tmp1upyq2ik.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5998229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5997f20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5997f20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5997f1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1upyq2ik                        0x00005627815df621 <unavailable> + 5665

    5    libc.so.6                          0x00002b5998415460 __libc_start_main +
    245

    6    tmp1upyq2ik                        0x00005627815df1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallest_index = -1\n \
    \   for index in 1..lst.count {\n        if smallest<lst[index] {\n          \
    \  smallest = lst[index]\n            smallest_index = index\n        }\n    }\n\
    \    return smallest_index == lst.count-1 ? nil : smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpii7il7v9.swift:16:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 1..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if smallest*i < secondSmallest {\n    \
    \        secondSmallest = smallest*i\n            smallest = i\n        } else\
    \ {\n            secondSmallest = smallest*i\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu16jq1bm/tmpu16jq1bm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb4b073c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb4ad6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb4ad6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb4ad697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu16jq1bm                        0x00005578eb14b621 <unavailable> + 5665

    5    libc.so.6                          0x00002aeb4b25f460 __libc_start_main +
    245

    6    tmpu16jq1bm                        0x00005578eb14b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n  \
    \          smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp_45zkn3m.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest > lst[index] {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp6qroiwtv/tmp6qroiwtv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b193480cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1934503b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1934503988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19345027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qroiwtv                        0x000055c666cdb7b5 <unavailable> + 6069

    5    libc.so.6                          0x00002b19349f8460 __libc_start_main +
    245

    6    tmp6qroiwtv                        0x000055c666cdb199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprdnnhstc/tmprdnnhstc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930486cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9304563b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9304563988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93045627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdnnhstc                        0x00005594d0302621 <unavailable> + 5665

    5    libc.so.6                          0x00002b9304a58460 __libc_start_main +
    245

    6    tmprdnnhstc                        0x00005594d03021a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprvvjxaw5/tmprvvjxaw5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95cbb61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95cb858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95cb858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95cb8577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvvjxaw5                        0x000055a8301455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b95cbd4d460 __libc_start_main +
    245

    6    tmprvvjxaw5                        0x000055a830145129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpi7qs7goi.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for element in lst {\n    \
    \    if element < smallest {\n            smallest = element\n        }\n    }\n\
    \    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp29_qx2kv/tmp29_qx2kv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4083dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4080d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4080d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4080d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29_qx2kv                        0x000055ac864f05a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ae4085c7460 __libc_start_main +
    245

    6    tmp29_qx2kv                        0x000055ac864f0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2829bd2/tmpd2829bd2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab773c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7738feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7738fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7738fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2829bd2                        0x00005578545a9635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab773df3460 __libc_start_main +
    245

    6    tmpd2829bd2                        0x00005578545a9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsayrsn0k/tmpsayrsn0k.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c23a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c23763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c23763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c237627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsayrsn0k                        0x000055585c77f621 <unavailable> + 5665

    5    libc.so.6                          0x00002b3c23c58460 __libc_start_main +
    245

    6    tmpsayrsn0k                        0x000055585c77f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in lst {\n        if i < smallest {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if i == smallest {\n            if secondSmallest\
    \ < i {\n                secondSmallest = i\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpaii6bqig/tmpaii6bqig.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6f0f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6ede8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6ede8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6ede77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaii6bqig                        0x00005592438d95a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b9d6f2dd460 __libc_start_main +
    245

    6    tmpaii6bqig                        0x00005592438d9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for element in lst {\n        if element < smallest {\n\
    \            smallest = element\n        }\n    }\n    return smallest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpy7tezuju/tmpy7tezuju.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b407e507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b407e1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b407e1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b407e1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7tezuju                        0x00005577ac609601 <unavailable> + 5633

    5    libc.so.6                          0x00002b407e6f3460 __libc_start_main +
    245

    6    tmpy7tezuju                        0x00005577ac609189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n\
    \        if element < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = element\n        } else if element < secondSmallest {\n  \
    \          secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprl8loy93/tmprl8loy93.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb50c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb5092bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb5092b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb5092a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl8loy93                        0x000055c6c5962601 <unavailable> + 5633

    5    libc.so.6                          0x00002acb50e20460 __libc_start_main +
    245

    6    tmprl8loy93                        0x000055c6c5962189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi3xd_gfu/tmpi3xd_gfu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dcb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3xd_gfu                        0x000055ccfdd475a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b04dcd4a460 __libc_start_main +
    245

    6    tmpi3xd_gfu                        0x000055ccfdd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n\
    \        if element < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = element\n        } else if element < secondSmallest {\n  \
    \          secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprl8loy93/tmprl8loy93.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb50c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb5092bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb5092b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb5092a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl8loy93                        0x000055c6c5962601 <unavailable> + 5633

    5    libc.so.6                          0x00002acb50e20460 __libc_start_main +
    245

    6    tmprl8loy93                        0x000055c6c5962189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest.isLesserThan(lst[index]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpz07zc152.swift:20:21: error: value of type 'Int' has no member\
    \ 'isLesserThan'\n        if smallest.isLesserThan(lst[index]) {\n           ~~~~~~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count > 2 {\n   \
    \     if lst[1] < lst[2] {\n            return lst[1]\n        }\n        return\
    \ lst[2]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplq2y0ird/tmplq2y0ird.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af722ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af72289ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af72289a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7228997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplq2y0ird                        0x0000561923002635 <unavailable> + 5685

    5    libc.so.6                          0x00002af722d8f460 __libc_start_main +
    245

    6    tmplq2y0ird                        0x0000561923002019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpy5kymd7s.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let index = lst.index(of: smallest)\n    if index == lst.count\
    \ - 1 {\n        return nil\n    }\n    return lst[index + 1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpcc__l_oj.swift:21:21: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let index = lst.index(of: smallest)\n            \
    \        ^\n/tmp/tmpcc__l_oj.swift:21:21: note: use 'firstIndex(of:)' instead\n\
    \    let index = lst.index(of: smallest)\n                    ^~~~~\n        \
    \            firstIndex\n/tmp/tmpcc__l_oj.swift:25:16: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n    return lst[index + 1]\n        \
    \       ^\n/tmp/tmpcc__l_oj.swift:25:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return lst[index + 1]\n\
    \               ^\n               (     ?? <#default value#>)\n/tmp/tmpcc__l_oj.swift:25:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return lst[index + 1]\n               ^\n                    !\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = 0\n   \
    \ for index in 1..<lst.count {\n        if smallestIndex == lst.count - 1 {\n\
    \            return nil\n        }\n        if lst[index] < smallest {\n     \
    \       smallest = lst[index]\n            smallestIndex = index\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeq24i_ph/tmpeq24i_ph.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bfff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bfcecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bfcec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bfceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeq24i_ph                        0x000055f3e4f06621 <unavailable> + 5665

    5    libc.so.6                          0x00002ab2c01e1460 __libc_start_main +
    245

    6    tmpeq24i_ph                        0x000055f3e4f061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpxtindz7g.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count >= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpc4vegxka.swift:23:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[i]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi3xd_gfu/tmpi3xd_gfu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dcb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3xd_gfu                        0x000055ccfdd475a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b04dcd4a460 __libc_start_main +
    245

    6    tmpi3xd_gfu                        0x000055ccfdd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = 0\n    for index in 1..lst.count\
    \ {\n        if smallestIndex == 0 {\n            smallest = lst[index]\n    \
    \        smallestIndex = index\n            continue\n        }\n        if lst[index]\
    \ < smallest {\n            smallest = lst[index]\n            smallestIndex =\
    \ index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpbjqxkmbq.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 1..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for element in lst {\n \
    \       if smallest == nil || element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpio41vjl9.swift:16:41: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || element\
    \ < smallest {\n                                        ^\n/tmp/tmpio41vjl9.swift:16:41:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if smallest == nil || element < smallest {\n                \
    \                        ^\n                                                 ??\
    \ <#default value#>\n/tmp/tmpio41vjl9.swift:16:41: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        if smallest\
    \ == nil || element < smallest {\n                                        ^\n\
    \                                                !\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp1upyq2ik/tmp1upyq2ik.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5998229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5997f20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5997f20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5997f1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1upyq2ik                        0x00005627815df621 <unavailable> + 5665

    5    libc.so.6                          0x00002b5998415460 __libc_start_main +
    245

    6    tmp1upyq2ik                        0x00005627815df1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count\
    \ {\n        if smallest > lst[index] {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        } else if smallest == lst[index] {\n\
    \            if secondSmallest > lst[index] {\n                secondSmallest\
    \ = lst[index]\n            }\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpfdzvlof4.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 2..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest {\n \
    \           secondSmallest = smallest\n            smallest = el\n        } else\
    \ if el < secondSmallest {\n            secondSmallest = el\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4mc861nt/tmp4mc861nt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf6cb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaf69abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaf69ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaf69aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mc861nt                        0x00005585a7f96601 <unavailable> + 5633

    5    libc.so.6                          0x00002adaf6ea0460 __libc_start_main +
    245

    6    tmp4mc861nt                        0x00005585a7f96189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for value in lst {\n        if value < smallest {\n \
    \           smallest = value\n        }\n    }\n    return smallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpym67pzsj/tmpym67pzsj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b087ab3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087a833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087a833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087a8327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpym67pzsj                        0x0000558371efb601 <unavailable> + 5633

    5    libc.so.6                          0x00002b087ad28460 __libc_start_main +
    245

    6    tmpym67pzsj                        0x0000558371efb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpmzvdmhoq.swift:20:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[i]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2829bd2/tmpd2829bd2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab773c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7738feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7738fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7738fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2829bd2                        0x00005578545a9635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab773df3460 __libc_start_main +
    245

    6    tmpd2829bd2                        0x00005578545a9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for element in lst {\n \
    \       if smallest == nil || element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpio41vjl9.swift:16:41: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || element\
    \ < smallest {\n                                        ^\n/tmp/tmpio41vjl9.swift:16:41:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if smallest == nil || element < smallest {\n                \
    \                        ^\n                                                 ??\
    \ <#default value#>\n/tmp/tmpio41vjl9.swift:16:41: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        if smallest\
    \ == nil || element < smallest {\n                                        ^\n\
    \                                                !\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n\
    \    for index in lst.startIndex..<lst.endIndex {\n        if smallestIndex ==\
    \ lst.endIndex {\n            return nil\n        }\n        if lst[index] < smallest\
    \ {\n            smallest = lst[index]\n            smallestIndex = index\n  \
    \      }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9vb4erfh/tmp9vb4erfh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc35a0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc35705b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc35705988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc357047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vb4erfh                        0x000055882090e671 <unavailable> + 5745

    5    libc.so.6                          0x00002acc35bfa460 __libc_start_main +
    245

    6    tmp9vb4erfh                        0x000055882090e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count > 1 {\n        return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe2hehic6/tmpe2hehic6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b6187dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b61574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b61574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b615737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2hehic6                        0x000055693acb3635 <unavailable> + 5685

    5    libc.so.6                          0x00002b4b61a69460 __libc_start_main +
    245

    6    tmpe2hehic6                        0x000055693acb3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[1] < lst[0] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpg05m7t1w/tmpg05m7t1w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b568c899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b568c590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b568c590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b568c58f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg05m7t1w                        0x000055818c48d491 <unavailable> + 5265

    5    libc.so.6                          0x00002b568ca85460 __libc_start_main +
    245

    6    tmpg05m7t1w                        0x000055818c48d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    guard lst.count\
    \ >= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest.isLess(lst[index])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpj_2wun3o.swift:26:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[index]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi3xd_gfu/tmpi3xd_gfu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dcb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3xd_gfu                        0x000055ccfdd475a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b04dcd4a460 __libc_start_main +
    245

    6    tmpi3xd_gfu                        0x000055ccfdd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if smallest<lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest<lst[i] {\n                secondSmallest = lst[i]\n         \
    \   }\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyflpgwno/tmpyflpgwno.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ea3b68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ea385fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ea385f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ea385e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyflpgwno                        0x0000556fec296621 <unavailable> + 5665

    5    libc.so.6                          0x00002b8ea3d54460 __libc_start_main +
    245

    6    tmpyflpgwno                        0x0000556fec2961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for value in lst {\n      \
    \  if value < smallest {\n            smallest = value\n        }\n    }\n   \
    \ return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqbohzi4b/tmpqbohzi4b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e6f831c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e6f528b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e6f528988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e6f5277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbohzi4b                        0x000055e53d8e65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e6fa1d460 __libc_start_main +
    245

    6    tmpqbohzi4b                        0x000055e53d8e6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprfpsj3j1/tmprfpsj3j1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfpsj3j1                        0x0000561e614cd635 <unavailable> + 5685

    5    libc.so.6                          0x00002aff0c0f9460 __libc_start_main +
    245

    6    tmprfpsj3j1                        0x0000561e614cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    var smallest_index: Int\
    \ = 0\n    for index in 0..<lst.count {\n        if smallest? == nil || smallest!\
    \ > lst[index] {\n            smallest = lst[index]\n            smallest_index\
    \ = index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmplmqtqcnz.swift:17:20: error: '?' must be followed by a call, member\
    \ lookup, or subscript\n        if smallest? == nil || smallest! > lst[index]\
    \ {\n                   ^\n/tmp/tmplmqtqcnz.swift:15:9: warning: variable 'smallest_index'\
    \ was written to, but never read\n    var smallest_index: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count > 1 {\n        return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe2hehic6/tmpe2hehic6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b6187dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b61574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b61574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b615737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2hehic6                        0x000055693acb3635 <unavailable> + 5685

    5    libc.so.6                          0x00002b4b61a69460 __libc_start_main +
    245

    6    tmpe2hehic6                        0x000055693acb3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = 0\n   \
    \ for index in 1..<lst.count {\n        if lst[index] < smallest {\n         \
    \   smallest = lst[index]\n            smallestIndex = index\n        }\n    }\n\
    \    return smallestIndex == lst.count ? nil : lst[smallestIndex + 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprvvbcvm4/tmprvvbcvm4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56b8d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56b8a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56b8a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56b8a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvvbcvm4                        0x000055bb81eb57c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b56b8f06460 __libc_start_main +
    245

    6    tmprvvbcvm4                        0x000055bb81eb51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for index in 1..lst.count\
    \ {\n        if lst[index] < smallest {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        } else if lst[index] < secondSmallest\
    \ {\n            secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp813r2_ir.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 1..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..<lst.count {\n        if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallestIndex == lst.count ? nil : lst[smallestIndex + 1]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpry8kekhr/tmpry8kekhr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b344abe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344a8ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344a8dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b344a8dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpry8kekhr                        0x000055d898802621 <unavailable> + 5665

    5    libc.so.6                          0x00002b344add2460 __libc_start_main +
    245

    6    tmpry8kekhr                        0x000055d8988021a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for i\
    \ in lst.startIndex..<lst.endIndex {\n        if lst[i] < smallest {\n       \
    \     smallest = lst[i]\n            smallestIndex = i\n        }\n    }\n   \
    \ return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4owv55l8/tmp4owv55l8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add7f4c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add7f1beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add7f1be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add7f1bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4owv55l8                        0x000056088dc766d1 <unavailable> + 5841

    5    libc.so.6                          0x00002add7f6b3460 __libc_start_main +
    245

    6    tmp4owv55l8                        0x000056088dc76259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        let pivot = lst.sort()[0]\n        let leftHalf = lst.filter{$0\
    \ > pivot}\n        let rightHalf = lst.filter{$0 < pivot}\n        return rightHalf[0]\n\
    \    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpc8oxz_np.swift:18:25: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n        let pivot = lst.sort()[0]\n      \
    \              ~~~ ^\n/tmp/tmpc8oxz_np.swift:18:31: error: value of type '()'\
    \ has no subscripts\n        let pivot = lst.sort()[0]\n                    ~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if smallest*i < lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_mj84el2/tmp_mj84el2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7ccb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7c9afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7c9af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7c9ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mj84el2                        0x0000564c7d574621 <unavailable> + 5665

    5    libc.so.6                          0x00002b4b7cea4460 __libc_start_main +
    245

    6    tmp_mj84el2                        0x0000564c7d5741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for el in lst {\n      \
    \  if smallest == nil || el < smallest {\n            smallest = el\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpkfqtk42q.swift:16:36: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || el < smallest\
    \ {\n                                   ^\n/tmp/tmpkfqtk42q.swift:16:36: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        if smallest == nil || el < smallest {\n                             \
    \      ^\n                                            ?? <#default value#>\n/tmp/tmpkfqtk42q.swift:16:36:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if smallest == nil || el < smallest {\n                     \
    \              ^\n                                           !\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n        \
    \    secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgpbnwgxc.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsb4anew_/tmpsb4anew_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a6a7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a6776b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a6776988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a67757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb4anew_                        0x00005569524c6621 <unavailable> + 5665

    5    libc.so.6                          0x00002af4a6c6b460 __libc_start_main +
    245

    6    tmpsb4anew_                        0x00005569524c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    var smallest_idx: Int? =\
    \ nil\n    for idx in 0..<lst.count {\n        if smallest == nil || smallest!\
    \ > lst[idx] {\n            smallest = lst[idx]\n            smallest_idx = idx\n\
    \        }\n    }\n    return smallest_idx\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgc1_d1kk/tmpgc1_d1kk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b808f2d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b808efcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b808efcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b808efce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgc1_d1kk                        0x00005610ca855621 <unavailable> + 5665

    5    libc.so.6                          0x00002b808f4c4460 __libc_start_main +
    245

    6    tmpgc1_d1kk                        0x00005610ca8551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2829bd2/tmpd2829bd2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab773c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7738feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7738fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7738fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2829bd2                        0x00005578545a9635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab773df3460 __libc_start_main +
    245

    6    tmpd2829bd2                        0x00005578545a9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    guard lst.count\
    \ > 2 else {\n        return lst[1]\n    }\n    guard lst.count > 3 else {\n \
    \       return lst[2]\n    }\n    guard lst.count > 4 else {\n        return lst[3]\n\
    \    }\n    guard lst.count > 5 else {\n        return lst[4]\n    }\n    guard\
    \ lst.count > 6 else {\n        return lst[5]\n    }\n    guard lst.count > 7\
    \ else {\n        return lst[6]\n    }\n    guard lst.count > 8 else {\n     \
    \   return lst[7]\n    }\n    guard lst.count > 9 else {\n        return lst[8]\n\
    \    }\n    guard lst.count > 10 else {\n        return lst[9]\n    }\n    guard\
    \ lst.count > 11 else {\n        return lst[10]\n    }\n    guard lst.count >\
    \ 12 else {\n        return lst[11]\n    }\n    guard lst.count > 13 else {\n\
    \        return lst[12]\n    }\n    guard lst.count > 14 else {\n        return\
    \ lst[13]\n    }\n    guard lst.count > 15 else {\n        return lst[14]\n  \
    \  }\n    guard lst.count > 16 else {\n        return lst[15]\n    }\n    guard\
    \ lst.count > 17 else {\n        return lst[16]\n    }\n    guard lst.count >\
    \ 18 else {\n        return lst[17]\n    }\n    guard lst.count > 19 else {\n\
    \        return lst[18]\n    }\n    guard lst.count > 20 else {\n        return\
    \ lst[19]\n    }\n    guard lst.count > 21 else {\n        return lst[20]\n  \
    \  }\n    guard lst.count > 22 else {\n        return lst[21]\n    }\n    guard\
    \ lst.count > 23 else {\n        return lst[22]\n    }\n    guard lst.count >\
    \ 24 else {\n        return lst[23]\n    }\n    guard lst.count > 25 else {\n\
    \        return lst[24]\n    }\n    guard lst.count > 26 else {\n        return\
    \ lst[25]\n    }\n    guard lst.count > 27 else {\n        return lst[26]\n  \
    \  }\n    guard lst.count > 28 else {\n        return lst[27]\n    }\n    guard\
    \ lst.count > 29 else {\n        return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgb8q44ld.swift:124:54: error: expected '}' at end of brace statement\n\
    assert(next_smallest(lst: [-35, 34, 12, -45]) == -35)\n                      \
    \                               ^\n/tmp/tmpgb8q44ld.swift:13:40: note: to match\
    \ this opening '{'\nfunc next_smallest(lst: [Int]) -> Int? {\n               \
    \                        ^\n/tmp/tmpgb8q44ld.swift:102:16: error: cannot convert\
    \ return expression of type '[Int]' to return type 'Int?'\n        return lst\n\
    \               ^~~\n/tmp/tmpgb8q44ld.swift:106:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n\
    \            smallest = el\n        }\n    }\n    return smallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcuqkj00v/tmpcuqkj00v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ccc004c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ccbcfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ccbcfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ccbcfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcuqkj00v                        0x000056109f880601 <unavailable> + 5633

    5    libc.so.6                          0x00002b0ccc1f0460 __libc_start_main +
    245

    6    tmpcuqkj00v                        0x000056109f880189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    guard lst.count\
    \ > 2 else {\n        return nil\n    }\n    let min1 = lst[0]\n    let min2 =\
    \ lst[1]\n    if min1 < min2 {\n        return min1\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpfccucqcz/tmpfccucqcz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accd66c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accd63b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accd63b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accd63b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfccucqcz                        0x00005568feb83491 <unavailable> + 5265

    5    libc.so.6                          0x00002accd68ae460 __libc_start_main +
    245

    6    tmpfccucqcz                        0x00005568feb83019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsb4anew_/tmpsb4anew_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a6a7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a6776b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a6776988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a67757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb4anew_                        0x00005569524c6621 <unavailable> + 5665

    5    libc.so.6                          0x00002af4a6c6b460 __libc_start_main +
    245

    6    tmpsb4anew_                        0x00005569524c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp0yxv3ll8.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count > 1 {\n        return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe2hehic6/tmpe2hehic6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b6187dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b61574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b61574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b615737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2hehic6                        0x000055693acb3635 <unavailable> + 5685

    5    libc.so.6                          0x00002b4b61a69460 __libc_start_main +
    245

    6    tmpe2hehic6                        0x000055693acb3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8xugjw76/tmp8xugjw76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0426b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0426832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0426832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04268317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xugjw76                        0x00005565d618d611 <unavailable> + 5649

    5    libc.so.6                          0x00002b0426d27460 __libc_start_main +
    245

    6    tmp8xugjw76                        0x00005565d618d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for x in lst {\n   \
    \     if x < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = x\n        } else if x < secondSmallest {\n            secondSmallest = x\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpx0imm4y0/tmpx0imm4y0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7036ca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7036999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7036999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70369987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0imm4y0                        0x000055587e97a601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7036e8e460 __libc_start_main +
    245

    6    tmpx0imm4y0                        0x000055587e97a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest =\
    \ smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp8p76rnyg.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsayrsn0k/tmpsayrsn0k.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c23a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c23763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c23763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c237627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsayrsn0k                        0x000055585c77f621 <unavailable> + 5665

    5    libc.so.6                          0x00002b3c23c58460 __libc_start_main +
    245

    6    tmpsayrsn0k                        0x000055585c77f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprfpsj3j1/tmprfpsj3j1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfpsj3j1                        0x0000561e614cd635 <unavailable> + 5685

    5    libc.so.6                          0x00002aff0c0f9460 __libc_start_main +
    245

    6    tmprfpsj3j1                        0x0000561e614cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpezx22stz/tmpezx22stz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88f0233c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88eff2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88eff2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88eff297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezx22stz                        0x00005571c16b8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b88f041f460 __libc_start_main +
    245

    6    tmpezx22stz                        0x00005571c16b8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n  \
    \      if el < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3p0obw8x/tmp3p0obw8x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e52e15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e52b0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e52b0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e52b0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3p0obw8x                        0x0000564d88930601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e53001460 __libc_start_main +
    245

    6    tmp3p0obw8x                        0x0000564d88930189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbuue7eyf/tmpbuue7eyf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d29fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d26f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d26f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d26f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbuue7eyf                        0x000055fc9ad79601 <unavailable> + 5633

    5    libc.so.6                          0x00002b92d2be9460 __libc_start_main +
    245

    6    tmpbuue7eyf                        0x000055fc9ad79189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..lst.count {\n        if smallestIndex == -1 || smallestIndex\
    \ > index {\n            smallestIndex = index\n            smallest = lst[index]\n\
    \        }\n        if lst[index] < smallest {\n            smallestIndex = index\n\
    \            smallest = lst[index]\n        }\n    }\n    return smallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpn2segoi0.swift:16:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 1..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpoqprrygw.swift:23:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[i]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[1] < lst[0] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpg05m7t1w/tmpg05m7t1w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b568c899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b568c590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b568c590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b568c58f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg05m7t1w                        0x000055818c48d491 <unavailable> + 5265

    5    libc.so.6                          0x00002b568ca85460 __libc_start_main +
    245

    6    tmpg05m7t1w                        0x000055818c48d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for value in lst {\n\
    \        if value < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = value\n        } else if value < secondSmallest {\n        \
    \    secondSmallest = value\n        }\n    }\n    return secondSmallest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi9nbln8m/tmpi9nbln8m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc1e4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc1e1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc1e1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc1e1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9nbln8m                        0x000055d555339601 <unavailable> + 5633

    5    libc.so.6                          0x00002abc1e6b0460 __libc_start_main +
    245

    6    tmpi9nbln8m                        0x000055d555339189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[1] < lst[0] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpg05m7t1w/tmpg05m7t1w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b568c899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b568c590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b568c590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b568c58f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg05m7t1w                        0x000055818c48d491 <unavailable> + 5265

    5    libc.so.6                          0x00002b568ca85460 __libc_start_main +
    245

    6    tmpg05m7t1w                        0x000055818c48d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpmynfac4a.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    guard lst.count\
    \ > 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_oi_sczi/tmp_oi_sczi.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fabb80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fab877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fab877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fab8767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oi_sczi                        0x000055ba1b01a601 <unavailable> + 5633

    5    libc.so.6                          0x00002b6fabd6c460 __libc_start_main +
    245

    6    tmp_oi_sczi                        0x000055ba1b01a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8xugjw76/tmp8xugjw76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0426b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0426832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0426832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04268317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xugjw76                        0x00005565d618d611 <unavailable> + 5649

    5    libc.so.6                          0x00002b0426d27460 __libc_start_main +
    245

    6    tmp8xugjw76                        0x00005565d618d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for index in\
    \ lst.startIndex..<lst.endIndex {\n        if smallestIndex == lst.endIndex {\n\
    \            return nil\n        }\n        if lst[index] < smallest {\n     \
    \       smallest = lst[index]\n            smallestIndex = index\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp45rrinhk/tmp45rrinhk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47fe80ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47fe501b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47fe501988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47fe5007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45rrinhk                        0x0000555aaf7c66d1 <unavailable> + 5841

    5    libc.so.6                          0x00002b47fe9f6460 __libc_start_main +
    245

    6    tmp45rrinhk                        0x0000555aaf7c6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpp4fjysd8.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n         \
    \   smallest = x\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpacfvxuhi/tmpacfvxuhi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adabfe7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adabfb75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adabfb75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adabfb747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacfvxuhi                        0x0000563eb15a5601 <unavailable> + 5633

    5    libc.so.6                          0x00002adac006a460 __libc_start_main +
    245

    6    tmpacfvxuhi                        0x0000563eb15a5189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsayrsn0k/tmpsayrsn0k.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c23a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c23763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c23763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c237627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsayrsn0k                        0x000055585c77f621 <unavailable> + 5665

    5    libc.so.6                          0x00002b3c23c58460 __libc_start_main +
    245

    6    tmpsayrsn0k                        0x000055585c77f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi3xd_gfu/tmpi3xd_gfu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dcb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3xd_gfu                        0x000055ccfdd475a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b04dcd4a460 __libc_start_main +
    245

    6    tmpi3xd_gfu                        0x000055ccfdd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2anhbxw2/tmp2anhbxw2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbb32b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbb2facb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbb2fac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbb2fab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2anhbxw2                        0x000055faad038601 <unavailable> + 5633

    5    libc.so.6                          0x00002abbb34a1460 __libc_start_main +
    245

    6    tmp2anhbxw2                        0x000055faad038189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*smallest+secondSmallest*secondSmallest > index*index\
    \ {\n            secondSmallest = index\n        } else {\n            smallest\
    \ = index\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2ajqrit9/tmp2ajqrit9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba94bd48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba94ba3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba94ba3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba94ba3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ajqrit9                        0x000055abf82e2611 <unavailable> + 5649

    5    libc.so.6                          0x00002ba94bf34460 __libc_start_main +
    245

    6    tmp2ajqrit9                        0x000055abf82e2199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpmtaq_lqa.swift:21:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpj2asxkjp/tmpj2asxkjp.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed97a6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed97764b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed97764988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed977637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2asxkjp                        0x000055dec9a0d621 <unavailable> + 5665

    5    libc.so.6                          0x00002aed97c59460 __libc_start_main +
    245

    6    tmpj2asxkjp                        0x000055dec9a0d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp_jbwdbs_.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpea4ycdbb/tmpea4ycdbb.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d7d8cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d7d5c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d7d5c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d7d5c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpea4ycdbb                        0x00005611e3b427c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b8d7dabb460 __libc_start_main +
    245

    6    tmpea4ycdbb                        0x00005611e3b421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp1upyq2ik/tmp1upyq2ik.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5998229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5997f20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5997f20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5997f1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1upyq2ik                        0x00005627815df621 <unavailable> + 5665

    5    libc.so.6                          0x00002b5998415460 __libc_start_main +
    245

    6    tmp1upyq2ik                        0x00005627815df1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpi7qs7goi.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count <= 1 {\n        return lst[0]\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLesserThan(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpmhijgrv7.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi3xd_gfu/tmpi3xd_gfu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dcb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3xd_gfu                        0x000055ccfdd475a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b04dcd4a460 __libc_start_main +
    245

    6    tmpi3xd_gfu                        0x000055ccfdd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if smallest*i < secondSmallest {\n    \
    \        secondSmallest = smallest*i\n            smallest = i\n        }\n  \
    \  }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpj8107yc1/tmpj8107yc1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41bb608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41bb2ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41bb2ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41bb2fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8107yc1                        0x000056504465b621 <unavailable> + 5665

    5    libc.so.6                          0x00002b41bb7f4460 __libc_start_main +
    245

    6    tmpj8107yc1                        0x000056504465b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for value in lst {\n      \
    \  if value < smallest {\n            smallest = value\n        }\n    }\n   \
    \ return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqbohzi4b/tmpqbohzi4b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e6f831c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e6f528b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e6f528988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e6f5277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbohzi4b                        0x000055e53d8e65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e6fa1d460 __libc_start_main +
    245

    6    tmpqbohzi4b                        0x000055e53d8e6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpz33ew13o/tmpz33ew13o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abba0115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb9fe0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb9fe0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb9fe0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz33ew13o                        0x000055c666c9a5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002abba0301460 __libc_start_main +
    245

    6    tmpz33ew13o                        0x000055c666c9a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpz33ew13o/tmpz33ew13o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abba0115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb9fe0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb9fe0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb9fe0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz33ew13o                        0x000055c666c9a5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002abba0301460 __libc_start_main +
    245

    6    tmpz33ew13o                        0x000055c666c9a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmptdrbfuwn.swift:22:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[i]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n  \
    \          smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp_45zkn3m.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n       \
    \     smallest = el\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb__4x_fo/tmpb__4x_fo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0204782c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0204479b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0204479988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02044787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb__4x_fo                        0x0000561c390c7601 <unavailable> + 5633

    5    libc.so.6                          0x00002b020496e460 __libc_start_main +
    245

    6    tmpb__4x_fo                        0x0000561c390c7189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n\n   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptc4551a9/tmptc4551a9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b0558dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b05284b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b05284988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b052837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc4551a9                        0x000055d092104601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7b05779460 __libc_start_main +
    245

    6    tmptc4551a9                        0x000055d092104189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprvvjxaw5/tmprvvjxaw5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95cbb61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95cb858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95cb858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95cb8577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvvjxaw5                        0x000055a8301455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b95cbd4d460 __libc_start_main +
    245

    6    tmprvvjxaw5                        0x000055a830145129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    guard lst.count\
    \ > 2 else {\n        return nil\n    }\n    if lst[0] < lst[1] {\n        return\
    \ lst[1]\n    }\n    if lst[1] < lst[2] {\n        return lst[2]\n    }\n    if\
    \ lst[2] < lst[0] {\n        return lst[0]\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpurigpc5z/tmpurigpc5z.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27935f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27932f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27932f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27932ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurigpc5z                        0x000055e5f1b71635 <unavailable> + 5685

    5    libc.so.6                          0x00002b27937e5460 __libc_start_main +
    245

    6    tmpurigpc5z                        0x000055e5f1b71019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmps9khu_pu/tmps9khu_pu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d5f26ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d5ef61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d5ef61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d5ef607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9khu_pu                        0x0000559c5a5c2601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7d5f456460 __libc_start_main +
    245

    6    tmps9khu_pu                        0x0000559c5a5c2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp12_efl4g.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for value in lst {\n\
    \        if value < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = value\n        } else if value < secondSmallest {\n        \
    \    secondSmallest = value\n        }\n    }\n    return secondSmallest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi9nbln8m/tmpi9nbln8m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc1e4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc1e1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc1e1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc1e1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9nbln8m                        0x000055d555339601 <unavailable> + 5633

    5    libc.so.6                          0x00002abc1e6b0460 __libc_start_main +
    245

    6    tmpi9nbln8m                        0x000055d555339189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsb4anew_/tmpsb4anew_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a6a7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a6776b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a6776988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a67757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb4anew_                        0x00005569524c6621 <unavailable> + 5665

    5    libc.so.6                          0x00002af4a6c6b460 __libc_start_main +
    245

    6    tmpsb4anew_                        0x00005569524c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprvvjxaw5/tmprvvjxaw5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95cbb61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95cb858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95cb858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95cb8577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvvjxaw5                        0x000055a8301455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b95cbd4d460 __libc_start_main +
    245

    6    tmprvvjxaw5                        0x000055a830145129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp4_ozhu39.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        }\n        if lst[i] < secondSmallest {\n   \
    \         secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp980_q_31/tmp980_q_31.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b796e2b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b796dfacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b796dfac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b796dfab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp980_q_31                        0x000055d5ae78c9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b796e4a1460 __libc_start_main +
    245

    6    tmp980_q_31                        0x000055d5ae78c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjoxk0wk6/tmpjoxk0wk6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f4b821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f4b518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f4b518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f4b5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoxk0wk6                        0x000055a23d34c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b6f4ba0d460 __libc_start_main +
    245

    6    tmpjoxk0wk6                        0x000055a23d34c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest =\
    \ smallest\n            smallest = lst[i]\n        } else {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpy_46o9xi.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*smallest > index*index {\n            secondSmallest\
    \ = smallest\n            smallest = index\n        } else {\n            if secondSmallest*secondSmallest\
    \ > index*index {\n                secondSmallest = index\n            }\n   \
    \     }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd0077n8a/tmpd0077n8a.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af37a99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af37a695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af37a695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af37a6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0077n8a                        0x0000563e8c95e611 <unavailable> + 5649

    5    libc.so.6                          0x00002af37ab8a460 __libc_start_main +
    245

    6    tmpd0077n8a                        0x0000563e8c95e199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int?\n    var smallestIndex: Int?\n    for\
    \ index in 0..<lst.count {\n        if smallest == nil || smallestIndex == nil\
    \ || lst[index] < smallest! {\n            smallest = lst[index]\n           \
    \ smallestIndex = index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsw9t3g9u/tmpsw9t3g9u.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7a7e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d7a4deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d7a4de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d7a4dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsw9t3g9u                        0x000055fd619d5621 <unavailable> + 5665

    5    libc.so.6                          0x00002b3d7a9d3460 __libc_start_main +
    245

    6    tmpsw9t3g9u                        0x000055fd619d51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n        if lst[i] < secondSmallest {\n\
    \            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb7la1arg/tmpb7la1arg.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9d7712c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9d7409b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9d7409988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9d74087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7la1arg                        0x000055b4c59759aa <unavailable> + 6570

    5    libc.so.6                          0x00002ad9d78fe460 __libc_start_main +
    245

    6    tmpb7la1arg                        0x000055b4c59751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4jjct5_6/tmp4jjct5_6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affd0638c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affd032fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affd032f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affd032e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jjct5_6                        0x0000564422f38635 <unavailable> + 5685

    5    libc.so.6                          0x00002affd0824460 __libc_start_main +
    245

    6    tmp4jjct5_6                        0x0000564422f38019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n        \
    \    secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgpbnwgxc.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest =\
    \ smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp8p76rnyg.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpopukq7e1/tmpopukq7e1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38db4a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38db19ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38db19a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38db1997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopukq7e1                        0x00005639aa5c7621 <unavailable> + 5665

    5    libc.so.6                          0x00002b38db68f460 __libc_start_main +
    245

    6    tmpopukq7e1                        0x00005639aa5c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpck9oto_3/tmpck9oto_3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b761935dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7619054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7619054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76190537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpck9oto_3                        0x000056169266b601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7619549460 __libc_start_main +
    245

    6    tmpck9oto_3                        0x000056169266b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n  \
    \          smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp_45zkn3m.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2829bd2/tmpd2829bd2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab773c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7738feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7738fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7738fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2829bd2                        0x00005578545a9635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab773df3460 __libc_start_main +
    245

    6    tmpd2829bd2                        0x00005578545a9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    var smallest_index: Int\
    \ = 0\n    for index in 0..<lst.count {\n        if smallest? == nil || smallest!\
    \ > lst[index] {\n            smallest = lst[index]\n            smallest_index\
    \ = index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmplmqtqcnz.swift:17:20: error: '?' must be followed by a call, member\
    \ lookup, or subscript\n        if smallest? == nil || smallest! > lst[index]\
    \ {\n                   ^\n/tmp/tmplmqtqcnz.swift:15:9: warning: variable 'smallest_index'\
    \ was written to, but never read\n    var smallest_index: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmps9khu_pu/tmps9khu_pu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d5f26ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d5ef61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d5ef61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d5ef607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9khu_pu                        0x0000559c5a5c2601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7d5f456460 __libc_start_main +
    245

    6    tmps9khu_pu                        0x0000559c5a5c2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8xugjw76/tmp8xugjw76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0426b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0426832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0426832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04268317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xugjw76                        0x00005565d618d611 <unavailable> + 5649

    5    libc.so.6                          0x00002b0426d27460 __libc_start_main +
    245

    6    tmp8xugjw76                        0x00005565d618d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8xugjw76/tmp8xugjw76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0426b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0426832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0426832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04268317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xugjw76                        0x00005565d618d611 <unavailable> + 5649

    5    libc.so.6                          0x00002b0426d27460 __libc_start_main +
    245

    6    tmp8xugjw76                        0x00005565d618d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpmzvdmhoq.swift:20:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[i]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprfpsj3j1/tmprfpsj3j1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfpsj3j1                        0x0000561e614cd635 <unavailable> + 5685

    5    libc.so.6                          0x00002aff0c0f9460 __libc_start_main +
    245

    6    tmprfpsj3j1                        0x0000561e614cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n        \
    \    secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgpbnwgxc.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..<lst.count {\n        if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    if smallestIndex == lst.count - 1 {\n        return nil\n    }\n    return\
    \ smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0_1gkib5/tmp0_1gkib5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7133cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7130c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7130c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7130c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_1gkib5                        0x000055982c63d621 <unavailable> + 5665

    5    libc.so.6                          0x00002ac7135bb460 __libc_start_main +
    245

    6    tmp0_1gkib5                        0x000055982c63d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if smallest > lst[i] {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpj61u3k0l/tmpj61u3k0l.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec4621cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec45f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec45f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec45f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj61u3k0l                        0x00005565694a6621 <unavailable> + 5665

    5    libc.so.6                          0x00002aec46408460 __libc_start_main +
    245

    6    tmpj61u3k0l                        0x00005565694a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count\
    \ {\n        if smallest.isLesserThan(lst[index]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpxibtsvc_.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 2..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpz33ew13o/tmpz33ew13o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abba0115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb9fe0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb9fe0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb9fe0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz33ew13o                        0x000055c666c9a5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002abba0301460 __libc_start_main +
    245

    6    tmpz33ew13o                        0x000055c666c9a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprfpsj3j1/tmprfpsj3j1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfpsj3j1                        0x0000561e614cd635 <unavailable> + 5685

    5    libc.so.6                          0x00002aff0c0f9460 __libc_start_main +
    245

    6    tmprfpsj3j1                        0x0000561e614cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprvvjxaw5/tmprvvjxaw5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95cbb61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95cb858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95cb858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95cb8577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvvjxaw5                        0x000055a8301455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b95cbd4d460 __libc_start_main +
    245

    6    tmprvvjxaw5                        0x000055a830145129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpi7qs7goi.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8xugjw76/tmp8xugjw76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0426b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0426832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0426832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04268317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xugjw76                        0x00005565d618d611 <unavailable> + 5649

    5    libc.so.6                          0x00002b0426d27460 __libc_start_main +
    245

    6    tmp8xugjw76                        0x00005565d618d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count == 3 {\n  \
    \      return lst[1]\n    }\n    if lst.count > 3 {\n        return lst[2]\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp00dr6i0s/tmp00dr6i0s.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53baa46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53ba73db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53ba73d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53ba73c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00dr6i0s                        0x000055f87bae8491 <unavailable> + 5265

    5    libc.so.6                          0x00002b53bac32460 __libc_start_main +
    245

    6    tmp00dr6i0s                        0x000055f87bae8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpp4fjysd8.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwzcxii6a/tmpwzcxii6a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10113d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10110ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10110cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10110cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzcxii6a                        0x00005628fd0007c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b10115c1460 __libc_start_main +
    245

    6    tmpwzcxii6a                        0x00005628fd0001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let secondSmallest = lst[1]\n    if smallest < secondSmallest\
    \ {\n        return secondSmallest\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpatsydav6/tmpatsydav6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc851c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc84eb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc84eb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc84eb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatsydav6                        0x000055b4b2479635 <unavailable> + 5685

    5    libc.so.6                          0x00002adc853ae460 __libc_start_main +
    245

    6    tmpatsydav6                        0x000055b4b2479019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprfpsj3j1/tmprfpsj3j1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff0bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff0bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff0bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfpsj3j1                        0x0000561e614cd635 <unavailable> + 5685

    5    libc.so.6                          0x00002aff0c0f9460 __libc_start_main +
    245

    6    tmprfpsj3j1                        0x0000561e614cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    if lst.count <= 1 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphgzqrjfc/tmphgzqrjfc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab537394c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab53708bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab53708b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab53708a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgzqrjfc                        0x000055dbc88d0621 <unavailable> + 5665

    5    libc.so.6                          0x00002ab537580460 __libc_start_main +
    245

    6    tmphgzqrjfc                        0x000055dbc88d01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int?\n    var smallest_index: Int = 0\n\
    \    for index in 0..<lst.count {\n        if smallest  == nil || smallest! >\
    \ lst[index] {\n            smallest = lst[index]\n            smallest_index\
    \ = index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4wryy_6x/tmp4wryy_6x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3efdb94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3efd88bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3efd88b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3efd88a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wryy_6x                        0x0000561586b59621 <unavailable> + 5665

    5    libc.so.6                          0x00002b3efdd80460 __libc_start_main +
    245

    6    tmp4wryy_6x                        0x0000561586b591a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2829bd2/tmpd2829bd2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab773c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7738feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7738fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7738fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2829bd2                        0x00005578545a9635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab773df3460 __libc_start_main +
    245

    6    tmpd2829bd2                        0x00005578545a9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if index < 2 {\n            continue\n        }\n        if smallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpil2elw_o/tmpil2elw_o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370f0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370f0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370f0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpil2elw_o                        0x0000564bcdea87b5 <unavailable> + 6069

    5    libc.so.6                          0x00002b370f5e7460 __libc_start_main +
    245

    6    tmpil2elw_o                        0x0000564bcdea8199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi3xd_gfu/tmpi3xd_gfu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dcb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3xd_gfu                        0x000055ccfdd475a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b04dcd4a460 __libc_start_main +
    245

    6    tmpi3xd_gfu                        0x000055ccfdd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<lst.count {\n        if smallestIndex == 0 {\n     \
    \       smallest = lst[index]\n            smallestIndex = index\n           \
    \ continue\n        }\n        if lst[index] < smallest {\n            smallest\
    \ = lst[index]\n            smallestIndex = index\n        }\n    }\n    return\
    \ smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpr8yke7p_.swift:22:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if lst[index] < smallest {\n\
    \                        ^\n/tmp/tmpr8yke7p_.swift:22:25: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        if\
    \ lst[index] < smallest {\n                        ^\n                       \
    \          ?? <#default value#>\n/tmp/tmpr8yke7p_.swift:22:25: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        if\
    \ lst[index] < smallest {\n                        ^\n                       \
    \         !\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpck9oto_3/tmpck9oto_3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b761935dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7619054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7619054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76190537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpck9oto_3                        0x000056169266b601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7619549460 __libc_start_main +
    245

    6    tmpck9oto_3                        0x000056169266b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7kcv3ci6/tmp7kcv3ci6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e913fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e910f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e910f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e910f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kcv3ci6                        0x000055e8b99625a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2e915e8460 __libc_start_main +
    245

    6    tmp7kcv3ci6                        0x000055e8b9962129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpage9i1ig/tmpage9i1ig.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7edc64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ed95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ed95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ed95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpage9i1ig                        0x000055b3b3645635 <unavailable> + 5685

    5    libc.so.6                          0x00002ae7ede50460 __libc_start_main +
    245

    6    tmpage9i1ig                        0x000055b3b3645019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2829bd2/tmpd2829bd2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab773c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7738feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7738fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7738fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2829bd2                        0x00005578545a9635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab773df3460 __libc_start_main +
    245

    6    tmpd2829bd2                        0x00005578545a9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqavmcdw2/tmpqavmcdw2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe3330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe3027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe3027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe30267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqavmcdw2                        0x000055c85d9965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aebe351c460 __libc_start_main +
    245

    6    tmpqavmcdw2                        0x000055c85d996129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013418
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int?\n    var smallest_index: Int?\n   \
    \ for index in 0..<lst.count {\n        if smallest_index == nil || smallest!\
    \ > lst[index] {\n            smallest = lst[index]\n            smallest_index\
    \ = index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmk6ffqzd/tmpmk6ffqzd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17fa56ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17fa261b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17fa261988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17fa2607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk6ffqzd                        0x000055da140da621 <unavailable> + 5665

    5    libc.so.6                          0x00002b17fa756460 __libc_start_main +
    245

    6    tmpmk6ffqzd                        0x000055da140da1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjoxk0wk6/tmpjoxk0wk6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f4b821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f4b518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f4b518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f4b5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoxk0wk6                        0x000055a23d34c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b6f4ba0d460 __libc_start_main +
    245

    6    tmpjoxk0wk6                        0x000055a23d34c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013419
