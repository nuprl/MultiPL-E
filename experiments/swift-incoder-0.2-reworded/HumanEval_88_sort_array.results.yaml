language: swift
name: HumanEval_88_sort_array
results:
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let sum\
    \ = (array[0] + array[array.count - 1]) / 2\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace({ $0 < $1 })\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp7wb7ft46.swift:22:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp7wb7ft46.swift:24:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace({\
    \ $0 < $1 })\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ result = array\n    var sum = 0\n    for value in array {\n        sum += value\n\
    \    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n    } else {\n\
    \        result = result.sorted().reversed()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp74qs14v0/tmp74qs14v0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ff9346c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ff903db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ff903d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ff903c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74qs14v0                        0x0000563b523bbad4 <unavailable> + 6868

    5    libc.so.6                          0x00002b4ff9532460 __libc_start_main +
    245

    6    tmp74qs14v0                        0x0000563b523bb329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n    if\
    \ sum % 2 == 1 {\n        return array.sorted()\n    } else {\n        return\
    \ array.sorted(by: {$0 > $1}).reversed()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpke4vfe5_/tmpke4vfe5_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ed5b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ed2afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ed2af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ed2ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke4vfe5_                        0x000055e7c1697b24 <unavailable> + 6948

    5    libc.so.6                          0x00002b21ed7a4460 __libc_start_main +
    245

    6    tmpke4vfe5_                        0x000055e7c1697379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var swiftArray\
    \ = array\n    let sumOfFirst = swiftArray[0] + swiftArray[swiftArray.count -\
    \ 1]\n    let sumOfLast = swiftArray[0] + swiftArray[swiftArray.count - 2]\n \
    \   if sumOfFirst % 2 == 1 {\n        swiftArray = swiftArray.sorted()\n    }\
    \ else {\n        swiftArray = swiftArray.sorted().reversed()\n    }\n    return\
    \ swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for value in array {\n        sum +=\
    \ value\n        swiftArray.append(value)\n    }\n    if sum % 2 == 1 {\n    \
    \    swiftArray.reverse()\n    }\n    return swiftArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6qtr6ofz/tmp6qtr6ofz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b593cef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b593cbeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b593cbea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b593cbe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qtr6ofz                        0x000055fa948289c6 <unavailable> + 6598

    5    libc.so.6                          0x00002b593d0df460 __libc_start_main +
    245

    6    tmp6qtr6ofz                        0x000055fa948283a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = (array[0] + array[array.count - 1]) / 2\n    if sum % 2 == 1 {\n     \
    \   array.sortInPlace()\n    } else {\n        array.sortInPlace{ $0 < $1 }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp42t5x9f2.swift:22:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp42t5x9f2.swift:24:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    let isOdd = sum % 2 == 1\n    var result\
    \ = array\n    if isOdd {\n        result = result.sorted()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpi24tned6.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var index = 0\n    var lastIndex = array.count - 1\n    while index\
    \ < lastIndex {\n        sum += array[index]\n        index += 1\n    }\n    if\
    \ sum % 2 == 0 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace({\
    \ $0 < $1 })\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp8ityn54k.swift:28:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp8ityn54k.swift:30:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace({\
    \ $0 < $1 })\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ sum = 0\n    for value in array {\n        sum += value\n    }\n    if sum %\
    \ 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpybccx_pq.swift:25:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpybccx_pq.swift:27:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for element in array\
    \ {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sort(by:\
    \ { $0 < $1 })\n    } else {\n        result.sort(by: { $0 > $1 })\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqkta3x38/tmpqkta3x38.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5779609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5779300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5779300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57792ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkta3x38                        0x00005585196a074d <unavailable> + 5965

    5    libc.so.6                          0x00002b57797f5460 __libc_start_main +
    245

    6    tmpqkta3x38                        0x00005585196a0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for element in array {\n        sum +=\
    \ element\n    }\n    if sum % 2 == 1 {\n        swiftArray = array.sorted{ $0\
    \ < $1 }\n    } else {\n        swiftArray = array.sorted{ $0 > $1 }\n    }\n\
    \    return swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaefm04ot/tmpaefm04ot.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add6df5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add6dc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add6dc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add6dc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaefm04ot                        0x000055d14f3c9a94 <unavailable> + 6804

    5    libc.so.6                          0x00002add6e147460 __libc_start_main +
    245

    6    tmpaefm04ot                        0x000055d14f3c92e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for i in 0..<array.count {\n        sum\
    \ += array[i]\n        if sum % 2 == 1 {\n            swiftArray.append(array[i])\n\
    \        } else {\n            swiftArray.append(array[i])\n            swiftArray.append(array[i])\n\
    \        }\n    }\n    return swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjnu95w4p/tmpjnu95w4p.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88afbdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88af8d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88af8d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88af8d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnu95w4p                        0x0000561ce777e8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b88afdc6460 __libc_start_main +
    245

    6    tmpjnu95w4p                        0x0000561ce777e2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for value in array\
    \ {\n        sum += value\n        result.append(value)\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort()\n    } else {\n        result.reverse()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpncqru7hk/tmpncqru7hk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf31f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf31c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf31c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf31c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncqru7hk                        0x0000562c6effbbe4 <unavailable> + 7140

    5    libc.so.6                          0x00002adf32109460 __libc_start_main +
    245

    6    tmpncqru7hk                        0x0000562c6effb439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace({ $0 < $1 })\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpukv9byvg.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmpukv9byvg.swift:19:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpukv9byvg.swift:21:15: error: value of type\
    \ '[Int]' has no member 'sortInPlace'\n        array.sortInPlace({ $0 < $1 })\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var sum2 = 0\n    var result = [Int]()\n    for element in array {\n\
    \        sum += element\n        sum2 += element * element\n    }\n    if sum2\
    \ % 2 == 1 {\n        result = array.sorted()\n    } else {\n        result =\
    \ array.sorted(by: >)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptnqew1f9/tmptnqew1f9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a9f018c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a9ed0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a9ed0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a9ed0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnqew1f9                        0x000055d5619e4b34 <unavailable> + 6964

    5    libc.so.6                          0x00002b4a9f204460 __libc_start_main +
    245

    6    tmptnqew1f9                        0x000055d5619e4389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var result = [Int]()\n    for value in array {\n        sum += value\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort(by: {$0 > $1})\n    } else\
    \ {\n        result.sort(by: {$0 < $1})\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_cz1znvd/tmp_cz1znvd.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbe9983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbe967ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbe967a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbe96797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz1znvd                        0x0000564f0fc8a916 <unavailable> + 6422

    5    libc.so.6                          0x00002abbe9b6f460 __libc_start_main +
    245

    6    tmp_cz1znvd                        0x0000564f0fc8a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlace({ $0 < $1 })\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpwzvxriw8.swift:23:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpwzvxriw8.swift:25:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace({\
    \ $0 < $1 })\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var evenSum = 0\n    var oddSum = 0\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    var evenMin = array[0]\n    var oddMin = array[0]\n    for\
    \ value in array {\n        sum += value\n        if sum % 2 == 0 {\n        \
    \    evenSum += value\n            evenCount += 1\n            if evenCount >\
    \ 1 {\n                evenMin = evenSum / evenCount\n            }\n        }\
    \ else {\n            oddSum += value\n            oddCount += 1\n           \
    \ if oddCount > 1 {\n                oddMin = oddSum / oddCount\n            }\n\
    \        }\n    }\n    if evenCount > 1 {\n        return array.sorted()\n   \
    \ } else if oddCount > 1 {\n        return array.sorted(by: {$0 < $1}).reversed()\n\
    \    } else {\n        return array\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmzqc0uzn/tmpmzqc0uzn.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b843e281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b843df78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b843df78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b843df777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzqc0uzn                        0x000055967188ab94 <unavailable> + 7060

    5    libc.so.6                          0x00002b843e46d460 __libc_start_main +
    245

    6    tmpmzqc0uzn                        0x000055967188a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    var swiftArray = [Int]()\n    if sum\
    \ % 2 == 1 {\n        swiftArray = array.sorted()\n    } else {\n        swiftArray\
    \ = array.sorted().reversed()\n    }\n    return swiftArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpco0rs9wc.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for i in 0..<array.count {\n        sum\
    \ += array[i]\n        swiftArray.append(sum)\n    }\n    if sum % 2 == 1 {\n\
    \        swiftArray.reverse()\n    }\n    return swiftArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptaodcirx/tmptaodcirx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55130e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5512ddfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5512ddf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5512dde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptaodcirx                        0x0000558f056449a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b55132d4460 __libc_start_main +
    245

    6    tmptaodcirx                        0x0000558f05644389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var result = [Int]()\n    for element in array {\n\
    \        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlace{ $0 < $1 }\n    }\n    for element in\
    \ array {\n        temp = sum - element\n        if temp % 2 == 1 {\n        \
    \    result.insert(element, at: 0)\n        } else {\n            result.insert(element,\
    \ at: result.count - 1)\n        }\n        sum -= element\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpo_rm0y64.swift:27:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpo_rm0y64.swift:29:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let sumOfFirst\
    \ = array[0] + array[1]\n    let sumOfLast = array[-1] + array[array.count - 1]\n\
    \    let isOdd = sumOfFirst % 2 == 1\n    let isEven = sumOfLast % 2 == 0\n  \
    \  var sortedArray = array\n    if isOdd {\n        sortedArray = array.sorted()\n\
    \    }\n    if isEven {\n        sortedArray = sortedArray.sorted()\n    }\n \
    \   return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7ba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b790561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc7b790286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc7b79013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc7b78fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc7b58fe83 <unavailable> + 188035

    6    tmppg8m464s                        0x000055f1e2b86e7d <unavailable> + 7805

    7    tmppg8m464s                        0x000055f1e2b866bf <unavailable> + 5823

    8    libc.so.6                          0x00002adc7bc85460 __libc_start_main +
    245

    9    tmppg8m464s                        0x000055f1e2b861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzzdh9r4f/tmpzzdh9r4f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2694270c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2693f67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2693f67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2693f667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzdh9r4f                        0x0000561bd22467e4 <unavailable> + 6116

    5    libc.so.6                          0x00002b269445c460 __libc_start_main +
    245

    6    tmpzzdh9r4f                        0x0000561bd2246039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    let odd = sum % 2 == 1\n    let even\
    \ = sum % 2 == 0\n    if odd {\n        array.sortInPlace()\n    } else {\n  \
    \      array.sortInPlace{ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpck0ulf1b.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmpck0ulf1b.swift:21:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpck0ulf1b.swift:23:15: error: value of type\
    \ '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{ $0 < $1 }\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for element in array\
    \ {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sort(by:\
    \ {$0 < $1})\n    } else {\n        result.sort(by: {$0 > $1})\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt3qf3rbp/tmpt3qf3rbp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f339ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f336c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f336c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f336c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3qf3rbp                        0x0000560a78e7b74d <unavailable> + 5965

    5    libc.so.6                          0x00002b3f33bb8460 __libc_start_main +
    245

    6    tmpt3qf3rbp                        0x0000560a78e7b299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var result = [Int]()\n    for element in array {\n\
    \        sum += element\n    }\n    for element in array {\n        if sum % 2\
    \ == 0 {\n            temp += element\n        } else {\n            temp -= element\n\
    \        }\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp73xf9j_9/tmp73xf9j_9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43daf73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43dac6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43dac6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43dac697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73xf9j_9                        0x0000555865db98f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b43db15f460 __libc_start_main +
    245

    6    tmp73xf9j_9                        0x0000555865db92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    let isOdd = sum % 2 == 1\n    var result\
    \ = array\n    if isOdd {\n        result = result.sorted()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpi24tned6.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for element in array\
    \ {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sort(by:\
    \ {$0 < $1})\n    } else {\n        result.sort(by: {$0 > $1})\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt3qf3rbp/tmpt3qf3rbp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f339ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f336c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f336c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f336c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3qf3rbp                        0x0000560a78e7b74d <unavailable> + 5965

    5    libc.so.6                          0x00002b3f33bb8460 __libc_start_main +
    245

    6    tmpt3qf3rbp                        0x0000560a78e7b299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    let len = array.count\n    let half\
    \ = len / 2\n    if sum % 2 == 1 {\n        return array.sorted { $0 < $1 }\n\
    \    } else {\n        return array.sorted { $0 > $1 }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp3m90e0k6.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for element in array {\n        sum +=\
    \ element\n    }\n    if sum % 2 == 1 {\n        swiftArray = array.sorted()\n\
    \    } else {\n        swiftArray = array.sorted().reversed()\n    }\n    return\
    \ swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp01g32m5j/tmp01g32m5j.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58dee00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58deaf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58deaf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58deaf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01g32m5j                        0x000056311170cb34 <unavailable> + 6964

    5    libc.so.6                          0x00002b58defec460 __libc_start_main +
    245

    6    tmp01g32m5j                        0x000056311170c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for value in array {\n        sum +=\
    \ value\n    }\n    if sum % 2 == 1 {\n        swiftArray = array.sorted()\n \
    \   } else {\n        swiftArray = array.sorted().reversed()\n    }\n    return\
    \ swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjj4p4ohl/tmpjj4p4ohl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afabb85ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afabb555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afabb555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afabb5547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjj4p4ohl                        0x0000561c13fa5b34 <unavailable> + 6964

    5    libc.so.6                          0x00002afabba4a460 __libc_start_main +
    245

    6    tmpjj4p4ohl                        0x0000561c13fa5389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpaebcfsr0.swift:25:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpaebcfsr0.swift:27:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0.isOdd ? $0 > $1 : $0 < $1 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmprmqub_ia.swift:17:30: error: value of type 'Int' has no member\
    \ 'isOdd'\n    return array.sorted { $0.isOdd ? $0 > $1 : $0 < $1 }\n        \
    \                  ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var index = 0\n    var lastIndex = array.count - 1\n    while index\
    \ < lastIndex {\n        sum += array[index]\n        index++\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpxiibqa86.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n/tmp/tmpxiibqa86.swift:28:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpxiibqa86.swift:30:15: error: value of type\
    \ '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{ $0 < $1 }\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count < 2 {\n        return\
    \ result\n    }\n    if array.count > 2 {\n        let firstValue = array[0]\n\
    \        let lastValue = array[array.count - 1]\n        let firstSum = firstValue\
    \ + lastValue\n        let lastSum = firstValue - lastValue\n        if firstSum%2\
    \ == 1 {\n            result.sort(by: { (a, b) -> Bool in\n                return\
    \ a < b\n            })\n        } else {\n            result.sort(by: { (a, b)\
    \ -> Bool in\n                return a > b\n            })\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpz6jg8on7/tmpz6jg8on7.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05617b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05614afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05614af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05614ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6jg8on7                        0x000055f40948aa72 <unavailable> + 6770

    5    libc.so.6                          0x00002b05619a4460 __libc_start_main +
    245

    6    tmpz6jg8on7                        0x000055f40948a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{ $0\
    \ < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpu_q8gtzz.swift:25:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpu_q8gtzz.swift:27:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var swiftArray = [Int]()\n    for i in 0..<array.count {\n        sum\
    \ += array[i]\n        swiftArray.append(sum)\n    }\n    swiftArray = swiftArray.sorted(by:\
    \ {$0 < $1}).reversed()\n    return swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpez7qi7jf/tmpez7qi7jf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b86705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b863fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b863fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b863fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpez7qi7jf                        0x0000556a940cd996 <unavailable> + 6550

    5    libc.so.6                          0x00002b0b868f1460 __libc_start_main +
    245

    6    tmpez7qi7jf                        0x0000556a940cd379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var temp = 0\n    var\
    \ result = [Int]()\n    for element in array {\n        sum += element\n    }\n\
    \    for element in array {\n        if sum % 2 == 0 {\n            temp = element\n\
    \        } else {\n            temp = element * -1\n        }\n        if temp\
    \ > 0 {\n            result.append(temp)\n        }\n    }\n    for element in\
    \ result {\n        if element % 2 == 0 {\n            array.remove(at: j)\n \
    \           j += 1\n        } else {\n            array.remove(at: k)\n      \
    \      k += 1\n        }\n    }\n    for element in array {\n        if element\
    \ % 2 == 0 {\n            array.remove(at: j)\n            j += 1\n        } else\
    \ {\n            array.remove(at: k)\n            k += 1\n        }\n    }\n \
    \   for element in array {\n        if element % 2 == 0 {\n            array.remove(at:\
    \ j)\n            j += 1\n        } else {\n            array.remove(at: k)\n\
    \            k += 1\n        }\n    }\n    for element in array {\n        if\
    \ element % 2 == 0 {\n            array.remove(at: j)\n            j += 1\n  \
    \      } else {\n            array.remove(at: k)\n            k += 1\n       \
    \ }\n    }\n    for element in array {\n        if element % 2 == 0 {\n      \
    \      array.remove(at: j)\n            j += 1\n        } else {\n           \
    \ array.remove(at: k)\n            k += 1\n        }\n    }\n    for element in\
    \ array {\n        if element % 2 == 0 {\n            array.remove(at: j)\n  \
    \          j += 1\n        } else {\n            array.remove(at: k)\n       \
    \     k += 1\n        }\n    }\n    for element in array {\n        if element\
    \ % 2 == 0 {\n            array.remove(at: j)\n            j += 1\n        } else\
    \ {\n            array.remove(at: k)\n            k += 1\n        }\n    }\n \
    \   for element in array {\n        if element % 2 == 0 {\n            array.remove(at:\
    \ j)\n            j += 1\n        } else {\n            array.remove(at: k)\n\
    \            k += 1\n        }\n    }\n    for element in array {\n        if\
    \ element % 2 == 0 {\n            array.remove(at: j)\n            j += 1\n  \
    \      } else {\n            array.remove(at: k)\n            k += 1\n       \
    \ }\n    }\n    for element in array {\n        if element % 2 == 0 {\n      \
    \      array.remove(at: j)\n            j += 1\n        } else {\n           \
    \ array.remove(at: k)\n            k += 1\n        }\n    }\n    for element in\
    \ array {\n        if element % 2 == 0 {\n            array.remove(at: j)\n  \
    \          j += 1\n        } else {\n            array.remove(at: k)\n       \
    \     k += 1\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp2_awg9p3.swift:158:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])\n            \
    \                                                   ^\n/tmp/tmp2_awg9p3.swift:16:40:\
    \ note: to match this opening '{'\nfunc sort_array(array: [Int]) -> [Int] {\n\
    \                                       ^\n/tmp/tmp2_awg9p3.swift:41:19: error:\
    \ cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: j)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:44:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: k)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:50:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: j)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:53:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: k)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:59:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: j)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:62:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: k)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:68:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: j)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:71:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: k)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:77:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: j)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:80:19:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \            array.remove(at: k)\n            ~~~~~ ^\n/tmp/tmp2_awg9p3.swift:86:19:\
    \ error: cannot use mutating m"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0.compare($1) == .orderedAscending }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpyniboays.swift:17:30: error: value of type 'Int' has no member\
    \ 'compare'\n    return array.sorted { $0.compare($1) == .orderedAscending }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        let sum\
    \ = array[0]\n        let lastIndex = array.count - 1\n        for index in 1..<lastIndex\
    \ {\n            let value = array[index]\n            if sum % 2 == 0 {\n   \
    \             result.insert(value, at: index)\n            } else {\n        \
    \        result.remove(at: index)\n                result.insert(value, at: index)\n\
    \            }\n            sum += value\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpk3iqhp_1.swift:29:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += value\n            ~~~\
    \ ^\n/tmp/tmpk3iqhp_1.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let sum = array[0]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 1 {\n           \
    \ result = result.sorted()\n        } else {\n            result = result.sorted().reversed()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ sum = 0\n    var index = 0\n    var temp = 0\n    var result = [Int]()\n   \
    \ for element in array {\n        sum += element\n        if sum % 2 == 1 {\n\
    \            temp += element\n        }\n        if sum % 2 == 0 {\n         \
    \   temp -= element\n        }\n        result.append(temp)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvkd5i94w/tmpvkd5i94w.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90728a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b907259db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b907259d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b907259c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkd5i94w                        0x0000556172ae18f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b9072a92460 __libc_start_main +
    245

    6    tmpvkd5i94w                        0x0000556172ae12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpaebcfsr0.swift:25:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpaebcfsr0.swift:27:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var coswift: [Int] = []\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        coswift = array.reversed()\n\
    \    } else {\n        coswift = array\n    }\n    return coswift\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpy29doy7y/tmpy29doy7y.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b691e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b691df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b691df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b691df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy29doy7y                        0x000055f56b754856 <unavailable> + 6230

    5    libc.so.6                          0x00002b691e406460 __libc_start_main +
    245

    6    tmpy29doy7y                        0x000055f56b754239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    for value in array {\n        sum += value\n\
    \    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n    } else {\n   \
    \     array.sortInPlace({ $0 < $1 })\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgg4_8wup.swift:22:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpgg4_8wup.swift:24:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace({\
    \ $0 < $1 })\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let sum\
    \ = (array[0] + array[array.count - 1]) / 2\n    let isOdd = sum % 2 == 1\n  \
    \  return isOdd ? array.sorted { $0 < $1 } : array.sorted { $0 > $1 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sumOfFirst = array.first!\n    let\
    \ sumOfLast = array.last!\n    let sumOfFirstAndLast = sumOfFirst + sumOfLast\n\
    \    if sumOfFirstAndLast % 2 == 1 {\n        result = result.sorted()\n    }\
    \ else {\n        result = result.sorted().reversed()\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1487pbm8/tmp1487pbm8.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b610483fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6104536561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6104536286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b610453613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6104535bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1487pbm8                        0x0000559173c08fd1 <unavailable> + 8145

    6    tmp1487pbm8                        0x0000559173c0858d <unavailable> + 5517

    7    libc.so.6                          0x00002b6104a2b460 __libc_start_main +
    245

    8    tmp1487pbm8                        0x0000559173c08299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    let len = array.count\n    var swiftArray\
    \ = [Int]()\n    if sum % 2 == 1 {\n        for i in 0..<len {\n            swiftArray.append(array[i])\n\
    \        }\n        swiftArray.sortInPlace()\n    } else {\n        for i in 0..<len\
    \ {\n            swiftArray.append(array[i])\n        }\n        swiftArray.sortInPlace{\
    \ $0 < $1 }\n    }\n    return swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_2ezztd2.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmp_2ezztd2.swift:24:20:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        swiftArray.sortInPlace()\n\
    \        ~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp_2ezztd2.swift:29:20: error: value of\
    \ type '[Int]' has no member 'sortInPlace'\n        swiftArray.sortInPlace{ $0\
    \ < $1 }\n        ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        result.sort(by:\
    \ {$0 > $1})\n    } else {\n        result.sort(by: {$0 < $1})\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_p7xoce0/tmp_p7xoce0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7207aedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72077e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72077e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72077e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_p7xoce0                        0x000056233bede74d <unavailable> + 5965

    5    libc.so.6                          0x00002b7207cd9460 __libc_start_main +
    245

    6    tmp_p7xoce0                        0x000056233bede299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpaebcfsr0.swift:25:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpaebcfsr0.swift:27:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        let sum\
    \ = array[0]\n        for index in 1..<array.count {\n            sum += array[index]\n\
    \            if sum % 2 == 1 {\n                result.swapAt(index, 0)\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpk6g1ce55.swift:21:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += array[index]\n      \
    \      ~~~ ^\n/tmp/tmpk6g1ce55.swift:19:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let sum = array[0]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ sum = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var temp = 0\n   \
    \ var result = [Int]()\n    for element in array {\n        sum += element\n \
    \   }\n    for element in array {\n        if sum % 2 == 0 {\n            temp\
    \ = element\n        } else {\n            temp = element * -1\n        }\n  \
    \      if temp < array[j] {\n            result.append(temp)\n            j +=\
    \ 1\n        } else {\n            result.append(array[j])\n            j += 1\n\
    \        }\n    }\n    for element in result {\n        if element < array[k]\
    \ {\n            result.append(element)\n            k += 1\n        } else {\n\
    \            result.append(array[k])\n            k += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpkp0281cr/tmpkp0281cr.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b684cd13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b684ca0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b684ca0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b684ca097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkp0281cr                        0x00005596b43187dd <unavailable> + 6109

    5    libc.so.6                          0x00002b684ceff460 __libc_start_main +
    245

    6    tmpkp0281cr                        0x00005596b4318329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0.isOdd ? $0 < $1 : $0 > $1 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp0ogo8psj.swift:17:30: error: value of type 'Int' has no member\
    \ 'isOdd'\n    return array.sorted { $0.isOdd ? $0 < $1 : $0 > $1 }\n        \
    \                  ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        let sum\
    \ = array[0]\n        for index in 1..<array.count {\n            sum += array[index]\n\
    \            if sum % 2 == 1 {\n                result.insert(sum, at: 0)\n  \
    \          } else {\n                result.insert(sum, at: result.count - 1)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp65zbmteg.swift:21:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += array[index]\n      \
    \      ~~~ ^\n/tmp/tmp65zbmteg.swift:19:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let sum = array[0]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = array.count - 1\n    while i\
    \ < k {\n        sum += array[i]\n        if sum % 2 == 0 {\n            array[i],\
    \ array[j] = array[j], array[i]\n            i += 1\n            j -= 1\n    \
    \    } else {\n            array[i], array[k] = array[k], array[i]\n         \
    \   k -= 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpbdwa9w8x.swift:27:21: error: consecutive statements on a line must\
    \ be separated by ';'\n            array[i], array[j] = array[j], array[i]\n \
    \                   ^\n                    ;\n/tmp/tmpbdwa9w8x.swift:27:21: error:\
    \ expected expression\n            array[i], array[j] = array[j], array[i]\n \
    \                   ^\n/tmp/tmpbdwa9w8x.swift:31:21: error: consecutive statements\
    \ on a line must be separated by ';'\n            array[i], array[k] = array[k],\
    \ array[i]\n                    ^\n                    ;\n/tmp/tmpbdwa9w8x.swift:31:21:\
    \ error: expected expression\n            array[i], array[k] = array[k], array[i]\n\
    \                    ^\n/tmp/tmpbdwa9w8x.swift:27:18: warning: expression of type\
    \ 'Int' is unused\n            array[i], array[j] = array[j], array[i]\n     \
    \       ~~~~~^~~\n/tmp/tmpbdwa9w8x.swift:31:18: warning: expression of type 'Int'\
    \ is unused\n            array[i], array[k] = array[k], array[i]\n           \
    \ ~~~~~^~~\n/tmp/tmpbdwa9w8x.swift:21:9: warning: variable 'i' was never mutated;\
    \ consider changing to 'let' constant\n    var i = 0\n    ~~~ ^\n    let\n/tmp/tmpbdwa9w8x.swift:22:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpbdwa9w8x.swift:23:9:\
    \ warning: variable 'k' was never mutated; consider changing to 'let' constant\n\
    \    var k = array.count - 1\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var result = [Int]()\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n        if sum%2 == 1 {\n            temp += array[i]\n\
    \        }\n    }\n    result.insert(temp, at: 0)\n    result.insert(sum, at:\
    \ result.count-1)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpkz4e_g4_/tmpkz4e_g4_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734df6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734dc62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734dc62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734dc617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkz4e_g4_                        0x0000555b72d878d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b734e157460 __libc_start_main +
    245

    6    tmpkz4e_g4_                        0x0000555b72d872b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.sum\n    if sum % 2\
    \ == 1 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjh86vldk.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 1 {\n           \
    \ result = result.sorted()\n        } else {\n            result = result.sorted().reversed()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0.coswift() < $1.coswift() }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgnwslzoi.swift:17:30: error: value of type 'Int' has no member\
    \ 'coswift'\n    return array.sorted { $0.coswift() < $1.coswift() }\n       \
    \                   ~~ ^~~~~~~\n/tmp/tmpgnwslzoi.swift:17:45: error: value of\
    \ type 'Int' has no member 'coswift'\n    return array.sorted { $0.coswift() <\
    \ $1.coswift() }\n                                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var last = 0\n    var result = [Int]()\n    for value in array {\n\
    \        sum += value\n        if sum % 2 == 0 {\n            last = value\n \
    \       } else {\n            result.insert(last, at: 0)\n            last = value\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpsdg4qe_l/tmpsdg4qe_l.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a2763bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a27332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a27332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a273317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdg4qe_l                        0x0000563be6868996 <unavailable> + 6550

    5    libc.so.6                          0x00002b6a27827460 __libc_start_main +
    245

    6    tmpsdg4qe_l                        0x0000563be6868379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var sumOfFirst = 0\n    var sumOfLast = 0\n    var sortedArray = array\n\
    \    for element in array {\n        sum += element\n        sumOfFirst += element\n\
    \        sumOfLast += element\n    }\n    if sumOfFirst % 2 == 1 {\n        sortedArray\
    \ = sortedArray.sorted(by: { $0 > $1 })\n    } else {\n        sortedArray = sortedArray.sorted(by:\
    \ { $0 < $1 })\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzhpdwst0/tmpzhpdwst0.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8a6bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8a68aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8a68ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8a68ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhpdwst0                        0x000055887bb8e8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ae8a6da3460 __libc_start_main +
    245

    6    tmpzhpdwst0                        0x000055887bb8e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var result = [Int]()\n    for i in 0..<array.count {\n        sum +=\
    \ array[i]\n        result.append(sum)\n    }\n    if sum % 2 == 1 {\n       \
    \ result.sort()\n    } else {\n        result.reverse()\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzihn7xvg/tmpzihn7xvg.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2cf44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2cc3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2cc3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2cc3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzihn7xvg                        0x000055a2d86e5a86 <unavailable> + 6790

    5    libc.so.6                          0x00002b7c2d130460 __libc_start_main +
    245

    6    tmpzihn7xvg                        0x000055a2d86e5469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var sum2 = 0\n    var result = [Int]()\n    for element in array {\n\
    \        sum += element\n        sum2 += element\n    }\n    if sum2 % 2 == 1\
    \ {\n        result.sortInPlace()\n    } else {\n        result.sortInPlace({\
    \ $0 < $1 })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp7tndiwjr.swift:28:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp7tndiwjr.swift:30:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace({\
    \ $0 < $1 })\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var result\
    \ = array\n    var sum = 0\n    for i in 0..<array.count {\n        sum += array[i]\n\
    \    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n    } else {\n\
    \        result = result.sorted().reversed()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjdev0kv6/tmpjdev0kv6.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5773238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5772f2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5772f2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5772f2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjdev0kv6                        0x0000564bfe149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b5773424460 __libc_start_main +
    245

    6    tmpjdev0kv6                        0x0000564bfe149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var result = [Int]()\n    for element in array {\n\
    \        sum += element\n    }\n    if sum % 2 == 0 {\n        for element in\
    \ array {\n            temp += element\n        }\n        for element in array\
    \ {\n            if temp > sum {\n                result.append(element)\n   \
    \         }\n            temp -= element\n        }\n    } else {\n        for\
    \ element in array {\n            temp -= element\n        }\n        for element\
    \ in array {\n            if temp < sum {\n                result.append(element)\n\
    \            }\n            temp += element\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp06m4uyhf/tmp06m4uyhf.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b750cb58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b750c84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b750c84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b750c84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06m4uyhf                        0x00005650f20fa8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b750cd44460 __libc_start_main +
    245

    6    tmp06m4uyhf                        0x00005650f20fa2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var result = [Int]()\n    for value in array {\n\
    \        sum += value\n    }\n    if sum % 2 == 0 {\n        for value in array\
    \ {\n            temp += value\n            if temp % 2 == 0 {\n             \
    \   result.insert(value, at: 0)\n                temp -= value\n            }\n\
    \        }\n    } else {\n        for value in array {\n            temp += value\n\
    \            if temp % 2 == 1 {\n                result.insert(value, at: 0)\n\
    \                temp -= value\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e9oo3od/tmp0e9oo3od.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3f50c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3f4dbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3f4dbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3f4dbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e9oo3od                        0x000055c2701938f6 <unavailable> + 6390

    5    libc.so.6                          0x00002ba3f52b1460 __libc_start_main +
    245

    6    tmp0e9oo3od                        0x000055c2701932d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var sum2 = 0\n    var temp = 0\n    var temp2 = 0\n    var result =\
    \ [Int]()\n    for element in array {\n        sum += element\n    }\n    for\
    \ element in array {\n        sum2 += element\n    }\n    if sum % 2 == 0 {\n\
    \        for element in array {\n            temp += element\n        }\n    \
    \    for element in array {\n            temp2 += element\n        }\n       \
    \ if temp2 > sum {\n            for element in array {\n                result.append(element)\n\
    \            }\n        } else {\n            for element in array {\n       \
    \         result.append(element)\n            }\n        }\n    } else {\n   \
    \     for element in array {\n            temp += element\n        }\n       \
    \ for element in array {\n            temp2 += element\n        }\n        if\
    \ temp2 > sum {\n            for element in array {\n                result.append(element)\n\
    \            }\n        } else {\n            for element in array {\n       \
    \         result.append(element)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphzyu8hfd/tmphzyu8hfd.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae2101fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae20d16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae20d16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae20d157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzyu8hfd                        0x000055a95b2388f6 <unavailable> + 6390

    5    libc.so.6                          0x00002aae2120b460 __libc_start_main +
    245

    6    tmphzyu8hfd                        0x000055a95b2382d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var index = 0\n    var result = [Int]()\n    for\
    \ element in array {\n        sum += element\n        if sum > 0 {\n         \
    \   temp += element\n        }\n        if sum % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptqbmn9qx/tmptqbmn9qx.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b250dd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b250da19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b250da19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b250da187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqbmn9qx                        0x000055b56f6a8a16 <unavailable> + 6678

    5    libc.so.6                          0x00002b250df0e460 __libc_start_main +
    245

    6    tmptqbmn9qx                        0x000055b56f6a83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sum\
    \ = 0\n    var temp = 0\n    var index = 0\n    var result = [Int]()\n    for\
    \ element in array {\n        sum += element\n        if sum % 2 == 1 {\n    \
    \        temp += element\n        } else {\n            temp -= element\n    \
    \    }\n        result[index] = temp\n        index++\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpwcgawqtn.swift:32:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ sum = 0\n    var index = 0\n    var temp = 0\n    var result = [Int]()\n   \
    \ while index < array.count {\n        sum += array[index]\n        if sum % 2\
    \ == 1 {\n            temp += array[index]\n        }\n        else {\n      \
    \      temp -= array[index]\n        }\n        result.append(temp)\n        index++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpa3rtcygw.swift:33:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for element in array\
    \ {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlace(by: >)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpwdshbhqd.swift:23:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpwdshbhqd.swift:25:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace(by:\
    \ >)\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for element in array\
    \ {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sort(by:\
    \ {$0 > $1})\n    } else {\n        result.sort(by: {$0 < $1})\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmprojn2uqn/tmprojn2uqn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc93687c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc9337eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc9337e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc9337d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprojn2uqn                        0x00005627aec3a74d <unavailable> + 5965

    5    libc.so.6                          0x00002acc93873460 __libc_start_main +
    245

    6    tmprojn2uqn                        0x00005627aec3a299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
