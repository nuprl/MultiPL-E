language: swift
name: HumanEval_47_median
results:
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l.count\
    \ / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpura5bka2.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpudbvgfjz.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpudbvgfjz.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n\
    \    let right = l[mid..<n]\n    return median(left, right) + median(right, left)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_vxxp35j.swift:15:25: error: extra argument in call\n    return\
    \ median(left, right) + median(right, left) / 2\n                 ~~~~~~~^~~~~~\n\
    /tmp/tmp_vxxp35j.swift:15:19: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left, right) + median(right,\
    \ left) / 2\n                  ^\n/tmp/tmp_vxxp35j.swift:15:48: error: extra argument\
    \ in call\n    return median(left, right) + median(right, left) / 2\n        \
    \                               ~~~~~~~~^~~~~\n/tmp/tmp_vxxp35j.swift:15:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(left, right) + median(right, left) / 2\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n/2]\n\
    \    } else {\n        let mid = Double(l.count/2)\n        return l.sorted()[mid]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpph4hd9m4.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n/2]\n       \
    \        ~~~~~~~~~~^~~~~\n               Double(        )\n/tmp/tmpph4hd9m4.swift:16:26:\
    \ error: no exact matches in call to subscript \n        return l.sorted()[mid]\n\
    \                         ^\n/tmp/tmpph4hd9m4.swift:16:26: note: found candidate\
    \ with type '(Int) -> Int'\n        return l.sorted()[mid]\n                 \
    \        ^\n/tmp/tmpph4hd9m4.swift:16:26: note: found candidate with type '(Range<Int>)\
    \ -> ArraySlice<Int>'\n        return l.sorted()[mid]\n                      \
    \   ^\n/tmp/tmpph4hd9m4.swift:16:26: note: found candidate with type '((UnboundedRange_)\
    \ -> ()) -> ArraySlice<Int>'\n        return l.sorted()[mid]\n               \
    \          ^\n/tmp/tmpph4hd9m4.swift:16:26: error: no 'subscript' candidates produce\
    \ the expected contextual result type 'Double'\n        return l.sorted()[mid]\n\
    \                         ^\nSwift.Array:16:23: note: 'subscript(_:)' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    @inlinable public\
    \ subscript(index: Int) -> Element { get set }\n                      ^\nSwift.Array:17:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(bounds: Range<Int>) ->\
    \ ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get }\n                      ^\nSwift.MutableCollection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4tlqf5r6.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4tlqf5r6.swift:13:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    if m2 < m1 {\n        return m1\n    }\n    return\
    \ m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmph42_ahbn.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmph42_ahbn.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return m1\n\
    \               ^~\n               Double( )\n/tmp/tmph42_ahbn.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return m2\n           ^~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpthncglc_/tmpthncglc_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385079bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3850492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3850492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38504917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthncglc_                        0x000056552f5b56dd <unavailable> + 5853

    5    libc.so.6                          0x00002b3850987460 __libc_start_main +
    245

    6    tmpthncglc_                        0x000056552f5b5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  var mid = n / 2\n    var left = l[0:mid]\n    var right = l[mid:n]\n    return\
    \ median(left) + median(right) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu55ptltw.swift:16:19: error: expected ',' separator\n    var left\
    \ = l[0:mid]\n                  ^\n                  ,\n/tmp/tmpu55ptltw.swift:16:19:\
    \ error: expected expression in list of expressions\n    var left = l[0:mid]\n\
    \                  ^\n/tmp/tmpu55ptltw.swift:13:17: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n        return l[0]\n    \
    \           ~^~~\n               Double( )\n/tmp/tmpu55ptltw.swift:17:18: error:\
    \ extraneous argument label 'mid:' in subscript\n    var right = l[mid:n]\n  \
    \               ^~~~~\n                  \n/tmp/tmpu55ptltw.swift:18:19: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2\n                  ^\n                  l: \n/tmp/tmpu55ptltw.swift:18:19:\
    \ error: cannot convert value of type 'Int' to expected argument type '[Int]'\n\
    \    return median(left) + median(right) / 2\n                  ^\n/tmp/tmpu55ptltw.swift:18:34:\
    \ error: missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2\n                                 ^\n                                 l:\
    \ \n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpixnbcz9q.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpixnbcz9q.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return median(left) + median(right) / 2.0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpounegx_6.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpounegx_6.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpounegx_6.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpounegx_6.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count\
    \ - 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfrpb0d7c.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpfrpb0d7c.swift:13:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(0)\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n \
    \   let right = l[mid..<n]\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxsmssedw.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824426
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpthncglc_/tmpthncglc_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385079bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3850492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3850492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38504917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthncglc_                        0x000056552f5b56dd <unavailable> + 5853

    5    libc.so.6                          0x00002b3850987460 __libc_start_main +
    245

    6    tmpthncglc_                        0x000056552f5b5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpoksu53g2.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpoksu53g2.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpelhzplnn.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let m1 = median(l[0..<mid])\n\
    \    let m2 = median(l[mid..<n])\n    return (m1 + m2) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppc9_lu22.swift:13:21: error: missing argument label 'l:' in call\n\
    \    let m1 = median(l[0..<mid])\n                    ^\n                    l:\
    \ \n/tmp/tmppc9_lu22.swift:13:22: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    let m1 = median(l[0..<mid])\n       \
    \              ^\n/tmp/tmppc9_lu22.swift:14:21: error: missing argument label\
    \ 'l:' in call\n    let m2 = median(l[mid..<n])\n                    ^\n     \
    \               l: \n/tmp/tmppc9_lu22.swift:14:22: error: cannot convert value\
    \ of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let m2 = median(l[mid..<n])\n\
    \                     ^\n/tmp/tmppc9_lu22.swift:15:16: error: cannot convert value\
    \ of type 'String' to expected argument type 'Double'\n    return (m1 + m2) /\
    \ 2.0\n               ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfxr2e85s.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    return sorted[mid]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo9o_o9pu.swift:10:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[mid]\n           ~~~~~~^~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var low = Double(l.first!)\n\
    \    var high = Double(l.last!)\n    var midVal = Double(l.first!)\n    var lowVal\
    \ = Double(l.first!)\n    var highVal = Double(l.last!)\n    for index in 0..<n\
    \ {\n        if index < mid {\n            lowVal = Double(l.first!)\n       \
    \     highVal = Double(l.last!)\n        } else {\n            lowVal = Double(l.first!)\n\
    \            midVal = Double(l.first!)\n            highVal = Double(l.last!)\n\
    \        }\n        if index < mid {\n            low = lowVal + (Double(l.first!)\
    \ - lowVal) * (Double(l.first!) - lowVal) / Double(n - 1)\n            high =\
    \ highVal + (Double(l.last!) - highVal) * (Double(l.last!) - highVal) / Double(n\
    \ - 1)\n        } else {\n            low = lowVal + (Double(l.first!) - lowVal)\
    \ * (Double(l.first!) - lowVal) / Double(n - 1)\n            mid = midVal + (Double(l.first!)\
    \ - midVal) * (Double(l.first!) - midVal) / Double(n - 1)\n            high =\
    \ highVal + (Double(l.last!) - highVal) * (Double(l.last!) - highVal) / Double(n\
    \ - 1)\n        }\n    }\n    return low + (high - low) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwp9nb0ru.swift:32:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            mid = midVal + (Double(l.first!) - midVal) * (Double(l.first!)\
    \ - midVal) / Double(n - 1)\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwhky_wcx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  if n % 2 == 0 {\n        return median(l[1..<(n / 2)])\n    }\n    return median(l[(n\
    \ / 2)..<n])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk3kbyn4x.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpk3kbyn4x.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n / 2)])\n                \
    \      ^\n                      l: \n/tmp/tmpk3kbyn4x.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n / 2)])\n                       ^\n/tmp/tmpk3kbyn4x.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(l[(n / 2)..<n])\n\
    \                  ^\n                  l: \n/tmp/tmpk3kbyn4x.swift:18:20: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[(n / 2)..<n])\n                   ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpscas4g6k.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpscas4g6k.swift:12:18:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n      \
    \           ^\n                Double(             )\n/tmp/tmpscas4g6k.swift:12:38:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n      \
    \                               ^\n               Double(                    \
    \                    )\n/tmp/tmpscas4g6k.swift:12:61: error: value of type 'Int'\
    \ has no member '0'\n        return (l[(l.count - 1) / 2] - l[(l.count - 2) /\
    \ 2].0) / 2.0\n                                       ~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpelhzplnn.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n\
    \    let right = l.suffix(mid)\n    return median(left) + median(right) / 2.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2qwa4y2k.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmp2qwa4y2k.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmp2qwa4y2k.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmp2qwa4y2k.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4tlqf5r6.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp4tlqf5r6.swift:13:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpje8mwp9d.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpje8mwp9d.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpw7jpy5m2.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpw7jpy5m2.swift:12:34:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2.0\n        \
    \                         ^\n           Double(                              \
    \            )\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2.0\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_2zt14xv.swift:11:22: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2.0\n                     ^\n               Double(                )\n/tmp/tmp_2zt14xv.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0rk4e0kj.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0rk4e0kj.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return Double(l.first!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcm14905o/tmpcm14905o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05c2e44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c2b3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c2b3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c2b3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcm14905o                        0x0000561707545661 <unavailable> + 5729

    5    libc.so.6                          0x00002b05c3030460 __libc_start_main +
    245

    6    tmpcm14905o                        0x00005617075452a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpoksu53g2.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpoksu53g2.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpii8fik0l.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpii8fik0l.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n\
    \    if n % 2 == 0 {\n        return l[mid]\n    } else {\n        let m1 = median(l.prefix(mid))\n\
    \        let m2 = median(l.suffix(mid))\n        return m1 + m2 - (m1 + m2) /\
    \ 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9khm1_wu.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp9khm1_wu.swift:13:25: error: missing argument\
    \ label 'l:' in call\n        let m1 = median(l.prefix(mid))\n               \
    \         ^\n                        l: \n/tmp/tmp9khm1_wu.swift:14:25: error:\
    \ missing argument label 'l:' in call\n        let m2 = median(l.suffix(mid))\n\
    \                        ^\n                        l: \n/tmp/tmp9khm1_wu.swift:15:19:\
    \ error: cannot convert value of type 'String' to expected argument type 'Double'\n\
    \        return m1 + m2 - (m1 + m2) / 2\n                  ^\n/tmp/tmp9khm1_wu.swift:15:30:\
    \ error: cannot convert value of type 'String' to expected argument type 'Double'\n\
    \        return m1 + m2 - (m1 + m2) / 2\n                             ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l[l.count / 2])\n    }\n    return Double(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpd8ypm5wp/tmpd8ypm5wp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ce1bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6cdeb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6cdeb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6cdeb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8ypm5wp                        0x000056162683e67d <unavailable> + 5757

    5    libc.so.6                          0x00002ab6ce3a8460 __libc_start_main +
    245

    6    tmpd8ypm5wp                        0x000056162683e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwhky_wcx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpthncglc_/tmpthncglc_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385079bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3850492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3850492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38504917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthncglc_                        0x000056552f5b56dd <unavailable> + 5853

    5    libc.so.6                          0x00002b3850987460 __libc_start_main +
    245

    6    tmpthncglc_                        0x000056552f5b5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  if n % 2 == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    return median(l[(n\
    \ - 1)..<n])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpz269p5x0.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpz269p5x0.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n - 1)])\n                \
    \      ^\n                      l: \n/tmp/tmpz269p5x0.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n - 1)])\n                       ^\n/tmp/tmpz269p5x0.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(l[(n - 1)..<n])\n\
    \                  ^\n                  l: \n/tmp/tmpz269p5x0.swift:18:20: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[(n - 1)..<n])\n                   ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for x in l[1..] {\n        if x < low {\n\
    \            low = x\n        }\n        if x > high {\n            high = x\n\
    \        }\n    }\n    return (high + low) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpn8l3zzwe.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpn8l3zzwe.swift:17:17: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for x in l[1..] {\n                ^~\n\
    \                ...\n/tmp/tmpn8l3zzwe.swift:25:25: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n    return (high + low) /\
    \ 2\n           ~~~~~~~~~~~~~^~~\n           Double(         )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    if m2 < m1 {\n        return m1\n    }\n    return\
    \ m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu95vkq0h.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpu95vkq0h.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return m1\n\
    \               ^~\n               Double( )\n/tmp/tmpu95vkq0h.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return m2\n           ^~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_c8xv8a9/tmp_c8xv8a9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b166577dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1665474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1665474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16654737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c8xv8a9                        0x00005605026af501 <unavailable> + 5377

    5    libc.so.6                          0x00002b1665969460 __libc_start_main +
    245

    6    tmp_c8xv8a9                        0x00005605026af149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0bhy21l5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0bhy21l5.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpii8fik0l.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpii8fik0l.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwif44zzh/tmpwif44zzh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d9b465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d9b15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d9b15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d9b15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif44zzh                        0x0000561d568e268d <unavailable> + 5773

    5    libc.so.6                          0x00002b0d9b651460 __libc_start_main +
    245

    6    tmpwif44zzh                        0x0000561d568e21e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwhky_wcx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9f17h5x7.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp9f17h5x7.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  var m = Double.nan\n    for x in l {\n        if Double.isNaN(m) || x > m {\n\
    \            m = x\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpb16a_j1l.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpb16a_j1l.swift:17:19: error: cannot call value\
    \ of non-function type 'Bool'\n        if Double.isNaN(m) || x > m {\n       \
    \           ^\n/tmp/tmpb16a_j1l.swift:17:12: error: instance member 'isNaN' cannot\
    \ be used on type 'Double'; did you mean to use a value of this type instead?\n\
    \        if Double.isNaN(m) || x > m {\n           ^~~~~~\n/tmp/tmpb16a_j1l.swift:17:35:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if Double.isNaN(m) || x > m {\n                                  ^\n\
    \                                  Int( )\n/tmp/tmpb16a_j1l.swift:18:17: error:\
    \ cannot assign value of type 'Int' to type 'Double'\n            m = x\n    \
    \            ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    var m = Double(0)\n    for x in l {\n        m += x\n\
    \    }\n    m /= Double(n)\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdzotjj83.swift:14:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m += x\n             ^\n       \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9mmpvpa5.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpii8fik0l.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpii8fik0l.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n/2]\n\
    \    }\n    let mid = Double(l.count/2)\n    return l.sorted()[mid]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7s60lqrs.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n/2]\n       \
    \        ~~~~~~~~~~^~~~~\n               Double(        )\n/tmp/tmp7s60lqrs.swift:16:22:\
    \ error: no exact matches in call to subscript \n    return l.sorted()[mid]\n\
    \                     ^\n/tmp/tmp7s60lqrs.swift:16:22: note: found candidate with\
    \ type '(Int) -> Int'\n    return l.sorted()[mid]\n                     ^\n/tmp/tmp7s60lqrs.swift:16:22:\
    \ note: found candidate with type '(Range<Int>) -> ArraySlice<Int>'\n    return\
    \ l.sorted()[mid]\n                     ^\n/tmp/tmp7s60lqrs.swift:16:22: note:\
    \ found candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n \
    \   return l.sorted()[mid]\n                     ^\n/tmp/tmp7s60lqrs.swift:16:22:\
    \ error: no 'subscript' candidates produce the expected contextual result type\
    \ 'Double'\n    return l.sorted()[mid]\n                     ^\nSwift.Array:16:23:\
    \ note: 'subscript(_:)' produces 'Int', not the expected contextual result type\
    \ 'Double'\n    @inlinable public subscript(index: Int) -> Element { get set }\n\
    \                      ^\nSwift.Array:17:23: note: 'subscript(_:)' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type 'Double'\n    @inlinable public subscript(bounds:\
    \ Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get }\n                      ^\nSwift.MutableCollection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwhky_wcx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_kvhq2y4.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpudbvgfjz.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpudbvgfjz.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n\
    \    let right = l.suffix(mid)\n    return median(left) + median(right) / 2.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2qwa4y2k.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmp2qwa4y2k.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmp2qwa4y2k.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmp2qwa4y2k.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpteo6zxdn.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let middle = n / 2\n\
    \    if n % 2 == 0 {\n        return l[middle]\n    } else {\n        return (l[middle]\
    \ + l[middle - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg6c__7y2.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[middle]\n             \
    \  ~^~~~~~~~\n               Double(  )\n/tmp/tmpg6c__7y2.swift:13:44: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \     return (l[middle] + l[middle - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                        )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_kvhq2y4.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return Double(sorted[0])\n    }\n    return Double(sorted[(sorted.count\
    \ - 1) / 2]) + Double(sorted[sorted.count / 2 - 1]) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpfa04h67i/tmpfa04h67i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a0ed4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a0ea44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a0ea44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a0ea437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfa04h67i                        0x0000557b380e9501 <unavailable> + 5377

    5    libc.so.6                          0x00002b0a0ef39460 __libc_start_main +
    245

    6    tmpfa04h67i                        0x0000557b380e9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyuvstamr.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpyuvstamr.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var low = Double(l.first!)\n\
    \    var high = Double(l.last!)\n    if n % 2 == 0 {\n        return low + (high\
    \ - low) / 2\n    }\n    return high - (high - low) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpk04ui6_a/tmpk04ui6_a.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba432fa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba432c99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba432c99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba432c987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk04ui6_a                        0x0000561c13363541 <unavailable> + 5441

    5    libc.so.6                          0x00002ba43318e460 __libc_start_main +
    245

    6    tmpk04ui6_a                        0x0000561c13363189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n   \
    \ }\n    var mid = n/2\n    var left = l[:mid]\n    var right = l[mid:]\n    var\
    \ m1 = median(left)\n    var m2 = median(right)\n    if m1 < m2 {\n        return\
    \ m1\n    }\n    return m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe600p990.swift:16:18: error: expected expression in list of expressions\n\
    \    var left = l[:mid]\n                 ^\n/tmp/tmpe600p990.swift:17:23: error:\
    \ expected expression in list of expressions\n    var right = l[mid:]\n      \
    \                ^\n/tmp/tmpe600p990.swift:13:17: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n        return l[n/2]\n  \
    \             ~^~~~~\n               Double( )\n/tmp/tmpe600p990.swift:16:22:\
    \ error: missing argument for parameter #1 in call\n    var left = l[:mid]\n \
    \                    ^\n                     <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmpe600p990.swift:17:23:\
    \ error: missing argument for parameter #1 in call\n    var right = l[mid:]\n\
    \                      ^\n                      <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmpe600p990.swift:18:21:\
    \ error: missing argument label 'l:' in call\n    var m1 = median(left)\n    \
    \                ^\n                    l: \n/tmp/tmpe600p990.swift:19:21: error:\
    \ missing argument label 'l:' in call\n    var m2 = median(right)\n          \
    \          ^\n                    l: \n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  let mid = n / 2\n    let left = median(l[0..<mid])\n    let right = median(l[mid..<n])\n\
    \    return (left + right) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwwtnm32s.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpwwtnm32s.swift:16:23: error: missing argument\
    \ label 'l:' in call\n    let left = median(l[0..<mid])\n                    \
    \  ^\n                      l: \n/tmp/tmpwwtnm32s.swift:16:24: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let left\
    \ = median(l[0..<mid])\n                       ^\n/tmp/tmpwwtnm32s.swift:17:24:\
    \ error: missing argument label 'l:' in call\n    let right = median(l[mid..<n])\n\
    \                       ^\n                       l: \n/tmp/tmpwwtnm32s.swift:17:25:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let right = median(l[mid..<n])\n                        ^\n/tmp/tmpwwtnm32s.swift:18:18:\
    \ error: cannot convert value of type 'String' to expected argument type 'Double'\n\
    \    return (left + right) / 2\n                 ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpoksu53g2.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpoksu53g2.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l.count\
    \ / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjygjpvfo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwif44zzh/tmpwif44zzh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d9b465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d9b15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d9b15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d9b15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif44zzh                        0x0000561d568e268d <unavailable> + 5773

    5    libc.so.6                          0x00002b0d9b651460 __libc_start_main +
    245

    6    tmpwif44zzh                        0x0000561d568e21e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l.first! + l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp5hqnyzhy/tmp5hqnyzhy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8d332ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8d3021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8d3021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8d30207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hqnyzhy                        0x000055586b27d6dd <unavailable> + 5853

    5    libc.so.6                          0x00002ad8d3516460 __libc_start_main +
    245

    6    tmp5hqnyzhy                        0x000055586b27d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return Double(l[n/2])\n\
    \    }\n    let mid = n / 2\n    return Double(l[mid]) + Double(l[mid-1]) / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpudi0p4a7/tmpudi0p4a7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b486429bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4863f92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4863f92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4863f917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudi0p4a7                        0x0000559a93b534b1 <unavailable> + 5297

    5    libc.so.6                          0x00002b4864487460 __libc_start_main +
    245

    6    tmpudi0p4a7                        0x0000559a93b530f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpje8mwp9d.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpje8mwp9d.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[l.count /\
    \ 2 - 1] + l[l.count / 2]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzfrmz1z0.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpzfrmz1z0.swift:12:32:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n                    \
    \           ^\n           Double(                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    var\
    \ a = Double(l.first!)\n    var b = Double(l.last!)\n    var c = Double(l.first!)\n\
    \    var d = Double(l.last!)\n    while mid > 0 {\n        if a > b {\n      \
    \      swap(&a, &b)\n        }\n        if b > c {\n            swap(&b, &c)\n\
    \        }\n        mid--\n    }\n    return a + (b - c) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkeiojrjr.swift:24:12: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        mid--\n           ^~\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  let mid = n / 2\n    let left = l[0 ..< mid]\n    let right = l[mid..<n]\n\
    \    let midVal = median(left)\n    let leftVal = median(right)\n    if leftVal\
    \ < midVal {\n        return leftVal\n    } else {\n        return midVal\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpna0_hbf8.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpna0_hbf8.swift:18:25: error: missing argument\
    \ label 'l:' in call\n    let midVal = median(left)\n                        ^\n\
    \                        l: \n/tmp/tmpna0_hbf8.swift:18:25: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let midVal\
    \ = median(left)\n                        ^\n/tmp/tmpna0_hbf8.swift:19:26: error:\
    \ missing argument label 'l:' in call\n    let leftVal = median(right)\n     \
    \                    ^\n                         l: \n/tmp/tmpna0_hbf8.swift:19:26:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let leftVal = median(right)\n                         ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var mid = n / 2\n    var left = l.subarray(0,\
    \ mid)\n    var right = l.subarray(mid)\n    return median(left) + median(right)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjn4riy_5.swift:13:18: error: value of type '[Int]' has no member\
    \ 'subarray'\n    var left = l.subarray(0, mid)\n               ~ ^~~~~~~~\n/tmp/tmpjn4riy_5.swift:14:19:\
    \ error: value of type '[Int]' has no member 'subarray'\n    var right = l.subarray(mid)\n\
    \                ~ ^~~~~~~~\n/tmp/tmpjn4riy_5.swift:15:19: error: missing argument\
    \ label 'l:' in call\n    return median(left) + median(right) / 2.0\n        \
    \          ^\n                  l: \n/tmp/tmpjn4riy_5.swift:15:34: error: missing\
    \ argument label 'l:' in call\n    return median(left) + median(right) / 2.0\n\
    \                                 ^\n                                 l: \n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n    return Double(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp8pi4635_/tmp8pi4635_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cd3526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cd321db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cd321d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cd321c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pi4635_                        0x000055a6ebbdb5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b7cd3712460 __libc_start_main +
    245

    6    tmp8pi4635_                        0x000055a6ebbdb219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpavhm6to_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpavhm6to_.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(0)\n    }\n    if n % 2 == 0 {\n        return Double(l[n/2])\n\
    \    }\n    var low = Double(0)\n    var high = Double(0)\n    var mid = Double(0)\n\
    \    for x in l {\n        if x < low {\n            low = x\n        }\n    \
    \    if x > high {\n            high = x\n        }\n        if x < mid {\n  \
    \          mid = x\n        }\n    }\n    return Double(mid)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppmxk30cl.swift:19:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < low {\n           ~ ^\
    \ ~~~\n/tmp/tmppmxk30cl.swift:19:14: note: overloads for '<' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        if x < low {\n     \
    \        ^\n/tmp/tmppmxk30cl.swift:20:19: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n            low = x\n                  ^\n               \
    \   Double( )\n/tmp/tmppmxk30cl.swift:22:14: error: binary operator '>' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n        if x > high {\n \
    \          ~ ^ ~~~~\n/tmp/tmppmxk30cl.swift:22:14: note: overloads for '>' exist\
    \ with these partially matching parameter lists: (Int, Int)\n        if x > high\
    \ {\n             ^\n/tmp/tmppmxk30cl.swift:23:20: error: cannot assign value\
    \ of type 'Int' to type 'Double'\n            high = x\n                   ^\n\
    \                   Double( )\n/tmp/tmppmxk30cl.swift:25:14: error: binary operator\
    \ '<' cannot be applied to operands of type 'Int' and 'Double'\n        if x <\
    \ mid {\n           ~ ^ ~~~\n/tmp/tmppmxk30cl.swift:25:14: note: overloads for\
    \ '<' exist with these partially matching parameter lists: (Int, Int)\n      \
    \  if x < mid {\n             ^\n/tmp/tmppmxk30cl.swift:26:19: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n            mid = x\n                \
    \  ^\n                  Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let leftMedian = median(l[0..<mid])\n\
    \    let rightMedian = median(l[mid..<n])\n    return Double(leftMedian) + Double(rightMedian)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp252bnabq.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l[0..<mid])\n                            ^\n    \
    \                        l: \n/tmp/tmp252bnabq.swift:13:30: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let leftMedian\
    \ = median(l[0..<mid])\n                             ^\n/tmp/tmp252bnabq.swift:14:30:\
    \ error: missing argument label 'l:' in call\n    let rightMedian = median(l[mid..<n])\n\
    \                             ^\n                             l: \n/tmp/tmp252bnabq.swift:14:31:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let rightMedian = median(l[mid..<n])\n                        \
    \      ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfxr2e85s.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.sortedLastIndex { ($0 > l[($0 - 1) / 2]) })\n\
    \    } else {\n        return Double(l.sortedLastIndex { ($0 > l[0]) })\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppfflo4fv.swift:11:25: error: value of type '[Int]' has no member\
    \ 'sortedLastIndex'\n        return Double(l.sortedLastIndex { ($0 > l[($0 - 1)\
    \ / 2]) })\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmppfflo4fv.swift:13:25:\
    \ error: value of type '[Int]' has no member 'sortedLastIndex'\n        return\
    \ Double(l.sortedLastIndex { ($0 > l[0]) })\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824392
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpii8fik0l.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpii8fik0l.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp12cobf5x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp12cobf5x.swift:12:34:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2.0\n        \
    \                         ^\n           Double(                              \
    \            )\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwif44zzh/tmpwif44zzh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d9b465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d9b15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d9b15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d9b15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif44zzh                        0x0000561d568e268d <unavailable> + 5773

    5    libc.so.6                          0x00002b0d9b651460 __libc_start_main +
    245

    6    tmpwif44zzh                        0x0000561d568e21e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprrdxti7_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmprrdxti7_.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return m1\n\
    \               ^~\n               Double( )\n/tmp/tmprrdxti7_.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return m2\n           ^~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpii8fik0l.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpii8fik0l.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_kvhq2y4.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let mid = sorted.count / 2\n    return\
    \ Double(sorted[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpaemny_id/tmpaemny_id.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52872b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5286fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5286fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5286faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaemny_id                        0x00005598646516dd <unavailable> + 5853

    5    libc.so.6                          0x00002b52874a5460 __libc_start_main +
    245

    6    tmpaemny_id                        0x0000559864651239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824382
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpje8mwp9d.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpje8mwp9d.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l[mid])\
    \ + Double(l[mid-1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpi904rrdl.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    var m = Double(l.count / 2)\n    if n % 2 == 0 {\n  \
    \      return l[m]\n    }\n    var lo = Double(0)\n    var hi = Double(0)\n  \
    \  for x in l {\n        if x < lo {\n            lo = x\n        }\n        if\
    \ x > hi {\n            hi = x\n        }\n    }\n    return lo + (hi - lo) /\
    \ 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfxzl1g93.swift:14:17: error: no exact matches in call to subscript\
    \ \n        return l[m]\n                ^\n/tmp/tmpfxzl1g93.swift:14:17: note:\
    \ found candidate with type '(Int) -> Int'\n        return l[m]\n            \
    \    ^\n/tmp/tmpfxzl1g93.swift:14:17: note: found candidate with type '(Range<Int>)\
    \ -> ArraySlice<Int>'\n        return l[m]\n                ^\n/tmp/tmpfxzl1g93.swift:14:17:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n\
    \        return l[m]\n                ^\n/tmp/tmpfxzl1g93.swift:14:17: error:\
    \ no 'subscript' candidates produce the expected contextual result type 'Double'\n\
    \        return l[m]\n                ^\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ produces 'Int', not the expected contextual result type 'Double'\n    @inlinable\
    \ public subscript(index: Int) -> Element { get set }\n                      ^\n\
    Swift.Array:17:23: note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected\
    \ contextual result type 'Double'\n    @inlinable public subscript(bounds: Range<Int>)\
    \ -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get }\n                      ^\nSwift.MutableCollection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get set }\n                      ^\n/tmp/tmpfxzl1g93.swift:19:14:\
    \ error: binary operator '<' cannot be applied to operands of type 'Int' and 'Double'\n\
    \        if x < lo {\n           ~ ^ ~~\n/tmp/tmpfxzl1g93.swift:19:14: note: overloads\
    \ for '<' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if x < lo {\n             ^\n/tmp/tmpfxzl1g93.swift:20:18: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n            lo = x\n          \
    \       ^\n                 Double( )\n/tmp/tmpfxzl1g93.swif"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2\
    \ == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqdoyvadp.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpqdoyvadp.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[mid]\n\
    \               ~^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l[mid])\
    \ + Double(l[mid-1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbt0d_6m8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7b4msuaa.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpge74837m.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpge74837m.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n\
    \    let right = l[mid..<n]\n    return median(left, right) + median(right, left)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_vxxp35j.swift:15:25: error: extra argument in call\n    return\
    \ median(left, right) + median(right, left) / 2\n                 ~~~~~~~^~~~~~\n\
    /tmp/tmp_vxxp35j.swift:15:19: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left, right) + median(right,\
    \ left) / 2\n                  ^\n/tmp/tmp_vxxp35j.swift:15:48: error: extra argument\
    \ in call\n    return median(left, right) + median(right, left) / 2\n        \
    \                               ~~~~~~~~^~~~~\n/tmp/tmp_vxxp35j.swift:15:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(left, right) + median(right, left) / 2\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0bhy21l5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0bhy21l5.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(0)\n    }\n    var mid = n / 2\n    var left = l[mid..<n]\n\
    \    var right = l[mid..<n]\n    if n % 2 == 0 {\n        return median(left)\
    \ + median(right)\n    }\n    return median(left) - median(right)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpn7p8_vbu.swift:16:23: error: missing argument label 'l:' in call\n\
    \        return median(left) + median(right)\n                      ^\n      \
    \                l: \n/tmp/tmpn7p8_vbu.swift:16:23: error: cannot convert value\
    \ of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ median(left) + median(right)\n                      ^\n/tmp/tmpn7p8_vbu.swift:16:38:\
    \ error: missing argument label 'l:' in call\n        return median(left) + median(right)\n\
    \                                     ^\n                                    \
    \ l: \n/tmp/tmpn7p8_vbu.swift:16:38: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return median(left) + median(right)\n\
    \                                     ^\n/tmp/tmpn7p8_vbu.swift:18:19: error:\
    \ missing argument label 'l:' in call\n    return median(left) - median(right)\n\
    \                  ^\n                  l: \n/tmp/tmpn7p8_vbu.swift:18:19: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(left) - median(right)\n                  ^\n/tmp/tmpn7p8_vbu.swift:18:34:\
    \ error: missing argument label 'l:' in call\n    return median(left) - median(right)\n\
    \                                 ^\n                                 l: \n/tmp/tmpn7p8_vbu.swift:18:34:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return median(left) - median(right)\n                         \
    \        ^\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd9msgr58.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpd9msgr58.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpixnbcz9q.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpixnbcz9q.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    var m = Double.nan\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var sum = 0\n    var sum2 = 0\n    var sum3 = 0\n  \
    \  var sum4 = 0\n    var sum5 = 0\n    var sum6 = 0\n    var sum7 = 0\n    var\
    \ sum8 = 0\n    var sum9 = 0\n    var sum10 = 0\n    var sum11 = 0\n    var sum12\
    \ = 0\n    var sum13 = 0\n    var sum14 = 0\n    var sum15 = 0\n    var sum16\
    \ = 0\n    var sum17 = 0\n    var sum18 = 0\n    var sum19 = 0\n    var sum20\
    \ = 0\n    var sum21 = 0\n    var sum22 = 0\n    var sum23 = 0\n    var sum24\
    \ = 0\n    var sum25 = 0\n    var sum26 = 0\n    var sum27 = 0\n    var sum28\
    \ = 0\n    var sum29 = 0\n    var sum30 = 0\n    var sum31 = 0\n    var sum32\
    \ = 0\n    var sum33 = 0\n    var sum34 = 0\n    var sum35 = 0\n    var sum36\
    \ = 0\n    var sum37 = 0\n    var sum38 = 0\n    var sum39 = 0\n    var sum40\
    \ = 0\n    var sum41 = 0\n    var sum42 = 0\n    var sum43 = 0\n    var sum44\
    \ = 0\n    var sum45 = 0\n    var sum46 = 0\n    var sum47 = 0\n    var sum48\
    \ = 0\n    var sum49 = 0\n    var sum50 = 0\n    var sum51 = 0\n    var sum52\
    \ = 0\n    var sum53 = 0\n    var sum54 = 0\n    var sum55 = 0\n    var sum56\
    \ = 0\n    var sum57 = 0\n    var sum58 = 0\n    var sum59 = 0\n    var sum60\
    \ = 0\n    var sum61 = 0\n    var sum62 = 0\n    var sum63 = 0\n    var sum64\
    \ = 0\n    var sum65 = 0\n    var sum66 = 0\n    var sum67 = 0\n    var sum68\
    \ = 0\n    var sum69 = 0\n    var sum70 = 0\n    var sum71 = 0\n    var sum72\
    \ = 0\n    var sum73 = 0\n    var sum74 = 0\n    var sum75 = 0\n    var sum76\
    \ = 0\n    var sum77 = 0\n    var sum78 = 0\n    var sum79 = 0\n    var sum80\
    \ = 0\n    var sum81 = 0\n    var sum82 = 0\n    var sum83 = 0\n    var sum84\
    \ = 0\n    var sum85 = 0\n    var sum86 = 0\n    var sum87 = 0\n    var sum88\
    \ = 0\n    var sum89 = 0\n    var sum90 = 0\n    var sum91 = 0\n    var sum92\
    \ = 0\n    var sum93 = 0\n    var sum94 = 0\n    var sum95 = 0\n    var sum96\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx856f75_.swift:8:9: warning: variable 'n' was never mutated; consider\
    \ changing to 'let' constant\n    var n = l.count\n    ~~~ ^\n    let\n/tmp/tmpx856f75_.swift:12:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = Double.nan\n    ~~~~^\n    _\n\
    /tmp/tmpx856f75_.swift:13:9: warning: initialization of variable 'i' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var i =\
    \ 0\n    ~~~~^\n    _\n/tmp/tmpx856f75_.swift:14:9: warning: initialization of\
    \ variable 'j' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpx856f75_.swift:15:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpx856f75_.swift:16:9: warning:\
    \ initialization of variable 'sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmpx856f75_.swift:17:9:\
    \ warning: initialization of variable 'sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum2 = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpx856f75_.swift:18:9: warning: initialization of variable 'sum3' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var sum3\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmpx856f75_.swift:19:9: warning: initialization\
    \ of variable 'sum4' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum4 = 0\n    ~~~~^~~~\n    _\n/tmp/tmpx856f75_.swift:20:9:\
    \ warning: initialization of variable 'sum5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum5 = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpx856f75_.swift:21:9: warning: initialization of variable 'sum6' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var sum6\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmpx856f75_.swift:22:9: warning: initialization\
    \ of variable 'sum7' was never used; consider replacing with assignment to"
  stdout: ''
  timestamp: 1659824382
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l.first! + l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp5hqnyzhy/tmp5hqnyzhy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8d332ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8d3021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8d3021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8d30207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hqnyzhy                        0x000055586b27d6dd <unavailable> + 5853

    5    libc.so.6                          0x00002ad8d3516460 __libc_start_main +
    245

    6    tmp5hqnyzhy                        0x000055586b27d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n\
    \ / 2]\n    }\n    let mid = n / 2\n    let left = l.sorted()[0..<mid]\n    let\
    \ right = l.sorted()[mid..<n]\n    return Double(left[mid] + right[mid]) / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppctxmzpf.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n / 2]\n     \
    \          ~~~~~~~~~~^~~~~~~\n               Double(          )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpixnbcz9q.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpixnbcz9q.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n\
    \    if n < 2 {\n        return l[0]\n    }\n    if n == 1 {\n        return l[0]\n\
    \    }\n    if n == 2 {\n        return 0.5 * (l[0] + l[1])\n    }\n    if n %\
    \ 2 == 0 {\n        return median(l[mid..<n])\n    } else {\n        return median(l[mid..<n\
    \ - 1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpunvp7ct_.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpunvp7ct_.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[0]\n\
    \               ~^~~\n               Double( )\n/tmp/tmpunvp7ct_.swift:17:28:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return 0.5 * (l[0] + l[1])\n                           ^\n          \
    \           Double(      )\n/tmp/tmpunvp7ct_.swift:20:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[mid..<n])\n                    \
    \  ^\n                      l: \n/tmp/tmpunvp7ct_.swift:20:24: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ median(l[mid..<n])\n                       ^\n/tmp/tmpunvp7ct_.swift:22:23:\
    \ error: missing argument label 'l:' in call\n        return median(l[mid..<n\
    \ - 1])\n                      ^\n                      l: \n/tmp/tmpunvp7ct_.swift:22:24:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        return median(l[mid..<n - 1])\n                       ^\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9mmpvpa5.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    } else {\n  \
    \      return sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 -\
    \ 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxw_cbdv3.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpxw_cbdv3.swift:12:47: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                                      \
    \      )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n / 2\n  \
    \  if n % 2 == 0 {\n        return l[m]\n    } else {\n        return Double(l.sorted()[m])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpca7narr2.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[m]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpje8mwp9d.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpje8mwp9d.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp61v0lqy8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmp61v0lqy8.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return m1\n\
    \               ^~\n               Double( )\n/tmp/tmp61v0lqy8.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return m2\n           ^~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l.count\
    \ / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1pr8tcwq.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n/2]\n\
    \    }\n    return Double(l.sorted()[(n - 1)/2] + l.sorted()[(n + 1)/2])\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7a5gejwz.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n/2]\n       \
    \        ~~~~~~~~~~^~~~~\n               Double(        )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return l[0]\n    }\n    var m = Double(l.count)\n    var sum = 0\n    for\
    \ x in l {\n        sum += x\n    }\n    var x = sum / Double(n)\n    for x in\
    \ l {\n        if x < m {\n            m = x\n        }\n    }\n    return m\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmps_tqicxt.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmps_tqicxt.swift:17:17: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Double'\n    var x = sum\
    \ / Double(n)\n            ~~~ ^ ~~~~~~~~~\n/tmp/tmps_tqicxt.swift:17:17: note:\
    \ overloads for '/' exist with these partially matching parameter lists: (Double,\
    \ Double), (Duration, Double), (Int, Int)\n    var x = sum / Double(n)\n     \
    \           ^\n/tmp/tmps_tqicxt.swift:19:14: error: binary operator '<' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n        if x < m {\n    \
    \       ~ ^ ~\n/tmp/tmps_tqicxt.swift:19:14: note: overloads for '<' exist with\
    \ these partially matching parameter lists: (Int, Int)\n        if x < m {\n \
    \            ^\n/tmp/tmps_tqicxt.swift:20:17: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n            m = x\n                ^\n             \
    \   Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ mid = n/2\n    var left = l[:mid]\n    var right = l[mid:]\n    return median(left)\
    \ + median(right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6gqv4nev.swift:16:18: error: expected expression in list of expressions\n\
    \    var left = l[:mid]\n                 ^\n/tmp/tmp6gqv4nev.swift:17:23: error:\
    \ expected expression in list of expressions\n    var right = l[mid:]\n      \
    \                ^\n/tmp/tmp6gqv4nev.swift:13:17: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n        return l[n/2]\n  \
    \             ~^~~~~\n               Double( )\n/tmp/tmp6gqv4nev.swift:16:22:\
    \ error: missing argument for parameter #1 in call\n    var left = l[:mid]\n \
    \                    ^\n                     <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmp6gqv4nev.swift:17:23:\
    \ error: missing argument for parameter #1 in call\n    var right = l[mid:]\n\
    \                      ^\n                      <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n/tmp/tmp6gqv4nev.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(left) + median(right)\n\
    \                  ^\n                  l: \n/tmp/tmp6gqv4nev.swift:18:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\n\
    \                                 ^\n                                 l: \n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcsrsmey9.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpcsrsmey9.swift:12:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2-1] + l[n/2])/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp67j8bnqx.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp67j8bnqx.swift:15:31: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return (l[n/2-1]\
    \ + l[n/2])/2\n           ~~~~~~~~~~~~~~~~~~~^~\n           Double(          \
    \    )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpge74837m.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpge74837m.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpixnbcz9q.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpixnbcz9q.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpje8mwp9d.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpje8mwp9d.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.last!\
    \ + l.first!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp3yw_6pmr/tmp3yw_6pmr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18834a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b188319eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b188319e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b188319d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yw_6pmr                        0x000055d3747405f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1883693460 __libc_start_main +
    245

    6    tmp3yw_6pmr                        0x000055d374740239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for x in\
    \ l.dropFirst() {\n        if x < m {\n            m = x\n        }\n    }\n \
    \   return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptquttpqz.swift:14:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmptquttpqz.swift:14:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmptquttpqz.swift:15:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2\
    \ == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqdoyvadp.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpqdoyvadp.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[mid]\n\
    \               ~^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for x in 1..n {\n        if l[x] < low\
    \ {\n            low = l[x]\n        }\n        if l[x] > high {\n           \
    \ high = l[x]\n        }\n    }\n    return (high + low) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_o0d6692.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp_o0d6692.swift:17:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for x in 1..n {\n              ^~\n\
    \              ...\n/tmp/tmp_o0d6692.swift:25:25: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n    return (high + low) /\
    \ 2\n           ~~~~~~~~~~~~~^~~\n           Double(         )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaou4kosb.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpaou4kosb.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n\
    \    if n % 2 == 0 {\n        return l[mid]\n    } else {\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1sge0icx.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp1sge0icx.swift:13:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n\
    \ / 2].doubleValue\n    }\n    let mid = n / 2\n    let leftHalf = l.sorted()[mid..<n]\n\
    \    let rightHalf = l.sorted()[mid..<n]\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvhn14y51.swift:13:34: error: value of type 'Int' has no member\
    \ 'doubleValue'\n        return l.sorted()[n / 2].doubleValue\n              \
    \ ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpvhn14y51.swift:18:12: error: no exact\
    \ matches in call to initializer \n    return Double(leftHalf).doubleValue + Double(rightHalf).doubleValue\
    \ / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12: note: found candidate with\
    \ type '(Builtin.FPIEEE64) -> Double'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12:\
    \ note: found candidate with type '(Substring) -> Double?'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12:\
    \ note: found candidate with type '(Int) -> Double'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12:\
    \ note: found candidate with type '(Float16) -> Double'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12:\
    \ note: found candidate with type '(Float) -> Double'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12:\
    \ note: found candidate with type '(Double) -> Double'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:12:\
    \ note: found candidate with type '(Float80) -> Double'\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n           ^\n/tmp/tmpvhn14y51.swift:18:43:\
    \ error: no exact matches in call to initializer \n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2\n                                      \
    \    ^\n/tmp/tmpvhn14y51.swift:18:43: note: found candidate with type '(Builtin.FPIEEE64)\
    \ -> Double'\n    return Double(leftHalf).doubleValue + Double(rightHalf).doubleValue\
    \ / 2\n                                          ^\n/tmp/tmpvhn14y51.swift:18:43:\
    \ note: found candidate with type '(Substring) -> D"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return median(left, right) + median(right, left)\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplehr8pix.swift:15:25: error: extra argument in call\n    return\
    \ median(left, right) + median(right, left) / 2\n                 ~~~~~~~^~~~~~\n\
    /tmp/tmplehr8pix.swift:15:19: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left, right) + median(right,\
    \ left) / 2\n                  ^\n/tmp/tmplehr8pix.swift:15:48: error: extra argument\
    \ in call\n    return median(left, right) + median(right, left) / 2\n        \
    \                               ~~~~~~~~^~~~~\n/tmp/tmplehr8pix.swift:15:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(left, right) + median(right, left) / 2\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpelhzplnn.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n / 2\n  \
    \  if n % 2 == 1 {\n        return l[m]\n    }\n    let m1 = m - 1 // mid point\
    \ of even numbers\n    let m2 = m + 1 // mid point of odd numbers\n    if l[m1]\
    \ > l[m2] {\n        return l[m1]\n    } else {\n        return l[m2]\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwodzopvt.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[m]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpwodzopvt.swift:16:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[m1]\n\
    \               ~^~~~\n               Double( )\n/tmp/tmpwodzopvt.swift:18:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[m2]\n               ~^~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659824383
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n    return 0.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpy82y3bic/tmpy82y3bic.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bca61ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bca311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bca311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bca3107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy82y3bic                        0x000055e6ec6f85d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b5bca806460 __libc_start_main +
    245

    6    tmpy82y3bic                        0x000055e6ec6f8219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxypvj_60.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxypvj_60.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n / 2\n  \
    \  if n % 2 == 0 {\n        return l[m]\n    } else {\n        return l[m - 1]\
    \ + l[m]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpitv3wf_k.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[m]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpitv3wf_k.swift:13:25: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[m\
    \ - 1] + l[m]\n               ~~~~~~~~~^~~~~~\n               Double(        )\n"
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  let mid = n / 2\n    let m1 = median(l[0..<mid])\n    let m2 = median(l[mid..<n])\n\
    \    let median = (m1 + m2) / 2\n    return median\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxfnxjt94.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpxfnxjt94.swift:16:21: error: missing argument\
    \ label 'l:' in call\n    let m1 = median(l[0..<mid])\n                    ^\n\
    \                    l: \n/tmp/tmpxfnxjt94.swift:16:22: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let m1\
    \ = median(l[0..<mid])\n                     ^\n/tmp/tmpxfnxjt94.swift:17:21:\
    \ error: missing argument label 'l:' in call\n    let m2 = median(l[mid..<n])\n\
    \                    ^\n                    l: \n/tmp/tmpxfnxjt94.swift:17:22:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let m2 = median(l[mid..<n])\n                     ^\n/tmp/tmpxfnxjt94.swift:18:22:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    let median = (m1 + m2) / 2\n                     ^\n"
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpteo6zxdn.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2.0\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplzr1g0tt.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplzr1g0tt.swift:13:38:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2.0\n    \
    \                                 ^\n               Double(                  \
    \                        )\n"
  stdout: ''
  timestamp: 1659824391
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2 - 1] + l[l.count / 2 - 1]) / 2.0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpbcgqfoxc/tmpbcgqfoxc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1af5119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1af4e10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1af4e10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1af4e0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcgqfoxc                        0x00005587f3273501 <unavailable> + 5377

    5    libc.so.6                          0x00002b1af5305460 __libc_start_main +
    245

    6    tmpbcgqfoxc                        0x00005587f3273149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9mmpvpa5.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2\n   \
    \ }\n    return Double(l[l.count / 2])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824383
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_kvhq2y4.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpfxbgituf/tmpfxbgituf.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae46cf49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae46cc40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae46cc40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae46cc3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxbgituf                        0x000055e0c265d5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002ae46d135460 __libc_start_main +
    245

    6    tmpfxbgituf                        0x000055e0c265d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824384
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    if l[mid] > l[mid\
    \ - 1] {\n        return median(l[mid..<l.count])\n    } else {\n        return\
    \ median(l[mid..<l.count - 1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpff3yvqck.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpff3yvqck.swift:14:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[mid..<l.count])\n              \
    \        ^\n                      l: \n/tmp/tmpff3yvqck.swift:14:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[mid..<l.count])\n                       ^\n/tmp/tmpff3yvqck.swift:16:23:\
    \ error: missing argument label 'l:' in call\n        return median(l[mid..<l.count\
    \ - 1])\n                      ^\n                      l: \n/tmp/tmpff3yvqck.swift:16:24:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        return median(l[mid..<l.count - 1])\n                     \
    \  ^\n"
  stdout: ''
  timestamp: 1659824384
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double(0)\n    }\n    var m = Double(0)\n    for x in l {\n       \
    \ m = (m + x) / 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmbsm6528.swift:14:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = (m + x) / 2\n              \
    \   ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659824384
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    let midVal = median(left)\n    let leftVal =\
    \ median(right)\n    if midVal < leftVal {\n        return midVal\n    } else\
    \ {\n        return leftVal\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsh05s5iq.swift:15:25: error: missing argument label 'l:' in call\n\
    \    let midVal = median(left)\n                        ^\n                  \
    \      l: \n/tmp/tmpsh05s5iq.swift:15:25: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let midVal = median(left)\n\
    \                        ^\n/tmp/tmpsh05s5iq.swift:16:26: error: missing argument\
    \ label 'l:' in call\n    let leftVal = median(right)\n                      \
    \   ^\n                         l: \n/tmp/tmpsh05s5iq.swift:16:26: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    let leftVal = median(right)\n                         ^\n"
  stdout: ''
  timestamp: 1659824384
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n\
    \    if n % 2 == 0 {\n        return l[mid]\n    } else {\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1sge0icx.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp1sge0icx.swift:13:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824383
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return Double(l.first! + l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpvvvtp6b7/tmpvvvtp6b7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07213ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba071e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba071e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba071e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvvtp6b7                        0x000055eda76d66dd <unavailable> + 5853

    5    libc.so.6                          0x00002ba07232a460 __libc_start_main +
    245

    6    tmpvvvtp6b7                        0x000055eda76d6239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824384
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double(0)\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n/2]\n\
    \    }\n    return (l.sorted()[n/2] + l.sorted()[n/2-1]) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpds1jgvus.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n/2]\n       \
    \        ~~~~~~~~~~^~~~~\n               Double(        )\n/tmp/tmpds1jgvus.swift:15:50:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l.sorted()[n/2] + l.sorted()[n/2-1]) / 2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824384
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpli8dc4oz/tmpli8dc4oz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56f777c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac56f46eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac56f46e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac56f46d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpli8dc4oz                        0x000055d2e30e3531 <unavailable> + 5425

    5    libc.so.6                          0x00002ac56f963460 __libc_start_main +
    245

    6    tmpli8dc4oz                        0x000055d2e30e3179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpixnbcz9q.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpixnbcz9q.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let middle = count / 2\n    let left\
    \ = l.prefix(middle)\n    let right = l.suffix(middle)\n    return median(left)\
    \ + median(right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo_iqyept.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right)\n                  ^\n              \
    \    l: \n/tmp/tmpo_iqyept.swift:15:19: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right)\n\
    \                  ^\n/tmp/tmpo_iqyept.swift:15:34: error: missing argument label\
    \ 'l:' in call\n    return median(left) + median(right)\n                    \
    \             ^\n                                 l: \n/tmp/tmpo_iqyept.swift:15:34:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return median(left) + median(right)\n                         \
    \        ^\n"
  stdout: ''
  timestamp: 1659824384
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n  \
    \  if n % 2 == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    return median(l[(n\
    \ - 1)..<n])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpz269p5x0.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpz269p5x0.swift:16:23: error: missing argument\
    \ label 'l:' in call\n        return median(l[1..<(n - 1)])\n                \
    \      ^\n                      l: \n/tmp/tmpz269p5x0.swift:16:24: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return median(l[1..<(n - 1)])\n                       ^\n/tmp/tmpz269p5x0.swift:18:19:\
    \ error: missing argument label 'l:' in call\n    return median(l[(n - 1)..<n])\n\
    \                  ^\n                  l: \n/tmp/tmpz269p5x0.swift:18:20: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return median(l[(n - 1)..<n])\n                   ^\n"
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[l.count / 2]\n    }\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpa8f0qgp4.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[l.count / 2]\n        \
    \       ~^~~~~~~~~~~~~\n               Double(       )\n/tmp/tmpa8f0qgp4.swift:12:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2]\n           ~^~~~~~~~~~~~~~~~~~~\n          \
    \ Double(             )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_c8xv8a9/tmp_c8xv8a9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b166577dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1665474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1665474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16654737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c8xv8a9                        0x00005605026af501 <unavailable> + 5377

    5    libc.so.6                          0x00002b1665969460 __libc_start_main +
    245

    6    tmp_c8xv8a9                        0x00005605026af149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwhky_wcx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    return Double(m1) + Double(m2)/2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgy5z43r_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpelhzplnn.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var a = l[mid]\n\
    \    var b = l[mid-1]\n    if a < b {\n        return b\n    }\n    return a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr5insaj8.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpr5insaj8.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return b\n\
    \               ^\n               Double( )\n/tmp/tmpr5insaj8.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return a\n           ^\n           Double( )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    var\
    \ m1 = l.first!\n    var m2 = l.last!\n    if m1 < m2 {\n        return median(l.prefix(mid))\n\
    \    } else {\n        return median(l.suffix(mid))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm5lo14rh.swift:16:23: error: missing argument label 'l:' in call\n\
    \        return median(l.prefix(mid))\n                      ^\n             \
    \         l: \n/tmp/tmpm5lo14rh.swift:18:23: error: missing argument label 'l:'\
    \ in call\n        return median(l.suffix(mid))\n                      ^\n   \
    \                   l: \n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    let mid = n / 2\n    if n % 2 == 0 {\n     \
    \   return l[mid]\n    }\n    let left = median(l[0..<mid])\n    let right = median(l[mid..<n])\n\
    \    return (left + right) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwufhkjqu.swift:14:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpwufhkjqu.swift:16:23: error: missing argument\
    \ label 'l:' in call\n    let left = median(l[0..<mid])\n                    \
    \  ^\n                      l: \n/tmp/tmpwufhkjqu.swift:16:24: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let left\
    \ = median(l[0..<mid])\n                       ^\n/tmp/tmpwufhkjqu.swift:17:24:\
    \ error: missing argument label 'l:' in call\n    let right = median(l[mid..<n])\n\
    \                       ^\n                       l: \n/tmp/tmpwufhkjqu.swift:17:25:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let right = median(l[mid..<n])\n                        ^\n/tmp/tmpwufhkjqu.swift:18:18:\
    \ error: cannot convert value of type 'String' to expected argument type 'Double'\n\
    \    return (left + right) / 2\n                 ^\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l.count\
    \ / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1pr8tcwq.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n     \
    \   return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n\
    \    let right = l.suffix(mid)\n    return median(left) + median(right) / 2.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2qwa4y2k.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmp2qwa4y2k.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmp2qwa4y2k.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmp2qwa4y2k.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return Double(l.last!) / 2.0\n    }\n    var mid = l.count /\
    \ 2\n    return Double(l[mid-1] + l[mid]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpeumss3o1/tmpeumss3o1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b058aa78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b058a76fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b058a76f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058a76e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeumss3o1                        0x000055b8c01a45a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b058ac64460 __libc_start_main +
    245

    6    tmpeumss3o1                        0x000055b8c01a41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n \
    \   }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_c8xv8a9/tmp_c8xv8a9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b166577dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1665474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1665474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16654737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c8xv8a9                        0x00005605026af501 <unavailable> + 5377

    5    libc.so.6                          0x00002b1665969460 __libc_start_main +
    245

    6    tmp_c8xv8a9                        0x00005605026af149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n     \
    \   return Double.nan\n    }\n    var m = Double.nan\n    var l = l.sorted()\n\
    \    if n % 2 == 0 {\n        m = l[(n - 1) / 2]\n    } else {\n        m = l[(n\
    \ - 1) / 2] + l[n / 2]\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3xav_h4l.swift:15:14: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        m = l[(n - 1) / 2]\n            ~^~~~~~~~~~~~~\n \
    \           Double(       )\n/tmp/tmp3xav_h4l.swift:17:28: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        m = l[(n - 1) / 2] + l[n / 2]\n\
    \            ~~~~~~~~~~~~~~~^~~~~~~~~~\n            Double(                  )\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return (l[(l.count - 1) / 2] + l[l.count - 1]) / 2\n    }\n \
    \   return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphfgj7dkw.swift:11:56: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[(l.count - 1) / 2] + l[l.count\
    \ - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n    \
    \           Double(                                    )\n/tmp/tmphfgj7dkw.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824386
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count -\
    \ 1) / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0zse8u8x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp0zse8u8x.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824382
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return median(l, Double(0))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7e37u26d.swift:8:22: error: extra argument in call\n    return\
    \ median(l, Double(0))\n                 ~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmprb1r94ol/tmprb1r94ol.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d0be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d08ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d08dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d08dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb1r94ol                        0x0000561a73061471 <unavailable> + 5233

    5    libc.so.6                          0x00002b09d0dd2460 __libc_start_main +
    245

    6    tmprb1r94ol                        0x0000561a730610b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n    return Double(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp8pi4635_/tmp8pi4635_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cd3526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cd321db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cd321d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cd321c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pi4635_                        0x000055a6ebbdb5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b7cd3712460 __libc_start_main +
    245

    6    tmp8pi4635_                        0x000055a6ebbdb219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824381
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l[l.count / 2])\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmphz23qugz/tmphz23qugz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10b92e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10b8fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10b8fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10b8fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphz23qugz                        0x000055b9dd02670d <unavailable> + 5901

    5    libc.so.6                          0x00002b10b94d2460 __libc_start_main +
    245

    6    tmphz23qugz                        0x000055b9dd026269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return Double(l[l.count / 2])\n    }\n    return Double(0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp699ttmxp/tmp699ttmxp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac500880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac500577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac500577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5005767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp699ttmxp                        0x000056274cbd967d <unavailable> + 5757

    5    libc.so.6                          0x00002ac500a6c460 __libc_start_main +
    245

    6    tmp699ttmxp                        0x000056274cbd91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824385
