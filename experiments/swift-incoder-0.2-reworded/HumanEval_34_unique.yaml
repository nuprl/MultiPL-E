name: HumanEval_34_unique
language: swift
prompt: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3,\
  \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123])"
completions: ["    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for el in l\
    \ {\n        if !contains(result, el) {\n            result.append(el)\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    for x in l\
    \ {\n        if !contains(result, x) {\n            result.append(x)\n       \
    \ }\n    }\n    return result", "    var seen = [Int]()\n    var result = [Int]()\n\
    \    for x in l {\n        if !contains(seen, x) {\n            seen.append(x)\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var seen = [Int]()\n\
    \    var result = [Int]()\n    for x in l {\n        if !contains(seen, x) {\n\
    \            seen.append(x)\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for x in l {\n        if\
    \ !contains(result, x) {\n            result.append(x)\n        }\n    }\n   \
    \ return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var seen = [Int]()\n    var result = [Int]()\n    for\
    \ x in l {\n        if !seen.isEmpty {\n            for y in seen {\n        \
    \        if x == y {\n                    break\n                }\n         \
    \   }\n            if !seen.isEmpty {\n                continue\n            }\n\
    \        }\n        result.append(x)\n        seen.append(x)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(&result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var seen = [Int]()\n    var result = [Int]()\n    for\
    \ x in l {\n        if !contains(seen, x) && contains(result, x) {\n         \
    \   seen.append(x)\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(&result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(result, x) {\n            result.append(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for x in l {\n        if !contains(result, x)\
    \ {\n            result.append(x)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(&result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(result, x) {\n            result.append(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for el in l {\n        if !contains(result, el) {\n         \
    \   result.append(el)\n        }\n    }\n    return result", "    var seen: [Int]\
    \ = [0]\n    var result: [Int] = []\n    for x in l {\n        if seen[x] == 0\
    \ {\n            seen[x] = 1\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result", "    var seen = [Int]()\n    var result = [Int]()\n    for el in l\
    \ {\n        if !contains(seen, el) {\n            append(result, el)\n      \
    \      append(seen, el)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(&result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var seen: [Int] = []\n    var result:\
    \ [Int] = []\n    for x in l {\n        if !contains(seen, x) {\n            seen.append(x)\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n          \
    \  result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var seen = [Int]()\n    var result = [Int]()\n\
    \    for x in l {\n        if !contains(seen, x) && contains(result, x) {\n  \
    \          seen.append(x)\n            result.append(x)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for x in l {\n        if !contains(result, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for x in l {\n        if !contains(result, x) {\n          \
    \  result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(&result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var seen: [Int] = []\n    var result:\
    \ [Int] = []\n    for x in l {\n        if !contains(seen, x) {\n            seen.append(x)\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for x\
    \ in l {\n        if !contains(result, x) {\n            result.append(x)\n  \
    \      }\n    }\n    return result", "    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(&result, x) {\n            result.append(x)\n      \
    \  }\n    }\n    return result", "    var seen = [Int]()\n    var result = [Int]()\n\
    \    for x in l {\n        if !contains(seen, x) {\n            seen.append(x)\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n          \
    \  result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(&result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(&result, x) {\n            result.append(x)\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    for x in l {\n       \
    \ if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for x in l {\n        if\
    \ !contains(result, x) {\n            result.append(x)\n        }\n    }\n   \
    \ return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(&result, x) {\n            result.append(x)\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    for x in l {\n       \
    \ if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n   \
    \         result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(result, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for x\
    \ in l {\n        if !contains(result, x) {\n            result.append(x)\n  \
    \      }\n    }\n    return result", "    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(result, x) {\n            result.append(x)\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n        if\
    \ !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(result, x) {\n            result.append(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(&result, x) {\n            result.append(x)\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    for el in l {\n      \
    \  if !contains(result, el) {\n            result.append(el)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var seen\
    \ = [Int]()\n    var result = [Int]()\n    for x in l {\n        if !contains(seen,\
    \ x) {\n            seen.append(x)\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for x in l {\n  \
    \      if !contains(result, x) {\n            result.append(x)\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    for x in l {\n      \
    \  if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n          \
    \  result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(&result, x) {\n            result.append(x)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for el in l {\n        if !contains(result, el)\
    \ {\n            result.append(el)\n        }\n    }\n    return result", "  \
    \  var result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ seen = [Int]()\n    var result = [Int]()\n    for x in l {\n        if !seen.isEmpty\
    \ {\n            if seen[x - 1] == x {\n                continue\n           \
    \ }\n            seen[x - 1] = x\n        } else {\n            seen.append(x)\n\
    \        }\n        result.append(x)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n          \
    \  result.append(x)\n        }\n    }\n    return result", "    var result: [Int]\
    \ = []\n    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(result, x) {\n            result.append(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for x in l {\n        if !contains(result, x) {\n          \
    \  result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l {\n        if !contains(result, x) {\n            result.append(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l {\n\
    \        if !contains(&result, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l {\n    \
    \    if !contains(result, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for x in l {\n        if !contains(result, x)\
    \ {\n            result.append(x)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    for x in l {\n        if !contains(&result, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l {\n        if !contains(result, x) {\n    \
    \        result.append(x)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
