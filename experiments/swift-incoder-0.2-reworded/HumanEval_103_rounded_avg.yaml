name: HumanEval_103_rounded_avg
language: swift
prompt: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
  \ n and m, and your task is to compute the\n/// average of the integers from n through\
  \ m (including n and m). \n/// Round the answer to the nearest integer and convert\
  \ that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>>\
  \ rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m:\
  \ 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\"\
  )\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n:\
  \ Int, m: Int) -> Result<String, Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"\
  ))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
  \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
  \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
  0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
  ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
  \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
  \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
  assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
  \ == .success(\"0b101\"))"
completions: ["    let sum = n ... m\n    let avg = sum.average()\n    let bin = String(format:\
    \ \"%0*b\", Int(ceil(log2(Double(avg)))), avg)\n    return bin.count == 1 ?\n\
    \        Result.success(bin) : Result.failure(-1)", "    let sum = n * m / 2\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ avg, Int(ceil(log2(Float(sum)))))\n    \n    if binary == \"0b0\" {\n      \
    \  return .failure(-1)\n    }\n    \n    return .success(binary)", "    let result\
    \ = n / m\n    if result < 0 {\n        return .failure(-1)\n    }\n    let result\
    \ = Int(result)\n    return .success(String(format: \"0b%0*b\", result.count,\
    \ result))", "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), n, m, avg)\n    if binary == \"\"\
    \ {\n        return .failure(-1)\n    }\n    return .success(binary)", "    let\
    \ sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(sum)))), &avg, &sum)\n    guard let bin = binary.data(using:\
    \ .utf8) else { return .failure(-1) }\n    return .success(bin.base64EncodedString())",
  "    if n > m {\n        return .failure(-1)\n    }\n    var sum = 0\n    for i\
    \ in 0..<n {\n        sum += i\n    }\n    var avg = sum / Double(n)\n    var\
    \ result = \"\"\n    for i in 0..<n {\n        if i % 2 == 0 {\n            result\
    \ += String(Int(avg))\n        } else {\n            result += String(Int(avg))\n\
    \        }\n        avg -= Int(avg)\n    }\n    return .success(result)", "  \
    \  guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    for i in 0..<m {\n        sum += i\n\
    \        count += 1\n    }\n    \n    if count == 0 {\n        return .failure(-1)\n\
    \    }\n    \n    let avg = sum / count\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(count)))), &sum, &avg)\n    \n    return\
    \ .success(binary)", "    let n = n.toInt()\n    let m = m.toInt()\n    if n <\
    \ m {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let avg\
    \ = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ &sum, &avg)\n    return .success(binary)", "    guard n >= 0 && m >= 0 else\
    \ {\n        return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let\
    \ avg = sum / 2\n    \n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ String(avg))\n    \n    return .success(binary)", "    guard n >= 0 && m >=\
    \ 0 else {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%b\", Int(avg))\n    return\
    \ .success(binary)", "    if n >= m {\n        return .failure(-1)\n    }\n  \
    \  let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%b\", Int(avg))\n    return .success(binary)", "    guard n >= 0 && m >= 0\
    \ else {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let\
    \ remainder = n * m % 2\n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    }\n    return .failure(-1)", "    guard n >= 0 &&\
    \ m >= 0 else {\n        return .failure(-1)\n    }\n    let sum = n + m\n   \
    \ let avg = sum / 2\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n   \
    \     return .failure(-1)\n    }\n    \n    var sum = 0\n    var count = 0\n \
    \   \n    for i in 0..<m {\n        sum += n\n        count += 1\n    }\n    \n\
    \    if count == 0 {\n        return .failure(-1)\n    }\n    \n    let avg =\
    \ Double(sum) / Double(count)\n    \n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(count)))), &sum, &count)\n    \n    return .success(binary)",
  "    \n    let sum = n + m\n    let avg = sum / 2\n    \n    if sum > m {\n    \
    \    return .failure(-1)\n    }\n    \n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(sum))).magnitude, String(sum), String(avg), String(avg))\n   \
    \ \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n       \
    \ return Result.failure(-1)\n    }\n    \n    let sum = n + m\n    let avg = sum\
    \ / 2\n    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ String(sum), String(avg))\n    \n    return Result.success(binary)", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum\
    \ = n * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\",\
    \ Int(avg))\n    \n    if binary == String(format: \"%b\", Int(avg)) {\n     \
    \   return .success(binary)\n    }\n    \n    return .failure(-1)", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let sum = n\
    \ * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\", Int(avg))\n\
    \    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ Result.failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    \n    if remainder == 0 {\n        return Result.success(String(sum))\n\
    \    }\n    \n    return Result.failure(-1)", "    let sum = n * m / 2\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0,\
    \ Int(sum))\n    \n    if n >= m {\n        return .failure(-1)\n    }\n    \n\
    \    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder = n *\
    \ m % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n    }", " \
    \   if n > m {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n  \
    \  for i in 0..<n {\n        sum += i\n    }\n    \n    var avg = sum / Double(n)\n\
    \    \n    var binary = \"\"\n    for i in 0..<n {\n        if avg == i {\n  \
    \          binary += \"1\"\n        } else {\n            binary += \"0\"\n  \
    \      }\n    }\n    \n    return .success(binary)", "    guard n >= 0 && m >=\
    \ 0 else {\n        return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n\
    \    let remainder = n * m % 2\n    \n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n\
    \    }", "    if n >= m {\n        return .failure(-1)\n    }\n    let sum = n\
    \ * m / 2\n    let remainder = n * m % 2\n    let binary = String(format: \"%0*b%0*b\"\
    , n, m, remainder)\n    return .success(binary)", "    let sum = n * m / 2\n \
    \   let remainder = n * m % 2\n    \n    if remainder == 0 {\n        return .success(String(sum))\n\
    \    }\n    \n    return .failure(-1)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    var sum = 0\n    var count = 0\n    for n in 0..<m {\n        sum\
    \ += n\n        count += 1\n    }\n    if count == 0 {\n        return .failure(-1)\n\
    \    }\n    let avg = Double(sum) / Double(count)\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(count)))), &sum, &count)\n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(format: \"0b%0*b\", n, sum))\n    } else\
    \ {\n        return .failure(-1)\n    }", "    guard n >= m else {\n        return\
    \ .failure(-1)\n    }\n    let avg = n / m\n    let binary = String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(m)))), String(0), String(0), String(avg))\n \
    \   return .success(binary)", "    let n = n.toInt()\n    let m = m.toInt()\n\
    \    \n    if n > m {\n        return .failure(-1)\n    }\n    \n    let sum =\
    \ (n - m) / 2\n    let remainder = n - sum\n    \n    let binary = remainder.toBinary()\n\
    \    \n    return .success(binary.padded(length: binary.count).trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \"0\")).uppercased())", "    let sum = n * m + n\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, n, 0,\
    \ m, 0, avg)\n    return binary.count == 8 ? .success(binary) : .failure(-1)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\"\
    , Int(avg))\n    return .success(binary)", "    if n >= m {\n        return .failure(-1)\n\
    \    }\n    var sum = 0\n    for i in 1...m {\n        sum += i\n    }\n    let\
    \ avg = sum / m\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(m))),\
    \ avg, Int(ceil(log2(n))), n)\n    return .success(binary)", "    let result =\
    \ n / m\n    let remainder = n % m\n    \n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", result.magnitude, result))\n    } else {\n\
    \        return .failure(-1)\n    }", "    let n = n.toInt()\n    let m = m.toInt()\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    var sum = 0\n    for\
    \ i in 0..<n {\n        sum += i\n    }\n    let avg = sum / Double(n)\n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), &avg, Int(ceil(log2(Double(m)))))\n\
    \    return .success(binary)", "    let sum = n + m\n    let avg = sum / 2\n \
    \   let binary = String(format: \"%0*b%0*b\", 0, n, 0, m, 0, avg)\n    guard let\
    \ bin = binary.data(using: .utf8)?.base64EncodedString() else {\n        return\
    \ .failure(-1) // overflow\n    }\n    return .success(bin)", "    let n = n.toInt()\n\
    \    let m = m.toInt()\n    \n    if n < m {\n        return .failure(-1)\n  \
    \  }\n    \n    let sum = (n - m) / 2\n    let remainder = n - sum\n    \n   \
    \ let binary = remainder.toBinary()\n    \n    return .success(String(binary))",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let nBits = log2(n) + 1 // +1 because log2 of 0 is undefined\n    let mBits\
    \ = log2(m) + 1\n    \n    let n = n & ((1 << nBits) - 1)\n    let m = m & ((1\
    \ << mBits) - 1)\n    \n    let sum = n + (m << 1)\n    let sumBits = log2(sum)\n\
    \    \n    let sum = sum & ((1 << sumBits) - 1)\n    \n    let avg = sum / 2\n\
    \    \n    let binary = String(format: \"%0*b%0*b\", nBits, sumBits, sum)\n  \
    \  \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n      \
    \  return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n    }", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n\
    \    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), &sum, &avg)\n    \n    return .success(binary)",
  "    let n = n.toInt()\n    let m = m.toInt()\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let result = (n - m) / 2.0\n    let result = Int(result)\n    let\
    \ result = binary(result)\n    return .success(result)", "    let result = (n\
    \ - m) / 2.0\n    let binary = String(result, radix: 2)\n    if binary == \"0\"\
    \ {\n        return .failure(-1)\n    }\n    return .success(binary)", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let avg\
    \ = n / m\n    let remainder = n % m\n    \n    let result = String(format: \"\
    0b%0*b\", (remainder).count, remainder)\n    \n    return .success(result)", " \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(format: \"0b%0*b\", n, sum))\n    }\n\
    \    \n    return .failure(-1)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n \
    \   return .success(String(format: \"0b%0*b\", Int(remainder), sum))", "    let\
    \ sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), n, m, avg)\n    \n    if binary == \"\" {\n   \
    \     return .failure(-1)\n    }\n    \n    return .success(binary)", "    if\
    \ n <= m {\n        return .success(String(format: \"0b%0*b\", n, m))\n    }\n\
    \    \n    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    return\
    \ .success(String(format: \"0b%0*b\", sum, remainder))", "    let sum = n * m\
    \ / 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ &avg, &sum)\n    return binary.isValid() ? .success(binary) : .failure(sum)",
  "    let result = n / m\n    let remainder = n % m\n    if remainder == 0 {\n  \
    \      return .success(String(format: \"0b%0*b\", m.bitLength, result))\n    }\
    \ else {\n        return .failure(-1)\n    }", "    if n >= m {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m / 2\n    let binary = String(sum, radix:\
    \ 2)\n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n     \
    \   return .failure(-1)\n    }\n    \n    var sum = 0\n    var count = 0\n   \
    \ \n    for i in 0..<n {\n        sum += i\n        count += 1\n    }\n    \n\
    \    for i in 0..<m {\n        sum += i\n        count += 1\n    }\n    \n   \
    \ if count == 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", count, String(format: \"%0*d\", count, sum)))", "    guard n >=\
    \ 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let avg =\
    \ (n + m) / 2\n    let binary = String(format: \"%0*b%0*b\", avg - n, avg - m,\
    \ avg)\n    \n    return .success(binary)", "    \n    let result = (n ... m).reduce(0.0,\
    \ +) / Double(m - n + 1.0)\n    \n    if result < 0 {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(String(format: \"0b%0*b\", ceil(log2(Double(result))),\
    \ result))", "    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n \
    \   if remainder == 0 {\n        return .success(String(format: \"0b%0*b\", n,\
    \ sum))\n    }\n    \n    return .failure(-1)", "    let sum = n + m\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ n, m, avg)\n    if binary == \"0b0\" {\n        return .failure(-1)\n    }\n\
    \    return .success(binary)", "    let sum = n ... m\n    let avg = sum.average()\n\
    \    let bin = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))), avg,\
    \ Int(ceil(log2(Float(avg)))))\n    return bin.roundToInt().map(String.init)",
  "    let result = (n - m) / 2.0\n    let result = Int(result)\n    if result < 0\
    \ {\n        return .failure(-1)\n    }\n    return .success(String(format: \"\
    0b%0*b\", result.magnitude, result))", "    guard n >= 0 && m >= 0 else {\n  \
    \      return .failure(-1)\n    }\n    let sum = n * m / 2\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ &avg, &sum)\n    return .success(binary)", "    let result = n / m\n    let\
    \ remainder = n % m\n    \n    if result < 0 {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(String(format: \"0b%0*b\", remainder, result))",
  "    guard n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n \
    \   let avg = (n + m) / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(n))).magnitude,\
    \ avg, Int(ceil(log2(m))).magnitude)\n    return Result.success(binary)", "  \
    \  let sum = n * m\n    let avg = sum / Double(n)\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(m), String(0), String(sum))\n    guard let bin = binary.data(using:\
    \ .utf8)?.base64EncodedString() else {\n        return .failure(-1)\n    }\n \
    \   return .success(bin)", "    let sum = n * m / 2\n    let avg = sum / 2\n \
    \   let bin = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), n, m,\
    \ Int(ceil(log2(Float(avg)))))\n    return bin.count == bin.count ? .success(bin)\
    \ : .failure(-1)", "    if n >= m {\n        return .failure(-1)\n    }\n    \n\
    \    let result = (n - m) / 2.0\n    let result = Int(result)\n    \n    if result\
    \ < 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", result.count, result))", "    let sum = n * m / 2\n    let avg =\
    \ sum / 2\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    return binary.count == m.bit_length ? .success(binary) : .failure(-1)",
  "    if n > m {\n        return .failure(-1)\n    }\n    \n    let avg = (n - m)\
    \ / 2.0\n    let bin = String(format: \"%0*b\", ceil(log2(Double(avg))).magnitude,\
    \ avg)\n    return .success(bin)", "    guard n >= 0 && m >= 0 else {\n      \
    \  return .failure(-1)\n    }\n    \n    var result = 0\n    var count = 0\n \
    \   \n    for i in 1...m {\n        if i <= n {\n            result += i\n   \
    \         count += 1\n        }\n    }\n    \n    if count == 0 {\n        return\
    \ .failure(-1)\n    }\n    \n    let avg = result / Double(count)\n    \n    return\
    \ .success(String(format: \"0b%0*b\", count, avg))", "    let sum = n * m / 2\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%b\", UInt8(avg))\n\
    \    \n    if n >= m {\n        return .failure(-1)\n    }\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ sum = n * m / 2\n    let remainder = n * m % 2\n    let avg = (sum + remainder)\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", Int(m).magnitude, String(sum),\
    \ String(remainder))\n    return .success(binary)", "    if n < m {\n        return\
    \ .failure(-1)\n    }\n    let n = n.toInt()\n    let m = m.toInt()\n    let sum\
    \ = (n - m) / 2\n    let remainder = n - sum\n    let result = String(format:\
    \ \"%0*b%0*b\", sum, remainder, sum)\n    return .success(result)", "    if n\
    \ >= m {\n        return .failure(-1)\n    }\n    let sum = (n - m) / 2\n    let\
    \ binary = String(sum)\n    return .success(binary)", "    let result = (n - m)\
    \ / 2.0\n    let result = Int(result)\n    if result < 0 {\n        return .failure(-1)\n\
    \    }\n    return .success(result)", "    let sum = n * m\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", Int(log2(Double(sum))).magnitude,\
    \ avg, Int(log2(Double(m))).magnitude)\n    \n    if binary == \"\" {\n      \
    \  return .failure(-1)\n    }\n    \n    return .success(binary)", "    if n <\
    \ m {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n    for i in\
    \ 0..<n {\n        sum += i\n    }\n    \n    var avg = sum / Double(n)\n    \n\
    \    var binary = \"\"\n    for i in 0..<n {\n        binary += String(format:\
    \ \"%0*b%0*b\", n, &i, &avg)\n    }\n    \n    return .success(binary)", "   \
    \ if n < m {\n        return .failure(-1)\n    }\n    let n = n.toInt()\n    let\
    \ m = m.toInt()\n    var sum = 0\n    for i in 0..<m {\n        sum += n\n   \
    \     n -= 1\n    }\n    let avg = sum / m\n    let binary = String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(avg)))), avg, Int(ceil(log2(Double(n)))))\n \
    \   return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder = n %\
    \ 2\n    \n    if remainder == 0 {\n        return .success(String(format: \"\
    0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n    }", "    if\
    \ n <= m {\n        return .success(String(format: \"0b%0*b\", n, m))\n    }\n\
    \    \n    let mid = m / 2\n    let lower = n - mid + 1\n    let upper = n + mid\
    \ - 1\n    \n    let lower = String(format: \"0b%0*b\", lower, mid)\n    let upper\
    \ = String(format: \"0b%0*b\", upper, mid)\n    \n    if lower < upper {\n   \
    \     return .success(lower)\n    } else {\n        return .failure(-1)\n    }",
  "    let n = n.toInt()\n    let m = m.toInt()\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n - m) / 2\n    let binary = String(sum.toBinary())\n \
    \   return .success(binary)", "    if n > m {\n        return .failure(-1)\n \
    \   }\n    var sum = 0\n    var count = 0\n    for _ in 0..<m {\n        sum +=\
    \ n\n        count += 1\n        n -= 1\n    }\n    if count == 0 {\n        return\
    \ .failure(-1)\n    }\n    return .success(String(format: \"0b%0*b\", count, String(sum)))",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m\n    let avg = sum / Double(n)\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(m), String(0), String(sum))\n    \n    if binary == String(sum)\
    \ {\n        return .success(binary)\n    } else {\n        return .failure(-1)\n\
    \    }", "    guard n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n\
    \    }\n    let sum = n * m / 2\n    let remainder = n * m % 2\n    let avg =\
    \ (sum + remainder) / 2\n    return Result.success(String(format: \"0b%0*b\",\
    \ Int(ceil(log2(Float(avg)))), avg))", "    let sum = n * m + n\n    let avg =\
    \ sum / 2\n    let binary = String(format: \"%0*b%0*b\", n, m, sum)\n    guard\
    \ let result = Int(binary) else {\n        return .failure(-1)\n    }\n    return\
    \ .success(binary)", "    let sum = n * m / 2\n    let avg = sum / 2\n    let\
    \ result = String(format: \"0b%0*b\", Int(log2(Double(avg))).magnitude, avg)\n\
    \    if result.count < n {\n        return .failure(-1)\n    }\n    return .success(result)",
  "    let sum = n * m\n    let avg = sum / Double(n)\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(m), Int(n), Int(avg))\n    guard let result = Int(binary)\
    \ else { return .failure(-1); }\n    return .success(binary)", "    if n < m {\n\
    \        return .failure(-1)\n    }\n    var sum = 0\n    var count = 0\n    for\
    \ _ in 0..<m {\n        sum += n\n        count += 1\n        n -= 1\n    }\n\
    \    if count == 0 {\n        return .failure(-1)\n    }\n    return .success(String(format:\
    \ \"0b%0*b\", count, String(sum)))", "    guard n >= m else {\n        return\
    \ .failure(-1)\n    }\n    let sum = n + m\n    let avg = sum / 2\n    let binary\
    \ = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), String(sum), String(avg))\n\
    \    return .success(binary)", "    let sum = n + m\n    let avg = sum / 2\n \
    \   let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    if\
    \ binary == \"\" {\n        return .failure(-1)\n    }\n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in 1...m {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    let avg = sum / count\n    \n    let\
    \ binary = String(format: \"%0*b%0*b\", count + 2, String(Int(avg)), count + 2)\n\
    \    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n    \
    \    return .failure(-1)\n    }\n    let sum = n * m / 2\n    let remainder =\
    \ n * m % 2\n    if remainder == 0 {\n        return .success(String(sum))\n \
    \   }\n    return .failure(-1)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let result = (n - m) / 2.0\n    let result =\
    \ Int(result)\n    \n    if result < 0 {\n        return .failure(-1)\n    }\n\
    \    \n    return .success(String(format: \"0b%0*b\", result.count, result))",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    guard let bin = binary.data(using:\
    \ .utf8) else { return .failure(-1) }\n    return .success(bin.base64EncodedString())",
  "    let sum = n + m\n    let avg = sum / 2\n    let bin = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), n, m, avg)\n    return bin.roundToInt().map(String.init)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let max = (n + m) / 2\n    let min = (n - m) / 2\n    \n    let result = (min\
    \ ..< max).reduce(0) { (result, element) in\n        let bit = element % 2\n \
    \       return result + bit\n    }\n    \n    if result > max {\n        return\
    \ .failure(-1)\n    }\n    \n    return .success(String(result, radix: 2))", " \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if sum < m {\n\
    \        return .failure(-1)\n    }\n    \n    if remainder == 0 {\n        return\
    \ .success(String(sum))\n    }\n    \n    return .success(String(sum + remainder))",
  "    let n = n.toInt()\n    let m = m.toInt()\n    \n    if n < m {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let avg = sum / 2\n\
    \    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(sum))), sum,\
    \ Int(ceil(log2(avg))), avg)\n    \n    return .success(binary)", "    guard n\
    \ >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum\
    \ = n * m / 2\n    let remainder = n % 2\n    \n    if remainder == 0 {\n    \
    \    return .success(String(format: \"0b%0*b\", Int(sum), m))\n    }\n    \n \
    \   return .failure(-1)", "    \n    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let n = n.toInt()\n    let m = m.toInt()\n  \
    \  \n    var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n        sum\
    \ += i\n        count += 1\n    }\n    \n    for i in 0..<m {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    let avg = sum / count\n    \n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))), &avg,\
    \ Int(ceil(log2(Double(count)))))\n    \n    return .success(binary)", "    if\
    \ n >= m {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let\
    \ remainder = n * m % 2\n    return .success(String(sum) + String(remainder))",
  "    let sum = n * m\n    let avg = sum / 2\n    let bin = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), n, m, Int(ceil(log2(Float(avg)))))\n    \n    if\
    \ sum > m {\n        return .failure(-1)\n    }\n    \n    return .success(bin)",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", Int(log2(Double(sum))).magnitude, n, m, avg)\n    return binary.isValid\n\
    \        ? .success(binary)\n        : .failure(sum)", "    let n = n.toInt()\n\
    \    let m = m.toInt()\n    if n < m {\n        return .failure(-1)\n    }\n \
    \   let sum = (n - m) / 2\n    let binary = String(sum.toBinary())\n    return\
    \ .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m / 2\n    let avg = sum / 2\n    \n    let binary\
    \ = String(format: \"%b\", Int(avg))\n    \n    if binary.count == 1 {\n     \
    \   return .success(binary)\n    }\n    \n    let remainder = binary.dropLast()\n\
    \    \n    return .failure(-1) if remainder.count > 1 {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n\
    \        return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    }\n    \n    return .failure(-1)", "    let sum =\
    \ n * m / 2\n    let remainder = n * m % 2\n    \n    if sum < m {\n        return\
    \ .failure(-1)\n    }\n    \n    return .success(String(format: \"0b%0*b\", (remainder\
    \ + 1).bitLength, sum))", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n\
    \        sum += i\n        count += 1\n    }\n    \n    for i in 0..<m {\n   \
    \     sum += i\n        count += 1\n    }\n    \n    if count == 0 {\n       \
    \ return .failure(-1)\n    }\n    \n    if n == m {\n        return .success(String(format:\
    \ \"0b%0*b\", count, sum))\n    }\n    \n    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    var remainder = sum % m\n    \n    if remainder == 0 {\n   \
    \     return .success(String(format: \"0b%0*b\", count, sum))\n    }\n    \n \
    \   return .success(String(format: \"0b%0*b\", count, sum + remainder))", "  \
    \  guard n >= m else {\n        return .failure(-1)\n    }\n    let sum = n ...\
    \ m\n    let avg = sum.average()\n    let bin = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(avg)))),\
    \ sum, Int(ceil(log2(Double(avg)))))\n    return .success(bin)", "    guard n\
    \ >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum\
    \ = n * m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(sum)))), n, m, avg)\n    \n    if binary == String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), n, m, avg) {\n        return .success(binary)\n\
    \    } else {\n        return .failure(-1)\n    }", "    let sum = n + m\n   \
    \ let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg),\
    \ 0, Int(sum))\n    return binary.roundToInt().map(String.init)", "    if n >\
    \ m {\n        return .failure(-1)\n    }\n    var sum = 0\n    for i in 0..<n\
    \ {\n        sum += i\n    }\n    let avg = sum / Double(n)\n    let binary =\
    \ String(format: \"%0*b%0*b\", Int(ceil(log2(Double(m)))), String(repeating: 0,\
    \ count: Int(ceil(log2(Double(n))) - Int(ceil(log2(Double(m)))))) + String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating: 0, count: Int(ceil(log2(Double(m)))\
    \ - Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ String(repeating: 0, count: Int(ceil(log2(Double(m))) - Int(ceil(log2(Double(n))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating:\
    \ 0, count: Int(ceil(log2(Double(m))) - Int(ceil(log2(Double(n)))))) + String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating: 0, count: Int(ceil(log2(Double(m)))\
    \ - Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ String(repeating: 0, count: Int(ceil(log2(Double(m))) - Int(ceil(log2(Double(n))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating:\
    \ 0, count: Int(ceil(log2(Double(m))) - Int(ceil(log2(Double(n)))))) + String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating: 0, count: Int(ceil(log2(Double(m)))\
    \ - Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ String(repeating: 0, count: Int(ceil(log2(Double(m))) - Int(ceil(log2(Double(n))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating:\
    \ 0, count: Int(ceil(log2(Double(m))) - Int(ceil(log2(Double(n)))))) + String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(n)))), String(repeating: 0, count: Int(ceil(log2(Double(m)))\
    \ - Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ String(repeat", "    guard n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n\
    \    }\n    \n    let n = n.toInt()\n    let m = m.toInt()\n    \n    var sum\
    \ = 0\n    for i in 0..<n {\n        sum += i\n    }\n    \n    for i in 0..<m\
    \ {\n        sum += i\n    }\n    \n    if n == m {\n        return Result.success(String(format:\
    \ \"0b%b\", sum))\n    }\n    \n    return Result.failure(-1)", "    guard n >=\
    \ 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n    \n    var\
    \ sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    \n    for i in 0..<m\
    \ {\n        sum += i\n    }\n    \n    if n == m {\n        return Result.success(String(format:\
    \ \"0b%0*b\", n, sum))\n    }\n    \n    return Result.failure(-1)", "    if n\
    \ > m {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let\
    \ remainder = n * m % 2\n    let binary = String(format: \"%b\", sum)\n    let\
    \ remainderBinary = String(format: \"%b\", remainder)\n    return .success(binary)",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %b\", Int(avg))\n    guard let bin = binary.data(using: .utf8)?.base64EncodedString()\
    \ else {\n        return .failure(-1)\n    }\n    return .success(bin)", "   \
    \ guard n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n  \
    \  let avg = n / m\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(m))),\
    \ n, m, avg)\n    return Result.success(binary)", "    let sum = n + m\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%b\", Int(avg))\n    guard\
    \ let n = Int(binary) else {\n        return .failure(-1)\n    }\n    return .success(String(format:\
    \ \"0b%0*b\", n, m))", "    guard n >= m else {\n        return .failure(-1)\n\
    \    }\n    \n    let result = ((n - m) / 2.0).rounded()\n    let binary = String(result)\n\
    \    \n    if binary == \"0\" {\n        return .success(binary)\n    }\n    \n\
    \    return .failure(-1)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ Result.failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    \n    if remainder == 0 {\n        return Result.success(String(format:\
    \ \"0b%0*b\", n, sum))\n    } else {\n        return Result.failure(-1)\n    }",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %b\", Int(avg))\n    guard binary != \"\" else { return .failure(-1) }\n    return\
    \ .success(binary)", "    let result = n / m\n    let remainder = n % m\n    \n\
    \    if remainder == 0 {\n        return .success(String(format: \"0b%0*b\", result.bitCount,\
    \ result))\n    }\n    \n    return .failure(-1)", "    if n < m {\n        return\
    \ .failure(-1)\n    }\n    var sum = 0\n    var count = 0\n    for i in 0..<n\
    \ {\n        sum += i\n        count += 1\n    }\n    let avg = sum / count\n\
    \    let binary = String(format: \"%0*b%0*b\", count + 1, String(sum), String(avg))\n\
    \    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m + n\n    let avg = sum / 2\n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), &avg, &sum)\n\
    \    return .success(binary)", "    let n = n.toInt()\n    let m = m.toInt()\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    let result = (n - m)\
    \ / 2.0\n    let result = result.round()\n    let result = result * 2\n    let\
    \ result = String(result)\n    return .success(result)", "    guard n >= 0 &&\
    \ m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum = n * m\
    \ / 2\n    let avg = sum / 2\n    \n    let result = String(format: \"0b%0*b\"\
    , Int(log2(Double(sum))), avg)\n    \n    if result.count == 1 {\n        return\
    \ .success(result)\n    }\n    \n    return .failure(-1)", "    guard n >= 0 &&\
    \ m >= 0 else {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n \
    \   for i in 0..<n {\n        sum += i\n    }\n    \n    var count = 0\n    for\
    \ i in 0..<m {\n        count += i\n    }\n    \n    if n == m {\n        return\
    \ .success(String(format: \"0b%0*b\", count, sum))\n    }\n    \n    if n > m\
    \ {\n        return .failure(-1)\n    }\n    \n    var result = 0\n    for i in\
    \ 0..<n {\n        result += sum - i\n    }\n    \n    for i in 0..<m {\n    \
    \    result += count - i\n    }\n    \n    return .success(String(format: \"0b%0*b\"\
    , count, result))", "    guard n >= m else {\n        return .failure(-1)\n  \
    \  }\n    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), n, m, avg)\n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in 0..<m {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    if n == m {\n        return .success(String(format:\
    \ \"0b%0*b\", count, String(sum)))\n    }\n    \n    for i in 0..<n {\n      \
    \  sum += i\n        count += 1\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", count, String(sum)))", "    let sum = n * m / 2\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    \n    if binary == \"0b0\" {\n        return .failure(-1)\n    }\n\
    \    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n    \
    \    return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let avg =\
    \ sum / 2\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    \n    return .success(binary)", "    if n < m {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%b\", UInt8(avg))\n    return .success(binary)", "    let sum = n * m\n  \
    \  let avg = sum / 2\n    let result = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    \n    if sum > m {\n        return .failure(-1)\n    }\n    \n   \
    \ return .success(result)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for\
    \ i in 0..<n {\n        sum += i\n        count += 1\n    }\n    \n    for i in\
    \ 0..<m {\n        sum += i\n        count += 1\n    }\n    \n    if count ==\
    \ 0 {\n        return .failure(-1)\n    }\n    \n    let avg = sum / count\n \
    \   \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))),\
    \ &sum, &avg)\n    \n    return .success(binary)", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for\
    \ i in 0..<n {\n        sum += i\n        count += 1\n    }\n    \n    for i in\
    \ 0..<m {\n        sum += i\n        count += 1\n    }\n    \n    if count ==\
    \ 0 {\n        return .failure(-1)\n    }\n    \n    let avg = sum / count\n \
    \   \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))),\
    \ &avg, Int(ceil(log2(Double(count)))))\n    \n    return .success(binary)", " \
    \   if n > m {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n  \
    \  var count = 0\n    for i in 0..<n {\n        sum += i\n        count += 1\n\
    \    }\n    \n    var result = 0\n    for i in 0..<m {\n        result += sum\n\
    \        count += 1\n    }\n    \n    if count > 0 {\n        result = result\
    \ / count\n    }\n    \n    if count > 1 {\n        result = result + String(format:\
    \ \"%0*b\", (count - 1).bit_length(), 1)\n    }\n    \n    return .success(result)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), &sum, &avg)\n    \n    return .success(binary)",
  "    if n >= m {\n        return .failure(-1)\n    }\n    let sum = n + m\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0,\
    \ Int(sum))\n    return .success(binary)", "    \n    let sum = n * m / 2\n  \
    \  let avg = sum / 2\n    \n    let binary = String(format: \"%0*b\", Int(ceil(log2(Float(sum)))),\
    \ avg)\n    \n    if binary == String(format: \"%0*b\", Int(ceil(log2(Float(sum)))),\
    \ avg) {\n        return .success(binary)\n    } else {\n        return .failure(-1)\n\
    \    }", "    let sum = n * m + n\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", n, m, avg)\n    return binary.roundToInt()", "    let sum = n\
    \ * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), n, m, avg)\n    return binary.isValidBinary ? .success(binary)\
    \ : .failure(-1)", "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary\
    \ = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    guard let bin\
    \ = binary.data(using: .utf8) else { return .failure(-1) }\n    return .success(bin.base64EncodedString())",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in stride(from: n, through:\
    \ m, by: 1) {\n        sum += i\n        count += 1\n    }\n    \n    if count\
    \ == 0 {\n        return .failure(-1)\n    }\n    \n    let avg = Double(sum)\
    \ / Double(count)\n    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))),\
    \ &sum, &count)\n    \n    return .success(binary)", "    let sum = n * m / 2\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ &sum, &avg)\n    return binary.count == Int(ceil(log2(Double(sum)))) ? .success(binary)\
    \ : .failure(-1)", "    let n = n.toInt()\n    let m = m.toInt()\n    if n > m\
    \ {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let remainder\
    \ = n % 2\n    let result = String(format: \"0b%0*b\", (remainder + 1).bitLength,\
    \ sum)\n    return .success(result)", "    let n = n.toInt()\n    let m = m.toInt()\n\
    \    \n    if n > m {\n        return .failure(-1)\n    }\n    \n    let sum =\
    \ n * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(sum)))), &avg, &sum)\n    \n    return .success(binary)",
  "    if n > m {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n \
    \   let remainder = n * m % 2\n    let avg = (sum + remainder) / 2\n    let binary\
    \ = String(format: \"%0*b%0*b\", Int(m).magnitude, String(sum).utf8, String(remainder).utf8)\n\
    \    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let max = (m + n) / 2\n    \n    if max > m {\n\
    \        return .failure(-1)\n    }\n    \n    let result = String(format: \"\
    %0*b%0*b\", n, m, m, n)\n    \n    if let index = result.index(of: \"0\") {\n\
    \        return .success(result[index..<result.index(before: index)])\n    }\n\
    \    \n    return .success(result)", "    let sum = n * m / 2\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", 0, n, 0, m, 0, avg)\n   \
    \ if binary == \"\" {\n        return .failure(-1)\n    }\n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    \n    let binary = String(format:\
    \ \"%0*b\", Int(ceil(log2(Double(sum)))), avg)\n    \n    if binary == String(format:\
    \ \"%0*b\", Int(ceil(log2(Double(sum)))), 0) {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(binary)", "    let sum = n * m / 2\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", n, m, sum)\n  \
    \  guard let bin = Int(binary) else {\n        return .failure(-1)\n    }\n  \
    \  return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder = n *\
    \ m % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    }\n    \n    return .failure(-1)", "    let sum =\
    \ n * m\n    let avg = sum / Double(n)\n    let bin = String(format: \"%0*b\"\
    , Int(ceil(log2(Double(n)))), String(avg))\n    return bin.roundToInt().map(String.init)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let n = n.toInt()\n    let m = m.toInt()\n    \n    if n == m {\n        return\
    \ .success(String(format: \"0b%0*b\", n, m))\n    }\n    \n    let mid = n + (m\
    \ / 2)\n    let left = (n - mid)\n    let right = (mid - m)\n    \n    let leftStr\
    \ = String(format: \"0b%0*b\", left, m)\n    let rightStr = String(format: \"\
    0b%0*b\", right, m)\n    \n    if left == 0 {\n        return .success(leftStr)\n\
    \    }\n    \n    if right == 0 {\n        return .success(rightStr)\n    }\n\
    \    \n    let midStr = String(format: \"0b%0*b\", mid, m)\n    \n    return .success(leftStr\
    \ + midStr + rightStr)", "    let sum = n * m + n\n    let avg = sum / 2\n   \
    \ let binary = String(format: \"%0*b%0*b\", Int(m), Int(n), Int(avg))\n    guard\
    \ let result = Int(binary) else {\n        return .failure(-1)\n    }\n    return\
    \ .success(binary)", "    let sum = n * m / 2\n    let remainder = n * m % 2\n\
    \    let avg = sum + remainder\n    return avg <= m ? .success(String(format:\
    \ \"0b%0*b\", n, avg)) : .failure(-1)", "    guard n >= 0 && m >= 0 else {\n \
    \       return .failure(-1)\n    }\n    let sum = n * m / 2\n    let avg = sum\
    \ / 2\n    let bin = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ sum, Int(ceil(log2(Double(avg)))))\n    return .success(bin)", "    let sum\
    \ = n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , 0, Int(avg), 0, Int(sum))\n    guard let result = Int(binary) else {\n     \
    \   return .failure(-1)\n    }\n    return .success(binary)", "    guard n >=\
    \ 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum =\
    \ n * m / 2\n    let remainder = n * m % 2\n    \n    let result = String(format:\
    \ \"0b%0*b\", remainder, sum)\n    \n    if remainder == 0 {\n        return .success(result)\n\
    \    } else {\n        return .failure(-1)\n    }", "    guard n >= 0 && m >=\
    \ 0 else {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n\
    \    var count = 0\n    \n    for i in 0..<m {\n        sum += i\n        count\
    \ += 1\n    }\n    \n    if n == m {\n        return Result.success(String(format:\
    \ \"0b%0*b\", count, sum))\n    }\n    \n    for i in 0..<n {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    return Result.success(String(format:\
    \ \"0b%0*b\", count, sum))", "    let sum = n * m / 2\n    let avg = sum / 2\n\
    \    let binary = String(format: \"%0*b%0*b\", n, m, sum, avg)\n    guard let\
    \ result = Int(binary) else {\n        return .failure(-1)\n    }\n    return\
    \ .success(binary)", "    guard n >= m else {\n        return .failure(-1)\n \
    \   }\n    let avg = (n + m) / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , avg - n, avg - m, avg - n + m)\n    return .success(binary)", "    \n    let\
    \ sum = n * m\n    let avg = sum / 2\n    \n    if sum > m {\n        return .failure(-1)\n\
    \    }\n    \n    let result = String(format: \"0b%0*b\", Int(m), avg)\n    return\
    \ .success(result)", "    if n > m {\n        return .failure(-1)\n    }\n   \
    \ \n    var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n        sum\
    \ += i\n        count += 1\n    }\n    \n    for i in 0..<m {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    return .success(String(format: \"0b%0*b\"\
    , count, String(format: \"%0*d\", n, sum)))", "    let result = (n - m) / 2.0\n\
    \    let binary = String(result, radix: 2)\n    if binary == \"0\" {\n       \
    \ return .failure(-1)\n    }\n    return .success(binary)", "    let sum = n +\
    \ m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg),\
    \ 0, Int(sum))\n    guard let bin = binary.data(using: .utf8)?.base64EncodedString()\
    \ else {\n        return .failure(-1) // or .failure(NSError(domain: \"...\",\
    \ code: -1, userInfo: nil))\n    }\n    return .success(bin)", "    let sum =\
    \ n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\",\
    \ 0, Int(avg), 0, Int(sum))\n    return binary.roundToInt().map(String.init)",
  "    guard n >= m else {\n        return .failure(-1)\n    }\n    let sum = n *\
    \ m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\", Int(avg))\n\
    \    return .success(binary)", "    let n = n.toInt()\n    let m = m.toInt()\n\
    \    \n    if n > m {\n        return .failure(-1)\n    }\n    \n    let result\
    \ = (n - m) / 2.0\n    let result = Int(result)\n    \n    if result < 0 {\n \
    \       return .failure(-1)\n    }\n    \n    return .success(result)", "    let\
    \ sum = n + m\n    let avg = sum / 2\n    let remainder = sum % 2\n    \n    if\
    \ remainder == 0 {\n        return .success(String(format: \"0b%0*b\", n, avg))\n\
    \    }\n    \n    return .failure(-1)", "    let result = (n - m) / 2.0\n    let\
    \ binary = String(result, radix: 2)\n    return binary.isEmpty ? .failure(-1)\
    \ : .success(binary)", "    let sum = n + m\n    let avg = sum / 2\n    let binary\
    \ = String(format: \"%0*b%0*b\", Int(log2(Double(sum))).magnitude, n, m, avg)\n\
    \    return binary.isValidBinary ? .success(binary) : .failure(-1)", "    let\
    \ sum = n * m / 2\n    let avg = sum / 2\n    let bin = String(format: \"%0*b%0*b\"\
    , Int(log2(Double(sum))).magnitude, n, m, Int(log2(Double(avg))).magnitude)\n\
    \    return bin.count == Int(log2(Double(sum))).magnitude ? .success(bin) : .failure(-1)",
  "    let sum = n ... m\n    let avg = sum.average()\n    let bin = String(format:\
    \ \"%b\", avg)\n    guard let bin = bin.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\
    \ else {\n        return .failure(-1)\n    }\n    return .success(bin)", "   \
    \ let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), &avg, &sum)\n    \n    if binary\
    \ == \"\" {\n        return .failure(-1)\n    }\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let avg = (n - m) / 2\n    let binary = String(format: \"%0*b%0*b\", avg,\
    \ n-m, avg-n)\n    \n    return .success(binary)", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m\n    let avg = sum / 2\n    let binary\
    \ = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), &avg, &sum)\n  \
    \  return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder = n *\
    \ m % 2\n    \n    return .success(String(format: \"0b%0*b\", remainder, sum))",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    guard let bin = binary.data(using:\
    \ .utf8) else { return .failure(-1) }\n    return .success(bin.base64EncodedString())",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    for i in 0..<m {\n        sum += i\n\
    \        count += 1\n    }\n    \n    if count == 0 {\n        return .failure(-1)\n\
    \    }\n    \n    let avg = Double(sum) / Double(count)\n    \n    if avg < 0\
    \ {\n        return .failure(-1)\n    }\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(count)))), &sum, &count)\n    \n    return\
    \ .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    var result = 0\n    var count = 0\n    \n    for i in 0..<n\
    \ {\n        result += i\n        count += 1\n    }\n    \n    for i in 0..<m\
    \ {\n        result += i\n        count += 1\n    }\n    \n    if count == 0 {\n\
    \        return .failure(-1)\n    }\n    \n    let avg = result / Double(count)\n\
    \    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))),\
    \ &avg, Int(ceil(log2(Double(count)))))\n    \n    return .success(binary)", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(sum)))), sum, sum)\n    return .success(binary)", "   \
    \ \n    // Your code here\n    \n    return .success(String(format: \"0b%0*b\"\
    , n, m))", "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    guard let bin = binary.data(using:\
    \ .utf8)?.base64EncodedString() else {\n        return .failure(-1)\n    }\n \
    \   return .success(bin)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m / 2\n    let remainder = n % 2\n  \
    \  let result = String(format: \"0b%0*b\", (remainder + 1).bitLength, sum)\n \
    \   return .success(result)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let n = Int(n)\n    let m = Int(m)\n    \n  \
    \  let sum = n * m / 2\n    let avg = sum / 2\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), &sum, &avg)\n    \n    return .success(binary)",
  "    \n    // TODO: implement this function\n    return .failure(-1)", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let sum = n\
    \ * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\", Int(avg))\n\
    \    return .success(binary)", "    guard n >= m else {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = (n - m) / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , 0, sum, sum)\n    \n    return .success(binary)", "    let sum = n + m\n   \
    \ let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ n, m, avg)\n    return binary.isValid.map { binary }", "    if n < m {\n   \
    \     return .failure(-1)\n    }\n    var sum = 0\n    var count = 0\n    for\
    \ _ in 0..<m {\n        sum += n\n        count += 1\n        n -= 1\n    }\n\
    \    if count == 0 {\n        return .failure(-1)\n    }\n    let avg = Double(sum)\
    \ / Double(count)\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))),\
    \ String(sum), String(count))\n    return .success(binary)", "    let result =\
    \ n / m\n    if result > m {\n        return .failure(-1)\n    }\n    return .success(String(format:\
    \ \"0b%0*b\", result.magnitude, result))", "    guard n >= 0 && m >= 0 else {\n\
    \        return Result.failure(-1)\n    }\n    \n    let sum = n + m\n    let\
    \ avg = sum / 2\n    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ n, m, avg)\n    \n    return Result.success(binary)", "    if n > m {\n    \
    \    return .failure(-1)\n    }\n    let result = (n ..< m).reduce(0) { (result,\
    \ element) in\n        let remainder = element % 2\n        result += remainder\n\
    \        element /= 2\n        return result\n    }\n    let result = result /\
    \ 2\n    let result = String(result, radix: 2)\n    return .success(result)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let avg = (n + m) / 2\n    \n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(avg)))), avg, Int(ceil(log2(Double(avg)))))\n    \n   \
    \ return .success(binary)", "    if n < m {\n        return .failure(-1)\n   \
    \ }\n    let sum = n * m / 2\n    let remainder = n % 2\n    let result = String(format:\
    \ \"%0*b%0*b\", Int(m), remainder, Int(sum))\n    return .success(result)", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n\
    \    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(sum))\n    }\n    \n    return .failure(-1)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let result = (n - m) / 2.0\n    let result = Int(result)\n    \n    if result\
    \ < 0 {\n        return .failure(-1)\n    }\n    \n    return .success(result)",
  "    let sum = n * m\n    let avg = sum / 2\n    let remainder = sum % 2\n    \n\
    \    if remainder == 0 {\n        return .success(String(format: \"0b%0*b\", n,\
    \ String(count: m, radix: 2)))\n    }\n    \n    return .failure(-1)", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let sum = n\
    \ * m\n    let avg = sum / Double(m)\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(m), String(sum), Int(n))\n    return .success(binary)", "    guard n >=\
    \ 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let avg =\
    \ (n + m) / 2\n    let binary = String(format: \"%0*b%0*b\", n, avg, m, avg)\n\
    \    \n    if binary == String(format: \"%0*b%0*b\", n, avg, m).lowercased() {\n\
    \        return .success(binary)\n    } else {\n        return .failure(-1)\n\
    \    }", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n   \
    \ }\n    \n    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if\
    \ remainder == 0 {\n        return .success(String(format: \"0b%b\", sum))\n \
    \   }\n    \n    return .failure(-1)", "    if n >= m {\n        return .failure(-1)\n\
    \    }\n    \n    var sum = 0\n    var count = 0\n    for i in 0..<n {\n     \
    \   sum += i\n        count += 1\n    }\n    \n    if count > 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", count, sum))\n    }\n    \n    return .failure(-1)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    \n    for\
    \ i in 0..<m {\n        sum += i\n    }\n    \n    if sum < n {\n        return\
    \ .failure(-1)\n    }\n    \n    let avg = sum / m\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(avg)))), avg, Int(ceil(log2(Double(avg)))))\n\
    \    \n    return .success(binary)", "    \n    guard n >= 0 && m >= 0 else {\n\
    \        return .failure(-1)\n    }\n    \n    let n = n.toInt()\n    let m =\
    \ m.toInt()\n    \n    let sum = n * m / 2\n    let remainder = n * m % 2\n  \
    \  \n    if remainder == 0 {\n        return .success(String(sum))\n    } else\
    \ {\n        return .failure(-1)\n    }"]
stop_tokens:
- "\n}"
