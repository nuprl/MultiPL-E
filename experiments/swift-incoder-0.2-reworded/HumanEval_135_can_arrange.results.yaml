language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n     \
    \   if arr[i] > arr[maxIndex] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b44308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b43fff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3b43fff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3b43fff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3b43ffebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3b43dfee83 <unavailable> + 188035

    6    tmpg2b9odql                        0x000055ba1c004a28 <unavailable> + 6696

    7    tmpg2b9odql                        0x000055ba1c0044d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b3b444f4460 __libc_start_main +
    245

    9    tmpg2b9odql                        0x000055ba1c0041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7hn99y9a/tmp7hn99y9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bf3d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bf3a8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bf3a8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bf3a8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hn99y9a                        0x00005604bf0d9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1bf3f80460 __libc_start_main +
    245

    6    tmp7hn99y9a                        0x00005604bf0d91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = arr[0]\n    for idx in 1..<arr.count {\n\
    \        if arr[idx] > largest {\n            largest = idx\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk9y7d5f7/tmpk9y7d5f7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0443113c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0442e0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0442e0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0442e097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9y7d5f7                        0x000055f2bc012552 <unavailable> + 5458

    5    libc.so.6                          0x00002b04432ff460 __libc_start_main +
    245

    6    tmpk9y7d5f7                        0x000055f2bc0121a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            index\
    \ = idx\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplexdfsv6/tmplexdfsv6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad339f77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad339c6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad339c6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad339c6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplexdfsv6                        0x000055cd56dd2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad33a163460 __libc_start_main +
    245

    6    tmplexdfsv6                        0x000055cd56dd21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for x in arr {\n  \
    \      if x > max {\n            max = x\n            index = index + 1\n    \
    \    }\n    }\n    if index == 0 {\n        return -1\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk54o22kl/tmpk54o22kl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3698234c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3697f2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3697f2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3697f2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk54o22kl                        0x00005584fded4482 <unavailable> + 5250

    5    libc.so.6                          0x00002b3698420460 __libc_start_main +
    245

    6    tmpk54o22kl                        0x00005584fded40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7hn99y9a/tmp7hn99y9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bf3d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bf3a8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bf3a8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bf3a8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hn99y9a                        0x00005604bf0d9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1bf3f80460 __libc_start_main +
    245

    6    tmp7hn99y9a                        0x00005604bf0d91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = 0\n    for element\
    \ in arr {\n        if element > largest {\n            largest = element\n  \
    \          index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb4hcm6lo/tmpb4hcm6lo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44253a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b442509fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b442509f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b442509e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4hcm6lo                        0x0000565484601482 <unavailable> + 5250

    5    libc.so.6                          0x00002b4425594460 __libc_start_main +
    245

    6    tmpb4hcm6lo                        0x00005654846010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = -1\n    for i in arr\
    \ {\n        if i > largest {\n            largest = i\n            index = i\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp48nkdq7q/tmp48nkdq7q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c3bff1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3bce8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3bce8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3bce77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48nkdq7q                        0x000055b5e34a3482 <unavailable> + 5250

    5    libc.so.6                          0x00002b0c3c1dd460 __libc_start_main +
    245

    6    tmp48nkdq7q                        0x000055b5e34a30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxIndex = maxValue\n \
    \           maxValue = value\n        } else if value == maxValue {\n        \
    \    maxIndex++\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3juza6j5.swift:19:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxIndex\
    \ = index\n            maxValue = arr[index]\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpq12c36g2/tmpq12c36g2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66d89eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66d86e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66d86e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66d86e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq12c36g2                        0x000055909ce8d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b66d8bda460 __libc_start_main +
    245

    6    tmpq12c36g2                        0x000055909ce8d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcqkuwx8/tmpzcqkuwx8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4ba2ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4b9fe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4b9fe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4b9fe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcqkuwx8                        0x0000564a1eacf552 <unavailable> + 5458

    5    libc.so.6                          0x00002af4ba4d7460 __libc_start_main +
    245

    6    tmpzcqkuwx8                        0x0000564a1eacf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxIndex = maxValue\n \
    \           maxValue = value\n        } else if value == maxValue {\n        \
    \    maxIndex++\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3juza6j5.swift:19:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for element in arr\
    \ {\n        if element > max {\n            max = element\n            index\
    \ = index + 1\n        }\n    }\n    if index == 0 {\n        return -1\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpz4l96c0k/tmpz4l96c0k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7870119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b786fe10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b786fe10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b786fe0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4l96c0k                        0x00005581da5b6482 <unavailable> + 5250

    5    libc.so.6                          0x00002b7870305460 __libc_start_main +
    245

    6    tmpz4l96c0k                        0x00005581da5b60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = 0\n    for element\
    \ in arr {\n        if element > largest {\n            largest = element\n  \
    \      }\n        if element == largest {\n            index = index + 1\n   \
    \     }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkpwjka3m/tmpkpwjka3m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad492114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad491e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad491e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad491e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkpwjka3m                        0x000055dd7323c482 <unavailable> + 5250

    5    libc.so.6                          0x00002ad492300460 __libc_start_main +
    245

    6    tmpkpwjka3m                        0x000055dd7323c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var largestIndex = -1\n    for\
    \ index in 0..<arr.count {\n        if arr[index] > largest {\n            largest\
    \ = arr[index]\n            largestIndex = index\n        }\n    }\n    return\
    \ largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb_psqjnu/tmpb_psqjnu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34645d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34642c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34642c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34642c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_psqjnu                        0x0000561abfbe9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b34647bc460 __libc_start_main +
    245

    6    tmpb_psqjnu                        0x0000561abfbe91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcqkuwx8/tmpzcqkuwx8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4ba2ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4b9fe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4b9fe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4b9fe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcqkuwx8                        0x0000564a1eacf552 <unavailable> + 5458

    5    libc.so.6                          0x00002af4ba4d7460 __libc_start_main +
    245

    6    tmpzcqkuwx8                        0x0000564a1eacf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = 0\n    for element\
    \ in arr {\n        if element > largest {\n            largest = element\n  \
    \          index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb4hcm6lo/tmpb4hcm6lo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44253a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b442509fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b442509f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b442509e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4hcm6lo                        0x0000565484601482 <unavailable> + 5250

    5    libc.so.6                          0x00002b4425594460 __libc_start_main +
    245

    6    tmpb4hcm6lo                        0x00005654846010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = 0\n    for element\
    \ in arr {\n        if element > largest {\n            largest = element\n  \
    \          index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb4hcm6lo/tmpb4hcm6lo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44253a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b442509fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b442509f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b442509e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4hcm6lo                        0x0000565484601482 <unavailable> + 5250

    5    libc.so.6                          0x00002b4425594460 __libc_start_main +
    245

    6    tmpb4hcm6lo                        0x00005654846010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var largestIndex: Int = 0\n  \
    \  for i in 0..<arr.count {\n        if arr[i] >= arr[largest] {\n           \
    \ largest = arr[i]\n            largestIndex = i\n        }\n    }\n    return\
    \ largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmp8luvvh/tmpmp8luvvh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33234fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33231f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33231f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33231f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp8luvvh                        0x000055cfb559c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b33236ea460 __libc_start_main +
    245

    6    tmpmp8luvvh                        0x000055cfb559c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \     break\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af64231bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af642012561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af642012286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af64201213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af642011bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af641e11e83 <unavailable> + 188035

    6    tmpzrncyfc7                        0x000055ae04d15a4a <unavailable> + 6730

    7    tmpzrncyfc7                        0x000055ae04d154d4 <unavailable> + 5332

    8    libc.so.6                          0x00002af642507460 __libc_start_main +
    245

    9    tmpzrncyfc7                        0x000055ae04d151a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcqkuwx8/tmpzcqkuwx8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4ba2ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4b9fe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4b9fe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4b9fe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcqkuwx8                        0x0000564a1eacf552 <unavailable> + 5458

    5    libc.so.6                          0x00002af4ba4d7460 __libc_start_main +
    245

    6    tmpzcqkuwx8                        0x0000564a1eacf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for x in arr {\n  \
    \      if x > max {\n            max = x\n            index = x\n        }\n \
    \   }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp30m1sbkm/tmp30m1sbkm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bb58c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bb55bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bb55bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bb55be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30m1sbkm                        0x0000564e821ae482 <unavailable> + 5250

    5    libc.so.6                          0x00002b2bb5ab4460 __libc_start_main +
    245

    6    tmp30m1sbkm                        0x0000564e821ae0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = -1\n    for idx in\
    \ 0..<arr.count {\n        if arr[idx] > largest {\n            largest = arr[idx]\n\
    \            index = idx\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphb886qg_/tmphb886qg_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722ca7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722c772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722c772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722c7717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphb886qg_                        0x0000559e314bb552 <unavailable> + 5458

    5    libc.so.6                          0x00002b722cc67460 __libc_start_main +
    245

    6    tmphb886qg_                        0x0000559e314bb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqp9hswes/tmpqp9hswes.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3e3eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3e3be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3e3be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3e3be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqp9hswes                        0x000055c78cb40552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae3e40db460 __libc_start_main +
    245

    6    tmpqp9hswes                        0x000055c78cb401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in arr {\n        if i > maxValue {\n            maxValue = i\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph4bulll5/tmph4bulll5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcb0405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcb00fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcb00fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcb00fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4bulll5                        0x00005569b33634d2 <unavailable> + 5330

    5    libc.so.6                          0x00002adcb05f1460 __libc_start_main +
    245

    6    tmph4bulll5                        0x00005569b3363129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in arr {\n        if i > maxValue {\n            maxValue = i\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph4bulll5/tmph4bulll5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcb0405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcb00fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcb00fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcb00fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4bulll5                        0x00005569b33634d2 <unavailable> + 5330

    5    libc.so.6                          0x00002adcb05f1460 __libc_start_main +
    245

    6    tmph4bulll5                        0x00005569b3363129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > largest {\n            largest = arr[i]\n           \
    \ index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpexc0mlmu/tmpexc0mlmu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1dab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1da86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1da86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1da86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexc0mlmu                        0x0000560a63fca552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac1dad63460 __libc_start_main +
    245

    6    tmpexc0mlmu                        0x0000560a63fca1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcqkuwx8/tmpzcqkuwx8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4ba2ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4b9fe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4b9fe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4b9fe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcqkuwx8                        0x0000564a1eacf552 <unavailable> + 5458

    5    libc.so.6                          0x00002af4ba4d7460 __libc_start_main +
    245

    6    tmpzcqkuwx8                        0x0000564a1eacf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = arr[0]\n    for val in arr {\n        if\
    \ val > largest {\n            largest = val\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpipjt5tl2/tmpipjt5tl2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2323945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b232363cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b232363c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b232363b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipjt5tl2                        0x000055e9363c64d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b2323b31460 __libc_start_main +
    245

    6    tmpipjt5tl2                        0x000055e9363c6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpskhhp8dp.swift:17:24: error: cannot find 'i' in scope\n       \
    \     maxIndex = i\n                       ^\n"
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7hn99y9a/tmp7hn99y9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bf3d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bf3a8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bf3a8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bf3a8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hn99y9a                        0x00005604bf0d9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1bf3f80460 __libc_start_main +
    245

    6    tmp7hn99y9a                        0x00005604bf0d91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for element in arr\
    \ {\n        if element > max {\n            max = element\n            index\
    \ = index + 1\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0brdyq9/tmpi0brdyq9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af218dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af218af3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af218af3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af218af27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0brdyq9                        0x0000560e6989d482 <unavailable> + 5250

    5    libc.so.6                          0x00002af218fe8460 __libc_start_main +
    245

    6    tmpi0brdyq9                        0x0000560e6989d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            index\
    \ = idx\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplexdfsv6/tmplexdfsv6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad339f77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad339c6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad339c6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad339c6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplexdfsv6                        0x000055cd56dd2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad33a163460 __libc_start_main +
    245

    6    tmplexdfsv6                        0x000055cd56dd21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3dulh12b/tmp3dulh12b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79face7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79fa9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79fa9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79fa9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dulh12b                        0x000055c581df1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b79faed3460 __libc_start_main +
    245

    6    tmp3dulh12b                        0x000055c581df11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcqkuwx8/tmpzcqkuwx8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4ba2ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4b9fe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4b9fe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4b9fe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcqkuwx8                        0x0000564a1eacf552 <unavailable> + 5458

    5    libc.so.6                          0x00002af4ba4d7460 __libc_start_main +
    245

    6    tmpzcqkuwx8                        0x0000564a1eacf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiqj4uq7n.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824458
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxIndex\
    \ = index\n            maxValue = arr[index]\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpq12c36g2/tmpq12c36g2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66d89eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66d86e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66d86e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66d86e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq12c36g2                        0x000055909ce8d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b66d8bda460 __libc_start_main +
    245

    6    tmpq12c36g2                        0x000055909ce8d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3ov63v6b/tmp3ov63v6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0033df3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0033aeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0033aea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0033ae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ov63v6b                        0x0000563d954cd552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0033fdf460 __libc_start_main +
    245

    6    tmp3ov63v6b                        0x0000563d954cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6vx911vb.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824457
