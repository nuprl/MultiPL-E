language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        var ones = 0\n        for _ in 0..<num.bitWidth {\n      \
    \      if num & 1 == 1 {\n                ones += 1\n            }\n         \
    \   num >>= 1\n        }\n        result.append((ones * 10) + num)\n    }\n  \
    \  result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6536c6uv.swift:20:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num >>= 1\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    if arr.count\
    \ < 2 {\n        return result\n    }\n    var ones = arr.filter({$0 > 0}).count\n\
    \    if ones == 0 {\n        return result\n    }\n    var decimal = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal == 0 {\n        return result\n \
    \   }\n    var twos = arr.filter({$0 > 0}).filter({$0 == 1}).count\n    if twos\
    \ == 0 {\n        return result\n    }\n    var decimal2 = arr.filter({$0 > 0}).reduce(0,\
    \ {$0 + $1})\n    if decimal2 == 0 {\n        return result\n    }\n    var threes\
    \ = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).count\n    if threes\
    \ == 0 {\n        return result\n    }\n    var decimal3 = arr.filter({$0 > 0}).reduce(0,\
    \ {$0 + $1})\n    if decimal3 == 0 {\n        return result\n    }\n    var fours\
    \ = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).filter({$0 == 3}).count\n\
    \    if fours == 0 {\n        return result\n    }\n    var decimal4 = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal4 == 0 {\n        return result\n\
    \    }\n    var fives = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).filter({$0\
    \ == 3}).filter({$0 == 4}).count\n    if fives == 0 {\n        return result\n\
    \    }\n    var decimal5 = arr.filter({$0 > 0}).reduce(0, {$0 + $1})\n    if decimal5\
    \ == 0 {\n        return result\n    }\n    var sixes = arr.filter({$0 > 0}).filter({$0\
    \ == 1}).filter({$0 == 2}).filter({$0 == 3}).filter({$0 == 4}).filter({$0 == 5}).count\n\
    \    if sixes == 0 {\n        return result\n    }\n    var decimal6 = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal6 == 0 {\n        return result\n\
    \    }\n    var sevens = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 ==\
    \ 2}).filter({$0 == 3}).filter({$0 == 4}).filter({$0 == 5}).filter({$0 == 6}).count\n\
    \    if sevens == 0 {\n        return result\n    }\n    var decimal7 = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal7 == 0 {\n        return result\n\
    \    }\n    var eights = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 ==\
    \ 2}).filter({$\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5xrbl43x.swift:73:83: error: '$' is not an identifier; use backticks\
    \ to escape it\n    var eights = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0\
    \ == 2}).filter({$\n                                                         \
    \                         ^\n                                                \
    \                                  `$`\n/tmp/tmp5xrbl43x.swift:77:1: error: expected\
    \ ')' in expression list\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n^\n/tmp/tmp5xrbl43x.swift:73:81: note: to match this opening '('\n \
    \   var eights = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).filter({$\n\
    \                                                                            \
    \    ^\n/tmp/tmp5xrbl43x.swift:96:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp5xrbl43x.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmp5xrbl43x.swift:73:83: error: cannot\
    \ find '$' in scope\n    var eights = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0\
    \ == 2}).filter({$\n                                                         \
    \                         ^\n/tmp/tmp5xrbl43x.swift:77:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824831
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var oneCount\
    \ = [Int]()\n    var decimalCount = [Int]()\n    for num in arr {\n        oneCount[num.ones()]\
    \ += 1\n        decimalCount[num.decimalValue()] += 1\n    }\n    for num in oneCount\
    \ {\n        sorted = append(sorted, num)\n    }\n    for num in decimalCount\
    \ {\n        sorted = append(sorted, num)\n    }\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkzl6nfzp.swift:17:22: error: value of type 'Int' has no member\
    \ 'ones'\n        oneCount[num.ones()] += 1\n                 ~~~ ^~~~\n/tmp/tmpkzl6nfzp.swift:18:26:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        decimalCount[num.decimalValue()]\
    \ += 1\n                     ~~~ ^~~~~~~~~~~~\n/tmp/tmpkzl6nfzp.swift:21:18: error:\
    \ cannot find 'append' in scope\n        sorted = append(sorted, num)\n      \
    \           ^~~~~~\n/tmp/tmpkzl6nfzp.swift:24:18: error: cannot find 'append'\
    \ in scope\n        sorted = append(sorted, num)\n                 ^~~~~~\n/tmp/tmpkzl6nfzp.swift:26:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmpkzl6nfzp.swift:27:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10 + num)\n                ones = 0\n            } else {\n         \
    \       result.insert(num, num)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpk8y4_1p1.swift:23:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(num, num)\n                 \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted: [Int] = []\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    sorted = arr\n    sorted.sort(by: {\n        if $0\
    \ < $1 {\n            return ones > decimal\n        } else {\n            return\
    \ decimal > ones\n        }\n    })\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp__cypr7g/tmp__cypr7g.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27eec8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27ee983b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27ee983988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27ee9827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__cypr7g                        0x0000562525b7d664 <unavailable> + 5732

    5    libc.so.6                          0x00002b27eee78460 __libc_start_main +
    245

    6    tmp__cypr7g                        0x0000562525b7d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.sort()\n\
    \            }\n            oneCount = 0\n            result.append(element)\n\
    \        }\n    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsjok8ild.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones == 0 {\n            result[i] = arr[i]\n        } else {\n  \
    \          result[i] = arr[i].decimalValue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpm79i3fjo.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpm79i3fjo.swift:19:32: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            result[i] = arr[i].decimalValue\n              \
    \          ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            result += [ones]\n            ones = 1\n  \
    \      }\n    }\n    result += [ones]\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp2chfdpcx/tmp2chfdpcx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a0165ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a01351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a01351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a013507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2chfdpcx                        0x000055cec5f63604 <unavailable> + 5636

    5    libc.so.6                          0x00002b4a01846460 __libc_start_main +
    245

    6    tmp2chfdpcx                        0x000055cec5f631e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        if num == 0 {\n            continue\n        }\n        var\
    \ ones = 0\n        var dec = 0\n        while num != 0 {\n            dec +=\
    \ num % 10\n            num /= 10\n        }\n        if dec > 0 {\n         \
    \   dec -= 1\n            ones += 1\n        }\n        if ones == 0 {\n     \
    \       result.append(dec)\n        } else {\n            result.append(dec)\n\
    \            result.append(dec)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpebmh_ghr.swift:22:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= 10\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10 + num)\n                ones = 0\n            } else {\n         \
    \       result.insert(num, num)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpk8y4_1p1.swift:23:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(num, num)\n                 \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aBits = binary(a: a)\n        let bBits = binary(b: b)\n\
    \        let aCount = aBits.count\n        let bCount = bBits.count\n        if\
    \ aCount < bCount {\n            return true\n        } else if aCount > bCount\
    \ {\n            return false\n        } else {\n            let aDigits = aBits.dropLast()\n\
    \            let bDigits = bBits.dropLast()\n            let aDecimal = Int(aDigits,\
    \ radix: 2)\n            let bDecimal = Int(bDigits, radix: 2)\n            return\
    \ aDecimal < bDecimal\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpocrm46mq.swift:14:21: error: cannot find 'binary' in scope\n  \
    \      let aBits = binary(a: a)\n                    ^~~~~~\n/tmp/tmpocrm46mq.swift:15:21:\
    \ error: cannot find 'binary' in scope\n        let bBits = binary(b: b)\n   \
    \                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones == arr.count {\n        sorted = arr\n    } else {\n     \
    \   sorted = arr.sorted{ $0 > $1 }\n    }\n    if ones > arr.count {\n       \
    \ sorted = sorted.sorted{ $0 > $1 }\n    }\n    if decimal > arr.count {\n   \
    \     sorted = sorted.sorted{ $0 < $1 }\n    }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpmiydn37k/tmpmiydn37k.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8be499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8be190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8be190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8be18f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmiydn37k                        0x0000564f10252674 <unavailable> + 5748

    5    libc.so.6                          0x00002ad8be685460 __libc_start_main +
    245

    6    tmpmiydn37k                        0x0000564f10252259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArray = [Int]()\n    var\
    \ oneCount = 0\n    var decimalCount = 0\n    for element in arr {\n        if\
    \ element == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += element / 2\n        }\n    }\n    if oneCount > decimalCount {\n       \
    \ sortedArray = arr.sorted()\n    } else {\n        sortedArray = arr.sorted(by:\
    \ {\n            ($0 as Int) < ($1 as Int)\n        })\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpw_5p4kvc.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    for num in arr {\n        if num == 0 {\n            ones.append(num)\n\
    \        } else {\n            ones = sort_array(ones)\n            if ones[len(ones)-1]\
    \ < num {\n                result.append(num)\n            } else {\n        \
    \        result.extend(ones)\n                result.append(num)\n           \
    \ }\n        }\n    }\n    return sort_array(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp87vujdtz.swift:19:31: error: missing argument label 'arr:' in call\n\
    \            ones = sort_array(ones)\n                              ^\n      \
    \                        arr: \n/tmp/tmp87vujdtz.swift:20:21: error: cannot find\
    \ 'len' in scope\n            if ones[len(ones)-1] < num {\n                 \
    \   ^~~\n/tmp/tmp87vujdtz.swift:23:24: error: value of type '[Int]' has no member\
    \ 'extend'\n                result.extend(ones)\n                ~~~~~~ ^~~~~~\n\
    /tmp/tmp87vujdtz.swift:28:23: error: missing argument label 'arr:' in call\n \
    \   return sort_array(result)\n                      ^\n                     \
    \ arr: \n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    for num\
    \ in arr {\n        let bin = String(num, radix: 2)\n        let ones = bin.count(\"\
    1\")\n        if ones == 0 {\n            sorted.append(num)\n        } else {\n\
    \            let decimal = Int(bin, radix: 10)\n            sorted.append(decimal)\n\
    \        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpex_x2dpz.swift:16:24: error: cannot call value of non-function\
    \ type 'Int'\n        let ones = bin.count(\"1\")\n                       ^\n\
    /tmp/tmpex_x2dpz.swift:21:27: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n            sorted.append(decimal)\n             \
    \             ^\n/tmp/tmpex_x2dpz.swift:20:17: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \   let decimal = Int(bin, radix: 10)\n                ^\n            guard  \
    \                           else { return <#default value#> }\n/tmp/tmpex_x2dpz.swift:20:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let decimal = Int(bin, radix: 10)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmpex_x2dpz.swift:20:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let decimal = Int(bin, radix:\
    \ 10)\n                          ^\n                                         \
    \    !\n/tmp/tmpex_x2dpz.swift:21:27: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            sorted.append(decimal)\n\
    \                          ^\n                                  ?? <#default value#>\n\
    /tmp/tmpex_x2dpz.swift:21:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            sorted.append(decimal)\n \
    \                         ^\n                                 !\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10 + num)\n                ones = 0\n            } else {\n         \
    \       result.insert(result.count, num)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzjdw283o.swift:23:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.count, num)\n        \
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        ones += element\n\
    \        decimal += element / 2\n    }\n    for element in arr {\n        if ones\
    \ == 0 {\n            result.append(element)\n        } else {\n            if\
    \ element == 0 {\n                result.append(decimal)\n            } else {\n\
    \                result.append(element - ones)\n                result.append(decimal)\n\
    \            }\n        }\n        ones = element % 2\n        decimal = 0\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpppvzgmk6/tmpppvzgmk6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05529d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05526c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05526c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05526c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppvzgmk6                        0x0000557064a62694 <unavailable> + 5780

    5    libc.so.6                          0x00002b0552bbd460 __libc_start_main +
    245

    6    tmpppvzgmk6                        0x0000557064a62279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10 + element)\n                ones = 0\n            } else {\n     \
    \           result.insert(element, at: 0)\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvo_zefgo/tmpvo_zefgo.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba649e77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba649b6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba649b6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba649b6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvo_zefgo                        0x000055e731ee9664 <unavailable> + 5732

    5    libc.so.6                          0x00002ba64a063460 __libc_start_main +
    245

    6    tmpvo_zefgo                        0x000055e731ee9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 0 {\n            result.removeAtIndex(i)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpev3az8wg.swift:16:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(i)\n            ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr)\n        ones = 0\n\
    \        decimal = 0\n        for num in arr {\n            if num == 1 {\n  \
    \              ones += 1\n            } else {\n                decimal += num\n\
    \            }\n        }\n    }\n    if ones == 0 {\n        result = arr.sorted()\n\
    \    }\n    if decimal > 0 {\n        result = result.sorted()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqkxt1acs.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let bin = binary(arr[i])\n\
    \        let index = bin.index(of: \"1\")!\n        result[index] = arr[i]\n \
    \   }\n    return result.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6bmya6ea.swift:15:19: error: cannot find 'binary' in scope\n  \
    \      let bin = binary(arr[i])\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n            }\n            oneCount\
    \ = 1\n        }\n    }\n    if oneCount > 0 {\n        result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpub1uzrz2.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpub1uzrz2.swift:26:45:\
    \ error: cannot find 'num' in scope\n        result.append((oneCount - 1) * 10\
    \ + num) // sort by decimal value\n                                          \
    \  ^~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            sorted.append(num)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        sorted = sorted.sorted()\n    }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp71itrlcf.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += pow(x, 2)\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr: arr)\n    }\n    if\
    \ ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n        result.sort(by:\
    \ {$0 < $1})\n    }\n    if decimal > 0 {\n        result = sort_array(arr: result)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpwooadgv4.swift:20:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(x, 2)\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgidkxtl6.swift:167:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpgidkxtl6.swift:142:24:\
    \ note: to match this opening '{'\n    for element in arr {\n                \
    \       ^\n/tmp/tmpgidkxtl6.swift:167:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpgidkxtl6.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpgidkxtl6.swift:148:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpgidkxtl6.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + Int(num))\n                oneCount = 0\n            } else {\n\
    \                result.insert(result.count, Int(num))\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqvl6h5tz.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpqvl6h5tz.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, Int(num))\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                sorted.append(oneCount)\n\
    \                oneCount = 0\n            }\n            sorted.append(num)\n\
    \        }\n    }\n    if oneCount > 0 {\n        sorted.append(oneCount)\n  \
    \  }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_3r04dsm.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones > 0 {\n\
    \            let temp = result[index]\n            result[index] = result[index]\
    \ >> 1\n            result[index] = result[index] | ones\n            result[index]\
    \ = result[index] << 1\n            result[index] = temp\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp2phz7h_j/tmp2phz7h_j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b689aad2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b689a7c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b689a7c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b689a7c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2phz7h_j                        0x000055c2a02a2674 <unavailable> + 5748

    5    libc.so.6                          0x00002b689acbe460 __libc_start_main +
    245

    6    tmp2phz7h_j                        0x000055c2a02a2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    let len = arr.count\n\
    \    for i in 0..<len {\n        let ones = arr[i].bitCount\n        if ones <\
    \ len {\n            let tmp = result[i]\n            result[i] = result[ones]\n\
    \            result[ones] = tmp\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0l708dqf.swift:16:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount\n                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount\n        if ones > 0 {\n \
    \           let decimal = arr[i].trailingZeroBitCount / bits\n            result[i]\
    \ = arr[i]\n            result[arr.index(of: decimal)!] = arr[i]\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdzex85je.swift:17:57: error: cannot find 'bits' in scope\n    \
    \        let decimal = arr[i].trailingZeroBitCount / bits\n                  \
    \                                      ^~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 0 {\n            continue\n     \
    \   }\n        var j = i\n        while j > 0 && num % 2 == 0 {\n            j\
    \ /= 2\n        }\n        if j > i {\n            swap(&result[i], &result[j])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkvoyciu3.swift:24:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[i], &result[j])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(i, j)\n/tmp/tmpkvoyciu3.swift:24:30: note: conflicting\
    \ access is here\n            swap(&result[i], &result[j])\n                 \
    \            ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var temp = 0\n    var count = 0\n    for\
    \ k in arr {\n        if k == 1 {\n            j = i\n            i = k\n    \
    \    } else {\n            temp = i\n            i = j\n            j = k\n  \
    \      }\n        count = count + 1\n    }\n    for k in arr {\n        if k ==\
    \ 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n        }\n    }\n    for k in arr {\n        if\
    \ k == 1 {\n            result.append(k)\n        } else {\n            result.append(arr[temp])\n\
    \            result.append(k)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp18fs9r2h.swift:171:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp18fs9r2h.swift:142:18:\
    \ note: to match this opening '{'\n    for k in arr {\n                 ^\n/tmp/tmp18fs9r2h.swift:171:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmp18fs9r2h.swift:12:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmp18fs9r2h.swift:152:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmp18fs9r2h.swift:16:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            zeros[0]++\n        }\n    }\n\
    \    for x in ones {\n        result.append(x)\n    }\n    for x in zeros {\n\
    \        result.append(x)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpl9gjo9hz.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpl9gjo9hz.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        let bin = String(num, radix: 2)\n        let count = bin.count\n\
    \        if count == 1 {\n            result.append(num)\n        } else {\n \
    \           let decimal = Int(bin, radix: 10)\n            result.append(decimal)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxmmh8xj1.swift:21:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(decimal)\n\
    \                          ^\n/tmp/tmpxmmh8xj1.swift:20:17: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \            let decimal = Int(bin, radix: 10)\n                ^\n          \
    \  guard                             else { return <#default value#> }\n/tmp/tmpxmmh8xj1.swift:20:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let decimal = Int(bin, radix: 10)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmpxmmh8xj1.swift:20:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let decimal = Int(bin, radix:\
    \ 10)\n                          ^\n                                         \
    \    !\n/tmp/tmpxmmh8xj1.swift:21:27: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result.append(decimal)\n\
    \                          ^\n                                  ?? <#default value#>\n\
    /tmp/tmpxmmh8xj1.swift:21:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.append(decimal)\n \
    \                         ^\n                                 !\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            count += 1\n \
    \       } else {\n            if count > 0 {\n                result.append((count\
    \ - 1) * 10 + num)\n                count = 0\n            } else {\n        \
    \        result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjvs6toyb.swift:23:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(num, num)\n                 \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for num in arr {\n        if num == 1 {\n        \
    \    ones += 1\n        } else {\n            dec += num\n        }\n    }\n \
    \   if ones > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceByDec(dec)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnf2awe3v.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpnf2awe3v.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDec'\n        result.sortInPlaceByDec(dec)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x != 0 {\n        \
    \    decimal = decimal + x\n        } else {\n            ones = ones + 1\n  \
    \      }\n    }\n    if ones == 0 {\n        return arr\n    }\n    if ones <\
    \ arr.count {\n        decimal = decimal / ones\n    }\n    for x in arr {\n \
    \       if x != 0 {\n            decimal = decimal - x\n        } else {\n   \
    \         decimal = decimal + x\n        }\n        if decimal > 0 {\n       \
    \     result.append(decimal)\n            decimal = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpnz_dpajy/tmpnz_dpajy.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fa11a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fa0e9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fa0e9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fa0e9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz_dpajy                        0x0000562d6a29b6f4 <unavailable> + 5876

    5    libc.so.6                          0x00002b7fa1391460 __libc_start_main +
    245

    6    tmpnz_dpajy                        0x0000562d6a29b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for num in arr {\n        if num == 1 {\n        \
    \    ones += 1\n        } else {\n            dec += num\n        }\n    }\n \
    \   if ones > 0 {\n        result = dec.sorted()\n    } else {\n        result\
    \ = arr.sorted()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2d_6kked.swift:24:22: error: value of type 'Int' has no member\
    \ 'sorted'\n        result = dec.sorted()\n                 ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x != 0 {\n        \
    \    ones++\n            decimal = decimal * 10 + x\n        } else {\n      \
    \      if ones > 0 {\n                result.insert(decimal, at: result.endIndex)\n\
    \                ones = 0\n                decimal = 0\n            }\n      \
    \  }\n    }\n    if ones > 0 {\n        result.insert(decimal, at: result.endIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpeszwly0q.swift:18:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones++\n                ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for number in arr {\n        if number ==\
    \ 1 {\n            oneCount++\n        } else {\n            decimalCount += number\n\
    \        }\n    }\n    if oneCount > decimalCount {\n        for number in arr\
    \ {\n            if number == 1 {\n                result.append(number)\n   \
    \         }\n        }\n    } else {\n        for number in arr {\n          \
    \  if number == 1 {\n                result.append(decimalCount)\n           \
    \ }\n            decimalCount -= number\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7ypxs0no.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for x in arr {\n        if x == 1 {\n            ones += 1\n      \
    \  } else {\n            if ones > 0 {\n                result.append((ones -\
    \ 1) * 10)\n            }\n            ones = 1\n            result.append(x)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmptwbpt2eb/tmptwbpt2eb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4146848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414653fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414653f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414653e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwbpt2eb                        0x0000557771e11604 <unavailable> + 5636

    5    libc.so.6                          0x00002b4146a34460 __libc_start_main +
    245

    6    tmptwbpt2eb                        0x0000557771e111e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for x in arr {\n        if x == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += x\n        }\n    }\n    if ones\
    \ == dec {\n        for _ in arr {\n            result.append(0)\n        }\n\
    \        return result\n    }\n    for _ in arr {\n        result.append(0)\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n     \
    \   } else {\n            dec += x\n        }\n    }\n    for x in arr {\n   \
    \     if x == 1 {\n            ones += 1\n        } else {\n            dec +=\
    \ x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += x\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones += 1\n        } else {\n      \
    \      dec += x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n \
    \           ones += 1\n        } else {\n            dec += x\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n        }\
    \ else {\n            dec += x\n        }\n    }\n    for x in arr {\n       \
    \ if x == 1 {\n            ones += 1\n        } else {\n            dec += x\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones +=\
    \ 1\n        } else {\n            dec += x\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones += 1\n        } else {\n          \
    \  dec += x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n     \
    \       ones += 1\n        } else {\n            dec += x\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            dec += x\n        }\n    }\n    for x in arr {\n        if x\
    \ == 1 {\n            ones += 1\n        } else {\n            dec += x\n    \
    \    }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            dec += x\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            dec\
    \ += x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n          \
    \  ones += 1\n        } else {\n            dec += x\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           dec += x\n        }\n    }\n    for x in arr {\n        if x == 1\
    \ {\n            ones += 1\n        } else {\n            dec += x\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n     \
    \   } else {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpppgq4ozd.swift:177:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpppgq4ozd.swift:151:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmpppgq4ozd.swift:177:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpppgq4ozd.swift:12:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmpppgq4ozd.swift:158:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones < 0 {\n           \
    \ ones = -ones\n        }\n        if ones == 0 {\n            result[i] = arr[i]\n\
    \            continue\n        }\n        let decimal = arr[i].decimalValue\n\
    \        if decimal < 0 {\n            decimal = -decimal\n        }\n       \
    \ if decimal < ones {\n            result[i] = arr[i]\n            continue\n\
    \        }\n        let index = ones - decimal\n        result[i] = arr[i]\n \
    \       result[index] = arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9w75c_y1.swift:15:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp9w75c_y1.swift:23:30: error: value of type 'Int' has no member\
    \ 'decimalValue'\n        let decimal = arr[i].decimalValue\n                \
    \      ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount()\n        if ones > 0 {\n\
    \            switch ones {\n            case 1:\n                result.sort(by:\
    \ {$0 < $1})\n            case 2:\n                result.sort(by: {$0 < $1 &&\
    \ $1 < $0})\n            case 3:\n                result.sort(by: {$0 < $1 &&\
    \ $1 < $0 && $1 < $0})\n            case 4:\n                result.sort(by: {$0\
    \ < $1 && $1 < $0 && $1 < $0 && $1 < $0})\n            case 5:\n             \
    \   result.sort(by: {$0 < $1 && $1 < $0 && $1 < $0 && $1 < $0 && $1 < $0})\n \
    \           case 6:\n                result.sort(by: {$0 < $1 && $1 < $0 && $1\
    \ < $0 && $1 < $0 && $1 < $0 && $1 < $0})\n            default:\n            \
    \    result.sort(by: {$0 < $1 && $1 < $0 && $1 < $0 && $1 < $0 && $1 < $0 && $1\
    \ < $0 && $1 < $0})\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp819mkqit.swift:15:23: error: no exact matches in call to subscript\
    \ \n        let ones = arr[i].trailingZeroBitCount()\n                      ^\n\
    /tmp/tmp819mkqit.swift:15:23: note: found candidate with type '(Range<Int>) ->\
    \ ArraySlice<Int>'\n        let ones = arr[i].trailingZeroBitCount()\n       \
    \               ^\n/tmp/tmp819mkqit.swift:15:23: note: found candidate with type\
    \ '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n        let ones = arr[i].trailingZeroBitCount()\n\
    \                      ^\n/tmp/tmp819mkqit.swift:15:27: error: value of type 'ArraySlice<Int>'\
    \ has no member 'trailingZeroBitCount'\n        let ones = arr[i].trailingZeroBitCount()\n\
    \                   ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var oneCount\
    \ = [Int]()\n    for number in arr {\n        oneCount[number & 1] += 1\n    }\n\
    \    for number in arr {\n        sorted.append(number & 1)\n    }\n    for number\
    \ in arr {\n        sorted.append(oneCount[number & 1] * 10 + number >> 1)\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b291509bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2914d92561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2914d92286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2914d9213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2914d91bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2914b917ec <unavailable> + 186348

    6    tmp59sczr5c                        0x000055aaa2268235 <unavailable> + 8757

    7    tmp59sczr5c                        0x000055aaa22675b4 <unavailable> + 5556

    8    libc.so.6                          0x00002b2915287460 __libc_start_main +
    245

    9    tmp59sczr5c                        0x000055aaa2267289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        ones = number & 1\n\
    \        decimal = decimal + ones\n        if decimal > 1 {\n            decimal\
    \ = decimal - ones\n        }\n        result = append(result, number)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3q423ucx.swift:22:18: error: cannot find 'append' in scope\n  \
    \      result = append(result, number)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones.append(num)\n        } else {\n            zeros.append(num)\n\
    \        }\n    }\n    for num in ones {\n        result.append(num)\n    }\n\
    \    for num in zeros {\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpyvttklh7/tmpyvttklh7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57dcbb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57dc8a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57dc8a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57dc8a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvttklh7                        0x0000559e17ce6604 <unavailable> + 5636

    5    libc.so.6                          0x00002b57dcd9d460 __libc_start_main +
    245

    6    tmpyvttklh7                        0x0000559e17ce61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones == 0 {\n\
    \            continue\n        }\n        let index = index\n        let value\
    \ = arr[index]\n        let temp = arr[index]\n        arr[index] = arr[index]\
    \ >> 1\n        arr[index] = arr[index] | ones\n        arr[index] = temp\n  \
    \  }\n    for index in 0..<arr.count {\n        let ones = arr[index] & 1\n  \
    \      if ones == 0 {\n            continue\n        }\n        let index = index\n\
    \        let value = arr[index]\n        let temp = arr[index]\n        arr[index]\
    \ = arr[index] >> 1\n        arr[index] = arr[index] | ones\n        arr[index]\
    \ = temp\n    }\n    for index in 0..<arr.count {\n        let ones = arr[index]\
    \ & 1\n        if ones == 0 {\n            continue\n        }\n        let index\
    \ = index\n        let value = arr[index]\n        let temp = arr[index]\n   \
    \     arr[index] = arr[index] >> 1\n        arr[index] = arr[index] | ones\n \
    \       arr[index] = temp\n    }\n    for index in 0..<arr.count {\n        let\
    \ ones = arr[index] & 1\n        if ones == 0 {\n            continue\n      \
    \  }\n        let index = index\n        let value = arr[index]\n        let temp\
    \ = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index] = arr[index]\
    \ | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count {\n\
    \        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6m8bdn35.swift:123:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp6m8bdn35.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmp6m8bdn35.swift:22:12: error: cannot\
    \ assign through subscript: 'arr' is a 'let' constant\n        arr[index] = arr[index]\
    \ >> 1\n        ~~~^\n/tmp/tmp6m8bdn35.swift:23:12: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n        arr[index] = arr[index] | ones\n\
    \        ~~~^\n/tmp/tmp6m8bdn35.swift:24:12: error: cannot assign through subscript:\
    \ 'arr' is a 'let' constant\n        arr[index] = temp\n        ~~~^\n/tmp/tmp6m8bdn35.swift:34:12:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[index]\
    \ = arr[index] >> 1\n        ~~~^\n/tmp/tmp6m8bdn35.swift:35:12: error: cannot\
    \ assign through subscript: 'arr' is a 'let' constant\n        arr[index] = arr[index]\
    \ | ones\n        ~~~^\n/tmp/tmp6m8bdn35.swift:36:12: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n        arr[index] = temp\n        ~~~^\n\
    /tmp/tmp6m8bdn35.swift:46:12: error: cannot assign through subscript: 'arr' is\
    \ a 'let' constant\n        arr[index] = arr[index] >> 1\n        ~~~^\n/tmp/tmp6m8bdn35.swift:47:12:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[index]\
    \ = arr[index] | ones\n        ~~~^\n/tmp/tmp6m8bdn35.swift:48:12: error: cannot\
    \ assign through subscript: 'arr' is a 'let' constant\n        arr[index] = temp\n\
    \        ~~~^\n/tmp/tmp6m8bdn35.swift:58:12: error: cannot assign through subscript:\
    \ 'arr' is a 'let' constant\n        arr[index] = arr[index] >> 1\n        ~~~^\n\
    /tmp/tmp6m8bdn35.swift:59:12: error: cannot assign through subscript: 'arr' is\
    \ a 'let' constant\n        arr[index] = arr[index] | ones\n        ~~~^\n/tmp/tmp6m8bdn35.swift:60:12:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[index]\
    \ = temp"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if ones > 0 {\n         \
    \   result.insert(decimal, element)\n            ones = 0\n            decimal\
    \ = 0\n        } else {\n            result.insert(element, element)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpy09vu7lj.swift:32:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(decimal, element)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpy09vu7lj.swift:36:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ element)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for n in arr {\n        if n == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += pow(2, ones)\n      \
    \      ones = 0\n        }\n        sorted.append(n)\n    }\n    if ones > 0 {\n\
    \        decimal += pow(2, ones)\n        sorted.append(0)\n    }\n    sorted.reverse()\n\
    \    sorted = sorted.map { $0 + $1 * decimal }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2tz7sddh.swift:20:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(2, ones)\n                       ^~~\n/tmp/tmp2tz7sddh.swift:26:20:\
    \ error: cannot find 'pow' in scope\n        decimal += pow(2, ones)\n       \
    \            ^~~\n/tmp/tmp2tz7sddh.swift:30:25: error: contextual closure type\
    \ '(Int) throws -> Int' expects 1 argument, but 2 were used in closure body\n\
    \    sorted = sorted.map { $0 + $1 * decimal }\n                        ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount\n        if ones == 0 {\n\
    \            continue\n        }\n        let decimal = arr[i].trailingZeroBitCount\
    \ / ones\n        if decimal > result.count {\n            result = Array(repeating:\
    \ 0, count: result.count + ones)\n        }\n        result[result.count - ones]\
    \ = arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpey_ve23f/tmpey_ve23f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe27a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe27763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe27763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe277627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpey_ve23f                        0x000055f3912186e4 <unavailable> + 5860

    5    libc.so.6                          0x00002afe27c58460 __libc_start_main +
    245

    6    tmpey_ve23f                        0x000055f3912182c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for value in arr {\n        if value == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.sort()\n\
    \            }\n            oneCount = 0\n            result.append(value)\n \
    \       }\n    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmprqot_a64.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    var ones = [1]\n\
    \    for element in arr {\n        if element == 0 {\n            ones = append(ones,\
    \ 0)\n        } else {\n            ones = append(ones, 1)\n        }\n    }\n\
    \    for element in ones {\n        result = append(result, element)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0su4liv2.swift:17:20: error: cannot find 'append' in scope\n  \
    \          ones = append(ones, 0)\n                   ^~~~~~\n/tmp/tmp0su4liv2.swift:19:20:\
    \ error: cannot find 'append' in scope\n            ones = append(ones, 1)\n \
    \                  ^~~~~~\n/tmp/tmp0su4liv2.swift:23:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, element)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x != 0 {\n        \
    \    decimal = decimal + x\n        } else {\n            ones = ones + 1\n  \
    \      }\n    }\n    if ones == arr.count {\n        for y in arr {\n        \
    \    if y != 0 {\n                decimal = decimal + y\n            }\n     \
    \   }\n    }\n    for x in arr {\n        if x != 0 {\n            result.append(decimal)\n\
    \            decimal = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp0r73_zl6/tmp0r73_zl6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db9694c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db938bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db938b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db938a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0r73_zl6                        0x00005595343a0654 <unavailable> + 5716

    5    libc.so.6                          0x00002b3db9880460 __libc_start_main +
    245

    6    tmp0r73_zl6                        0x00005595343a0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in\
    \ arr {\n        var count = 0\n        for y in x {\n            if y == 1 {\n\
    \                count += 1\n            }\n        }\n        if count == 0 {\n\
    \            result.insert(x, at: 0)\n        } else {\n            result.insert(x,\
    \ at: result.count - count)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7p_lvwet.swift:16:18: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for y in x {\n                 ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        if num == 0 {\n            continue\n        }\n        var\
    \ ones = 0\n        var dec = 0\n        for _ in 0..<num {\n            if num\
    \ % 2 == 0 {\n                ones += 1\n            } else {\n              \
    \  dec += num / 2\n            }\n            num /= 2\n        }\n        if\
    \ ones < dec {\n            result.insert(dec, num)\n        } else {\n      \
    \      result.insert(ones, num)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjpy_xd63.swift:26:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= 2\n            ~~~ ^\n\
    /tmp/tmpjpy_xd63.swift:29:20: error: no exact matches in call to instance method\
    \ 'insert'\n            result.insert(dec, num)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpjpy_xd63.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(ones,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort by dec\n            }\n            oneCount = 0\n \
    \       }\n    }\n    if oneCount > 0 {\n        result.append((oneCount - 1)\
    \ * 10 + num) // sort by dec\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjxq3s1yq.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpjxq3s1yq.swift:26:45:\
    \ error: cannot find 'num' in scope\n        result.append((oneCount - 1) * 10\
    \ + num) // sort by dec\n                                            ^~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort based on decimal value\n            }\n           \
    \ oneCount = 0\n        }\n    }\n    if oneCount > 0 {\n        result.append((oneCount\
    \ - 1) * 10 + num) // sort based on decimal value\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpy6k_mqt5.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpy6k_mqt5.swift:26:45:\
    \ error: cannot find 'num' in scope\n        result.append((oneCount - 1) * 10\
    \ + num) // sort based on decimal value\n                                    \
    \        ^~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmputo4q5dg.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmputo4q5dg.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(num, num)\n                       ^\nSwift.Array:11:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + element)\n            }\n            oneCount = 0\n        }\n \
    \   }\n    if oneCount > 0 {\n        result.append((oneCount - 1) * 10 + arr[arr.count])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsamt5pgr.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones < 0 {\n            ones = -ones\n        }\n        result[i]\
    \ = ones\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqgdqr3yj.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for num in arr {\n        if num != 1 {\n\
    \            result.insert(i, num)\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjj4vdqhi.swift:23:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(i, num)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n \
    \       ones--\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           result.append(decimal)\n        } else {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpt92_twhd.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n/tmp/tmpt92_twhd.swift:25:13: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n        ones--\n            ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        ones += element\n\
    \        decimal += element / 2\n    }\n    if ones < 0 {\n        ones = -ones\n\
    \        decimal = -decimal\n    }\n    for element in arr {\n        if element\
    \ == 0 {\n            continue\n        }\n        if ones == 0 {\n          \
    \  result.insert(decimal, element)\n        } else {\n            if decimal <\
    \ element {\n                result.insert(decimal, element)\n            } else\
    \ {\n                result.insert(element, element)\n            }\n        }\n\
    \        ones--\n        decimal *= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpfyd0a1yt.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(decimal, element)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpfyd0a1yt.swift:32:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(decimal, element)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpfyd0a1yt.swift:34:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(element, element)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpfyd0a1yt.swift:37:13:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        ones--\n\
    \            ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { $0.isOne()\
    \ ? $0.decimalValue() : $0.decimalValue() > $1.decimalValue() })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmjqqff8e.swift:13:32: error: value of type 'Int' has no member\
    \ 'isOne'\n    return arr.sorted(by: { $0.isOne() ? $0.decimalValue() : $0.decimalValue()\
    \ > $1.decimalValue() })\n                            ~~ ^~~~~\n/tmp/tmpmjqqff8e.swift:13:45:\
    \ error: value of type 'Int' has no member 'decimalValue'\n    return arr.sorted(by:\
    \ { $0.isOne() ? $0.decimalValue() : $0.decimalValue() > $1.decimalValue() })\n\
    \                                         ~~ ^~~~~~~~~~~~\n/tmp/tmpmjqqff8e.swift:13:65:\
    \ error: value of type 'Int' has no member 'decimalValue'\n    return arr.sorted(by:\
    \ { $0.isOne() ? $0.decimalValue() : $0.decimalValue() > $1.decimalValue() })\n\
    \                                                             ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpmjqqff8e.swift:13:85: error: value of type 'Int' has no member 'decimalValue'\n\
    \    return arr.sorted(by: { $0.isOne() ? $0.decimalValue() : $0.decimalValue()\
    \ > $1.decimalValue() })\n                                                   \
    \                              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            ones = 0\n        }\n        if ones == 0 {\n   \
    \         result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmplyzz2jsc/tmplyzz2jsc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33c648c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af33c33fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af33c33f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af33c33e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyzz2jsc                        0x0000555b4573e604 <unavailable> + 5636

    5    libc.so.6                          0x00002af33c834460 __libc_start_main +
    245

    6    tmplyzz2jsc                        0x0000555b4573e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for v in arr {\n        if v == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += v\n        }\n    }\n\
    \    if ones > 0 {\n        result = sort_array(arr: arr)\n    }\n    if ones\
    \ == 0 {\n        result = sort_array(arr: result)\n    }\n    if decimal > 0\
    \ {\n        result = sort_array(arr: result)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        if arr[i] == 0 {\n       \
    \     continue\n        }\n        let bin = String(format: \"%0*b%0*b\", 0, arr[i],\
    \ 0)\n        let binLen = bin.count\n        let binStr = bin.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        let binArr = Array(binStr)\n \
    \       let binCount = binArr.count\n        let binSum = binArr.map { Int($0)\
    \ }.reduce(0, +)\n        let binSumInt = Int(binSum)\n        let binSumFloat\
    \ = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n        let\
    \ binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let binSumFloat = binSumInt.floatValue\n        let binSumInt = Int(binSumFloat)\n\
    \        let bin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmrixvp5i.swift:82:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpmrixvp5i.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpmrixvp5i.swift:18:57: error: extra\
    \ argument in call\n        let bin = String(format: \"%0*b%0*b\", 0, arr[i],\
    \ 0)\n                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpmrixvp5i.swift:18:52:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     let bin = String(format: \"%0*b%0*b\", 0, arr[i], 0)\n                 \
    \                                  ^\n                                       \
    \         (      != 0)\n/tmp/tmpmrixvp5i.swift:18:19: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'String' conform to 'BinaryInteger'\n        let bin = String(format:\
    \ \"%0*b%0*b\", 0, arr[i], 0)\n                  ^\nSwift.String:2:12: note: where\
    \ 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n/tmp/tmpmrixvp5i.swift:20:49:\
    \ error: cannot find 'CharacterSet' in scope\n        let binStr = bin.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \           ^~~~~~~~~~~~\n/tmp/tmpmrixvp5i.swift:59:13: error: type annotation\
    \ missing in pattern\n        let bin\n            ^\n/tmp/tmpmrixvp5i.swift:63:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = [Int]()\n    var oneCountCount = [Int]()\n    var oneCountCountCount = [Int]()\n\
    \    var oneCountCountCountCount = [Int]()\n    var oneCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCount = [Int]()\n    var\
    \ oneCountCountCountCountCountCountCountCountCount = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp89li5lnh.swift:35:9: error: type annotation missing in pattern\n\
    \    var oneCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n            }\n            oneCount\
    \ = 0\n        }\n    }\n    if oneCount > 0 {\n        result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdnqbfhsh.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpdnqbfhsh.swift:26:45:\
    \ error: cannot find 'num' in scope\n        result.append((oneCount - 1) * 10\
    \ + num) // sort by decimal value\n                                          \
    \  ^~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = [Int]()\n    var decimalCount = [Int]()\n    for x in arr {\n        if x\
    \ == 1 {\n            oneCount[x] = oneCount[x] + 1\n        } else {\n      \
    \      decimalCount[x] = decimalCount[x] + 1\n        }\n    }\n    for x in oneCount\
    \ {\n        if oneCount[x] > decimalCount[x] {\n            result.append(x)\n\
    \        }\n    }\n    for x in decimalCount {\n        if decimalCount[x] > oneCount[x]\
    \ {\n            result.append(x)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b84fee5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84feb54561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b84feb54286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b84feb5413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b84feb53bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b84fe953e83 <unavailable> + 188035

    6    tmpro5qbl7m                        0x0000555ca0a9a253 <unavailable> + 8787

    7    tmpro5qbl7m                        0x0000555ca0a995b4 <unavailable> + 5556

    8    libc.so.6                          0x00002b84ff049460 __libc_start_main +
    245

    9    tmpro5qbl7m                        0x0000555ca0a99289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10 + num)\n                ones = 0\n            } else {\n         \
    \       result.insert(num, num)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpk8y4_1p1.swift:23:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(num, num)\n                 \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones == 0 {\n\
    \            continue\n        }\n        let decimal = arr[index] >> 1\n    \
    \    if decimal < 0 {\n            decimal = -decimal\n        }\n        if decimal\
    \ > ones {\n            decimal = ones - decimal\n        }\n        if decimal\
    \ > 0 {\n            arr[index] = decimal\n        } else {\n            arr[index]\
    \ = ones\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpn33ilpv1.swift:21:13: error: cannot assign to value: 'decimal'\
    \ is a 'let' constant\n            decimal = -decimal\n            ^~~~~~~\n/tmp/tmpn33ilpv1.swift:19:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let decimal = arr[index]\
    \ >> 1\n        ^~~\n        var\n/tmp/tmpn33ilpv1.swift:24:13: error: cannot\
    \ assign to value: 'decimal' is a 'let' constant\n            decimal = ones -\
    \ decimal\n            ^~~~~~~\n/tmp/tmpn33ilpv1.swift:19:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let decimal = arr[index] >> 1\n       \
    \ ^~~\n        var\n/tmp/tmpn33ilpv1.swift:27:16: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n            arr[index] = decimal\n   \
    \         ~~~^\n/tmp/tmpn33ilpv1.swift:29:16: error: cannot assign through subscript:\
    \ 'arr' is a 'let' constant\n            arr[index] = ones\n            ~~~^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount()\n        if ones > 0 {\n\
    \            switch ones {\n            case 1:\n                result.sort(by:\
    \ {$0 < $1})\n            case 2:\n                result.sort(by: {$0 > $1})\n\
    \            case 3:\n                result.sort(by: {$0 > $1})\n           \
    \ case 4:\n                result.sort(by: {$0 < $1})\n            case 5:\n \
    \               result.sort(by: {$0 < $1})\n            case 6:\n            \
    \    result.sort(by: {$0 > $1})\n            default:\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7_lj8yku.swift:15:23: error: no exact matches in call to subscript\
    \ \n        let ones = arr[i].trailingZeroBitCount()\n                      ^\n\
    /tmp/tmp7_lj8yku.swift:15:23: note: found candidate with type '(Range<Int>) ->\
    \ ArraySlice<Int>'\n        let ones = arr[i].trailingZeroBitCount()\n       \
    \               ^\n/tmp/tmp7_lj8yku.swift:15:23: note: found candidate with type\
    \ '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n        let ones = arr[i].trailingZeroBitCount()\n\
    \                      ^\n/tmp/tmp7_lj8yku.swift:15:27: error: value of type 'ArraySlice<Int>'\
    \ has no member 'trailingZeroBitCount'\n        let ones = arr[i].trailingZeroBitCount()\n\
    \                   ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted: [Int] = []\n    for num\
    \ in arr {\n        sorted.append(num)\n    }\n    sorted.sort()\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpmhy3x1vw/tmpmhy3x1vw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae87b79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae87b491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae87b491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae87b4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhy3x1vw                        0x00005629b9c7c6c4 <unavailable> + 5828

    5    libc.so.6                          0x00002ae87b986460 __libc_start_main +
    245

    6    tmpmhy3x1vw                        0x00005629b9c7c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    \n    var result = arr\n    \n   \
    \ if arr.count < 2 {\n        return result\n    }\n    \n    let ones = arr.filter\
    \ { $0 == 1 }\n    let tens = arr.filter { $0 % 10 == 0 }\n    let hundreds =\
    \ arr.filter { $0 % 100 == 0 }\n    let thousands = arr.filter { $0 % 1000 ==\
    \ 0 }\n    \n    if ones.count < tens.count {\n        result = ones\n    } else\
    \ if tens.count < hundreds.count {\n        result = tens\n    } else if hundreds.count\
    \ < thousands.count {\n        result = hundreds\n    } else {\n        result\
    \ = thousands\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp5zn0azk5/tmp5zn0azk5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b79e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b76d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b76d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b76d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zn0azk5                        0x0000555b91b6a594 <unavailable> + 5524

    5    libc.so.6                          0x00002b31b7bcc460 __libc_start_main +
    245

    6    tmp5zn0azk5                        0x0000555b91b6a179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones < 0 {\n           \
    \ ones = -ones\n        }\n        if ones == 0 {\n            result[i] = arr[i]\n\
    \            continue\n        }\n        let decimal = arr[i].decimalValue()\n\
    \        if decimal < 0 {\n            decimal = -decimal\n        }\n       \
    \ if decimal < ones {\n            result[i] = arr[i]\n            continue\n\
    \        }\n        let index = ones - decimal\n        if index < 0 {\n     \
    \       result[i] = arr[i]\n            continue\n        }\n        if index\
    \ == 0 {\n            result[i] = arr[i]\n            continue\n        }\n  \
    \      let temp = arr[i]\n        result[i] = arr[index - 1]\n        result[index\
    \ - 1] = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1k3k2zri.swift:15:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp1k3k2zri.swift:23:30: error: value of type 'Int' has no member\
    \ 'decimalValue'\n        let decimal = arr[i].decimalValue()\n              \
    \        ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.append(num)\n            }\n\
    \        }\n    } else {\n        for num in arr {\n            if num == 1 {\n\
    \                result.append(decimalCount)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjulky89t.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for idx in 0..<arr.count\
    \ {\n        if result[idx] == 0 {\n            result.removeAtIndex(idx)\n  \
    \      }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgo2apj74.swift:16:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(idx)\n            ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        ones = num.binCount()\n        if ones >\
    \ 0 {\n            result.insert(num, ones)\n        } else {\n            result.insert(num,\
    \ num.decimalValue())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqkz1yfl4.swift:16:20: error: value of type 'Int' has no member\
    \ 'binCount'\n        ones = num.binCount()\n               ~~~ ^~~~~~~~\n/tmp/tmpqkz1yfl4.swift:18:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ ones)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpqkz1yfl4.swift:20:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num.decimalValue())\n\
    \                   ^\n/tmp/tmpqkz1yfl4.swift:20:20: note: found candidate with\
    \ type '(__owned Int, Int) -> ()'\n            result.insert(num, num.decimalValue())\n\
    \                   ^\n/tmp/tmpqkz1yfl4.swift:20:36: error: value of type 'Int'\
    \ has no member 'decimalValue'\n            result.insert(num, num.decimalValue())\n\
    \                               ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    for num in arr {\n        if num == 1 {\n            ones[0]++\n\
    \        } else {\n            ones[0]--\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            result.append(num)\n        } else {\n\
    \            let index = ones[0]\n            result.append(num)\n           \
    \ ones[0] = index\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpev84sm7n.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpev84sm7n.swift:19:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            if count > 0 {\n                result.append((count\
    \ - 1) * 10 + element)\n                count = 0\n            } else {\n    \
    \            result.append(element)\n            }\n        }\n    }\n    if count\
    \ > 0 {\n        result.append((count - 1) * 10 + element)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmprct8o6a7.swift:28:42: error: cannot find 'element' in scope\n \
    \       result.append((count - 1) * 10 + element)\n                          \
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    var ones = 0\n    for x in arr {\n        if x != 0 {\n    \
    \        ones += 1\n        }\n    }\n    if ones == 0 {\n        for x in arr\
    \ {\n            result[arr.index(x)] = x\n        }\n    } else {\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var temp = 0\n        for\
    \ x in arr {\n            if x != 0 {\n                temp = i\n            \
    \    i = j\n                j = k\n                k = temp\n            }\n \
    \       }\n        for _ in 0..<ones {\n            result[k] = arr[i]\n     \
    \       i += 1\n            k += 1\n        }\n        for _ in 0..<(ones - 1)\
    \ {\n            result[k] = arr[j]\n            j += 1\n            k += 1\n\
    \        }\n        for _ in 0..<(ones - 1) {\n            result[k] = arr[k]\n\
    \            k += 1\n        }\n        for _ in 0..<ones {\n            result[k]\
    \ = arr[i]\n            i += 1\n            k += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp968ba7ix.swift:22:24: error: no exact matches in call to instance\
    \ method 'index'\n            result[arr.index(x)] = x\n                     \
    \  ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n       \
    \                    ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    if arr.count\
    \ > 0 {\n        var ones = [0]\n        var zeros = [0]\n        var i = 0\n\
    \        while i < arr.count {\n            if arr[i] == 1 {\n               \
    \ ones[i] += 1\n            } else {\n                zeros[i] += 1\n        \
    \    }\n            i += 1\n        }\n        if ones.count > 0 {\n         \
    \   ones = ones[0..<ones.count-1]\n            zeros = zeros[0..<zeros.count-1]\n\
    \        }\n        if ones.count > 0 {\n            result = sort_array(ones)\
    \ + result\n        }\n        if zeros.count > 0 {\n            result = result\
    \ + sort_array(zeros)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp20p_7dpr.swift:27:24: error: cannot assign value of type 'ArraySlice<Int>'\
    \ to type '[Int]'\n            ones = ones[0..<ones.count-1]\n               \
    \    ~~~~^~~~~~~~~~~~~~~~~~\n/tmp/tmp20p_7dpr.swift:28:26: error: cannot assign\
    \ value of type 'ArraySlice<Int>' to type '[Int]'\n            zeros = zeros[0..<zeros.count-1]\n\
    \                    ~~~~~^~~~~~~~~~~~~~~~~~~\n/tmp/tmp20p_7dpr.swift:31:33: error:\
    \ missing argument label 'arr:' in call\n            result = sort_array(ones)\
    \ + result\n                                ^\n                              \
    \  arr: \n/tmp/tmp20p_7dpr.swift:34:42: error: missing argument label 'arr:' in\
    \ call\n            result = result + sort_array(zeros)\n                    \
    \                     ^\n                                         arr: \n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            sorted.append(element)\n\
    \            count += 1\n        } else {\n            sorted.append(count + element)\n\
    \            count = 0\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp_k8any5_/tmp_k8any5_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2050a46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205073db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205073d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205073c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_k8any5_                        0x000056243ddb0604 <unavailable> + 5636

    5    libc.so.6                          0x00002b2050c32460 __libc_start_main +
    245

    6    tmp_k8any5_                        0x000056243ddb01e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            sorted.append(num)\n        }\n    }\n    if ones\
    \ == 0 {\n        sorted = arr\n    }\n    if ones > 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpq09yx3e_/tmpq09yx3e_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aa6786c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aa647db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2aa647d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2aa647c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq09yx3e_                        0x000055cc3d7af6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2aa6972460 __libc_start_main +
    245

    6    tmpq09yx3e_                        0x000055cc3d7af289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decCount = 0\n    for num in arr {\n        if num == 1 {\n   \
    \         oneCount++\n        } else {\n            decCount += num\n        }\n\
    \    }\n    if oneCount > decCount {\n        for num in arr {\n            if\
    \ num == 1 {\n                result.insert(result.count, num)\n             \
    \   oneCount--\n            }\n        }\n    } else {\n        for num in arr\
    \ {\n            if num == 1 {\n                result.insert(result.count, num)\n\
    \                decCount--\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp49uak1rj.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmp49uak1rj.swift:26:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp49uak1rj.swift:27:25:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      oneCount--\n                        ^~\n/tmp/tmp49uak1rj.swift:33:24: error:\
    \ no exact matches in call to instance method 'insert'\n                result.insert(result.count,\
    \ num)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp49uak1rj.swift:34:25: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n                decCount--\n \
    \                       ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x != 0 {\n        \
    \    decimal = decimal * 10 + x\n        } else {\n            ones = ones + 1\n\
    \        }\n    }\n    if ones == arr.count {\n        result = arr\n    } else\
    \ {\n        result = sort_array(arr: arr)\n    }\n    for x in result {\n   \
    \     if decimal == 0 {\n            if x > 0 {\n                decimal = decimal\
    \ * 10 + x\n            } else {\n                decimal = decimal * 10 - x\n\
    \            }\n        } else {\n            if x > 0 {\n                decimal\
    \ = decimal * 10 + x\n            } else {\n                decimal = decimal\
    \ * 10 - x\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]++\n        } else {\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1w0ad61q.swift:170:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp1w0ad61q.swift:144:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmp1w0ad61q.swift:170:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmp1w0ad61q.swift:12:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmp1w0ad61q.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp1w0ad61q.swift:20:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n/tmp/tmp1w0ad61q.swift:21:21: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            zeros[0]++\n\
    \                    ^~\n/tmp/tmp1w0ad61q.swift:26:20: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            ones[0]--\n               \
    \    ^~\n/tmp/tmp1w0ad61q.swift:28:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp1w0ad61q.swift:29:21:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  zeros[0]--\n                    ^~\n/tmp/tmp1w0ad61q.swift:34:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            ones[0]++\n \
    \                  ^~\n/tmp/tmp1w0ad61q.swift:36:20: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            ones[0]--\n               \
    \    ^~\n/tmp/tmp1w0ad61q.swift:37:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            zeros[0]++\n                    ^~\n/tmp/tmp1w0ad61q.swift:42:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n/tmp/tmp1"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        let ones = num.bitCount()\n        if ones == 0 {\n      \
    \      result.insert(num, at: 0)\n        } else {\n            let decimal =\
    \ num.decimalValue\n            if decimal < 0 {\n                result.insert(num,\
    \ at: 0)\n            } else {\n                result.insert(num, at: result.count\
    \ - 1)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp38lh1w82.swift:15:24: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = num.bitCount()\n                   ~~~ ^~~~~~~~\n\
    /tmp/tmp38lh1w82.swift:19:31: error: value of type 'Int' has no member 'decimalValue'\n\
    \            let decimal = num.decimalValue\n                          ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        let bin = String(num, radix: 2)\n        let count = bin.count(\"\
    1\")\n        if count == 0 {\n            result.insert(num, at: 0)\n       \
    \ } else {\n            result.insert(num, at: result.count - 1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzzlnue63.swift:16:25: error: cannot call value of non-function\
    \ type 'Int'\n        let count = bin.count(\"1\")\n                        ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var decimals = [Int]()\n    var decimalsLen = 0\n    var onesLen\
    \ = 0\n    for v in arr {\n        if v == 1 {\n            ones.append(v)\n \
    \           onesLen += 1\n        } else {\n            decimals.append(v)\n \
    \           decimalsLen += 1\n        }\n    }\n    if onesLen > decimalsLen {\n\
    \        for _ in 0..<(onesLen - decimalsLen) {\n            result.append(0)\n\
    \        }\n        for v in ones[0..<decimalsLen] {\n            result.append(v)\n\
    \        }\n    } else {\n        for _ in 0..<(decimalsLen - onesLen) {\n   \
    \         result.append(0)\n        }\n        for v in decimals[0..<onesLen]\
    \ {\n            result.append(v)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_ozu98wx/tmp_ozu98wx.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab51435ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab514051b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab514051988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5140507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ozu98wx                        0x000055a9ff88c884 <unavailable> + 6276

    5    libc.so.6                          0x00002ab514546460 __libc_start_main +
    245

    6    tmp_ozu98wx                        0x000055a9ff88c469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for num in arr {\n        if num == 1 {\n\
    \            result = result.sorted(by: {$0 < $1})\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3swjnm_c/tmp3swjnm_c.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445dc99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445d990b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445d990988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445d98f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3swjnm_c                        0x0000563209909674 <unavailable> + 5748

    5    libc.so.6                          0x00002b445de85460 __libc_start_main +
    245

    6    tmp3swjnm_c                        0x0000563209909259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(result.count, num)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptwth9fm1.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmptwth9fm1.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    for num in arr {\n        if num > 0 {\n            ones[0]++\n \
    \       } else {\n            ones[0]--\n        }\n        result.append(num)\n\
    \    }\n    for num in ones {\n        if num > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0sdob426.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp0sdob426.swift:19:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        if num == 0 {\n            continue\n        }\n        var\
    \ count = 0\n        var i = 0\n        while i < num {\n            if num %\
    \ 2 == 0 {\n                count += 1\n            }\n            i += 1\n  \
    \      }\n        if count == 1 {\n            result.append(num)\n          \
    \  continue\n        }\n        var decimal = num / 2\n        var decimal2 =\
    \ decimal / 10\n        var decimal3 = decimal2 / 10\n        var decimal4 = decimal3\
    \ / 10\n        var decimal5 = decimal4 / 10\n        var decimal6 = decimal5\
    \ / 10\n        var decimal7 = decimal6 / 10\n        var decimal8 = decimal7\
    \ / 10\n        var decimal9 = decimal8 / 10\n        var decimal10 = decimal9\
    \ / 10\n        var decimal11 = decimal10 / 10\n        var decimal12 = decimal11\
    \ / 10\n        var decimal13 = decimal12 / 10\n        var decimal14 = decimal13\
    \ / 10\n        var decimal15 = decimal14 / 10\n        var decimal16 = decimal15\
    \ / 10\n        var decimal17 = decimal16 / 10\n        var decimal18 = decimal17\
    \ / 10\n        var decimal19 = decimal18 / 10\n        var decimal20 = decimal19\
    \ / 10\n        var decimal21 = decimal20 / 10\n        var decimal22 = decimal21\
    \ / 10\n        var decimal23 = decimal22 / 10\n        var decimal24 = decimal23\
    \ / 10\n        var decimal25 = decimal24 / 10\n        var decimal26 = decimal25\
    \ / 10\n        var decimal27 = decimal26 / 10\n        var decimal28 = decimal27\
    \ / 10\n        var decimal29 = decimal28 / 10\n        var decimal30 = decimal29\
    \ / 10\n        var decimal31 = decimal30 / 10\n        var decimal32 = decimal31\
    \ / 10\n        var decimal33 = decimal32 / 10\n        var decimal34 = decimal33\
    \ / 10\n        var decimal35 = decimal34 / 10\n        var decimal36 = decimal35\
    \ / 10\n        var decimal37 = decimal36 / 10\n        var decimal38 = decimal37\
    \ / 10\n        var decimal39 = decimal38 / 10\n        var decimal40 = decimal39\
    \ / 10\n        var decimal41 = decimal40 / 10\n        var decimal42 = decimal41\
    \ / 10\n        var decimal43 = decimal42 / 10\n        var decimal44 = decimal43\
    \ / 10\n        var decimal45 = decimal44 / 10\n        var decimal46 = decimal45\
    \ / 10\n        var decimal47 = decimal46 / 10\n        var decimal48 = decimal47\
    \ / 10\n        var decimal49 = decimal48 / 10\n        var decimal50 = decimal49\
    \ / 10\n        var decimal51 = decimal50 / 10\n        var decimal52 = decimal5\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdgvzdcft.swift:104:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpdgvzdcft.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpdgvzdcft.swift:85:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpdgvzdcft.swift:30:13:\
    \ warning: variable 'decimal' was never mutated; consider changing to 'let' constant\n\
    \        var decimal = num / 2\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:31:13:\
    \ warning: variable 'decimal2' was never mutated; consider changing to 'let' constant\n\
    \        var decimal2 = decimal / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:32:13:\
    \ warning: variable 'decimal3' was never mutated; consider changing to 'let' constant\n\
    \        var decimal3 = decimal2 / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:33:13:\
    \ warning: variable 'decimal4' was never mutated; consider changing to 'let' constant\n\
    \        var decimal4 = decimal3 / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:34:13:\
    \ warning: variable 'decimal5' was never mutated; consider changing to 'let' constant\n\
    \        var decimal5 = decimal4 / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:35:13:\
    \ warning: variable 'decimal6' was never mutated; consider changing to 'let' constant\n\
    \        var decimal6 = decimal5 / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:36:13:\
    \ warning: variable 'decimal7' was never mutated; consider changing to 'let' constant\n\
    \        var decimal7 = decimal6 / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:37:13:\
    \ warning: variable 'decimal8' was never mutated; consider changing to 'let' constant\n\
    \        var decimal8 = decimal7 / 10\n        ~~~ ^\n        let\n/tmp/tmpdgvzdcft.swift:38:13:\
    \ warning: variable 'decimal9' was never mutated; consider changing to 'let' constant\n\
    \        var "
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            oneCount++\n        } else {\n            decimalCount +=\
    \ element - oneCount\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            result.append(element)\n        } else {\n            result.append(decimalCount\
    \ / oneCount)\n        }\n        oneCount = 0\n        decimalCount = 0\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpp_hxz3vs.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        if number == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += number\n    \
    \    }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    } else {\n\
    \        result.sortInPlaceByDecreasingValue(decimal)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpahuoqivw.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpahuoqivw.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDecreasingValue'\n\
    \        result.sortInPlaceByDecreasingValue(decimal)\n        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmputo4q5dg.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmputo4q5dg.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(num, num)\n                       ^\nSwift.Array:11:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr)\n        for index\
    \ in 0..<ones {\n            result.append(decimal)\n        }\n    } else {\n\
    \        result = arr\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3lf2v4rp.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    \n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i].bitCount\n        if ones ==\
    \ 0 {\n            continue\n        }\n        \n        let decimal = arr[i].decimalValue\n\
    \        \n        if ones < decimal.bitCount {\n            sortedArr = sortedArr.sorted{\
    \ $0.decimalValue < $1.decimalValue }\n        } else {\n            sortedArr\
    \ = sortedArr.sorted{ $0.decimalValue > $1.decimalValue }\n        }\n    }\n\
    \    \n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphm00ib64.swift:16:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount\n                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmphm00ib64.swift:21:30: error: value of type 'Int' has no member 'decimalValue'\n\
    \        let decimal = arr[i].decimalValue\n                      ~~~~~~ ^~~~~~~~~~~~\n\
    /tmp/tmphm00ib64.swift:24:46: error: value of type 'Int' has no member 'decimalValue'\n\
    \            sortedArr = sortedArr.sorted{ $0.decimalValue < $1.decimalValue }\n\
    \                                          ~~ ^~~~~~~~~~~~\n/tmp/tmphm00ib64.swift:24:64:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            sortedArr\
    \ = sortedArr.sorted{ $0.decimalValue < $1.decimalValue }\n                  \
    \                                          ~~ ^~~~~~~~~~~~\n/tmp/tmphm00ib64.swift:26:46:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            sortedArr\
    \ = sortedArr.sorted{ $0.decimalValue > $1.decimalValue }\n                  \
    \                        ~~ ^~~~~~~~~~~~\n/tmp/tmphm00ib64.swift:26:64: error:\
    \ value of type 'Int' has no member 'decimalValue'\n            sortedArr = sortedArr.sorted{\
    \ $0.decimalValue > $1.decimalValue }\n                                      \
    \                      ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] == 0 {\n            swap(&result[idx], &result[idx+1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptvdlyenn.swift:16:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[idx], &result[idx+1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(idx, idx+1)\n/tmp/tmptvdlyenn.swift:16:32: note: conflicting\
    \ access is here\n            swap(&result[idx], &result[idx+1])\n           \
    \                    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones == 0 {\n\
    \            swap(&result[index], &result[index + 1])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpb3k25f3j.swift:17:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[index], &result[index + 1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(index, index + 1)\n/tmp/tmpb3k25f3j.swift:17:34: note:\
    \ conflicting access is here\n            swap(&result[index], &result[index +\
    \ 1])\n                                 ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    for x in arr {\n        if x == 0 {\n            ones = append(ones,\
    \ 0)\n        } else {\n            ones = append(ones, 1)\n        }\n    }\n\
    \    var i = 0\n    for x in ones {\n        if x > 0 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for x in arr {\n        if x == 0 {\n \
    \           continue\n        }\n        j = i\n        i = 0\n        for y in\
    \ ones {\n            if y > 0 {\n                if x & 1 == y {\n          \
    \          result.append(j)\n                }\n                j += 1\n     \
    \       }\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpol06eavk.swift:17:20: error: cannot find 'append' in scope\n  \
    \          ones = append(ones, 0)\n                   ^~~~~~\n/tmp/tmpol06eavk.swift:19:20:\
    \ error: cannot find 'append' in scope\n            ones = append(ones, 1)\n \
    \                  ^~~~~~\n/tmp/tmpol06eavk.swift:33:9: error: cannot find 'j'\
    \ in scope\n        j = i\n        ^\n/tmp/tmpol06eavk.swift:38:35: error: cannot\
    \ find 'j' in scope\n                    result.append(j)\n                  \
    \                ^\n/tmp/tmpol06eavk.swift:40:17: error: cannot find 'j' in scope\n\
    \                j += 1\n                ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            ones = -1\n        }\n        if ones == 0\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3k2_r3ia/tmp3k2_r3ia.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd9cf95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd9cc8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd9cc8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd9cc8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2_r3ia                        0x000055f2c0d9f604 <unavailable> + 5636

    5    libc.so.6                          0x00002acd9d181460 __libc_start_main +
    245

    6    tmp3k2_r3ia                        0x000055f2c0d9f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            if count > 0 {\n                result.append((count\
    \ - 1) * element)\n            }\n            count = 0\n        }\n    }\n  \
    \  if count > 0 {\n        result.append((count - 1) * element)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptya_0b4s.swift:26:37: error: cannot find 'element' in scope\n \
    \       result.append((count - 1) * element)\n                               \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n        if ones == 0 {\n            result.insert(decimal, element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpq8gc28j5.swift:30:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(decimal, element)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount\n        if ones > 0 {\n \
    \           let index = result.index(of: arr[i])\n            result.remove(at:\
    \ index)\n            result.insert(arr[i], at: index)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdnpy6pn2.swift:17:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: arr[i])\n   \
    \                            ^\n/tmp/tmpdnpy6pn2.swift:17:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: arr[i])\n                \
    \               ^~~~~\n                               firstIndex\n/tmp/tmpdnpy6pn2.swift:18:31:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result.remove(at: index)\n                              ^\n/tmp/tmpdnpy6pn2.swift:18:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpdnpy6pn2.swift:18:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                   !\n/tmp/tmpdnpy6pn2.swift:19:39: error: value\
    \ of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n            result.insert(arr[i],\
    \ at: index)\n                                      ^\n/tmp/tmpdnpy6pn2.swift:19:39:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.insert(arr[i], at: index)\n                      \
    \                ^\n                                            ?? <#default value#>\n\
    /tmp/tmpdnpy6pn2.swift:19:39: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(arr[i], at:\
    \ index)\n                                      ^\n                          \
    \                 !\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr: arr)\n    }\n    if\
    \ ones == 0 {\n        result = arr.sorted()\n    }\n    if ones < 0 {\n     \
    \   result = result.sorted()\n    }\n    if decimal > 0 {\n        result = result.sorted()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            result.insert(ones, num)\n            ones = 0\n\
    \        }\n    }\n    if ones > 0 {\n        result.insert(ones, 0)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpiv24a8sa.swift:19:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(ones, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpiv24a8sa.swift:24:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(ones,\
    \ 0)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr: arr, ones: ones, decimal:\
    \ decimal)\n    }\n    if ones == 0 {\n        result = arr.sorted()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4hn5kjqr.swift:24:28: error: extra arguments at positions #2, #3\
    \ in call\n        result = sort_array(arr: arr, ones: ones, decimal: decimal)\n\
    \                           ^\n/tmp/tmp4hn5kjqr.swift:12:6: note: 'sort_array(arr:)'\
    \ declared here\nfunc sort_array(arr: [Int]) -> [Int] {\n     ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmputo4q5dg.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmputo4q5dg.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(num, num)\n                       ^\nSwift.Array:11:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n            } else {\n          \
    \      result.append(num)\n            }\n            oneCount = 0\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpc8ckxelp.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    for v in\
    \ arr {\n        if v == 0 {\n            continue\n        }\n        let ones\
    \ = binToInt(v)\n        sorted = sorted.sorted {\n            $0 >= ones\n  \
    \      }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6wforiu3.swift:18:20: error: cannot find 'binToInt' in scope\n\
    \        let ones = binToInt(v)\n                   ^~~~~~~~\n/tmp/tmp6wforiu3.swift:19:32:\
    \ error: contextual closure type '(Int, Int) throws -> Bool' expects 2 arguments,\
    \ but 1 was used in closure body\n        sorted = sorted.sorted {\n         \
    \                      ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for el in arr {\n        if el == 1 {\n            ones += 1\n    \
    \    } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n            }\n            ones = 1\n            result.append(el)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp54ouqywn/tmp54ouqywn.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6592d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65929fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65929fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65929fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54ouqywn                        0x0000559d59800604 <unavailable> + 5636

    5    libc.so.6                          0x00002b6592ef2460 __libc_start_main +
    245

    6    tmp54ouqywn                        0x0000559d598001e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += x\n        }\n    }\n\
    \    if ones > 0 {\n        result.sort(by: {\n            ones - $0\n       \
    \ })\n    }\n    if decimal > 0 {\n        result.sort(by: {\n            decimal\
    \ - $1\n        })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpovxa6mp6.swift:24:25: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n      \
    \  result.sort(by: {\n                        ^\n/tmp/tmpovxa6mp6.swift:25:18:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \          ones - $0\n            ~~~~~^~~~\n/tmp/tmpovxa6mp6.swift:30:21: error:\
    \ cannot convert value of type 'Int' to closure result type 'Bool'\n         \
    \   decimal - $1\n            ~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        if number == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += number\n    \
    \    }\n    }\n    if ones > 0 {\n        result = sort_array(arr: arr)\n    }\n\
    \    if ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n       \
    \ result.sort(by: {\n            ($0 > $1) ? true : false\n        })\n    }\n\
    \    if decimal > 0 {\n        result = sort_array(arr: result)\n    }\n    if\
    \ decimal < 0 {\n        result.sort(by: {\n            ($0 > $1) ? true : false\n\
    \        })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824835
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            zeros[0]++\n        }\n    }\n\
    \    for x in ones {\n        result.append(x)\n    }\n    for x in zeros {\n\
    \        result.append(x)\n    }\n    for x in result {\n        if x < 0 {\n\
    \            result += x\n        } else {\n            result -= x\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2q0biuut.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp2q0biuut.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/tmp2q0biuut.swift:31:23: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Array<Int>'\n       \
    \     result += x\n                      ^\n/tmp/tmp2q0biuut.swift:33:20: error:\
    \ binary operator '-=' cannot be applied to operands of type '[Int]' and 'Int'\n\
    \            result -= x\n            ~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n \
    \   }\n    if ones == 0 {\n        result = sort_array(result)\n    }\n    if\
    \ decimal > 0 {\n        result = sort_array(result)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpp98_kgm4.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n/tmp/tmpp98_kgm4.swift:27:29: error: missing argument\
    \ label 'arr:' in call\n        result = sort_array(result)\n                \
    \            ^\n                            arr: \n/tmp/tmpp98_kgm4.swift:30:29:\
    \ error: missing argument label 'arr:' in call\n        result = sort_array(result)\n\
    \                            ^\n                            arr: \n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    var ones = Array(repeating: 0, count: arr.count)\n    for i\
    \ in 0..<arr.count {\n        ones[i] = 0\n        for j in 0..<i {\n        \
    \    if arr[j] == 1 {\n                ones[i] += 1\n            }\n        }\n\
    \        result[i] = 0\n        for j in 0..<i {\n            if ones[j] == 0\
    \ {\n                result[i] += 1\n            }\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpeyo6rmog/tmpeyo6rmog.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0af5caac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0af59a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0af59a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0af59a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyo6rmog                        0x0000560b4cfa1784 <unavailable> + 6020

    5    libc.so.6                          0x00002b0af5e96460 __libc_start_main +
    245

    6    tmpeyo6rmog                        0x0000560b4cfa1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for x in arr {\n        if x == 1 {\n            ones += 1\n      \
    \  } else {\n            if ones > 0 {\n                result.append((ones -\
    \ 1) * 10 + x)\n                ones = 0\n            } else {\n             \
    \   result.append(x)\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9aen5ae7/tmp9aen5ae7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c49dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c49ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c49ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c49ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aen5ae7                        0x0000562b1fefd604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0c49fba460 __libc_start_main +
    245

    6    tmp9aen5ae7                        0x0000562b1fefd1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones == 0 {\n\
    \            continue\n        }\n        let decimal = arr[index] >> 1\n    \
    \    if decimal > 0 {\n            result[index] = decimal\n        } else {\n\
    \            result[index] = -decimal\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpgwpzyv0v/tmpgwpzyv0v.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f242c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f23fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f23fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f23fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgwpzyv0v                        0x00005643bd1c3674 <unavailable> + 5748

    5    libc.so.6                          0x00002b9f244b2460 __libc_start_main +
    245

    6    tmpgwpzyv0v                        0x00005643bd1c3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBits()\n\
    \        decimal = num.trailingZeroBits() / 8\n        if ones > 0 {\n       \
    \     result.insert(decimal, num)\n        } else {\n            result.insert(-decimal,\
    \ num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxvcwh0yg.swift:17:20: error: value of type 'Int' has no member\
    \ 'trailingZeroBits'\n        ones = num.trailingZeroBits()\n               ~~~\
    \ ^~~~~~~~~~~~~~~~\n/tmp/tmpxvcwh0yg.swift:18:23: error: value of type 'Int' has\
    \ no member 'trailingZeroBits'\n        decimal = num.trailingZeroBits() / 8\n\
    \                  ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpxvcwh0yg.swift:20:20: error:\
    \ no exact matches in call to instance method 'insert'\n            result.insert(decimal,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpxvcwh0yg.swift:22:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(-decimal, num)\n    \
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var decimal = [0]\n    for x in arr {\n        if x != 0 {\n    \
    \        ones[0]++\n        } else {\n            decimal[0]++\n        }\n  \
    \  }\n    for x in ones {\n        for y in decimal {\n            if x < y {\n\
    \                result.insert(x, 0)\n                result.insert(y, 0)\n  \
    \              break\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmplpp6rf9c.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmplpp6rf9c.swift:20:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  decimal[0]++\n                      ^~\n/tmp/tmplpp6rf9c.swift:26:24: error:\
    \ no exact matches in call to instance method 'insert'\n                result.insert(x,\
    \ 0)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmplpp6rf9c.swift:27:24: error: no exact\
    \ matches in call to instance method 'insert'\n                result.insert(y,\
    \ 0)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        } else {\n   \
    \         result[i] = arr[i] * 10 + arr[i].binCount().decimalValue()\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdo03r_29.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpdo03r_29.swift:19:46: error: value of type 'Int' has no member\
    \ 'binCount'\n            result[i] = arr[i] * 10 + arr[i].binCount().decimalValue()\n\
    \                                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            oneCount++\n        } else {\n            decimalCount +=\
    \ element - oneCount\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            result.append(element)\n        } else {\n            decimalCount\
    \ += element - oneCount\n        }\n    }\n    for element in arr {\n        if\
    \ element == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += element - oneCount\n        }\n    }\n    for element in arr {\n        if\
    \ element == 1 {\n            result.append(element)\n        } else {\n     \
    \       decimalCount += element - oneCount\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6qxufyo0.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmp6qxufyo0.swift:32:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones += num\n      \
    \  decimal += num * num\n    }\n    if ones > 0 {\n        result = arr.sorted{\
    \ $0 < $1 }\n    } else {\n        result = arr.sorted{ $0 > $1 }\n    }\n   \
    \ if decimal > 0 {\n        result = result.sorted{ $0 < $1 }\n    } else {\n\
    \        result = result.sorted{ $0 > $1 }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpt65vxhkc/tmpt65vxhkc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b813527dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8134f74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8134f74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8134f737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt65vxhkc                        0x000056042d907624 <unavailable> + 5668

    5    libc.so.6                          0x00002b8135469460 __libc_start_main +
    245

    6    tmpt65vxhkc                        0x000056042d907209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBits()\n\
    \        decimal = num.trailingZeroBits() * 10 + num.trailingZeroBits() / 10\n\
    \        if ones == 0 {\n            result.insert(decimal, num)\n        } else\
    \ {\n            result.insert(decimal, num.decimalValue())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5ql43oyz.swift:17:20: error: value of type 'Int' has no member\
    \ 'trailingZeroBits'\n        ones = num.trailingZeroBits()\n               ~~~\
    \ ^~~~~~~~~~~~~~~~\n/tmp/tmp5ql43oyz.swift:18:23: error: value of type 'Int' has\
    \ no member 'trailingZeroBits'\n        decimal = num.trailingZeroBits() * 10\
    \ + num.trailingZeroBits() / 10\n                  ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp5ql43oyz.swift:18:53:\
    \ error: value of type 'Int' has no member 'trailingZeroBits'\n        decimal\
    \ = num.trailingZeroBits() * 10 + num.trailingZeroBits() / 10\n              \
    \                                  ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp5ql43oyz.swift:20:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(decimal,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp5ql43oyz.swift:22:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(decimal, num.decimalValue())\n\
    \                   ^\n/tmp/tmp5ql43oyz.swift:22:20: note: found candidate with\
    \ type '(__owned Int, Int) -> ()'\n            result.insert(decimal, num.decimalValue())\n\
    \                   ^\n/tmp/tmp5ql43oyz.swift:22:40: error: value of type 'Int'\
    \ has no member 'decimalValue'\n            result.insert(decimal, num.decimalValue())\n\
    \                                   ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    sortedArr\
    \ = arr.sorted()\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv4bl6kjn/tmpv4bl6kjn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2842763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b284245ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b284245a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28424597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4bl6kjn                        0x000055f575888494 <unavailable> + 5268

    5    libc.so.6                          0x00002b284294f460 __libc_start_main +
    245

    6    tmpv4bl6kjn                        0x000055f575888079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    for num in arr {\n        if num == 1 {\n            ones[0]++\n\
    \        } else {\n            ones[0] = 0\n        }\n        if ones[0] > 0\
    \ {\n            result.append(num)\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones[0]--\n        } else {\n            ones[0]\
    \ = 0\n        }\n        if ones[0] > 0 {\n            result.append(num)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9hk8dij4.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp9hk8dij4.swift:27:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        ones += num\n    }\n    if ones == 0 {\n\
    \        for num in arr {\n            result.append(num)\n        }\n    } else\
    \ {\n        var i = 0\n        var j = 0\n        var tmp = 0\n        var tmp2\
    \ = 0\n        var tmp3 = 0\n        var tmp4 = 0\n        var tmp5 = 0\n    \
    \    var tmp6 = 0\n        var tmp7 = 0\n        var tmp8 = 0\n        var tmp9\
    \ = 0\n        var tmp10 = 0\n        var tmp11 = 0\n        var tmp12 = 0\n \
    \       var tmp13 = 0\n        var tmp14 = 0\n        var tmp15 = 0\n        var\
    \ tmp16 = 0\n        var tmp17 = 0\n        var tmp18 = 0\n        var tmp19 =\
    \ 0\n        var tmp20 = 0\n        var tmp21 = 0\n        var tmp22 = 0\n   \
    \     var tmp23 = 0\n        var tmp24 = 0\n        var tmp25 = 0\n        var\
    \ tmp26 = 0\n        var tmp27 = 0\n        var tmp28 = 0\n        var tmp29 =\
    \ 0\n        var tmp30 = 0\n        var tmp31 = 0\n        var tmp32 = 0\n   \
    \     var tmp33 = 0\n        var tmp34 = 0\n        var tmp35 = 0\n        var\
    \ tmp36 = 0\n        var tmp37 = 0\n        var tmp38 = 0\n        var tmp39 =\
    \ 0\n        var tmp40 = 0\n        var tmp41 = 0\n        var tmp42 = 0\n   \
    \     var tmp43 = 0\n        var tmp44 = 0\n        var tmp45 = 0\n        var\
    \ tmp46 = 0\n        var tmp47 = 0\n        var tmp48 = 0\n        var tmp49 =\
    \ 0\n        var tmp50 = 0\n        var tmp51 = 0\n        var tmp52 = 0\n   \
    \     var tmp53 = 0\n        var tmp54 = 0\n        var tmp55 = 0\n        var\
    \ tmp56 = 0\n        var tmp57 = 0\n        var tmp58 = 0\n        var tmp59 =\
    \ 0\n        var tmp60 = 0\n        var tmp61 = 0\n        var tmp62 = 0\n   \
    \     var tmp63 = 0\n        var tmp64 = 0\n        var tmp65 = 0\n        var\
    \ tmp66 = 0\n        var tmp67 = 0\n        var tmp68 = 0\n        var tmp69 =\
    \ 0\n        var tmp70 = 0\n        var tmp71 = 0\n        var tmp72 = 0\n   \
    \     var tmp73 = 0\n        var tmp74 = 0\n        var tmp75 = 0\n        var\
    \ tmp76 = 0\n        var tmp77 = 0\n        var tmp78 = 0\n        var tmp79 =\
    \ 0\n        var tmp80 = 0\n        var tmp81 = 0\n        var tmp82 = 0\n   \
    \     var tmp83 = 0\n        var tmp84 = 0\n        var tmp85 = 0\n        var\
    \ tmp86 = 0\n        var tmp87 = 0\n        var tmp88 = 0\n        var tmp89 =\
    \ 0\n        var tmp90 = 0\n        var tmp91 = 0\n        var tmp92 = 0\n   \
    \     var tmp93\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpahmcg_xt.swift:140:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpahmcg_xt.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpahmcg_xt.swift:117:13: error: type\
    \ annotation missing in pattern\n        var tmp93\n            ^\n/tmp/tmpahmcg_xt.swift:121:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var decimals = [Int]()\n    var i = 0\n    for x in arr {\n \
    \       if x == 1 {\n            ones.append(i)\n        } else {\n          \
    \  decimals.append(i)\n        }\n        i += 1\n    }\n    for x in ones {\n\
    \        result.append(x)\n    }\n    for x in decimals {\n        result.append(x)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmppafn0962/tmppafn0962.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e804fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e801f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e801f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e801f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppafn0962                        0x0000558cb8c73604 <unavailable> + 5636

    5    libc.so.6                          0x00002b7e806e8460 __libc_start_main +
    245

    6    tmppafn0962                        0x0000558cb8c731e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result.sortInPlace()\n    } else {\n      \
    \  result.sortInPlaceByDec(decimal)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9dby42cx.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9dby42cx.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDec'\n        result.sortInPlaceByDec(decimal)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in\
    \ arr {\n        var count = 0\n        for y in x {\n            if y == 1 {\n\
    \                count += 1\n            }\n        }\n        if count == 0 {\n\
    \            result.insert(x, at: 0)\n        } else {\n            result.insert(x,\
    \ at: result.count - count)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7p_lvwet.swift:16:18: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for y in x {\n                 ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgidkxtl6.swift:167:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpgidkxtl6.swift:142:24:\
    \ note: to match this opening '{'\n    for element in arr {\n                \
    \       ^\n/tmp/tmpgidkxtl6.swift:167:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpgidkxtl6.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpgidkxtl6.swift:148:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpgidkxtl6.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for value\
    \ in arr {\n        let ones = value & 1\n        value >>= 1\n        if ones\
    \ == 0 {\n            result.append(value)\n        } else {\n            let\
    \ index = result.index(of: value)\n            result[index] = result[index].compare(to:\
    \ value) == .orderedAscending ? value : result[index]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6_o6b4rn.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'value' is a 'let' constant\n        value >>= 1\n        ~~~~~ ^\n\
    /tmp/tmp6_o6b4rn.swift:20:32: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n            let index = result.index(of: value)\n       \
    \                        ^\n/tmp/tmp6_o6b4rn.swift:20:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: value)\n                 \
    \              ^~~~~\n                               firstIndex\n/tmp/tmp6_o6b4rn.swift:21:20:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result[index] = result[index].compare(to: value) == .orderedAscending ? value\
    \ : result[index]\n                   ^\n/tmp/tmp6_o6b4rn.swift:21:20: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result[index] = result[index].compare(to: value) == .orderedAscending\
    \ ? value : result[index]\n                   ^\n                         ?? <#default\
    \ value#>\n/tmp/tmp6_o6b4rn.swift:21:20: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result[index] =\
    \ result[index].compare(to: value) == .orderedAscending ? value : result[index]\n\
    \                   ^\n                        !\n/tmp/tmp6_o6b4rn.swift:21:100:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result[index] = result[index].compare(to: value) == .orderedAscending ? value\
    \ : result[index]\n                                                          \
    \                                         ^\n/tmp/tmp6_o6b4rn.swift:21:100: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result[index] = result[index].compare(to: value) == .orderedAscending\
    \ ? value : result[index]\n                                                  \
    \                          "
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decCount = 0\n    for num in arr {\n        if num == 1 {\n   \
    \         oneCount++\n        } else {\n            decCount += num\n        }\n\
    \    }\n    if oneCount > decCount {\n        for num in arr {\n            if\
    \ num == 1 {\n                result.append(num)\n            }\n        }\n \
    \   } else {\n        for num in arr {\n            if num == 1 {\n          \
    \      result.append(decCount)\n            }\n            decCount -= num\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpi7vcyecp.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones == 0 {\n            result[i] = arr[i]\n        } else {\n  \
    \          result[i] = arr[i].decimalValue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpm79i3fjo.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpm79i3fjo.swift:19:32: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            result[i] = arr[i].decimalValue\n              \
    \          ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            oneCount = 0\n        }\n        if oneCount >\
    \ 0 {\n            result.append(element)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmf0hgux0.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr.filter { $0 & 1 == 1 }.count\n        if ones > result.count\
    \ {\n            result = result.sorted{ $0 < $1 }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpac6dpf4k/tmpac6dpf4k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b227f933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b227f62ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b227f62a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b227f6297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac6dpf4k                        0x000055fbe24a0704 <unavailable> + 5892

    5    libc.so.6                          0x00002b227fb1f460 __libc_start_main +
    245

    6    tmpac6dpf4k                        0x000055fbe24a02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for v in arr {\n        ones += v\n        decimal\
    \ += v * v\n    }\n    if ones > 0 {\n        result.sort(by: {\n            ones\
    \ - $0\n        })\n    }\n    if decimal > 0 {\n        result.sort(by: {\n \
    \           decimal - $1\n        })\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpb7mkxzxv.swift:21:25: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n      \
    \  result.sort(by: {\n                        ^\n/tmp/tmpb7mkxzxv.swift:22:18:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \          ones - $0\n            ~~~~~^~~~\n/tmp/tmpb7mkxzxv.swift:27:21: error:\
    \ cannot convert value of type 'Int' to closure result type 'Bool'\n         \
    \   decimal - $1\n            ~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n    if ones\
    \ == 0 {\n        result = sort_array(result)\n    }\n    if ones < 0 {\n    \
    \    result = sort_array(result)\n    }\n    if decimal > 0 {\n        result\
    \ = sort_array(result)\n    }\n    if decimal < 0 {\n        result = sort_array(result)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6urnx5t2.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n/tmp/tmp6urnx5t2.swift:27:29: error: missing argument\
    \ label 'arr:' in call\n        result = sort_array(result)\n                \
    \            ^\n                            arr: \n/tmp/tmp6urnx5t2.swift:30:29:\
    \ error: missing argument label 'arr:' in call\n        result = sort_array(result)\n\
    \                            ^\n                            arr: \n/tmp/tmp6urnx5t2.swift:33:29:\
    \ error: missing argument label 'arr:' in call\n        result = sort_array(result)\n\
    \                            ^\n                            arr: \n/tmp/tmp6urnx5t2.swift:36:29:\
    \ error: missing argument label 'arr:' in call\n        result = sort_array(result)\n\
    \                            ^\n                            arr: \n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            count = 0\n        }\n        if count >\
    \ 0 {\n            result.insert(element, at: result.endIndex)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp0t038i_p/tmp0t038i_p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1903bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1900b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1900b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1900b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t038i_p                        0x0000558c8c377664 <unavailable> + 5732

    5    libc.so.6                          0x00002ae1905a9460 __libc_start_main +
    245

    6    tmp0t038i_p                        0x0000558c8c377249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            sorted.append(num)\n        }\n    }\n    if ones\
    \ == 0 {\n        return sorted\n    }\n    var decimal = ones\n    var decimalIndex\
    \ = 0\n    var decimalSum = 0\n    for num in arr {\n        decimalSum += num\n\
    \        if decimalSum > decimal {\n            decimal = decimalSum\n       \
    \     decimalIndex = num\n        }\n    }\n    sorted.append(arr[decimalIndex])\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpr9js_4z3/tmpr9js_4z3.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67478c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67475b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67475b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67475b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9js_4z3                        0x000055e0c2fbe654 <unavailable> + 5716

    5    libc.so.6                          0x00002b6747aac460 __libc_start_main +
    245

    6    tmpr9js_4z3                        0x000055e0c2fbe239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.append(num)\n            }\n\
    \        }\n    } else {\n        for num in arr {\n            if num == 1 {\n\
    \                result.append(decimalCount)\n            }\n            decimalCount\
    \ -= num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpwbvf3v56.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArray = arr\n    \n    for\
    \ i in 0..<sortedArray.count {\n        if sortedArray[i] == 0 {\n           \
    \ sortedArray.remove(at: i)\n        }\n    }\n    \n    sortedArray.sort { (lhs,\
    \ rhs) -> Bool in\n        let lhsBin = String(lhs, radix: 2)\n        let rhsBin\
    \ = String(rhs, radix: 2)\n        \n        if lhsBin == rhsBin {\n         \
    \   return lhs.compare(rhs) == .orderedAscending\n        }\n        \n      \
    \  let lhsOnes = lhsBin.components(separatedBy: \"1\").count\n        let rhsOnes\
    \ = rhsBin.components(separatedBy: \"1\").count\n        \n        return lhsOnes\
    \ == rhsOnes\n    }\n    \n    return sortedArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpc2072gvf.swift:26:24: error: value of type 'Int' has no member\
    \ 'compare'\n            return lhs.compare(rhs) == .orderedAscending\n      \
    \             ~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount\n        if ones > 0 {\n \
    \           result[i] = arr[i]\n        }\n    }\n    result.sort { $0.trailingZeroBitCount\
    \ > $1.trailingZeroBitCount }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp2d1pm5e4/tmp2d1pm5e4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0098784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b009847bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b009847b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b009847a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2d1pm5e4                        0x00005586ab42c6f4 <unavailable> + 5876

    5    libc.so.6                          0x00002b0098970460 __libc_start_main +
    245

    6    tmp2d1pm5e4                        0x00005586ab42c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element *\
    \ pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu891q5mc.swift:155:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpu891q5mc.swift:128:24:\
    \ note: to match this opening '{'\n    for element in arr {\n                \
    \       ^\n/tmp/tmpu891q5mc.swift:155:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpu891q5mc.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpu891q5mc.swift:20:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, ones)\n      \
    \                           ^~~\n/tmp/tmpu891q5mc.swift:27:34: error: cannot find\
    \ 'pow' in scope\n            decimal -= element * pow(10, ones)\n           \
    \                      ^~~\n/tmp/tmpu891q5mc.swift:34:34: error: cannot find 'pow'\
    \ in scope\n            decimal += element * pow(10, ones)\n                 \
    \                ^~~\n/tmp/tmpu891q5mc.swift:41:34: error: cannot find 'pow' in\
    \ scope\n            decimal -= element * pow(10, ones)\n                    \
    \             ^~~\n/tmp/tmpu891q5mc.swift:48:34: error: cannot find 'pow' in scope\n\
    \            decimal += element * pow(10, ones)\n                            \
    \     ^~~\n/tmp/tmpu891q5mc.swift:55:34: error: cannot find 'pow' in scope\n \
    \           decimal -= element * pow(10, ones)\n                             \
    \    ^~~\n/tmp/tmpu891q5mc.swift:62:34: error: cannot find 'pow' in scope\n  \
    \          decimal += element * pow(10, ones)\n                              \
    \   ^~~\n/tmp/tmpu891q5mc.swift:69:34: error: cannot find 'pow' in scope\n   \
    \         decimal -= element * pow(10, ones)\n                               \
    \  ^~~\n/tmp/tmpu891q5mc.swift:76:34: error: cannot find 'pow' in scope\n    \
    \        decimal += element * pow(10, ones)\n                                \
    \ ^~~\n/tmp/tmpu891q5mc.swift:83:34: error: cannot find 'p"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        oneCount += num\
    \ != 0\n        decimalCount += num == 0\n    }\n    if oneCount > decimalCount\
    \ {\n        sorted = arr\n    } else {\n        sorted = arr.sorted()\n    }\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpcwem0py7.swift:17:25: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        oneCount += num != 0\n            \
    \            ^\n/tmp/tmpcwem0py7.swift:18:29: error: cannot convert value of type\
    \ 'Bool' to expected argument type 'Int'\n        decimalCount += num == 0\n \
    \                           ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    var ones = Array(repeating: 0, count: arr.count)\n    for idx\
    \ in 0..<arr.count {\n        ones[idx] = arr[idx] & 1\n        result[idx] =\
    \ arr[idx]\n    }\n    for idx in 0..<arr.count {\n        if ones[idx] == 0 {\n\
    \            result[idx] = result[idx] >> 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpl_pg0kom/tmpl_pg0kom.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeb5683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeb537ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeb537a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeb53797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_pg0kom                        0x0000561d71a6d6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002aeeb586f460 __libc_start_main +
    245

    6    tmpl_pg0kom                        0x0000561d71a6d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]++\n        } else {\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1w0ad61q.swift:170:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp1w0ad61q.swift:144:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmp1w0ad61q.swift:170:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmp1w0ad61q.swift:12:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmp1w0ad61q.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp1w0ad61q.swift:20:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n/tmp/tmp1w0ad61q.swift:21:21: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            zeros[0]++\n\
    \                    ^~\n/tmp/tmp1w0ad61q.swift:26:20: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            ones[0]--\n               \
    \    ^~\n/tmp/tmp1w0ad61q.swift:28:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp1w0ad61q.swift:29:21:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  zeros[0]--\n                    ^~\n/tmp/tmp1w0ad61q.swift:34:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            ones[0]++\n \
    \                  ^~\n/tmp/tmp1w0ad61q.swift:36:20: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            ones[0]--\n               \
    \    ^~\n/tmp/tmp1w0ad61q.swift:37:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            zeros[0]++\n                    ^~\n/tmp/tmp1w0ad61q.swift:42:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n/tmp/tmp1"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmputo4q5dg.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmputo4q5dg.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(num, num)\n                       ^\nSwift.Array:11:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    for k in 0..<arr.count {\n        if arr[k]\
    \ == 1 {\n            result.append(k)\n            i += 1\n        } else {\n\
    \            if i < result.count {\n                j = i\n                for\
    \ k in i..<result.count {\n                    if arr[k] == 1 {\n            \
    \            result.append(k)\n                        i += 1\n              \
    \          break\n                    }\n                }\n            }\n  \
    \          if j < result.count {\n                k = j\n                for j\
    \ in i..<result.count {\n                    if arr[j] == 1 {\n              \
    \          result.append(j)\n                        j += 1\n                \
    \        break\n                    }\n                }\n            }\n    \
    \        if k < result.count {\n                result.append(k)\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqui8fiw1.swift:33:17: error: cannot assign to value: 'k' is a 'let'\
    \ constant\n                k = j\n                ^\n/tmp/tmpqui8fiw1.swift:37:27:\
    \ error: left side of mutating operator isn't mutable: 'j' is a 'let' constant\n\
    \                        j += 1\n                        ~ ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        ones += num\n    }\n    if ones == 0 {\n\
    \        result = arr\n    } else {\n        var i = 0\n        var j = 0\n  \
    \      var k = arr.count\n        while i < k {\n            if arr[i] == 0 {\n\
    \                result[j] = arr[i]\n                j += 1\n                i\
    \ += 1\n                continue\n            }\n            if arr[i] > 0 {\n\
    \                i += 1\n                continue\n            }\n           \
    \ if arr[i] < 0 {\n                j += 1\n                i += 1\n          \
    \      continue\n            }\n            i += 1\n        }\n        if j >\
    \ 0 {\n            result = result[0..<j]\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptiehuwt9.swift:43:28: error: cannot assign value of type 'ArraySlice<Int>'\
    \ to type '[Int]'\n            result = result[0..<j]\n                     ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for n in arr {\n        if n == 1 {\n      \
    \      ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for n in arr {\n        if n == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for n in arr {\n        if n == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for n in arr {\n        if n == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ n in arr {\n        if n == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for n in\
    \ arr {\n        if n == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for n in arr {\n\
    \        if n == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for n in arr {\n        if n == 1 {\n\
    \            ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for n in arr {\n        if n == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for n in arr {\n        if n == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for n in arr {\n        if n == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ n in arr {\n        if n == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for n in\
    \ arr {\n        if n == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for n in arr {\n\
    \        if n == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for n in arr {\n        if n == 1 {\n\
    \            ones[0]++\n        } else {\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqzhw3i29.swift:170:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpqzhw3i29.swift:144:18:\
    \ note: to match this opening '{'\n    for n in arr {\n                 ^\n/tmp/tmpqzhw3i29.swift:170:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpqzhw3i29.swift:12:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmpqzhw3i29.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpqzhw3i29.swift:20:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n/tmp/tmpqzhw3i29.swift:21:21: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            zeros[0]++\n\
    \                    ^~\n/tmp/tmpqzhw3i29.swift:26:20: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            ones[0]--\n               \
    \    ^~\n/tmp/tmpqzhw3i29.swift:28:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpqzhw3i29.swift:29:21:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  zeros[0]--\n                    ^~\n/tmp/tmpqzhw3i29.swift:34:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            ones[0]++\n \
    \                  ^~\n/tmp/tmpqzhw3i29.swift:36:20: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            ones[0]--\n               \
    \    ^~\n/tmp/tmpqzhw3i29.swift:37:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            zeros[0]++\n                    ^~\n/tmp/tmpqzhw3i29.swift:42:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n/tmp/tmpq"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmputo4q5dg.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmputo4q5dg.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(num, num)\n                       ^\nSwift.Array:11:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for x in arr {\n        if x == 1 {\n\
    \            ones.append(x)\n        } else {\n            zeros.append(x)\n \
    \       }\n    }\n    for x in ones {\n        result.append(x)\n    }\n    for\
    \ x in zeros {\n        result.append(x)\n    }\n    for x in result {\n     \
    \   if x < 0 {\n            result.removeLast()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmprlmqlz35/tmprlmqlz35.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68bf5bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68bf2b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68bf2b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68bf2b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlmqlz35                        0x0000557e6b3146e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b68bf7a8460 __libc_start_main +
    245

    6    tmprlmqlz35                        0x0000557e6b3142c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 1 {\n            let j = i\n            while j > 0\
    \ && arr[j-1] == 1 {\n                arr[j] = arr[j-1]\n                j--\n\
    \            }\n            arr[j] = i\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1uj785_x.swift:18:20: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n                arr[j] = arr[j-1]\n                ~~~^\n\
    /tmp/tmp1uj785_x.swift:19:18: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n                j--\n                 ^~\n/tmp/tmp1uj785_x.swift:21:16:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        \
    \    arr[j] = i\n            ~~~^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    for n in arr {\n        if n != 0 {\n            ones.append(n)\n\
    \        } else {\n            ones = sort_array(ones)\n            if ones[0]\
    \ == 1 {\n                result.append(ones[0])\n            } else {\n     \
    \           result.append(ones[0])\n                result.append(ones[1])\n \
    \           }\n            ones = sort_array(ones)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpg19m5rln.swift:19:31: error: missing argument label 'arr:' in call\n\
    \            ones = sort_array(ones)\n                              ^\n      \
    \                        arr: \n/tmp/tmpg19m5rln.swift:26:31: error: missing argument\
    \ label 'arr:' in call\n            ones = sort_array(ones)\n                \
    \              ^\n                              arr: \n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    sortedArr\
    \ = sortByNumOnes(sortedArr)\n    sortedArr = sortByDecValue(sortedArr)\n    return\
    \ sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjd2a7bd6.swift:14:17: error: cannot find 'sortByNumOnes' in scope\n\
    \    sortedArr = sortByNumOnes(sortedArr)\n                ^~~~~~~~~~~~~\n/tmp/tmpjd2a7bd6.swift:15:17:\
    \ error: cannot find 'sortByDecValue' in scope\n    sortedArr = sortByDecValue(sortedArr)\n\
    \                ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones += num\n      \
    \  decimal += num * num\n    }\n    if ones < 0 {\n        ones = -ones\n    \
    \    decimal = -decimal\n    }\n    if ones == 0 {\n        result = arr\n   \
    \ } else {\n        result = arr.sorted{ $0 < $1 }\n    }\n    if decimal < 0\
    \ {\n        result = result.sorted{ $0 < $1 }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp2if8oycv/tmp2if8oycv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6959300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6958ff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6958ff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6958ff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2if8oycv                        0x00005590929c0624 <unavailable> + 5668

    5    libc.so.6                          0x00002b69594ec460 __libc_start_main +
    245

    6    tmp2if8oycv                        0x00005590929c0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = Int()\n    var decimal = Int()\n    for i in arr {\n        ones = Int(bitPattern:\
    \ i).countLeadingZeros()\n        decimal = Int(bitPattern: i)\n        sorted\
    \ = sorted + [decimal]\n    }\n    sorted = sorted + [ones]\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpchr2q834.swift:17:16: error: no exact matches in call to initializer\
    \ \n        ones = Int(bitPattern: i).countLeadingZeros()\n               ^\n\
    /tmp/tmpchr2q834.swift:17:16: note: found candidate with type '(UInt) -> Int'\n\
    \        ones = Int(bitPattern: i).countLeadingZeros()\n               ^\n/tmp/tmpchr2q834.swift:17:16:\
    \ note: found candidate with type '(ObjectIdentifier) -> Int'\n        ones =\
    \ Int(bitPattern: i).countLeadingZeros()\n               ^\n/tmp/tmpchr2q834.swift:17:35:\
    \ error: value of type 'Int' has no member 'countLeadingZeros'\n        ones =\
    \ Int(bitPattern: i).countLeadingZeros()\n               ~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpchr2q834.swift:18:19: error: no exact matches in call to initializer \n\
    \        decimal = Int(bitPattern: i)\n                  ^\nSwift.Int:5:12: note:\
    \ candidate expects value of type 'UInt' for parameter #1 (got 'Int')\n    public\
    \ init(bitPattern x: UInt)\n           ^\nSwift.Int:2:23: note: candidate expects\
    \ value of type 'ObjectIdentifier' for parameter #1 (got 'Int')\n    @inlinable\
    \ public init(bitPattern objectID: ObjectIdentifier)\n                      ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones += num\n      \
    \  decimal += num * num\n    }\n    if ones > 0 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlaceByDecreasingOrder(decimal)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_7c2i0ea.swift:21:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp_7c2i0ea.swift:23:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDecreasingOrder'\n\
    \        result.sortInPlaceByDecreasingOrder(decimal)\n        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in\
    \ arr {\n        let bin = binary(x)\n        let count = bin.count\n        if\
    \ count == 1 {\n            result.insert(x, at: 0)\n        } else {\n      \
    \      let decimal = bin.decimal\n            result.insert(x, at: decimal)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpeu1dlpnj.swift:15:19: error: cannot find 'binary' in scope\n  \
    \      let bin = binary(x)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            ones = -ones\n        }\n        result.append(element)\n\
    \    }\n    if ones == 0 {\n        result.sort()\n    } else {\n        result.sort(by:\
    \ { (lhs, rhs) -> Bool in\n            let lhsAsInt = Int(lhs)\n            let\
    \ rhsAsInt = Int(rhs)\n            return lhsAsInt == rhsAsInt\n        })\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsy2y0tsf/tmpsy2y0tsf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cc573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cc26ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cc26a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cc2697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsy2y0tsf                        0x00005577b7fe38d4 <unavailable> + 6356

    5    libc.so.6                          0x00002af2cc75f460 __libc_start_main +
    245

    6    tmpsy2y0tsf                        0x00005577b7fe34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 0 {\n            continue\n     \
    \   }\n        if i == 0 {\n            result.append(num)\n        } else {\n\
    \            switch num {\n            case 1:\n                result.append(result[i-1])\n\
    \            case 2:\n                result.append(result[i-2])\n           \
    \ case 3:\n                result.append(result[i-3])\n            case 4:\n \
    \               result.append(result[i-4])\n            case 5:\n            \
    \    result.append(result[i-5])\n            case 6:\n                result.append(result[i-6])\n\
    \            default:\n                result.append(num)\n            }\n   \
    \     }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac9eca1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac9e998561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac9e998286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac9e99813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac9e997bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac9e797e83 <unavailable> + 188035

    6    tmp6kl89vh8                        0x0000564e37182370 <unavailable> + 9072

    7    tmp6kl89vh8                        0x0000564e37181564 <unavailable> + 5476

    8    libc.so.6                          0x00002aac9ee8d460 __libc_start_main +
    245

    9    tmp6kl89vh8                        0x0000564e37181239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for value in arr {\n        if value == 1\
    \ {\n            oneCount++\n        } else {\n            decimalCount += value\
    \ / 2\n        }\n    }\n    if oneCount > decimalCount {\n        for value in\
    \ arr {\n            if value == 1 {\n                result.append(value)\n \
    \           }\n        }\n    } else {\n        for value in arr {\n         \
    \   if value == 1 {\n                result.append(value + decimalCount)\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpa1klls5o.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for idx in 0..<arr.count {\n        let ones = arr.filter {\
    \ $0 & 1 == 1 }\n        let decs = arr.filter { $0 & 1 == 0 }\n        if ones.count\
    \ > 0 {\n            result[idx] = decs.count > 0 ? decs.first : ones.first\n\
    \        } else {\n            result[idx] = decs.first\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpy1phddo1.swift:18:42: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result[idx] = decs.count\
    \ > 0 ? decs.first : ones.first\n                                         ^\n\
    /tmp/tmpy1phddo1.swift:18:42: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n            result[idx] = decs.count > 0\
    \ ? decs.first : ones.first\n                                         ^\n    \
    \                      (                                       ) ?? <#default\
    \ value#>\n/tmp/tmpy1phddo1.swift:18:42: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result[idx] = decs.count\
    \ > 0 ? decs.first : ones.first\n                                         ^\n\
    \                          (                                       )!\n/tmp/tmpy1phddo1.swift:20:32:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            result[idx] = decs.first\n                               ^\n/tmp/tmpy1phddo1.swift:20:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[idx] = decs.first\n                              \
    \ ^\n                                     ?? <#default value#>\n/tmp/tmpy1phddo1.swift:20:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result[idx] = decs.first\n                              \
    \ ^\n                                    !\n"
  stdout: ''
  timestamp: 1659824830
