language: swift
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += v * v\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp6vi49hr.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v * v\n                 ^\n\
    \               Int( )\n/tmp/tmpp6vi49hr.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for n in lst\
    \ {\n        sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpe7dp5xxr.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for n in\
    \ lst {\n        sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_4hbvhrh.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for num\
    \ in lst {\n        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3j89qehg.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += v * v\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp6vi49hr.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v * v\n                 ^\n\
    \               Int( )\n/tmp/tmpp6vi49hr.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for num\
    \ in lst {\n        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3j89qehg.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for v in lst\
    \ {\n        sum += v * v\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpecqq8g3e.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += v * v\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp6vi49hr.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v * v\n                 ^\n\
    \               Int( )\n/tmp/tmpp6vi49hr.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += v * v\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp6vi49hr.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v * v\n                 ^\n\
    \               Int( )\n/tmp/tmpp6vi49hr.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for num in\
    \ lst {\n        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsv3_kq3t.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map({ $0.roundToInt().roundToInt()\
    \ }).reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ecawgk4.swift:17:25: error: value of type 'Double' has no member\
    \ 'roundToInt'\n    return lst.map({ $0.roundToInt().roundToInt() }).reduce(0)\n\
    \                     ~~ ^~~~~~~~~~\n/tmp/tmp_ecawgk4.swift:17:62: error: missing\
    \ argument for parameter #2 in call\n    return lst.map({ $0.roundToInt().roundToInt()\
    \ }).reduce(0)\n                                                             ^\n\
    \                                                             , <#(Int, _) throws\
    \ -> Int#>\nSwift.Sequence:2:28: note: 'reduce' declared here\n    @inlinable\
    \ public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_\
    \ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for n in lst\
    \ {\n        sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpe7dp5xxr.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0.0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphat3czf4.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for num in\
    \ lst {\n        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsv3_kq3t.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nj4s46w.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmp3nj4s46w.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for n in lst\
    \ {\n        sum += n * n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpe7dp5xxr.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for x in lst\
    \ {\n        sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpoooo880j.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for v in lst {\n \
    \       sum += v * v\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp6vi49hr.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += v * v\n                 ^\n\
    \               Int( )\n/tmp/tmpp6vi49hr.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for num in\
    \ lst {\n        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsv3_kq3t.swift:21:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0 * $0 }.sum()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7hh4j5tu.swift:17:32: error: value of type '[Double]' has no member\
    \ 'sum'\n    return lst.map { $0 * $0 }.sum()\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n \
    \       sum += x * x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuvifeeym.swift:19:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmpuvifeeym.swift:21:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += num * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp94o34okf.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmp94o34okf.swift:21:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821062
