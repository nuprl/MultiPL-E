name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I\
  \ love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ["    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms", '    return is_bored_helper(S, "", 0, 0,
    0)', "    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n    return\
    \ count", '    return is_bored_helper(S, "", 0, 0, 0)', '    return is_bored(S:
    S, words: S.words)', "    let boredoms = S.components(separatedBy: \".?!\")\n\
    \    return boredoms.count { $0.hasPrefix(\"I\") }", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored(S:
    S, words: S.words)', "    guard let S = S.split(separator: \".\", maxSplits: 1).first\
    \ else { return 0 }\n    guard let S = S.split(separator: \"?\", maxSplits: 1).first\
    \ else { return 0 }\n    guard let S = S.split(separator: \"!\", maxSplits: 1).first\
    \ else { return 0 }\n    return S.range(of: \"I\", options: .caseInsensitive).count\
    \ ?? 0", "    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else { return 0 }\n    let boredoms = S.components(separatedBy: \".?!\").filter\
    \ {\n        !$0.isEmpty && $0.first! == \"I\"\n    }.count\n    return boredoms",
  '    return is_bored_helper(S, "")', "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    // TODO: Use a regex\n    return 0", " \
    \   let words = S.components(separatedBy: \".\")\n    let boredoms = words.filter({\
    \ $0.hasPrefix(\"I\") })\n    return boredoms.count", "    var boredoms = 0\n\
    \    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\")\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", '    return is_bored_impl(S, "", "")', '    return
    is_bored_impl(S, "")', '    return is_bored(S: S, words: ["I"])', "    let boredoms\
    \ = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", '    return is_bored_helper(S, "")', '    return is_bored_helper(S,
    "", 0, 0, 0)', '    return is_bored_helper(S, "")', '    return is_bored_helper(S,
    "", 0, 0, 0)', "    // Your code here\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", "    let words = S.split(separator: \".?!\"\
    )\n    return words.filter({ $0.hasPrefix(\"I\") }).count", "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", '    return is_bored_helper(S, "", 0, 0, 0)', "    let words = S.components(separatedBy:\
    \ \".\")\n    let boredoms = words.filter { $0.hasPrefix(\"I\") }\n    return\
    \ boredoms.count", '    return is_bored(S: S, delimiter: ".", delimiter2: "?",
    delimiter3: "!")', '    return is_bored_helper(S, "")', "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter {\n        !$0.isEmpty && $0.starts(with: \"I\")\n    }.count\n\
    \    return boredoms", '    return is_bored_helper(S, "")', '    return is_bored_helper(S,
    "")', '    return is_bored(S: S, words: nil)', "    var boredoms = 0\n    for\
    \ word in S.split(separator: \".?!\") {\n        if word == \"I\" {\n        \
    \    boredoms += 1\n        }\n    }\n    return boredoms", '    return is_bored(S:
    S, words: nil)', "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n        .filter({ $0.hasPrefix(\"I\") })\n        .count\n    return\
    \ boredoms", '    return is_bored_helper(S, "", 0, 0, 0)', "    \n    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    \n\
    \    return boredoms", '    return is_bored_helper(S, "")', '    return is_bored_helper(S,
    "", 0, 0, 0)', "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_helper(S,
    boredoms)', "    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_helper(S, "")',
  "    let boredoms = S.components(separatedBy: \".?!\").filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count", "    \n    // TODO: Write a function that takes\
    \ a string and returns the number of boredoms.\n    // HINT: Use a regular expression\
    \ to find all the sentences that start with the word \"I\".\n    // If no sentences\
    \ start with the word \"I\", return 0.\n    \n    return 0", "    // TODO: Write\
    \ a function that takes a string and returns the number of boredoms.\n    // HINT:\
    \ You can use the split() function on strings to split a string into an array\
    \ of strings.\n    // Then you can use a for loop to go through each string in\
    \ the array and compare it to the string \"I\".\n    // If they match, add 1 to\
    \ a running tally and return the tally.\n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", '    return
    is_bored_helper(S, bored_chars)', '    return is_bored(S: S, words: S.words)',
  "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", '    return is_bored_helper(S, "")', "    let\
    \ words = S.components(separatedBy: \".\")\n    let boredoms = words.filter({\
    \ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return is_bored(S:
    S, words: S.words)', "    var boredoms = 0\n    var currentWord = \"\"\n    for\
    \ word in S.split(separator: \".?!\") {\n        if word == \"I\" {\n        \
    \    boredoms += 1\n        }\n        currentWord = word\n    }\n    return boredoms",
  '    return is_bored_impl(S)', "    var count = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n   \
    \     }\n    }\n    return count", "    let words = S.components(separatedBy:\
    \ \".?!\")\n    return words.filter({ $0.hasPrefix(\"I\") }).count", "    \n \
    \   let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms", "    \n    let boredoms = S.components(separatedBy: \"\
    .?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    var boredoms\
    \ = 0\n    var sentences = S.split(\".\")\n    for sentence in sentences {\n \
    \       if sentence.startsWith(\"I\") {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", "    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", '    return is_bored(S: S, words: nil)', '    return
    is_bored_helper(S, "")', "    var count = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            count += 1\n        }\n\
    \    }\n    return count", '    return is_bored_helper(S, "", 0, 0, 0)', '    return
    is_bored_helper(S, "", 0, 0, 0)', '    return is_bored(S: S, delimiters: [".",
    "?", "!"])', '    return is_bored_helper(S, "", 0, 0, 0)', "    let boredoms =\
    \ S.components(separatedBy: \".?!\")\n    return boredoms.count { $0.hasPrefix(\"\
    I\") }", '    return is_bored_helper(S, bored_chars)', "    // Your code here\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  '    return is_bored_helper(S, "", 0, 0, 0)', "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter {\n        !$0.isEmpty\n    }.count\n    return boredoms", " \
    \   var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ // TODO: fill this in.\n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", '    return
    is_bored(S: S, words: nil)', "    let boredoms = S.split(separator: \".?!\").filter({\
    \ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    let words = S.components(separatedBy:\
    \ \".\")\n    return words.filter({ $0.hasPrefix(\"I\") }).count", "    let words\
    \ = S.components(separatedBy: \".\")\n    let boredoms = words.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", "    // Your code here\n    return 0", '    return
    is_bored_helper(S, "", 0, 0, 0)', '    return is_bored_helper(S, "")', "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", "    let boredoms = S.components(separatedBy: \"\
    .?!\")\n        .filter{$0.hasPrefix(\"I\")}\n        .count\n    return boredoms",
  '    return is_bored(S: S, words: nil)', '    return is_bored_helper(S, "", 0, 0,
    0)', '    return is_bored_helper(S, "")', "    var count = 0\n    for word in\
    \ S.split(separator: \".?!\") {\n        if word == \"I\" {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")}).count\n    return boredoms", '    return is_bored_helper(S, "")', "   \
    \ var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter({$0.hasPrefix(\"I\")})\n    return boredoms.count",
  '    return is_bored(S: S, words: S.words)', "    var boredoms = 0\n    for s in\
    \ S.split(separator: \".,?!\") {\n        if s.starts(with: \"I\") {\n       \
    \     boredoms += 1\n        }\n    }\n    return boredoms", '    return is_bored_helper(S,
    "")', "    let words = S.split(separator: \".?!\").map(String.init)\n    return\
    \ words.filter({ $0.hasPrefix(\"I\") }).count", "    \n    // TODO: Write a function\
    \ that takes in a string and returns the number of boredoms.\n    // HINT: It\
    \ should return 0 if the given string starts with the string \"I\".\n    \n  \
    \  return 0", "    var boredoms = 0\n    var first = true\n    for word in S.split(separator:\
    \ \".?!\") {\n        if first {\n            first = false\n        } else {\n\
    \            if word == \"I\" {\n                boredoms += 1\n            }\n\
    \        }\n    }\n    return boredoms", "    \n    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.hasPrefix(\"I\") }", '    return is_bored_helper(S,
    "", 0, 0, 0)', "    guard let words = S.split(separator: \".?!\") else {\n   \
    \     return 0\n    }\n    return words.filter({ $0.hasPrefix(\"I\") }).count",
  '    return is_bored_helper(S, "", "")', "    let boredoms = S.split(separator:\
    \ \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return
    is_bored(S: S, words: S.words)', '    return is_bored(S: S, words: nil)', '    return
    is_bored_helper(S, "", 0, 0, 0)', "    let words = S.components(separatedBy: \"\
    .\")\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", "    var boredoms = 0\n    var i = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \        i += 1\n    }\n    return boredoms", '    return is_bored_helper(S, "",
    0, 0, 0)', "    let words = S.split(separator: \".?!\").map(String.init)\n   \
    \ let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms",
  '    return is_bored(S: S, words: nil)', "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter {\n        !$0.isEmpty && $0.starts(with: \"I\")\n    }.count\n\
    \    return boredoms", "    \n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all the sentences that start with the word \"I\".\n    // Then use a for\
    \ loop to iterate over each sentence and increment a counter.\n    // The function\
    \ is_bored should return the counter.\n    \n    return 0", "    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.count { $0.hasPrefix(\"\
    I\") }", '    return is_bored_helper(S, "", 0, 0, 0)', "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter { $0.hasPrefix(\"I\") }\n    return boredoms.count", "    var\
    \ count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ // TODO: Write a function that takes a string and returns the number of boredoms.\n\
    \    // HINT: Use a regular expression to find all the sentences that start with\
    \ the word \"I\".\n    // Then use a Swift map to count the boredoms.\n    return\
    \ 0", "    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n      \
    \  if s.starts(with: \"I\") {\n            bored += 1\n        }\n    }\n    return\
    \ bored", "    var boredoms = 0\n    for word in S.split(separator: \".?!\") {\n\
    \        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n   \
    \ return boredoms", '    return is_bored(S: S, words: ["I"])', "    // TODO: Task\
    \ 2: Write a function that takes a string S and returns the number\n    // of\
    \ boredoms.\n    return 0", "    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else { return 0 }\n    let boredoms = S.components(separatedBy: \".?!\")\n \
    \   return boredoms.count { $0.hasPrefix(\"I\") }", "    var boredoms = 0\n  \
    \  for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms", '    return
    is_bored_helper(S, "")', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter({$0.hasPrefix(\"I\")}).count\n    return boredoms", '    return
    is_bored_helper(S, "", 0, 0, 0)', "    let words = S.split(separator: \".?!\"\
    ).map(String.init)\n    return words.filter({ $0.starts(with: \"I\") }).count",
  '    return is_bored_impl(S, "", "")', '    return is_bored_helper(S, "")', "  \
    \  \n    let boredoms = S.components(separatedBy: \".?!\")\n    \n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter({$0.hasPrefix(\"I\")})\n    return boredoms.count", "    let\
    \ boredoms = S.components(separatedBy: \".?!\").filter {\n        $0.hasPrefix(\"\
    I\")\n    }.count\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let words = S.split(separator: \"\
    .?!\").map(String.init)\n    return words.filter({ $0.hasPrefix(\"I\") }).count",
  '    return is_bored_helper(S, "")', '    return is_bored_helper(S, "")', '    return
    is_bored(S: S, words: nil)', "    let boredoms = S.split(separator: \".?!\").filter({\
    \ $0.hasPrefix(\"I\") }).count\n    return boredoms", "    var count = 0\n   \
    \ for word in S.split(separator: \".?!\") {\n        if word == \"I\" {\n    \
    \        count += 1\n        }\n    }\n    return count", "    let words = S.split(separator:\
    \ \".?!\")\n    return words.filter({ $0.hasPrefix(\"I\") }).count", "    let\
    \ words = S.components(separatedBy: \".\")\n    let boredoms = words.filter({\
    \ $0.hasPrefix(\"I\") })\n    return boredoms.count", '    return is_bored(S:
    S, words: nil)', "    let boredoms = S.components(separatedBy: \".?!\")\n    \
    \    .filter { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms", '    return
    is_bored(S: S, words: nil)', "    let boredoms = S.components(separatedBy: \"\
    .?!\").filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    \n    //\
    \ TODO: Write a function that takes a string and returns the number of boredoms.\n\
    \    // HINT: Use a regular expression to find all the sentences that start with\
    \ the word \"I\".\n    // HINT: You may want to use split or splitN to get the\
    \ individual words in a sentence.\n    \n    return 0", "    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter {\n        !$0.isEmpty\n    }.count\n    return boredoms", " \
    \   let boredoms = S.split(separator: \".?!\").filter({ $0.starts(with: \"I\"\
    ) }).count\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    guard let S = S.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) else { return 0 }\n    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count", '    return
    is_bored_helper(S, "")', "    \n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Look at the string S and count\
    \ the number of times \"I\" appears.\n    // If S starts with \"I\", add 1 to\
    \ a running tally and return the tally.\n    \n    // BEGIN PSEUDOCODE\n    \n\
    \    // BEGIN SOLUTION\n    \n    // END SOLUTION\n    \n    // END PSEUDOCODE\n\
    \    \n    return 0", "    let words = S.components(separatedBy: \".\")\n    let\
    \ boredoms = words.filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count",
  "    // TODO: Use a regular expression to solve this problem\n    return 0", " \
    \   // Your code here\n    return 0", "    // Your code here\n    var boredomCount\
    \ = 0\n    for s in S.split(separator: \".\") {\n        if s.contains(\"I\")\
    \ {\n            boredomCount += 1\n        }\n    }\n    return boredomCount",
  "    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ guard let S = S.split(separator: \".\", omittingEmptySubsequences: false) else\
    \ {\n        return 0\n    }\n    return S.count { $0.hasPrefix(\"I\") }", " \
    \   var count = 0\n    for word in S.split(separator: \".?!\") {\n        if word\
    \ == \"I\" {\n            count += 1\n        }\n    }\n    return count", " \
    \   var boredoms = 0\n    var sentences = S.split(\".\")\n    for sentence in\
    \ sentences {\n        if sentence.startsWith(\"I\") {\n            boredoms +=\
    \ 1\n        }\n    }\n    return boredoms", "    // Your code here\n    var boredoms\
    \ = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  '    return is_bored_impl(S, "")', "    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else {\n        return 0\n    }\n    \n    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter { $0.hasPrefix(\"I\") }\n    return boredoms.count", '    return
    is_bored_helper(S, "")', "    let boredoms = S.split(separator: \".?!\").filter({\
    \ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return is_bored_impl(S)',
  "    let boredoms = S.components(separatedBy: \".?!\").filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count", '    return is_bored(S: S, words: nil)', '    return
    is_bored_impl(S, "")', "    let words = S.split(separator: \".?!\").map(String.init)\n\
    \    return words.filter({ $0.hasPrefix(\"I\") }).count", "    let boredoms =\
    \ S.filter({$0.hasPrefix(\"I\")})\n    return boredoms.count", '    return is_bored_helper(S,
    "")', "    let boredoms = S.split(separator: \".?!\").filter{$0.starts(with: \"\
    I\")}\n    return boredoms.count", "    // TODO: implement the is_bored function\n\
    \    return 0", "    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let words = S.components(separatedBy:\
    \ \".?\")!\n    let boredoms = words.filter({ $0.hasPrefix(\"I\") }).count\n \
    \   return boredoms", '    return is_bored_helper(S, "")', '    return is_bored_impl(S,
    "")', "    // Your code here\n    var boredom = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredom += 1\n        }\n\
    \    }\n    return boredom", "    let words = S.split(separator: \".?!\").map(String.init)\n\
    \    return words.filter({ $0.hasPrefix(\"I\") }).count", '    return is_bored(S:
    S, words: nil)', "    guard let S = S.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\
    \ else {\n        return 0\n    }\n    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n    return boredoms.count { $0.starts(with: \"I\") }", "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", "    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms", '    return
    is_bored_helper(S, bored_chars)', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return is_bored(S: S, words: S.words)',
  '    return is_bored_helper(S, "")', '    return is_bored_helper(S, "")', "    let\
    \ boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count { $0.hasPrefix(\"\
    I\") }"]
stop_tokens:
- "\n}"
