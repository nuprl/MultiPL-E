language: swift
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.Contains(prefix) {\n        return strings.filter\
    \ {\n            strings.startsWith(prefix)\n        }\n    } else {\n       \
    \ return strings\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9nijazm8.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp9nijazm8.swift:11:16:\
    \ error: value of type '[String]' has no member 'Contains'\n    if strings.Contains(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~\n/tmp/tmp9nijazm8.swift:12:31: error: contextual\
    \ type for closure argument list expects 1 argument, which cannot be implicitly\
    \ ignored\n        return strings.filter {\n                              ^\n\
    \                               _ in \n/tmp/tmp9nijazm8.swift:13:21: error: value\
    \ of type '[String]' has no member 'startsWith'\n            strings.startsWith(prefix)\n\
    \            ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn5fkno1c.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, false)\n                           ~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   prefix ~= $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmpfpp9xt_q/tmpfpp9xt_q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85c652ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85c6225b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85c6225988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85c62247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpp9xt_q                        0x000055dfc9766872 <unavailable> + 6258

    5    libc.so.6                          0x00002b85c671a460 __libc_start_main +
    245

    6    tmpfpp9xt_q                        0x000055dfc97661e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n    }.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpglgzgjy_.swift:9:46: error: extra argument 'options' in call\n\
    \        strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n      \
    \                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpglgzgjy_.swift:9:46:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n      \
    \                                      ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcsoijvz.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4djxv67w.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmp4djxv67w.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6oyrz1l5.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, true)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    var filtered: [String] = []\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq7bjno5r.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpq7bjno5r.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpq7bjno5r.swift:16:14: error: value of type\
    \ 'String' has no member 'startsWith'\n        if s.startsWith(prefix) {\n   \
    \        ~ ^~~~~~~~~~\n/tmp/tmpq7bjno5r.swift:17:24: error: cannot find 'append'\
    \ in scope\n            filtered = append(filtered, s)\n                     \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcsoijvz.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpax1w5ey2.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpax1w5ey2.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwz4c0k8b.swift:164:129: error: expected '}' at end of brace statement\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n    \
    \                                                                            \
    \                                                ^\n/tmp/tmpwz4c0k8b.swift:7:70:\
    \ note: to match this opening '{'\nfunc filter_by_prefix(strings: [String], prefix:\
    \ String) -> [String] {\n                                                    \
    \                 ^\n/tmp/tmpwz4c0k8b.swift:8:16: error: value of type '[String]'\
    \ has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n\
    /tmp/tmpwz4c0k8b.swift:11:16: error: value of type '[String]' has no member 'IsEmpty'\n\
    \    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:14:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:17:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:20:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:23:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:26:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:29:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:32:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:35:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:38:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpio1bg0u7.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpio1bg0u7.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmpio1bg0u7.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter{ $0.hasPrefix(prefix)\
    \ }\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdoolfw_m.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpdoolfw_m.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpdoolfw_m.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpax1w5ey2.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpax1w5ey2.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6h5jcmlz.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp6h5jcmlz.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp6h5jcmlz.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\
    \ return strings }\n    return strings.filter { (string) -> Bool in\n        let\
    \ stringPrefix = string.prefix(with: prefix)\n        return stringPrefix != nil\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmppralsxtm.swift:10:41: error: extraneous argument label 'with:'\
    \ in call\n        let stringPrefix = string.prefix(with: prefix)\n          \
    \                              ^~~~~~~\n                                     \
    \    \n/tmp/tmppralsxtm.swift:10:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n        let stringPrefix = string.prefix(with:\
    \ prefix)\n                                               ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n\n    var filtered: [String] = []\n    for s in strings {\n        if\
    \ s.startsWith(prefix) {\n            filtered = append(filtered, s)\n       \
    \ }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbv_ue4gd.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpbv_ue4gd.swift:12:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpbv_ue4gd.swift:18:14: error: value of type\
    \ 'String' has no member 'startsWith'\n        if s.startsWith(prefix) {\n   \
    \        ~ ^~~~~~~~~~\n/tmp/tmpbv_ue4gd.swift:19:24: error: cannot find 'append'\
    \ in scope\n            filtered = append(filtered, s)\n                     \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfxf3l3c_.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_a61o_q8.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_a61o_q8.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwsq68n9w.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpwsq68n9w.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.length)]\n                                                    ^\n/tmp/tmpwsq68n9w.swift:11:82:\
    \ error: value of type 'String' has no member 'length'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: prefix.length)]\n       \
    \                                                                   ~~~~~~ ^~~~~~\n\
    /tmp/tmpwsq68n9w.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string:\
    \ String) -> Bool in\n        return string.hasPrefix(prefix)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcsoijvz.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Count() == 0 {\n        return strings\n    }\n    if strings.Count()\
    \ == 1 {\n        if strings.StartsWith(prefix) {\n            return strings\n\
    \        }\n        return nil\n    }\n    if strings.Count() == 2 {\n       \
    \ if strings.StartsWith(prefix) {\n            if strings.EndsWith(prefix) {\n\
    \                return strings\n            }\n        }\n        return nil\n\
    \    }\n    if strings.Count() == 3 {\n        if strings.StartsWith(prefix) {\n\
    \            if strings.EndsWith(prefix) {\n                if strings.Contains(prefix)\
    \ {\n                    return strings\n                }\n            }\n  \
    \      }\n        return nil\n    }\n    if strings.Count() == 4 {\n        if\
    \ strings.StartsWith(prefix) {\n            if strings.EndsWith(prefix) {\n  \
    \              if strings.Contains(prefix) {\n                    if strings.Contains(prefix)\
    \ {\n                        return strings\n                    }\n         \
    \       }\n            }\n        }\n        return nil\n    }\n    if strings.Count()\
    \ == 5 {\n        if strings.StartsWith(prefix) {\n            if strings.EndsWith(prefix)\
    \ {\n                if strings.Contains(prefix) {\n                    if strings.Contains(prefix)\
    \ {\n                        if strings.Contains(prefix) {\n                 \
    \           return strings\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return nil\n    }\n    if\
    \ strings.Count() == 6 {\n        if strings.StartsWith(prefix) {\n          \
    \  if strings.EndsWith(prefix) {\n                if strings.Contains(prefix)\
    \ {\n                    if strings.Contains(prefix) {\n                     \
    \   if strings.Contains(prefix) {\n                            if strings.Contains(prefix)\
    \ {\n                                return strings\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return nil\n    }\n    if strings.Count() ==\
    \ 7 {\n        if strings.StartsWith(prefix) {\n            if strings.EndsWith(prefix)\
    \ {\n                if strings.Contains(prefix) {\n                    if strings.Contains(prefix)\
    \ {\n                        if strings.Contains(prefix) {\n                 \
    \           if strings.Contains(prefix) {\n                                if\
    \ strings.Contains(prefix) {\n                                    return strings\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        return nil\n    }\n    if strings.Count() == 8 {\n        if\
    \ strings.StartsWith(prefix) {\n            if strings.EndsWith(prefix) {\n  \
    \              if strings.Contains(prefix) {\n                    if strings.Contains(prefix)\
    \ {\n                        if strings.Contains(prefix) {\n                 \
    \           if strings.Contains(prefix) {\n                                if\
    \ strings.Contains(prefix) {\n                                    if strings.Contains(prefix)\
    \ {\n                                        if strings.Contains(prefix) {\n \
    \                                           if strings.Contains(prefix) {\n  \
    \                                              return strings\n              \
    \                              }\n                                        }\n\
    \                                    }\n                                }\n  \
    \                          }\n                        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyytj7ek0.swift:136:129: error: expected '}' at end of brace statement\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n    \
    \                                                                            \
    \                                                ^\n/tmp/tmpyytj7ek0.swift:104:45:\
    \ note: to match this opening '{'\n                if strings.Contains(prefix)\
    \ {\n                                            ^\n/tmp/tmpyytj7ek0.swift:136:129:\
    \ error: expected '}' at end of brace statement\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\n                                       \
    \                                                                            \
    \             ^\n/tmp/tmpyytj7ek0.swift:103:41: note: to match this opening '{'\n\
    \            if strings.EndsWith(prefix) {\n                                 \
    \       ^\n/tmp/tmpyytj7ek0.swift:136:129: error: expected '}' at end of brace\
    \ statement\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n                                                                         \
    \                                                       ^\n/tmp/tmpyytj7ek0.swift:102:39:\
    \ note: to match this opening '{'\n        if strings.StartsWith(prefix) {\n \
    \                                     ^\n/tmp/tmpyytj7ek0.swift:136:129: error:\
    \ expected '}' at end of brace statement\nassert(filter_by_prefix(strings: [\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\")\
    \ == [\"xxx\", \"xxxAAA\", \"xxx\"])\n                                       \
    \                                                                            \
    \             ^\n/tmp/tmpyytj7ek0.swift:101:29: note: to match this opening '{'\n\
    \    if strings.Count() == 8 {\n                            ^\n/tmp/tmpyytj7ek0.swift:136:129:\
    \ error: expected '}' at end of brace statement\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\","
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n\n    var filtered: [String] = []\n    for string\
    \ in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4djxv67w.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmp4djxv67w.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.count)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk6t4gr2h.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpk6t4gr2h.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.count)]\n                                                    ^\n/tmp/tmpk6t4gr2h.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: prefix.count)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_a61o_q8.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter { (string)\
    \ -> Bool in\n        let prefixLength = string.characters.count\n        return\
    \ string.hasPrefix(prefix) && string.characters.count >= prefixLength\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpywmcj583.swift:9:35: error: 'characters' is unavailable: Please\
    \ use String directly\n        let prefixLength = string.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpywmcj583.swift:10:51: error: 'characters' is unavailable:\
    \ Please use String directly\n        return string.hasPrefix(prefix) && string.characters.count\
    \ >= prefixLength\n                                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcsoijvz.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpel6b91ux.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpel6b91ux.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.length)]\n                                                    ^\n/tmp/tmpel6b91ux.swift:11:82:\
    \ error: value of type 'String' has no member 'length'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: prefix.length)]\n       \
    \                                                                   ~~~~~~ ^~~~~~\n\
    /tmp/tmpel6b91ux.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpio1bg0u7.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpio1bg0u7.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmpio1bg0u7.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4b9af6ja.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    guard strings.count > 1 else {\n        return\
    \ strings\n    }\n    guard strings.first != prefix else {\n        return strings\n\
    \    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmpwuailt7o/tmpwuailt7o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f45e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f42dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f42df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f42de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuailt7o                        0x0000564977e6b9c2 <unavailable> + 6594

    5    libc.so.6                          0x00002b39f47d4460 __libc_start_main +
    245

    6    tmpwuailt7o                        0x0000564977e6b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpio1bg0u7.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpio1bg0u7.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmpio1bg0u7.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpio1bg0u7.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpio1bg0u7.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmpio1bg0u7.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   strings.index($0.startIndex, offsetBy: prefix.count) == 0 &&\n           \
    \ $0.hasPrefix(prefix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpba93cf6b.swift:9:26: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n        strings.index($0.startIndex, offsetBy:\
    \ prefix.count) == 0 &&\n                         ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s)]\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpicvj8z85.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpicvj8z85.swift:11:51:\
    \ error: missing argument label 'of:' in call\n            filtered = filtered[..<filtered.index(s)]\n\
    \                                                  ^\n                       \
    \                           of: \n/tmp/tmpicvj8z85.swift:11:32: error: cannot\
    \ assign value of type 'ArraySlice<String>' to type '[String]'\n            filtered\
    \ = filtered[..<filtered.index(s)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpicvj8z85.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(s)]\n       \
    \                                     ^\n/tmp/tmpicvj8z85.swift:11:45: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         filtered = filtered[..<filtered.index(s)]\n                        \
    \                    ^\n                                   (                 ??\
    \ <#default value#>)\n/tmp/tmpicvj8z85.swift:11:45: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            filtered\
    \ = filtered[..<filtered.index(s)]\n                                         \
    \   ^\n                                                    !\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4b9af6ja.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4djxv67w.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmp4djxv67w.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    var filtered: [String] = []\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == []\
    \ as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"\
    xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugyn1tcc.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpugyn1tcc.swift:13:14:\
    \ error: value of type 'String' has no member 'startsWith'\n        if s.startsWith(prefix)\
    \ {\n           ~ ^~~~~~~~~~\n/tmp/tmpugyn1tcc.swift:14:24: error: cannot find\
    \ 'append' in scope\n            filtered = append(filtered, s)\n            \
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    var filtered: [String] = []\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == []\
    \ as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"\
    xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugyn1tcc.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpugyn1tcc.swift:13:14:\
    \ error: value of type 'String' has no member 'startsWith'\n        if s.startsWith(prefix)\
    \ {\n           ~ ^~~~~~~~~~\n/tmp/tmpugyn1tcc.swift:14:24: error: cannot find\
    \ 'append' in scope\n            filtered = append(filtered, s)\n            \
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).map(String::init)\n\
    \    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmppt42z8px.swift:15:43: error: expected expression in list of expressions\n\
    \        return strings.Skip(1).map(String::init)\n                          \
    \                ^\n/tmp/tmppt42z8px.swift:15:48: error: initializers may only\
    \ be declared within a type\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmppt42z8px.swift:15:48:\
    \ error: expected '(' for initializer parameters\n        return strings.Skip(1).map(String::init)\n\
    \                                               ^\n/tmp/tmppt42z8px.swift:8:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmppt42z8px.swift:11:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmppt42z8px.swift:14:16: error: value of type '[String]' has no\
    \ member 'First'\n    if strings.First().hasPrefix(prefix) {\n       ~~~~~~~ ^~~~~\n\
    /tmp/tmppt42z8px.swift:15:24: error: value of type '[String]' has no member 'Skip'\n\
    \        return strings.Skip(1).map(String::init)\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.FirstIndex(of: prefix) == nil {\n        return strings\n\
    \    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp044yp5eh.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp044yp5eh.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp044yp5eh.swift:14:16: error: value of type\
    \ '[String]' has no member 'FirstIndex'\n    if strings.FirstIndex(of: prefix)\
    \ == nil {\n       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwz4c0k8b.swift:164:129: error: expected '}' at end of brace statement\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n    \
    \                                                                            \
    \                                                ^\n/tmp/tmpwz4c0k8b.swift:7:70:\
    \ note: to match this opening '{'\nfunc filter_by_prefix(strings: [String], prefix:\
    \ String) -> [String] {\n                                                    \
    \                 ^\n/tmp/tmpwz4c0k8b.swift:8:16: error: value of type '[String]'\
    \ has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n\
    /tmp/tmpwz4c0k8b.swift:11:16: error: value of type '[String]' has no member 'IsEmpty'\n\
    \    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:14:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:17:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:20:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:23:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:26:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:29:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:32:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:35:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:38:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.count)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk6t4gr2h.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpk6t4gr2h.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.count)]\n                                                    ^\n/tmp/tmpk6t4gr2h.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: prefix.count)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n    }.filter({\
    \ $0.hasPrefix(prefix) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmps798bhae.swift:9:46: error: extra argument 'options' in call\n\
    \        strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n      \
    \                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmps798bhae.swift:9:46:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n      \
    \                                      ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    return strings.filter({ $0.hasPrefix(prefix) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdvtcstne.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpdvtcstne.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcsoijvz.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwz4c0k8b.swift:164:129: error: expected '}' at end of brace statement\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n    \
    \                                                                            \
    \                                                ^\n/tmp/tmpwz4c0k8b.swift:7:70:\
    \ note: to match this opening '{'\nfunc filter_by_prefix(strings: [String], prefix:\
    \ String) -> [String] {\n                                                    \
    \                 ^\n/tmp/tmpwz4c0k8b.swift:8:16: error: value of type '[String]'\
    \ has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n\
    /tmp/tmpwz4c0k8b.swift:11:16: error: value of type '[String]' has no member 'IsEmpty'\n\
    \    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:14:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:17:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:20:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:23:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:26:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:29:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:32:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:35:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:38:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.FirstIndex(of: prefix) == nil {\n        return strings\n\
    \    }\n    var filtered = [String]()\n    for s in strings {\n        if s.starts(with:\
    \ prefix) {\n            filtered.append(s)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp56nvzz2s.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp56nvzz2s.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp56nvzz2s.swift:14:16: error: value of type\
    \ '[String]' has no member 'FirstIndex'\n    if strings.FirstIndex(of: prefix)\
    \ == nil {\n       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4b9af6ja.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4djxv67w.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmp4djxv67w.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    var filtered = strings\n    for i := 0; i < strings.Count(); i++ {\n\
    \        if strings.HasPrefix(strings[i], prefix) {\n            filtered = append(filtered,\
    \ strings[i])\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpngs5volx.swift:15:12: error: expected type\n    for i := 0; i <\
    \ strings.Count(); i++ {\n           ^\n            <#type#>\n/tmp/tmpngs5volx.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < strings.Count();\
    \ i++ {\n           ^\n/tmp/tmpngs5volx.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < strings.Count(); i++ {\n \
    \          ^\n/tmp/tmpngs5volx.swift:8:16: error: value of type '[String]' has\
    \ no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpngs5volx.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4b9af6ja.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcsoijvz.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfxf3l3c_.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpel6b91ux.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpel6b91ux.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.length)]\n                                                    ^\n/tmp/tmpel6b91ux.swift:11:82:\
    \ error: value of type 'String' has no member 'length'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: prefix.length)]\n       \
    \                                                                   ~~~~~~ ^~~~~~\n\
    /tmp/tmpel6b91ux.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.length)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3_efwrj0.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, 0)\n         \
    \  ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4b9af6ja.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered: [String] = []\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4djxv67w.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmp4djxv67w.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n\n    if strings.First().hasPrefix(prefix) {\n        return strings.Skip(1).filter({\
    \ $0.hasPrefix(prefix) })\n    }\n\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpglcas_bj.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpglcas_bj.swift:12:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpglcas_bj.swift:16:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().hasPrefix(prefix) {\n\
    \       ~~~~~~~ ^~~~~\n/tmp/tmpglcas_bj.swift:17:24: error: value of type '[String]'\
    \ has no member 'Skip'\n        return strings.Skip(1).filter({ $0.hasPrefix(prefix)\
    \ })\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_a61o_q8.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmp_a61o_q8.swift:14:16: error: value of type\
    \ '[String]' has no member 'Contains'\n    if strings.Contains(prefix) {\n   \
    \    ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjtmieguk.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpjtmieguk.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpjtmieguk.swift:16:14: error: value of type\
    \ 'String' has no member 'startsWith'\n        if s.startsWith(prefix) {\n   \
    \        ~ ^~~~~~~~~~\n/tmp/tmpjtmieguk.swift:17:24: error: cannot find 'append'\
    \ in scope\n            filtered = append(filtered, s)\n                     \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfxf3l3c_.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: prefix.count)]\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwrziocqn.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpwrziocqn.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ prefix.count)]\n                                                    ^\n/tmp/tmpwrziocqn.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: prefix.count)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfxf3l3c_.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.First().startsWith(prefix) {\n        return strings.Skip(1).map(String.init)\n\
    \    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgetszb7e.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpgetszb7e.swift:11:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpgetszb7e.swift:14:16: error: value of type\
    \ '[String]' has no member 'First'\n    if strings.First().startsWith(prefix)\
    \ {\n       ~~~~~~~ ^~~~~\n/tmp/tmpgetszb7e.swift:15:24: error: value of type\
    \ '[String]' has no member 'Skip'\n        return strings.Skip(1).map(String.init)\n\
    \               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s)]\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpicvj8z85.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpicvj8z85.swift:11:51:\
    \ error: missing argument label 'of:' in call\n            filtered = filtered[..<filtered.index(s)]\n\
    \                                                  ^\n                       \
    \                           of: \n/tmp/tmpicvj8z85.swift:11:32: error: cannot\
    \ assign value of type 'ArraySlice<String>' to type '[String]'\n            filtered\
    \ = filtered[..<filtered.index(s)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpicvj8z85.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(s)]\n       \
    \                                     ^\n/tmp/tmpicvj8z85.swift:11:45: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         filtered = filtered[..<filtered.index(s)]\n                        \
    \                    ^\n                                   (                 ??\
    \ <#default value#>)\n/tmp/tmpicvj8z85.swift:11:45: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            filtered\
    \ = filtered[..<filtered.index(s)]\n                                         \
    \   ^\n                                                    !\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0vmjx9b.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, true)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpio1bg0u7.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpio1bg0u7.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmpio1bg0u7.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n\n    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == []\
    \ as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"\
    xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmphf3iqf76.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmphf3iqf76.swift:14:14:\
    \ error: value of type 'String' has no member 'startsWith'\n        if s.startsWith(prefix)\
    \ {\n           ~ ^~~~~~~~~~\n/tmp/tmphf3iqf76.swift:15:24: error: cannot find\
    \ 'append' in scope\n            filtered = append(filtered, s)\n            \
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn5fkno1c.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, false)\n                           ~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    guard strings.count > 1 else {\n        return\
    \ strings\n    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter {\n     \
    \   strings.startsWith(prefix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz2t9v9vj.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n/tmp/tmpz2t9v9vj.swift:9:17:\
    \ error: value of type '[String]' has no member 'startsWith'\n        strings.startsWith(prefix)\n\
    \        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: []\
    \ as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsl3xgus0.swift:8:46: error: extra argument in call\n    return\
    \ filter_by_prefix(strings, prefix, true)\n                           ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmposrvyowa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmposrvyowa.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmposrvyowa.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({\
    \ $0.hasPrefix(prefix) })\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpax1w5ey2.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpax1w5ey2.swift:11:16:\
    \ error: value of type '[String]' has no member 'HasPrefix'\n    if strings.HasPrefix(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsEmpty() {\n        return\
    \ strings\n    }\n    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.IsEmpty() {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwz4c0k8b.swift:164:129: error: expected '}' at end of brace statement\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n    \
    \                                                                            \
    \                                                ^\n/tmp/tmpwz4c0k8b.swift:7:70:\
    \ note: to match this opening '{'\nfunc filter_by_prefix(strings: [String], prefix:\
    \ String) -> [String] {\n                                                    \
    \                 ^\n/tmp/tmpwz4c0k8b.swift:8:16: error: value of type '[String]'\
    \ has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n\
    /tmp/tmpwz4c0k8b.swift:11:16: error: value of type '[String]' has no member 'IsEmpty'\n\
    \    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:14:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:17:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:20:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:23:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:26:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:29:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:32:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty()\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:35:16: error: value of type\
    \ '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwz4c0k8b.swift:38:16: error: value of type '[String]' has no\
    \ member 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpwz4c0"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = strings\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmposrvyowa.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmposrvyowa.swift:11:53:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ 1)]\n                                                    ^\n/tmp/tmposrvyowa.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: 1)]\n\
    \                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_helper(strings,\
    \ prefix, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfxf3l3c_.swift:8:12: error: cannot find 'filter_by_prefix_helper'\
    \ in scope\n    return filter_by_prefix_helper(strings, prefix, false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    guard strings.count > 0 else {\n\
    \        return strings\n    }\n    guard strings.count > 1 else {\n        return\
    \ strings\n    }\n    guard strings.first != prefix else {\n        return strings\n\
    \    }\n    return strings.filter {\n        $0.hasPrefix(prefix)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: Exception
  stderr: 'tmpwuailt7o/tmpwuailt7o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f45e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f42dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f42df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f42de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuailt7o                        0x0000564977e6b9c2 <unavailable> + 6594

    5    libc.so.6                          0x00002b39f47d4460 __libc_start_main +
    245

    6    tmpwuailt7o                        0x0000564977e6b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n\n    if strings.IsEmpty(prefix) {\n        return strings\n\
    \    }\n\n    if strings.FirstIndex(of: prefix) == nil {\n        return strings\n\
    \    }\n\n    return strings.filter {\n        prefix ~= $0\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix:\
    \ \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqhlsazpp.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpqhlsazpp.swift:12:16:\
    \ error: value of type '[String]' has no member 'IsEmpty'\n    if strings.IsEmpty(prefix)\
    \ {\n       ~~~~~~~ ^~~~~~~\n/tmp/tmpqhlsazpp.swift:16:16: error: value of type\
    \ '[String]' has no member 'FirstIndex'\n    if strings.FirstIndex(of: prefix)\
    \ == nil {\n       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    if strings.IsEmpty() {\n      \
    \  return strings\n    }\n    var filtered = strings\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            filtered = filtered.filter{\
    \ $0 != string }\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc8tkdq83.swift:8:16: error: value of type '[String]' has no member\
    \ 'IsEmpty'\n    if strings.IsEmpty() {\n       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    return filter_by_prefix_internal(strings,\
    \ prefix, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings:\
    \ [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\"\
    ) == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmph0vmjx9b.swift:8:12: error: cannot find 'filter_by_prefix_internal'\
    \ in scope\n    return filter_by_prefix_internal(strings, prefix, true)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\n\
    assert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4b9af6ja.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\"\
    , \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
    \ [String], prefix: String) -> [String] {\n    var filtered = [String]()\n   \
    \ for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\"\
    ) == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkavac0le.swift:10:14: error: value of type 'String' has no member\
    \ 'startsWith'\n        if s.startsWith(prefix) {\n           ~ ^~~~~~~~~~\n/tmp/tmpkavac0le.swift:11:24:\
    \ error: cannot find 'append' in scope\n            filtered = append(filtered,\
    \ s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824546
