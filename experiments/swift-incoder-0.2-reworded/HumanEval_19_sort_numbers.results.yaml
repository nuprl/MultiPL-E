language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7dqa2dzg.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp7dqa2dzg.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \",\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"(\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \")\", \" \")\n    numbers = strings.Replace(numbers, \"/\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"\\\\\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"'\", \" \")\n    numbers = strings.Replace(numbers, \"!\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"%\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"&\", \" \")\n    numbers = strings.Replace(numbers, \"*\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"(\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \")\", \" \")\n    numbers = strings.Replace(numbers, \"=\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"<\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \">\", \" \")\n    numbers = strings.Replace(numbers, \"?\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"!\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"_\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \" \", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"_\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8mysetxf.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp8mysetxf.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp8mysetxf.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmp8mysetxf.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp8mysetxf.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmp8mysetxf.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmp8mysetxf.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp8mysetxf.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmp8mysetxf.swift:12:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n/tmp/tmp8mysetxf.swift:12:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n/tmp/tmp8mysetxf.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \",\", \" \")\n              ^~~~~~~\n/tmp/tmp8mysetxf.swift:13:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \",\", \" \")\n    ^~~~~~~\n/tmp/tmp8mysetxf.swift:14:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"(\", \" \")\n \
    \             ^~~~~~~\n/tmp/tmp8mysetxf.swift:14:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"(\"\
    , \" \")\n    ^~~~~~~\n/tmp/tmp8mysetxf.swift:15:15: error: cannot find 'strings'\
    \ in scop"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0w5l2e_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp0w5l2e_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprxclcmb7.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmprxclcmb7.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmprxclcmb7.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmprxclcmb7.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmprxclcmb7.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmprxclcmb7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n      \
    \            ^~~~~~~\n/tmp/tmprxclcmb7.swift:10:38: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n   \
    \                                         ^~~~~~~\n/tmp/tmprxclcmb7.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmprxclcmb7.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmprxclcmb7.swift:11:38:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                                            ^~~~~~~\n/tmp/tmprxclcmb7.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmprxclcmb7.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmprxclcmb7.swift:12:38: error:\
    \ cannot find 'unicode' in scope\n        "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpws6ojlip.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw6934act.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpw6934act.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpw6934act.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpw6934act.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpw6934act.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpw6934act.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpkn818vgj.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"es\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"s\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:15:15:\
    \ error: cannot find '"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0w5l2e_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp0w5l2e_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLineBreak)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLower)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsUpper)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSurrogate)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSymbol)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsOtherSpace)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsOtherControl)\n\tnumbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsOtherLineBreak)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsOtherLower)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsOtherUpper)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsOtherSurrogate)\n\tnumbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsOtherPunct)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsOtherSymbol)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsOtherSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLineBreak)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLower)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsUpper)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSurrogate)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSymbol)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpooax5u7d.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpooax5u7d.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpooax5u7d.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmpooax5u7d.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmpooax5u7d.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmpooax5u7d.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n \
    \                 ^~~~~~~\n/tmp/tmpooax5u7d.swift:10:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \                                                 ^~~~~~~\n/tmp/tmpooax5u7d.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpooax5u7d.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmpooax5u7d.swift:11:43:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                                                 ^~~~~~~\n\
    /tmp/tmpooax5u7d.swift:11:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \        ^~~~~~~\n/tmp/tmpooax5u7d.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\
    \                  ^~~~~~~\n/tmp/tmpooax5u7d.swift:12:43:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"zero\", \"one\", -1)\n    numbers = strings.Replace(numbers, \"one\", \"two\"\
    , -1)\n    numbers = strings.Replace(numbers, \"two\", \"three\", -1)\n    numbers\
    \ = strings.Replace(numbers, \"three\", \"four\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"four\", \"five\", -1)\n    numbers = strings.Replace(numbers, \"five\", \"\
    six\", -1)\n    numbers = strings.Replace(numbers, \"six\", \"seven\", -1)\n \
    \   numbers = strings.Replace(numbers, \"seven\", \"eight\", -1)\n    numbers\
    \ = strings.Replace(numbers, \"eight\", \"nine\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"nine\", \"zero\", -1)\n    numbers = strings.TrimSpace(numbers)\n    return\
    \ numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3jtzzo45.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp3jtzzo45.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp3jtzzo45.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmp3jtzzo45.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmp3jtzzo45.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"zero\", \"one\", -1)\n              ^~~~~~~\n/tmp/tmp3jtzzo45.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"zero\", \"one\", -1)\n    ^~~~~~~\n/tmp/tmp3jtzzo45.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \"one\", \"two\", -1)\n              ^~~~~~~\n/tmp/tmp3jtzzo45.swift:11:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"one\", \"two\", -1)\n    ^~~~~~~\n/tmp/tmp3jtzzo45.swift:12:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"two\", \"\
    three\", -1)\n              ^~~~~~~\n/tmp/tmp3jtzzo45.swift:12:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"two\", \"three\", -1)\n    ^~~~~~~\n/tmp/tmp3jtzzo45.swift:13:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"three\", \"\
    four\", -1)\n              ^~~~~~~\n/tmp/tmp3jtzzo45.swift:13:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"three\", \"four\", -1)\n    ^~~~~~~\n/tmp/tmp3jtzzo45.swift:14:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \"four\"\
    , \"five\", -1)\n              ^~~~~~~\n/tmp/tmp3jtzzo45.swift:14:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(num"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr\
    \ = strings.Split(numbers, \" \")\n    numbers_arr = numbers_arr[:len(numbers_arr)-1]\n\
    \    numbers_arr = numbers_arr.sort()\n    return strings.Join(numbers_arr, \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps1199ael.swift:9:31: error: expected expression in list of expressions\n\
    \    numbers_arr = numbers_arr[:len(numbers_arr)-1]\n                        \
    \      ^\n/tmp/tmps1199ael.swift:8:23: error: cannot find 'strings' in scope\n\
    \    var numbers_arr = strings.Split(numbers, \" \")\n                      ^~~~~~~\n\
    /tmp/tmps1199ael.swift:11:12: error: cannot find 'strings' in scope\n    return\
    \ strings.Join(numbers_arr, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"@\")\n\tnumbers = strings.TrimSuffix(numbers, \"$\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"<\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \">\")\n\tnumbers = strings.TrimSuffix(numbers, \"[\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"]\")\n\tnumbers = strings.TrimSuffix(numbers, \"{\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"}\")\n\tnumbers = strings.TrimSuffix(numbers, \"|\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"=\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"?\")\n\tnumbers = strings.TrimSuffix(numbers, \"!\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n\tnumbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwd39n2fn.swift:50:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpwd39n2fn.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpwd39n2fn.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpwd39n2fn.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpwd39n2fn.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpwd39n2fn.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpwd39n2fn.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpwd39n2fn.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpwd39n2fn.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpwd39n2fn.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpwd39n2fn.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpwd39n2fn.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpwd39n2fn.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpwd39n2fn.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpwd39n2fn.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpte93xcqn.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmpte93xcqn.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmpte93xcqn.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmpte93xcqn.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp4rhxaz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpp4rhxaz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpws6ojlip.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdbu5ww7s.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpdbu5ww7s.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp88toz6s2.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"1\")\n\tnumbers := strings.Trim(numbers,\
    \ \"2\")\n\tnumbers := strings.Trim(numbers, \"3\")\n\tnumbers := strings.Trim(numbers,\
    \ \"4\")\n\tnumbers := strings.Trim(numbers, \"5\")\n\tnumbers := strings.Trim(numbers,\
    \ \"6\")\n\tnumbers := strings.Trim(numbers, \"7\")\n\tnumbers := strings.Trim(numbers,\
    \ \"8\")\n\tnumbers := strings.Trim(numbers, \"9\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"1\")\n\tnumbers := strings.Trim(numbers, \"2\")\n\tnumbers := strings.Trim(numbers,\
    \ \"3\")\n\tnumbers := strings.Trim(numbers, \"4\")\n\tnumbers := strings.Trim(numbers,\
    \ \"5\")\n\tnumbers := strings.Trim(numbers, \"6\")\n\tnumbers := strings.Trim(numbers,\
    \ \"7\")\n\tnumbers := strings.Trim(numbers, \"8\")\n\tnumbers := strings.Trim(numbers,\
    \ \"9\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"1\")\n\tnumbers := strings.Trim(numbers,\
    \ \"2\")\n\tnumbers := strings.Trim(numbers, \"3\")\n\tnumbers := strings.Trim(numbers,\
    \ \"4\")\n\tnumbers := strings.Trim(numbers, \"5\")\n\tnumbers := strings.Trim(numbers,\
    \ \"6\")\n\tnumbers := strings.Trim(numbers, \"7\")\n\tnumbers := strings.Trim(numbers,\
    \ \"8\")\n\tnumbers := strings.Trim(numbers, \"9\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"1\")\n\tnumbers := strings.Trim(numbers, \"2\")\n\tnumbers := strings.Trim(numbers,\
    \ \"3\")\n\tnumbers := strings.Trim(numbers, \"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_x93xex0.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp_x93xex0.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmp_x93xex0.swift:57:35:\
    \ error: unterminated string literal\n        numbers := strings.Trim(numbers,\
    \ \"\n                                         ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpngorc1zl.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpngorc1zl.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpngorc1zl.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpngorc1zl.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpngorc1zl.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7_svpa6e.swift:50:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7_svpa6e.swift:49:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimSuffix(number\n                                    ^\n/tmp/tmp7_svpa6e.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7_svpa6e.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp4rhxaz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpp4rhxaz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tsort.Strings(numbers)\n\tnumbers := strings.Join(numbers, \" \")\n\
    \treturn numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqz3l22jn.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpqz3l22jn.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpqz3l22jn.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpc50g7ye9.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpc50g7ye9.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpc50g7ye9.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpc50g7ye9.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2ej90gzf.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp2ej90gzf.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp544w4f9f.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmp544w4f9f.swift:9:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmp544w4f9f.swift:8:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n \
    \             ^~~~~~~\n/tmp/tmp544w4f9f.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp544w4f9f.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSpace(numbers)\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"S\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"o\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"O\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpi9_hxcel.swift:48:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpi9_hxcel.swift:8:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpi9_hxcel.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpi9_hxcel.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpi9_hxcel.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpi9_hxcel.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"S\")\n              ^~~~~~~\n\
    /tmp/tmpi9_hxcel.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"S\")\n    ^~~~~~~\n/tmp/tmpi9_hxcel.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n              ^~~~~~~\n/tmp/tmpi9_hxcel.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    ^~~~~~~\n/tmp/tmpi9_hxcel.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"X\")\n              ^~~~~~~\n\
    /tmp/tmpi9_hxcel.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    ^~~~~~~\n/tmp/tmpi9_hxcel.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"o\")\n              ^~~~~~~\n/tmp/tmpi9_hxcel.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"o\")\n    ^~~~~~~\n/tmp/tmpi9_hxcel.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"O\")\n              ^~~~~~~\n\
    /tmp/tmpi9_hxcel.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbe"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp4rhxaz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpp4rhxaz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberList =\
    \ numbers.split(separator: \" \")\n    numberList.sort(by: { (number1, number2)\
    \ -> Bool in\n        let firstNumber = Int(number1)\n        let secondNumber\
    \ = Int(number2)\n        return firstNumber < secondNumber\n    })\n    return\
    \ numberList.join(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmppzepako7.swift:12:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return firstNumber < secondNumber\n\
    \               ^\n/tmp/tmppzepako7.swift:12:16: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        return firstNumber\
    \ < secondNumber\n               ^\n                           ?? <#default value#>\n\
    /tmp/tmppzepako7.swift:12:16: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        return firstNumber < secondNumber\n\
    \               ^\n                          !\n/tmp/tmppzepako7.swift:12:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return firstNumber < secondNumber\n                             ^\n/tmp/tmppzepako7.swift:12:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return firstNumber < secondNumber\n                         \
    \    ^\n                                          ?? <#default value#>\n/tmp/tmppzepako7.swift:12:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return firstNumber < secondNumber\n                         \
    \    ^\n                                         !\n/tmp/tmppzepako7.swift:14:23:\
    \ error: value of type '[String.SubSequence]' (aka 'Array<Substring>') has no\
    \ member 'join'\n    return numberList.join(separator: \" \")\n           ~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \".\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \"0\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"1\")\n\tnumbers := strings.TrimRight(numbers, \"2\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"3\")\n\tnumbers := strings.TrimRight(numbers, \"4\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"5\")\n\tnumbers := strings.TrimRight(numbers, \"6\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"7\")\n\tnumbers := strings.TrimRight(numbers, \"8\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"9\")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"0\")\n\tnumbers := strings.TrimRight(numbers, \"1\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"2\")\n\tnumbers := strings.TrimRight(numbers, \"3\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"4\")\n\tnumbers := strings.TrimRight(numbers, \"5\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"6\")\n\tnumbers := strings.TrimRight(numbers, \"7\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"8\")\n\tnumbers := strings.TrimRight(numbers, \"9\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \"0\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"1\")\n\tnumbers := strings.TrimRight(numbers, \"2\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"3\")\n\tnumbers := strings.TrimRight(numbers, \"4\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"5\")\n\tnumbers := strings.TrimRight(numbers, \"6\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"7\")\n\tnumbers := strings.TrimRight(number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj6mujcby.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpj6mujcby.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpj6mujcby.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpj6mujcby.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpj6mujcby.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp68tkgr_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp68tkgr_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Split(numbers, \"\\n\")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_rjqzsp1.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp_rjqzsp1.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmp_rjqzsp1.swift:42:38:\
    \ error: expected member name following '.'\n        numbers := strings.TrimSpace(strings.\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers_array.sort()\n    return\
    \ numbers.split(\" \").map{ String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw20hvatw.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n/tmp/tmpw20hvatw.swift:10:20: error: no exact matches in call to instance\
    \ method 'split'\n    return numbers.split(\" \").map{ String($0) }.joined(\"\
    \ \")\n                   ^\n/tmp/tmpw20hvatw.swift:10:20: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    return numbers.split(\"\
    \ \").map{ String($0) }.joined(\" \")\n                   ^\n/tmp/tmpw20hvatw.swift:10:20:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    return numbers.split(\"\
    \ \").map{ String($0) }.joined(\" \")\n                   ^\n/tmp/tmpw20hvatw.swift:10:49:\
    \ error: cannot convert return expression of type 'JoinedSequence<[String]>' to\
    \ return type 'String'\n    return numbers.split(\" \").map{ String($0) }.joined(\"\
    \ \")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n/tmp/tmpw20hvatw.swift:10:56:\
    \ error: missing argument label 'separator:' in call\n    return numbers.split(\"\
    \ \").map{ String($0) }.joined(\" \")\n                                      \
    \                 ^\n                                                       separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvu6pab7c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpvu6pab7c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"~\")\n\tnumbers = strings.TrimSuffix(numbers, \"@\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"$\")\n\tnumbers = strings.TrimSuffix(numbers, \"%\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n\tnumbers = strings.TrimSuffix(numbers, \")\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"=\")\n\tnumbers = strings.TrimSuffix(numbers, \"<\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \">\")\n\tnumbers = strings.TrimSuffix(numbers, \"[\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"]\")\n\tnumbers = strings.TrimSuffix(numbers, \"{\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"}\")\n\tnumbers = strings.TrimSuffix(numbers, \"|\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmsyijq6k.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpmsyijq6k.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpmsyijq6k.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpmsyijq6k.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpmsyijq6k.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpmsyijq6k.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpmsyijq6k.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpmsyijq6k.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpmsyijq6k.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpmsyijq6k.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpmsyijq6k.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpmsyijq6k.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpmsyijq6k.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpmsyijq6k.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsUpper)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLineSeparator)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLower)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsUpper)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9hjk_bhk.swift:42:19: error: expected member name following '.'\n\
    \        numbers = strings.\n                         ^\n/tmp/tmp9hjk_bhk.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n \
    \                 ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:9:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \                                                 ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:9:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:10:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:11:38:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                                            ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmp9hjk_bhk.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(nu"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1voo_ebd.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp1voo_ebd.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp1voo_ebd.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp1voo_ebd.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp1voo_ebd.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp1voo_ebd.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp1voo_ebd.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp1voo_ebd.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvu6pab7c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpvu6pab7c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map(Number)\n    numbers.sort()\n    return strings.Join(numbers, \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwgch3a1l.swift:8:42: error: cannot find 'Number' in scope\n   \
    \ var numbers = numbers.split(\" \").map(Number)\n                           \
    \              ^~~~~~\n/tmp/tmpwgch3a1l.swift:8:27: error: no exact matches in\
    \ call to instance method 'split'\n    var numbers = numbers.split(\" \").map(Number)\n\
    \                          ^\n/tmp/tmpwgch3a1l.swift:8:27: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers =\
    \ numbers.split(\" \").map(Number)\n                          ^\n/tmp/tmpwgch3a1l.swift:8:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numbers = numbers.split(\"\
    \ \").map(Number)\n                          ^\n/tmp/tmpwgch3a1l.swift:8:27: error:\
    \ generic parameter 'T' could not be inferred\n    var numbers = numbers.split(\"\
    \ \").map(Number)\n                          ^\nSwift.Collection:2:28: note: in\
    \ call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element)\
    \ throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpwgch3a1l.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsUpper)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n    numbers = strings.TrimFunc(numbers, unicode.IsLineSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSurrogate)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunct)\n    numbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherLetter)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsOtherNumber)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherPunctuation)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherSymbol)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherLineSeparator)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsOtherOther)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherOtherSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherOtherControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherOtherLetter)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsOtherOtherNumber)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherOtherPunctuation)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherOtherSymbol)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherOtherLineSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherOtherOther)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsOtherOtherOtherSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherOtherOtherControl)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherOtherOtherLetter)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9fllnu4t.swift:39:48: error: expected member name following '.'\n\
    \    numbers = strings.TrimFunc(numbers, unicode.\n                          \
    \                     ^\n/tmp/tmp9fllnu4t.swift:40:1: error: expected ')' in expression\
    \ list\n}\n^\n/tmp/tmp9fllnu4t.swift:39:31: note: to match this opening '('\n\
    \    numbers = strings.TrimFunc(numbers, unicode.\n                          \
    \    ^\n/tmp/tmp9fllnu4t.swift:8:15: error: cannot find 'strings' in scope\n \
    \   numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp9fllnu4t.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp9fllnu4t.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n              ^~~~~~~\n/tmp/tmp9fllnu4t.swift:9:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                             ^~~~~~~\n/tmp/tmp9fllnu4t.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmp9fllnu4t.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n              ^~~~~~~\n/tmp/tmp9fllnu4t.swift:10:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \                                        ^~~~~~~\n/tmp/tmp9fllnu4t.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmp9fllnu4t.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              ^~~~~~~\n/tmp/tmp9fllnu4t.swift:11:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \                                        ^~~~~~~\n/tmp/tmp9fllnu4t.swift:11:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd9i76nk3.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpd9i76nk3.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpd9i76nk3.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpd9i76nk3.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpd9i76nk3.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpd9i76nk3.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpd9i76nk3.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpd9i76nk3.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpd9i76nk3.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpd9i76nk3.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpd9i76nk3.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpd9i76nk3.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpd9i76nk3.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpd9i76nk3.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0w5l2e_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp0w5l2e_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5b7v720k.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp5b7v720k.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoa0hjpu3.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpoa0hjpu3.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\f\")\n\tnumbers := strings.Trim(numbers, \"\\v\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"1\")\n\tnumbers := strings.Trim(numbers, \"2\")\n\tnumbers := strings.Trim(numbers,\
    \ \"3\")\n\tnumbers := strings.Trim(numbers, \"4\")\n\tnumbers := strings.Trim(numbers,\
    \ \"5\")\n\tnumbers := strings.Trim(numbers, \"6\")\n\tnumbers := strings.Trim(numbers,\
    \ \"7\")\n\tnumbers := strings.Trim(numbers, \"8\")\n\tnumbers := strings.Trim(numbers,\
    \ \"9\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"a\")\n\tnumbers := strings.Trim(numbers, \"b\")\n\tnumbers := strings.Trim(numbers,\
    \ \"c\")\n\tnumbers := strings.Trim(numbers, \"d\")\n\tnumbers := strings.Trim(numbers,\
    \ \"e\")\n\tnumbers := strings.Trim(numbers, \"f\")\n\tnumbers := strings.Trim(numbers,\
    \ \"g\")\n\tnumbers := strings.Trim(numbers, \"h\")\n\tnumbers := strings.Trim(numbers,\
    \ \"i\")\n\tnumbers := strings.Trim(numbers, \"j\")\n\tnumbers := strings.Trim(numbers,\
    \ \"k\")\n\tnumbers := strings.Trim(numbers, \"l\")\n\tnumbers := strings.Trim(numbers,\
    \ \"m\")\n\tnumbers := strings.Trim(numbers, \"n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"o\")\n\tnumbers := strings.Trim(numbers, \"p\")\n\tnumbers := strings.Trim(numbers,\
    \ \"q\")\n\tnumbers := strings.Trim(numbers, \"r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"s\")\n\tnumbers := strings.Trim(numbers, \"t\")\n\tnumbers := strings.Trim(numbers,\
    \ \"u\")\n\tnumbers := strings.Trim(numbers, \"v\")\n\tnumbers := strings.Trim(numbers,\
    \ \"w\")\n\tnumbers := strings.Trim(numbers, \"x\")\n\tnumbers \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpaclyz3lx.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpaclyz3lx.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpaclyz3lx.swift:16:37:\
    \ error: invalid escape sequence in literal\n        numbers := strings.Trim(numbers,\
    \ \"\\f\")\n                                           ^\n/tmp/tmpaclyz3lx.swift:17:37:\
    \ error: invalid escape sequence in literal\n        numbers := strings.Trim(numbers,\
    \ \"\\v\")\n                                           ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_sikca_j.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp_sikca_j.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_sikca_j.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp_sikca_j.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \".\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplj5risa1.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmplj5risa1.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmplj5risa1.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmplj5risa1.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmplj5risa1.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\treturn numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3v7x2105.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp3v7x2105.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp3v7x2105.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmp3v7x2105.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmp3v7x2105.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmp3v7x2105.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp3v7x2105.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp3v7x2105.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp3v7x2105.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp3v7x2105.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp3v7x2105.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp3v7x2105.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp3v7x2105.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmp3v7x2105.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1voo_ebd.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp1voo_ebd.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp1voo_ebd.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp1voo_ebd.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp1voo_ebd.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp1voo_ebd.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp1voo_ebd.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp1voo_ebd.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"10\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n    numbers = strings.TrimSuffix(numbers, \"12\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n    numbers = strings.TrimSuffix(numbers, \"14\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n    numbers = strings.TrimSuffix(numbers, \"16\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n    numbers = strings.TrimSuffix(numbers, \"18\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n    numbers = strings.TrimSuffix(numbers, \"20\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n    numbers = strings.TrimSuffix(numbers, \"22\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n    numbers = strings.TrimSuffix(numbers, \"24\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n    numbers = strings.TrimSuffix(numbers, \"26\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n    numbers = strings.TrimSuffix(numbers, \"28\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n    numbers = strings.TrimSuffix(numbers, \"30\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n    numbers = strings.TrimSuffix(numbers, \"32\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n    numbers = strings.TrimSuffix(numbers, \"34\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n    numbers = strings.TrimSuffix(numbers, \"36\")\n    \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_nqd68ut.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"z\")\n              ^~~~~~~\n\
    /tmp/tmp_nqd68ut.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"z\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp_nqd68ut.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmp_nqd68ut.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_doxgxk.swift:42:19: error: expected member name following '.'\n\
    \        numbers = strings.\n                         ^\n/tmp/tmp0_doxgxk.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp0_doxgxk.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp0_doxgxk.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n \
    \                 ^~~~~~~\n/tmp/tmp0_doxgxk.swift:9:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \                                                 ^~~~~~~\n/tmp/tmp0_doxgxk.swift:9:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmp0_doxgxk.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n                  ^~~~~~~\n/tmp/tmp0_doxgxk.swift:10:43:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n                                                 ^~~~~~~\n\
    /tmp/tmp0_doxgxk.swift:10:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \        ^~~~~~~\n/tmp/tmp0_doxgxk.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n     \
    \             ^~~~~~~\n/tmp/tmp0_doxgxk.swift:11:38: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n  \
    \                                          ^~~~~~~\n/tmp/tmp0_doxgxk.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmp0_doxgxk.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        number"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers := strings.Replace(numbers, \"\
    \ \", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers\
    \ := strings.Replace(numbers, \"0\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"2\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"3\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"5\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"6\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"8\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"9\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"+\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"/\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"*\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"=\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"%\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"&\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"#\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"$\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"!\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"@\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"$\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"&\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"#\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"$\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"!\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"@\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"&\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"#\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"$\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"!\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"@\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"&\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptg5kragt.swift:10:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Replace(numbers, \" \", \"\"\
    , -1)\n               ^\n               ;\n/tmp/tmptg5kragt.swift:10:10: error:\
    \ expected expression\n        numbers := strings.Replace(numbers, \" \", \"\"\
    , -1)\n                ^\n/tmp/tmptg5kragt.swift:8:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n\
    /tmp/tmptg5kragt.swift:8:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmptg5kragt.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmptg5kragt.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmptg5kragt.swift:10:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.Replace(numbers, \" \", \"\", -1)\n  \
    \      ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map(Number)\n    numbers.sort()\n    return strings.Join(numbers, \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwgch3a1l.swift:8:42: error: cannot find 'Number' in scope\n   \
    \ var numbers = numbers.split(\" \").map(Number)\n                           \
    \              ^~~~~~\n/tmp/tmpwgch3a1l.swift:8:27: error: no exact matches in\
    \ call to instance method 'split'\n    var numbers = numbers.split(\" \").map(Number)\n\
    \                          ^\n/tmp/tmpwgch3a1l.swift:8:27: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers =\
    \ numbers.split(\" \").map(Number)\n                          ^\n/tmp/tmpwgch3a1l.swift:8:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numbers = numbers.split(\"\
    \ \").map(Number)\n                          ^\n/tmp/tmpwgch3a1l.swift:8:27: error:\
    \ generic parameter 'T' could not be inferred\n    var numbers = numbers.split(\"\
    \ \").map(Number)\n                          ^\nSwift.Collection:2:28: note: in\
    \ call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element)\
    \ throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpwgch3a1l.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpiwt9lsnl.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSuffix(numbers, \" \")\n   \
    \        ^\n           ;\n/tmp/tmpiwt9lsnl.swift:9:13: error: expected expression\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n            ^\n/tmp/tmpiwt9lsnl.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpiwt9lsnl.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpiwt9lsnl.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)}\n    numbers_array.sort()\n    return numbers_array.map{String($0)}.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu8j55t5q.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)}\n       \
    \                               ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n    numbers.sort()\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp98r1847f.swift:8:49: error: expected expression in list of expressions\n\
    \    var numbers = numbers.split(\" \").map(String::init)\n                  \
    \                              ^\n/tmp/tmp98r1847f.swift:8:50: error: consecutive\
    \ statements on a line must be separated by ';'\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                 ^\n\
    \                                                 ;\n/tmp/tmp98r1847f.swift:8:54:\
    \ error: initializers may only be declared within a type\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \ ^\n/tmp/tmp98r1847f.swift:8:54: error: expected '(' for initializer parameters\n\
    \    var numbers = numbers.split(\" \").map(String::init)\n                  \
    \                                   ^\n/tmp/tmp98r1847f.swift:8:27: error: no\
    \ exact matches in call to instance method 'split'\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                          ^\n/tmp/tmp98r1847f.swift:8:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers\
    \ = numbers.split(\" \").map(String::init)\n                          ^\n/tmp/tmp98r1847f.swift:8:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                          ^\n/tmp/tmp98r1847f.swift:8:49:\
    \ error: missing argument for parameter #1 in call\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                ^\n \
    \                                               <#(ArraySlice<String.Element>)\
    \ throws -> _#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmp98r1847f.swift:8:27: error: generic parameter\
    \ 'T' could not be inferred\n    var numbers = n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpywcxn1_b.swift:42:19: error: expected member name following '.'\n\
    \        numbers = strings.\n                         ^\n/tmp/tmpywcxn1_b.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpywcxn1_b.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpywcxn1_b.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n \
    \                 ^~~~~~~\n/tmp/tmpywcxn1_b.swift:9:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \                                                 ^~~~~~~\n/tmp/tmpywcxn1_b.swift:9:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpywcxn1_b.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n                  ^~~~~~~\n/tmp/tmpywcxn1_b.swift:10:43:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n                                                 ^~~~~~~\n\
    /tmp/tmpywcxn1_b.swift:10:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \        ^~~~~~~\n/tmp/tmpywcxn1_b.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimFunc(numbers, unicode.IsNumber)\n     \
    \             ^~~~~~~\n/tmp/tmpywcxn1_b.swift:11:38: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimFunc(numbers, unicode.IsNumber)\n  \
    \                                          ^~~~~~~\n/tmp/tmpywcxn1_b.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsNumber)\n        ^~~~~~~\n/tmp/tmpywcxn1_b.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        number"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n\tnumbers = strings.TrimSuffix(numbers, \"%\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n\tnumbers = strings.TrimSuffix(numbers, \")\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"<\")\n\tnumbers = strings.TrimSuffix(numbers, \">\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"=\")\n\tnumbers = strings.TrimSuffix(numbers, \"~\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"`\")\n\tnumbers = strings.TrimSuffix(numbers, \"{\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"}\")\n\tnumbers = strings.TrimSuffix(numbers, \"[\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"]\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"/\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph4bpu19y.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmph4bpu19y.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmph4bpu19y.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmph4bpu19y.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmph4bpu19y.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmph4bpu19y.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmph4bpu19y.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmph4bpu19y.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmph4bpu19y.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmph4bpu19y.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmph4bpu19y.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmph4bpu19y.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmph4bpu19y.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmph4bpu19y.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    numbers = strings.TrimSuffix(numbers, \"\\\\\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    numbers = strings.TrimSuffix(numbers, \"\\\\\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(number\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpanydznr0.swift:50:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpanydznr0.swift:49:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimSuffix(number\n                                ^\n/tmp/tmpanydznr0.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpanydznr0.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpanydznr0.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n              ^~~~~~~\n/tmp/tmpanydznr0.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \"0\")\n    ^~~~~~~\n/tmp/tmpanydznr0.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n              ^~~~~~~\n/tmp/tmpanydznr0.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    ^~~~~~~\n/tmp/tmpanydznr0.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"2\")\n              ^~~~~~~\n\
    /tmp/tmpanydznr0.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    ^~~~~~~\n/tmp/tmpanydznr0.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n              ^~~~~~~\n/tmp/tmpanydznr0.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    ^~~~~~~\n/tmp/tmpanydznr0.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"4\")\n              ^~~~~~~\n\
    /tmp/tmpanydznr0.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    ^~~~~~~\n/tmp/tmpanydznr0.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpguteromj.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpguteromj.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1voo_ebd.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp1voo_ebd.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp1voo_ebd.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp1voo_ebd.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp1voo_ebd.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp1voo_ebd.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp1voo_ebd.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp1voo_ebd.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplgusrq13.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmplgusrq13.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2ej90gzf.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp2ej90gzf.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_jbrkt9j.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSurrogate)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSurrogate)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunct)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSurrogate)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimFunc(number\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnbiz2gw0.swift:42:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpnbiz2gw0.swift:41:28: note: to match this opening '('\n        numbers\
    \ = strings.TrimFunc(number\n                                  ^\n/tmp/tmpnbiz2gw0.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n \
    \                 ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:9:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \                                                 ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:9:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:10:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:11:38:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                                            ^~~~~~~\n/tmp/tmpnbiz2gw0.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmpnbiz2gw0.sw"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpkn818vgj.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"es\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"s\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:15:15:\
    \ error: cannot find '"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2bir86h.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpz2bir86h.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpz2bir86h.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmpz2bir86h.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n              ^~~~~~~\n/tmp/tmpz2bir86h.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpz2bir86h.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n              ^~~~~~~\n/tmp/tmpz2bir86h.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmpz2bir86h.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmpz2bir86h.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"1\")\n\tnumbers := strings.Trim(numbers, \"2\")\n\tnumbers := strings.Trim(numbers,\
    \ \"3\")\n\tnumbers := strings.Trim(numbers, \"4\")\n\tnumbers := strings.Trim(numbers,\
    \ \"5\")\n\tnumbers := strings.Trim(numbers, \"6\")\n\tnumbers := strings.Trim(numbers,\
    \ \"7\")\n\tnumbers := strings.Trim(numbers, \"8\")\n\tnumbers := strings.Trim(numbers,\
    \ \"9\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"1\")\n\tnumbers := strings.Trim(numbers,\
    \ \"2\")\n\tnumbers := strings.Trim(numbers, \"3\")\n\tnumbers := strings.Trim(numbers,\
    \ \"4\")\n\tnumbers := strings.Trim(numbers, \"5\")\n\tnumbers := strings.Trim(numbers,\
    \ \"6\")\n\tnumbers := strings.Trim(numbers, \"7\")\n\tnumbers := strings.Trim(numbers,\
    \ \"8\")\n\tnumbers := strings.Trim(numbers, \"9\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"1\")\n\tnumbers := strings.Trim(numbers, \"2\")\n\tnumbers := strings.Trim(numbers,\
    \ \"3\")\n\tnumbers := strings.Trim(numbers, \"4\")\n\tnumbers := strings.Trim(numbers,\
    \ \"5\")\n\tnumbers := strings.Trim(numbers, \"6\")\n\tnumbers := strings.Trim(numbers,\
    \ \"7\")\n\tnumbers := strings.Trim(numbers, \"8\")\n\tnumbers := strings.Trim(numbers,\
    \ \"9\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"1\")\n\tnumbers := strings.Trim(numbers,\
    \ \"2\")\n\tnumbers := strings.Trim(numbers, \"3\")\n\tnumbers := strings.Trim(numbers,\
    \ \"4\")\n\tnumbers := strings.Trim(numbers, \"5\")\n\tnumbers := strings.Trim(numbers,\
    \ \"6\")\n\tnumbers := strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyoj8k5n.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpuyoj8k5n.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvu6pab7c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpvu6pab7c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp4rhxaz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpp4rhxaz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpngorc1zl.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpngorc1zl.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpngorc1zl.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpngorc1zl.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpngorc1zl.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \"0\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers := strings.TrimSuffix(numbers, \"2\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers := strings.TrimSuffix(numbers, \"4\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers := strings.TrimSuffix(numbers, \"6\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers := strings.TrimSuffix(numbers, \"8\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\
    \treturn strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpt3r96yjc.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpt3r96yjc.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpt3r96yjc.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpt3r96yjc.swift:21:9: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobqio5no.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpobqio5no.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1voo_ebd.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp1voo_ebd.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp1voo_ebd.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp1voo_ebd.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp1voo_ebd.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp1voo_ebd.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp1voo_ebd.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp1voo_ebd.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqcw4_xm4.swift:51:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpqcw4_xm4.swift:8:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmpqcw4_xm4.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpqcw4_xm4.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpqcw4_xm4.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbe"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp88toz6s2.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp28vtoa42.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp28vtoa42.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_3qk0cwg.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7_svpa6e.swift:50:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7_svpa6e.swift:49:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimSuffix(number\n                                    ^\n/tmp/tmp7_svpa6e.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7_svpa6e.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpws6ojlip.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp544w4f9f.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmp544w4f9f.swift:9:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmp544w4f9f.swift:8:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n \
    \             ^~~~~~~\n/tmp/tmp544w4f9f.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp544w4f9f.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSpace(numbers)\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineSeparator)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSurrogate)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsOtherSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsOtherControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsOtherNumber)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsOtherPunctuation)\n\tnumbers =\
    \ strings.TrimFunc(numbers, unicode.IsOtherSymbol)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherLineSeparator)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsOtherOtherSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsOtherOtherControl)\n\tnumbers\
    \ = strings.TrimFunc(numbers, unicode.IsOtherOtherLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherOtherNumber)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsOtherOtherPunctuation)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsOtherOtherSymbol)\n\tnumbers =\
    \ strings.TrimFunc(numbers, unicode.IsOtherOtherLineSeparator)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherOtherOtherSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsOtherOtherOtherControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsOtherOtherOtherLetter)\n\tnumbers\
    \ = strings.TrimFunc(numbers, unicode.IsOtherOtherOtherNumber)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherOtherOtherPunctuation)\n\tnumbers = strings.TrimFunc(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyb0srtor.swift:40:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpyb0srtor.swift:39:28: note: to match this opening '('\n        numbers\
    \ = strings.TrimFunc(number\n                                  ^\n/tmp/tmpyb0srtor.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpyb0srtor.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpyb0srtor.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n \
    \                 ^~~~~~~\n/tmp/tmpyb0srtor.swift:9:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \                                                 ^~~~~~~\n/tmp/tmpyb0srtor.swift:9:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmpyb0srtor.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmpyb0srtor.swift:10:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmpyb0srtor.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpyb0srtor.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmpyb0srtor.swift:11:38:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                                            ^~~~~~~\n/tmp/tmpyb0srtor.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmpyb0srtor.sw"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \",\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \",\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \",\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \",\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \",\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \",\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffi\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5vs58ami.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp5vs58ami.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp5vs58ami.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmp5vs58ami.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmp5vs58ami.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmp5vs58ami.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmp5vs58ami.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmp5vs58ami.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmp5vs58ami.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp5vs58ami.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp5vs58ami.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n              \
    \    ^~~~~~~\n/tmp/tmp5vs58ami.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmp5vs58ami.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmp5vs58ami.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobqio5no.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpobqio5no.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp302t9yav.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp302t9yav.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp65_gv21e.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp65_gv21e.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunct)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLower)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSymbol)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLineBreak)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsPunct)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsUpper)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSymbol\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3k5bf0nd.swift:42:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp3k5bf0nd.swift:41:28: note: to match this opening '('\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSymbol\n                             \
    \     ^\n/tmp/tmp3k5bf0nd.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmp3k5bf0nd.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n  \
    \                ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:10:42: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n\
    \                                                ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:11:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmp3k5bf0nd.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n   "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return numbers.split(\"\
    \ \").map{String($0)}.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpl9ip0_i2.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n/tmp/tmpl9ip0_i2.swift:10:20: error: no exact matches in call to instance\
    \ method 'split'\n    return numbers.split(\" \").map{String($0)}.joined(\" \"\
    )\n                   ^\n/tmp/tmpl9ip0_i2.swift:10:20: note: found candidate with\
    \ type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character,\
    \ Int, Bool) -> Array<ArraySlice<Character>>')\n    return numbers.split(\" \"\
    ).map{String($0)}.joined(\" \")\n                   ^\n/tmp/tmpl9ip0_i2.swift:10:20:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    return numbers.split(\"\
    \ \").map{String($0)}.joined(\" \")\n                   ^\n/tmp/tmpl9ip0_i2.swift:10:47:\
    \ error: cannot convert return expression of type 'JoinedSequence<[String]>' to\
    \ return type 'String'\n    return numbers.split(\" \").map{String($0)}.joined(\"\
    \ \")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n/tmp/tmpl9ip0_i2.swift:10:54:\
    \ error: missing argument label 'separator:' in call\n    return numbers.split(\"\
    \ \").map{String($0)}.joined(\" \")\n                                        \
    \             ^\n                                                     separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberArray\
    \ = numbers.split(separator: \" \")\n    let sortedArray = numberArray.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n    return sortedArray.join(\" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprrodxvbr.swift:9:51: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedArray = numberArray.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \              ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpws6ojlip.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted(by: <)\n    return numbers.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkqnga5v7.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted(by: <)\n            \
    \                    ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    zero\", \"one\", -1)\n\tnumbers = strings.Replace(numbers, \"one\", \"two\", -1)\n\
    \tnumbers = strings.Replace(numbers, \"two\", \"three\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"three\", \"four\", -1)\n\tnumbers = strings.Replace(numbers, \"four\", \"\
    five\", -1)\n\tnumbers = strings.Replace(numbers, \"five\", \"six\", -1)\n\tnumbers\
    \ = strings.Replace(numbers, \"six\", \"seven\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"seven\", \"eight\", -1)\n\tnumbers = strings.Replace(numbers, \"eight\", \"\
    nine\", -1)\n\tnumbers = strings.Replace(numbers, \"nine\", \"zero\", -1)\n\t\
    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4i3z878u.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp4i3z878u.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp4i3z878u.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp4i3z878u.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp4i3z878u.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Replace(numbers, \"zero\", \"one\", -1)\n \
    \                 ^~~~~~~\n/tmp/tmp4i3z878u.swift:10:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"zero\", \"one\", -1)\n        ^~~~~~~\n/tmp/tmp4i3z878u.swift:11:12: error:\
    \ cannot find 'strings' in scope\n        numbers = strings.Replace(numbers, \"\
    one\", \"two\", -1)\n                  ^~~~~~~\n/tmp/tmp4i3z878u.swift:11:2: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"one\", \"two\", -1)\n        ^~~~~~~\n/tmp/tmp4i3z878u.swift:12:12: error:\
    \ cannot find 'strings' in scope\n        numbers = strings.Replace(numbers, \"\
    two\", \"three\", -1)\n                  ^~~~~~~\n/tmp/tmp4i3z878u.swift:12:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.Replace(numbers, \"two\", \"three\", -1)\n        ^~~~~~~\n/tmp/tmp4i3z878u.swift:13:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.Replace(numbers,\
    \ \"three\", \"four\", -1)\n                  ^~~~~~~\n/tmp/tmp4i3z878u.swift:13:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.Replace(numbers, \"three\", \"four\", -1)\n        ^~~~~~~\n/tmp/tmp4i3z878u.swift:14:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.Replace(numbers,\
    \ \"four\", \"five\", -1)\n                  ^~~~~~~\n/tmp/tmp4i3z878u.sw"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    var sortedNumbers = \"\"\n    for number in numbers {\n        if number\
    \ == \"zero\" {\n            sortedNumbers += \"0\"\n        } else if number\
    \ == \"one\" {\n            sortedNumbers += \"1\"\n        } else if number ==\
    \ \"two\" {\n            sortedNumbers += \"2\"\n        } else if number == \"\
    three\" {\n            sortedNumbers += \"3\"\n        } else if number == \"\
    four\" {\n            sortedNumbers += \"4\"\n        } else if number == \"five\"\
    \ {\n            sortedNumbers += \"5\"\n        } else if number == \"six\" {\n\
    \            sortedNumbers += \"6\"\n        } else if number == \"seven\" {\n\
    \            sortedNumbers += \"7\"\n        } else if number == \"eight\" {\n\
    \            sortedNumbers += \"8\"\n        } else if number == \"nine\" {\n\
    \            sortedNumbers += \"9\"\n        } else {\n            sortedNumbers\
    \ += number\n        }\n    }\n    return sortedNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpga7c75k7.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"o\")\n    numbers = strings.TrimSuffix(numbers, \"O\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"o\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"O\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp23bl78ku.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp23bl78ku.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmp23bl78ku.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp23bl78ku.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmp23bl78ku.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmp23bl78ku.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmp23bl78ku.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmp23bl78ku.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmp23bl78ku.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"@\")\n\tnumbers = strings.TrimSuffix(numbers, \"$\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"<\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \">\")\n\tnumbers = strings.TrimSuffix(numbers, \"=\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"|\")\n\tnumbers = strings.TrimSuffix(numbers, \"~\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"@\")\n\tnumbers = strings.TrimSuffix(numbers, \"$\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_vgyo_w9.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmp_vgyo_w9.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map{Int($0)!}\n    numbers.sort()\n    return numbers.map{String($0)}.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8voa4bef.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{Int($0)!}\n            \
    \                    ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvu6pab7c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpvu6pab7c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz2qfpr8o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpz2qfpr8o.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberList = strings.Split(numbers, \" \")\n    numberList = sortNumbers(numberList)\n\
    \    return strings.Join(numberList, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw786lj8m.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpw786lj8m.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpw786lj8m.swift:9:22: error:\
    \ cannot find 'strings' in scope\n    var numberList = strings.Split(numbers,\
    \ \" \")\n                     ^~~~~~~\n/tmp/tmpw786lj8m.swift:10:18: error: cannot\
    \ find 'sortNumbers' in scope\n    numberList = sortNumbers(numberList)\n    \
    \             ^~~~~~~~~~~\n/tmp/tmpw786lj8m.swift:11:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numberList, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
