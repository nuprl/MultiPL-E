language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7xe64y7z/tmp7xe64y7z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95f1889c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95f1580b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95f1580988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95f157f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xe64y7z                        0x00005629e2d6979c <unavailable> + 6044

    5    libc.so.6                          0x00002b95f1a75460 __libc_start_main +
    245

    6    tmp7xe64y7z                        0x00005629e2d69399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: [Int] = []\n    for n in x {\n        if n % 2 == 0\
    \ {\n            evenDigit.append(n)\n        } else {\n            if evenDigit.count\
    \ > 0 {\n                result.insert(evenDigit.last!, n)\n                evenDigit.removeLast()\n\
    \            } else {\n                result.append(n)\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkcqvs3r3.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(evenDigit.last!, n)\n       \
    \                ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for element in x {\n        if element % 2 == 0 {\n\
    \            even.append(element)\n        } else {\n            result.append(element)\n\
    \        }\n    }\n    for element in even {\n        result.remove(at: result.index(of:\
    \ element))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8u2uudwl.swift:21:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmp8u2uudwl.swift:21:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmp8u2uudwl.swift:21:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 && i <\
    \ result.count {\n            result.removeLast()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplzm9sd7l/tmplzm9sd7l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac40b759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac40b450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac40b450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac40b44f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzm9sd7l                        0x000055686f5b67bc <unavailable> + 6076

    5    libc.so.6                          0x00002ac40b945460 __libc_start_main +
    245

    6    tmplzm9sd7l                        0x000055686f5b63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var evenDigitCount = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            evenDigit.append(n)\n            evenDigitCount\
    \ += 1\n        }\n    }\n    for n in evenDigit {\n        if evenDigitCount\
    \ == 0 {\n            result.append(n)\n        } else {\n            for _ in\
    \ 0..<evenDigitCount {\n                if n != evenDigit[evenDigitCount - 1]\
    \ {\n                    result.append(n)\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppkqbuqal/tmppkqbuqal.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a912dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a8e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a8e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a8e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkqbuqal                        0x0000564360a5a7cc <unavailable> + 6092

    5    libc.so.6                          0x00002b51a9319460 __libc_start_main +
    245

    6    tmppkqbuqal                        0x0000564360a5a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplzt_sa41.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpewrx8atp/tmpewrx8atp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2531aa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25317a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25317a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b253179f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewrx8atp                        0x00005576b260a79c <unavailable> + 6044

    5    libc.so.6                          0x00002b2531c95460 __libc_start_main +
    245

    6    tmpewrx8atp                        0x00005576b260a399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigits.append(n)\n        } else {\n            if evenDigits.contains(n)\
    \ {\n                continue\n            }\n            \n            result.append(n)\n\
    \            evenDigits.append(n)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsc0vx6eg/tmpsc0vx6eg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b990d545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b990d23cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b990d23c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b990d23b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsc0vx6eg                        0x00005608a32506ec <unavailable> + 5868

    5    libc.so.6                          0x00002b990d731460 __libc_start_main +
    245

    6    tmpsc0vx6eg                        0x00005608a32502e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for i in x {\n        if i\
    \ % 2 == 0 {\n            even.append(i)\n        } else {\n            odd.append(i)\n\
    \        }\n    }\n    for i in even {\n        if !contains(odd, i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8qv9xam8.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpcy_gmw8x/tmpcy_gmw8x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38adadbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38ad7d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38ad7d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38ad7d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy_gmw8x                        0x0000557b2096376c <unavailable> + 5996

    5    libc.so.6                          0x00002b38adcc7460 __libc_start_main +
    245

    6    tmpcy_gmw8x                        0x0000557b20963369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    for element in result\
    \ {\n        if element % 2 == 0 {\n            index = result.index(of: element)\n\
    \            result.remove(at: index)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpoh6kdn5v.swift:20:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            index = result.index(of: element)\n               \
    \            ^\n/tmp/tmpoh6kdn5v.swift:20:28: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            index = result.index(of:\
    \ element)\n                           ^\n                                   \
    \           ?? <#default value#>\n/tmp/tmpoh6kdn5v.swift:20:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    index = result.index(of: element)\n                           ^\n       \
    \                                      !\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprjl0_zxw/tmprjl0_zxw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae448a88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae44877fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae44877f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae44877e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjl0_zxw                        0x0000560d18aca71c <unavailable> + 5916

    5    libc.so.6                          0x00002ae448c74460 __libc_start_main +
    245

    6    tmprjl0_zxw                        0x0000560d18aca319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplzt_sa41.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.prefix(i)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsr28gwzm.swift:23:19: error: no 'prefix' candidates produce the\
    \ expected contextual result type '[Int]'\n    return result.prefix(i)\n     \
    \             ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[Int]>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for num in x {\n        if num % 2 == 0 {\n     \
    \       even.append(num)\n        } else {\n            result.append(num)\n \
    \       }\n    }\n    for num in even {\n        result.remove(at: result.index(of:\
    \ num))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpe_16i_bo.swift:21:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: num))\n            \
    \                     ^\n/tmp/tmpe_16i_bo.swift:21:34: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: num))\n                                 ^\n               \
    \                                 ?? <#default value#>\n/tmp/tmpe_16i_bo.swift:21:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: num))\n                  \
    \               ^\n                                               !\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in evenDigits {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9atgmb4g.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp9atgmb4g.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element\
    \ in x {\n        if element % 2 != 0 && evenDigitCount != 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxqt_212l/tmpxqt_212l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d9cdcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d9cac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d9cac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d9cac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqt_212l                        0x000055e104add62c <unavailable> + 5676

    5    libc.so.6                          0x00002b9d9cfb9460 __libc_start_main +
    245

    6    tmpxqt_212l                        0x000055e104add229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for num in x {\n        if num % 2 == 0 {\n           \
    \ last = num\n        } else {\n            if last != 0 {\n                result.insert(last,\
    \ num)\n            }\n            last = 0\n        }\n    }\n    if last !=\
    \ 0 {\n        result.insert(last, num)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpho2p2q5_.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, num)\n                \
    \       ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpho2p2q5_.swift:24:29:\
    \ error: cannot find 'num' in scope\n        result.insert(last, num)\n      \
    \                      ^~~\n/tmp/tmpho2p2q5_.swift:24:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(last, num)\n    \
    \           ^\n/tmp/tmpho2p2q5_.swift:24:16: note: found candidate with type '(__owned\
    \ Int, Int) -> ()'\n        result.insert(last, num)\n               ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7xe64y7z/tmp7xe64y7z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95f1889c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95f1580b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95f1580988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95f157f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xe64y7z                        0x00005629e2d6979c <unavailable> + 6044

    5    libc.so.6                          0x00002b95f1a75460 __libc_start_main +
    245

    6    tmp7xe64y7z                        0x00005629e2d69399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n  \
    \          last = last * 10 + n\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = n\n  \
    \      }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6wdzecph/tmp6wdzecph.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e44776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e4446db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e4446d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e4446c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wdzecph                        0x0000561e8027162c <unavailable> + 5676

    5    libc.so.6                          0x00002b0e44962460 __libc_start_main +
    245

    6    tmp6wdzecph                        0x0000561e80271229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for ev in evenDigits {\n                if element == ev {\n             \
    \       break\n                }\n            }\n            if !result.contains(element)\
    \ {\n                result.append(element)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwag6e24g/tmpwag6e24g.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac57f70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac57f405b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac57f405988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac57f4047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwag6e24g                        0x000055674a48c6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac57f8fa460 __libc_start_main +
    245

    6    tmpwag6e24g                        0x000055674a48c2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        let digit = num % 10\n        if digit % 2 == 0 {\n\
    \            result.append(num)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmfxc35dt/tmpmfxc35dt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b542f4ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b542f1f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b542f1f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b542f1f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfxc35dt                        0x00005649251f667c <unavailable> + 5756

    5    libc.so.6                          0x00002b542f6eb460 __libc_start_main +
    245

    6    tmpmfxc35dt                        0x00005649251f6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp78cxjbby/tmp78cxjbby.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c4ad07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c4a9feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c4a9fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c4a9fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78cxjbby                        0x000055818e6c567c <unavailable> + 5756

    5    libc.so.6                          0x00002b8c4aef3460 __libc_start_main +
    245

    6    tmp78cxjbby                        0x000055818e6c5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: [Int] = []\n    var evenDigitCount = 0\n    var i =\
    \ 0\n    for element in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \            evenDigitCount += 1\n        }\n    }\n    for element in evenDigit\
    \ {\n        if evenDigitCount > 0 {\n            for _ in 0..<evenDigitCount\
    \ {\n                result.append(element)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4ieysb7x/tmp4ieysb7x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b448ba9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b448b791b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b448b791988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b448b7907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ieysb7x                        0x000055cadd84f71c <unavailable> + 5916

    5    libc.so.6                          0x00002b448bc86460 __libc_start_main +
    245

    6    tmp4ieysb7x                        0x000055cadd84f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponjq2c50.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    var evenDigit: Int = 0\n    \n    for\
    \ i in x {\n        if i % 2 == 0 {\n            evenDigitCount += 1\n       \
    \     if evenDigitCount > 1 {\n                evenDigitCount = 0\n          \
    \      evenDigit = i\n            }\n        } else {\n            if evenDigitCount\
    \ > 0 {\n                result.append(evenDigit)\n                evenDigitCount\
    \ = 0\n                evenDigit = i\n            }\n        }\n    }\n    \n\
    \    if evenDigitCount > 0 {\n        result.append(evenDigit)\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnfrohpws/tmpnfrohpws.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c8a42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c8739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c8739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c87387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfrohpws                        0x0000564ad30fc62c <unavailable> + 5676

    5    libc.so.6                          0x00002b56c8c2e460 __libc_start_main +
    245

    6    tmpnfrohpws                        0x0000564ad30fc229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpm34g250o.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigits.append(n)\n        } else {\n            if !contains(evenDigits,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppx1cmoll.swift:18:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp78cxjbby/tmp78cxjbby.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c4ad07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c4a9feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c4a9fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c4a9fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78cxjbby                        0x000055818e6c567c <unavailable> + 5756

    5    libc.so.6                          0x00002b8c4aef3460 __libc_start_main +
    245

    6    tmp78cxjbby                        0x000055818e6c5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeElement(element)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpu6eu6vr8.swift:20:20: error: value of type '[Int]' has no member\
    \ 'removeElement'\n            result.removeElement(element)\n            ~~~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            even.append(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in even {\n        result.removeAll(num)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqfjdiezp.swift:22:16: error: no exact matches in call to instance\
    \ method 'removeAll'\n        result.removeAll(num)\n               ^\n/tmp/tmpqfjdiezp.swift:22:16:\
    \ note: candidate expects value of type '(Int) throws -> Bool' for parameter #1\
    \ (got 'Int')\n        result.removeAll(num)\n               ^\n/tmp/tmpqfjdiezp.swift:22:16:\
    \ note: candidate expects value of type '(Int) throws -> Bool' for parameter #1\
    \ (got 'Int')\n        result.removeAll(num)\n               ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprjl0_zxw/tmprjl0_zxw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae448a88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae44877fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae44877f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae44877e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjl0_zxw                        0x0000560d18aca71c <unavailable> + 5916

    5    libc.so.6                          0x00002ae448c74460 __libc_start_main +
    245

    6    tmprjl0_zxw                        0x0000560d18aca319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e % e == 0 {\n                    result.append(n)\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0uyowlyv/tmp0uyowlyv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7400806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74004fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74004fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74004fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uyowlyv                        0x00005586ce63867c <unavailable> + 5756

    5    libc.so.6                          0x00002b74009f2460 __libc_start_main +
    245

    6    tmp0uyowlyv                        0x00005586ce638279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n            evenDigitsCount\
    \ += 1\n        } else {\n            if evenDigitsCount == 0 {\n            \
    \    result.append(n)\n            } else {\n                let lastEvenDigit\
    \ = evenDigits[evenDigitsCount - 1]\n                if lastEvenDigit % 2 == 0\
    \ {\n                    result.append(n)\n                } else {\n        \
    \            evenDigits.append(n)\n                    evenDigitsCount += 1\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp640o35ga/tmp640o35ga.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd40a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd3d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd3d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd3d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp640o35ga                        0x00005603df9ac6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b6cd4290460 __libc_start_main +
    245

    6    tmp640o35ga                        0x00005603df9ac2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp917v504l.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0cqfz7qm/tmp0cqfz7qm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7452d60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7452a57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7452a57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7452a567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cqfz7qm                        0x000055ff8fe7876c <unavailable> + 5996

    5    libc.so.6                          0x00002b7452f4c460 __libc_start_main +
    245

    6    tmp0cqfz7qm                        0x000055ff8fe78369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n  \
    \          last = last * 10 + n\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = n\n  \
    \      }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6wdzecph/tmp6wdzecph.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e44776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e4446db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e4446d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e4446c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wdzecph                        0x0000561e8027162c <unavailable> + 5676

    5    libc.so.6                          0x00002b0e44962460 __libc_start_main +
    245

    6    tmp6wdzecph                        0x0000561e80271229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for i in x {\n        if i % 2 == 0 {\n\
    \            evenDigits.append(i)\n        } else {\n            if !contains(evenDigits,\
    \ i) {\n                result.append(i)\n            }\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp42ghqfkb.swift:18:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    var evenDigitsCountMax\
    \ = 0\n    for element in x {\n        if element % 2 == 0 {\n            evenDigits.append(element)\n\
    \            evenDigitsCount += 1\n            if evenDigitsCount > evenDigitsCountMax\
    \ {\n                evenDigitsCountMax = evenDigitsCount\n            }\n   \
    \     } else {\n            for index in 0..<evenDigitsCount {\n             \
    \   if element == evenDigits[index] {\n                    result.append(element)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6cjqg5ev/tmp6cjqg5ev.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc108cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc0d83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc0d83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc0d827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6cjqg5ev                        0x000055df05f797cc <unavailable> + 6092

    5    libc.so.6                          0x00002b7cc1278460 __libc_start_main +
    245

    6    tmp6cjqg5ev                        0x000055df05f793c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbkrjqy1c/tmpbkrjqy1c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ad103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69acdfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69acdfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69acdf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkrjqy1c                        0x00005601bf4ad79c <unavailable> + 6044

    5    libc.so.6                          0x00002b69ad2ef460 __libc_start_main +
    245

    6    tmpbkrjqy1c                        0x00005601bf4ad399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    while i < x.count {\n        if x[i] % 2 == 0 {\n        \
    \    result.append(x[i])\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpy7z8d43b/tmpy7z8d43b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72321e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7231ee0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7231ee0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7231edf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7z8d43b                        0x00005590666955bc <unavailable> + 5564

    5    libc.so.6                          0x00002b72323d5460 __libc_start_main +
    245

    6    tmpy7z8d43b                        0x00005590666951b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if even.contains(n) {\n    \
    \            continue\n            }\n            result.append(n)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0fu60mhc/tmp0fu60mhc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a9177ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a91475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a91475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a914747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fu60mhc                        0x00005601a46f36ec <unavailable> + 5868

    5    libc.so.6                          0x00002b3a9196a460 __libc_start_main +
    245

    6    tmp0fu60mhc                        0x00005601a46f32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpewrx8atp/tmpewrx8atp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2531aa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25317a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25317a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b253179f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewrx8atp                        0x00005576b260a79c <unavailable> + 6044

    5    libc.so.6                          0x00002b2531c95460 __libc_start_main +
    245

    6    tmpewrx8atp                        0x00005576b260a399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n            evenDigitsCount\
    \ += 1\n        }\n    }\n    for n in evenDigits {\n        if evenDigitsCount\
    \ > 0 {\n            for _ in 0..<evenDigitsCount {\n                result.remove(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppx4s8vqg.swift:23:24: error: no exact matches in call to instance\
    \ method 'remove'\n                result.remove(n)\n                       ^\n\
    Swift.Array:10:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(at:)')\n    @inlinable public mutating func remove(at index: Int) -> Element\n\
    \                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = last * 10 + n % 10\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = n % 10\n\
    \        }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7x0b81ya/tmp7x0b81ya.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bc8266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bc7f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bc7f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bc7f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x0b81ya                        0x000055fd37e4767c <unavailable> + 5756

    5    libc.so.6                          0x00002b8bc8452460 __libc_start_main +
    245

    6    tmp7x0b81ya                        0x000055fd37e47279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n   \
    \         even.append(n)\n        } else {\n            result.append(n)\n   \
    \     }\n    }\n    \n    for n in even {\n        result.remove(n)\n    }\n \
    \   \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpg457j_f_.swift:23:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigitCount += 1\n        } else {\n            if evenDigitCount\
    \ > 0 {\n                result.sort()\n                return result\n      \
    \      }\n            evenDigitCount = 1\n            result.append(n)\n     \
    \   }\n    }\n    if evenDigitCount > 0 {\n        result.sort()\n        return\
    \ result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxjaiycuo/tmpxjaiycuo.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addb8f0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addb8c05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addb8c05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addb8c047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjaiycuo                        0x000056349660174c <unavailable> + 5964

    5    libc.so.6                          0x00002addb90fa460 __libc_start_main +
    245

    6    tmpxjaiycuo                        0x0000563496601349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in evenDigits {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9atgmb4g.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp9atgmb4g.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    var evenDigit = false\n    for element in x {\n      \
    \  if element % 2 == 0 {\n            evenDigit = true\n        }\n        if\
    \ evenDigit {\n            result[index] = element\n            index++\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprptlte9s.swift:20:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            continue\n        }\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6jdf7lva/tmp6jdf7lva.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7826f23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7826c1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7826c1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7826c197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jdf7lva                        0x000055c468f6a6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b782710f460 __libc_start_main +
    245

    6    tmp6jdf7lva                        0x000055c468f6a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n   \
    \         even.append(n)\n        } else {\n            if even.count > 0 {\n\
    \                result += even\n                even = [Int]()\n            }\n\
    \            result.append(n)\n        }\n    }\n    \n    if even.count > 0 {\n\
    \        result += even\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpf40pfjpn/tmpf40pfjpn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45fba70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45fb767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45fb767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45fb7667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf40pfjpn                        0x00005588efb4c72c <unavailable> + 5932

    5    libc.so.6                          0x00002b45fbc5c460 __libc_start_main +
    245

    6    tmpf40pfjpn                        0x00005588efb4c329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp78cxjbby/tmp78cxjbby.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c4ad07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c4a9feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c4a9fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c4a9fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78cxjbby                        0x000055818e6c567c <unavailable> + 5756

    5    libc.so.6                          0x00002b8c4aef3460 __libc_start_main +
    245

    6    tmp78cxjbby                        0x000055818e6c5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   result.append(element)\n        }\n    }\n    for element in evenDigits {\n\
    \        result.remove(at: result.index(of: element))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpa4srk70e.swift:21:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmpa4srk70e.swift:21:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmpa4srk70e.swift:21:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    break\n                }\n\
    \            }\n            if result.contains(n) {\n                continue\n\
    \            }\n            result.append(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplhrd504p/tmplhrd504p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90370f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9036debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9036deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9036dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhrd504p                        0x0000558f974416ec <unavailable> + 5868

    5    libc.so.6                          0x00002b90372e0460 __libc_start_main +
    245

    6    tmplhrd504p                        0x0000558f974412e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit = x.first!\n    for element in x {\n        if element % lastDigit\
    \ == 0 {\n            result.append(element)\n        } else {\n            lastDigit\
    \ = element\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpr2cq0uvy/tmpr2cq0uvy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6711e1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6711b13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6711b13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6711b127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2cq0uvy                        0x000056305dd9d6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b6712008460 __libc_start_main +
    245

    6    tmpr2cq0uvy                        0x000056305dd9d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.removeAll({$0 == n})\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplvsakokv.swift:20:20: error: no exact matches in call to instance\
    \ method 'removeAll'\n            result.removeAll({$0 == n})\n              \
    \     ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(where:)')\n    @inlinable public mutating func removeAll(where\
    \ shouldBeRemoved: (Self.Element) throws -> Bool) rethrows\n                 \
    \                   ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(where:)')\n    @inlinable public\
    \ mutating func removeAll(where shouldBeRemoved: (Self.Element) throws -> Bool)\
    \ rethrows\n                                    ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    \n    for element in result\
    \ {\n        if element % 2 == 0 {\n            result.removeAll(where: {$0 %\
    \ 2 == 0})\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8ymy452s/tmp8ymy452s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b114202fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1141d26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1141d26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1141d257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ymy452s                        0x000056137420077c <unavailable> + 6012

    5    libc.so.6                          0x00002b114221b460 __libc_start_main +
    245

    6    tmp8ymy452s                        0x0000561374200379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num != 0 {\n          \
    \  i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpowh_bmek/tmpowh_bmek.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f875c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f872beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f872be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f872bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowh_bmek                        0x000055ec175ce71c <unavailable> + 5916

    5    libc.so.6                          0x00002b4f877b3460 __libc_start_main +
    245

    6    tmpowh_bmek                        0x000055ec175ce319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n            evenDigitsCount\
    \ += 1\n        }\n    }\n    for n in evenDigits {\n        if evenDigitsCount\
    \ > 0 {\n            if n % 2 == 0 {\n                evenDigitsCount -= 1\n \
    \           } else {\n                result.append(n)\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpirukujka/tmpirukujka.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeaa381c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeaa078b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeaa078988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeaa0777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirukujka                        0x000055760189167c <unavailable> + 5756

    5    libc.so.6                          0x00002aeeaa56d460 __libc_start_main +
    245

    6    tmpirukujka                        0x0000557601891279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    result.sort()\n    for n in even {\n        result.remove(n)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1t7ms5mj.swift:22:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = last * 10 + n\n        } else {\n            if last != 0 {\n            \
    \    result.insert(last, at: 0)\n            }\n            last = n\n       \
    \ }\n    }\n    if last != 0 {\n        result.insert(last, at: 0)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp426mcz1s/tmp426mcz1s.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97d6030c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97d5d27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97d5d27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97d5d267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp426mcz1s                        0x0000561e243c467c <unavailable> + 5756

    5    libc.so.6                          0x00002b97d621c460 __libc_start_main +
    245

    6    tmp426mcz1s                        0x0000561e243c4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            continue\n\
    \        }\n        for index in result {\n            if element == index {\n\
    \                continue\n            }\n            if element > index {\n \
    \               break\n            }\n        }\n        result.append(element)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbotejm72/tmpbotejm72.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af05d7efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af05d4e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af05d4e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af05d4e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbotejm72                        0x000055f61999067c <unavailable> + 5756

    5    libc.so.6                          0x00002af05d9db460 __libc_start_main +
    245

    6    tmpbotejm72                        0x000055f619990279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeAll(where: { $0 == element\
    \ })\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmponjv7j7w/tmponjv7j7w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8498b86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849887db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849887d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849887c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponjv7j7w                        0x000055fafd7af77c <unavailable> + 6012

    5    libc.so.6                          0x00002b8498d72460 __libc_start_main +
    245

    6    tmponjv7j7w                        0x000055fafd7af379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxnmw6cj5/tmpxnmw6cj5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c1f76dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c1f464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c1f464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c1f4637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnmw6cj5                        0x000055ff3faf576c <unavailable> + 5996

    5    libc.so.6                          0x00002b7c1f959460 __libc_start_main +
    245

    6    tmpxnmw6cj5                        0x000055ff3faf5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeAll(where: { $0 % 2 ==\
    \ 0 })\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwi1mqbm9/tmpwi1mqbm9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0187bd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01878ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01878ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01878cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwi1mqbm9                        0x000055d8a581b77c <unavailable> + 6012

    5    libc.so.6                          0x00002b0187dc3460 __libc_start_main +
    245

    6    tmpwi1mqbm9                        0x000055d8a581b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgn5a61qz.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if i % 2 == 0 {\n            result.append(num)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp5muwxr_7/tmp5muwxr_7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7dfb50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7df847b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7df847988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7df8467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5muwxr_7                        0x000055fbf627a67c <unavailable> + 5756

    5    libc.so.6                          0x00002ab7dfd3c460 __libc_start_main +
    245

    6    tmp5muwxr_7                        0x000055fbf627a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponjq2c50.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num != 0 {\n          \
    \  i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpowh_bmek/tmpowh_bmek.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f875c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f872beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f872be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f872bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowh_bmek                        0x000055ec175ce71c <unavailable> + 5916

    5    libc.so.6                          0x00002b4f877b3460 __libc_start_main +
    245

    6    tmpowh_bmek                        0x000055ec175ce319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e4e03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e4afa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7e4afa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7e4afa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7e4af9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7e48f97ec <unavailable> + 186348

    6    tmpuat6jmm8                        0x0000558fb2cc0bfe <unavailable> + 7166

    7    tmpuat6jmm8                        0x0000558fb2cc059c <unavailable> + 5532

    8    libc.so.6                          0x00002ac7e4fef460 __libc_start_main +
    245

    9    tmpuat6jmm8                        0x0000558fb2cc0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            index = index + 1\n            if index == result.count\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjegauruj/tmpjegauruj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba52f3a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba52f099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba52f099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba52f0987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjegauruj                        0x000055679a90d6dc <unavailable> + 5852

    5    libc.so.6                          0x00002ba52f58e460 __libc_start_main +
    245

    6    tmpjegauruj                        0x000055679a90d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n            evenDigitsCount\
    \ += 1\n        }\n    }\n    for n in evenDigits {\n        if evenDigitsCount\
    \ > 0 {\n            if evenDigitsCount > 1 {\n                result.insert(n,\
    \ at: 0)\n            } else {\n                result.insert(n, at: result.count\
    \ - 1)\n            }\n        }\n        evenDigitsCount -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b838a2dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8389fd1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8389fd1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8389fd113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8389fd0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8389fba196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b8389fbe020 Array.insert(_:at:)
    + 80

    7    tmpuxisn_48                        0x000055da4f214e7e <unavailable> + 7806

    8    tmpuxisn_48                        0x000055da4f21464c <unavailable> + 5708

    9    libc.so.6                          0x00002b838a4c6460 __libc_start_main +
    245

    10   tmpuxisn_48                        0x000055da4f214329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: Int = 0\n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigit = n\n        } else {\n            if evenDigit == 0 {\n\
    \                result.append(n)\n            } else {\n                if evenDigit\
    \ > n {\n                    result.append(evenDigit)\n                }\n   \
    \             result.append(n)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpoa_bo63t/tmpoa_bo63t.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada3872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada3569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada3569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada35687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoa_bo63t                        0x000055b90f3c962c <unavailable> + 5676

    5    libc.so.6                          0x00002aada3a5e460 __libc_start_main +
    245

    6    tmpoa_bo63t                        0x000055b90f3c9229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            even.append(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in even {\n        result.removeAll(where: {$0\
    \ % num == 0})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpegw7cqlp/tmpegw7cqlp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9626f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9626bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9626bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9626bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegw7cqlp                        0x0000560d2598177c <unavailable> + 6012

    5    libc.so.6                          0x00002b96270ec460 __libc_start_main +
    245

    6    tmpegw7cqlp                        0x0000560d25981379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    var evenDigit = false\n    for element in x {\n      \
    \  if element % 2 == 0 {\n            evenDigit = true\n        }\n        if\
    \ evenDigit {\n            result.append(element)\n        }\n        if element\
    \ % 2 == 0 {\n            evenDigit = false\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwwjco6_4/tmpwwjco6_4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affc05bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affc02b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affc02b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affc02b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwjco6_4                        0x00005635b860567c <unavailable> + 5756

    5    libc.so.6                          0x00002affc07ab460 __libc_start_main +
    245

    6    tmpwwjco6_4                        0x00005635b8605279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    var lastDigit: Int = 0\n    for value in x {\n   \
    \     if lastDigit % 2 == 0 {\n            lastDigit = 0\n        } else {\n \
    \           lastDigit = lastDigit / 2\n        }\n        if lastDigit == 0 {\n\
    \            lastDigit = value\n        }\n        if lastDigit > value {\n  \
    \          lastDigit = value\n        }\n        if lastDigit == value {\n   \
    \         result.append(lastDigit)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpy0p9bk5m/tmpy0p9bk5m.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09a97a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09a9499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09a9499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09a94987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0p9bk5m                        0x0000556cc8f3967c <unavailable> + 5756

    5    libc.so.6                          0x00002b09a998e460 __libc_start_main +
    245

    6    tmpy0p9bk5m                        0x0000556cc8f39279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(e)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqzk381al/tmpqzk381al.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6d334fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6d3046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6d3046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6d30457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzk381al                        0x000056082c6f367c <unavailable> + 5756

    5    libc.so.6                          0x00002ba6d353b460 __libc_start_main +
    245

    6    tmpqzk381al                        0x000056082c6f3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpcy_gmw8x/tmpcy_gmw8x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38adadbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38ad7d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38ad7d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38ad7d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy_gmw8x                        0x0000557b2096376c <unavailable> + 5996

    5    libc.so.6                          0x00002b38adcc7460 __libc_start_main +
    245

    6    tmpcy_gmw8x                        0x0000557b20963369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    while i < x.count {\n        if x[i] % 2 == 0 {\n        \
    \    result.append(x[i])\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpy7z8d43b/tmpy7z8d43b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72321e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7231ee0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7231ee0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7231edf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7z8d43b                        0x00005590666955bc <unavailable> + 5564

    5    libc.so.6                          0x00002b72323d5460 __libc_start_main +
    245

    6    tmpy7z8d43b                        0x00005590666951b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  \n    for n in evenDigits {\n        if !contains(result, n) {\n          \
    \  result.append(n)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplx28ccws.swift:18:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmplx28ccws.swift:25:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            evenDigits.append(element)\n\
    \            evenDigitsCount += 1\n        }\n    }\n    for element in evenDigits\
    \ {\n        if evenDigitsCount > 0 {\n            for element in evenDigits {\n\
    \                if element == element - 1 {\n                    result.append(element)\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6w1laajh/tmp6w1laajh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b570a0a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5709d9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5709d9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5709d9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w1laajh                        0x000055b3c9a6767c <unavailable> + 5756

    5    libc.so.6                          0x00002b570a292460 __libc_start_main +
    245

    6    tmp6w1laajh                        0x000055b3c9a67279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c988a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c98597561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c98597286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c9859713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c98596bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8c98698c1d <unavailable> + 2489373

    6    tmp06xh0715                        0x000055a3ffbeff40 <unavailable> + 8000

    7    tmp06xh0715                        0x000055a3ffbef77c <unavailable> + 6012

    8    libc.so.6                          0x00002b8c98a8c460 __libc_start_main +
    245

    9    tmp06xh0715                        0x000055a3ffbef459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptcj9w7ow/tmptcj9w7ow.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5f9c12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5f9909b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5f9909988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5f99087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcj9w7ow                        0x000055ef4e7f579c <unavailable> + 6044

    5    libc.so.6                          0x00002ba5f9dfe460 __libc_start_main +
    245

    6    tmptcj9w7ow                        0x000055ef4e7f5399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var i = 0\n    for n in x {\n        if n %\
    \ 2 == 0 {\n            evenDigits.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in evenDigits {\n        result.remove(n)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpg4hoi7tz.swift:22:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbkrjqy1c/tmpbkrjqy1c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ad103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69acdfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69acdfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69acdf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkrjqy1c                        0x00005601bf4ad79c <unavailable> + 6044

    5    libc.so.6                          0x00002b69ad2ef460 __libc_start_main +
    245

    6    tmpbkrjqy1c                        0x00005601bf4ad399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n            evenDigitCount += 1\n        }\n  \
    \  }\n    if evenDigitCount == 0 {\n        return result\n    }\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3fayhnvz/tmp3fayhnvz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8106502c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81061f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81061f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81061f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fayhnvz                        0x0000558f671a662c <unavailable> + 5676

    5    libc.so.6                          0x00002b81066ee460 __libc_start_main +
    245

    6    tmp3fayhnvz                        0x0000558f671a6229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgx8hqyxm/tmpgx8hqyxm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0fd751c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0fd448b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0fd448988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0fd4477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgx8hqyxm                        0x00005587c6b5779c <unavailable> + 6044

    5    libc.so.6                          0x00002ab0fd93d460 __libc_start_main +
    245

    6    tmpgx8hqyxm                        0x00005587c6b57399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeAll(where: { $0 == element\
    \ })\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmponjv7j7w/tmponjv7j7w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8498b86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849887db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849887d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849887c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponjv7j7w                        0x000055fafd7af77c <unavailable> + 6012

    5    libc.so.6                          0x00002b8498d72460 __libc_start_main +
    245

    6    tmponjv7j7w                        0x000055fafd7af379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit = 0\n    for n in x {\n        if lastDigit % 2 == 0 {\n  \
    \          result.append(n)\n        }\n        lastDigit = n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpold4jbze/tmpold4jbze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd3efe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd3ecdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd3ecdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd3ecda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpold4jbze                        0x0000563606bfb67c <unavailable> + 5756

    5    libc.so.6                          0x00002afd3f1d0460 __libc_start_main +
    245

    6    tmpold4jbze                        0x0000563606bfb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpubwwn_1l/tmpubwwn_1l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d9c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d992bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d992b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d992a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubwwn_1l                        0x000055f9ea8e171c <unavailable> + 5916

    5    libc.so.6                          0x00002b61d9e20460 __libc_start_main +
    245

    6    tmpubwwn_1l                        0x000055f9ea8e1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n    \
    \        lastDigit = n % 10\n        } else {\n            if lastDigit == 0 {\n\
    \                result.append(n)\n            } else {\n                lastDigit\
    \ = 0\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp18y6tm3h/tmp18y6tm3h.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac70996cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac709663b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac709663988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7096627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18y6tm3h                        0x000055ef221f167c <unavailable> + 5756

    5    libc.so.6                          0x00002ac709b58460 __libc_start_main +
    245

    6    tmp18y6tm3h                        0x000055ef221f1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6cd17fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6cce76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab6cce76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab6cce7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab6cce75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab6ccc757ec <unavailable> + 186348

    6    tmppnyf1bxh                        0x000055c1d9650bfe <unavailable> + 7166

    7    tmppnyf1bxh                        0x000055c1d965059c <unavailable> + 5532

    8    libc.so.6                          0x00002ab6cd36b460 __libc_start_main +
    245

    9    tmppnyf1bxh                        0x000055c1d9650279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n            evenDigitsCount\
    \ += 1\n        }\n    }\n    for n in evenDigits {\n        if evenDigitsCount\
    \ > 0 {\n            if evenDigitsCount > 1 {\n                if evenDigits.contains(n\
    \ / 2) {\n                    result.append(n / 2)\n                }\n      \
    \      } else {\n                result.append(n)\n            }\n        }\n\
    \        evenDigitsCount -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvzfp986q/tmpvzfp986q.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03cbd36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03cba2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03cba2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03cba2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzfp986q                        0x0000560e5cd3b6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b03cbf22460 __libc_start_main +
    245

    6    tmpvzfp986q                        0x0000560e5cd3b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn96b9d7a/tmpn96b9d7a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0832732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0832429b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0832429988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08324287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn96b9d7a                        0x000055b5cec5a67c <unavailable> + 5756

    5    libc.so.6                          0x00002b083291e460 __libc_start_main +
    245

    6    tmpn96b9d7a                        0x000055b5cec5a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.removeAllElementsOf([n])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_klc9z3_.swift:21:16: error: value of type '[Int]' has no member\
    \ 'removeAllElementsOf'\n        result.removeAllElementsOf([n])\n        ~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpubwwn_1l/tmpubwwn_1l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d9c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d992bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d992b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d992a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubwwn_1l                        0x000055f9ea8e171c <unavailable> + 5916

    5    libc.so.6                          0x00002b61d9e20460 __libc_start_main +
    245

    6    tmpubwwn_1l                        0x000055f9ea8e1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    result.sort()\n    even.sort()\n    return result.filter{$0 != even[0]}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxipe4rdl/tmpxipe4rdl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca03e91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca03b88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca03b88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca03b877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxipe4rdl                        0x000055ba3b6b88bc <unavailable> + 6332

    5    libc.so.6                          0x00002aca0407d460 __libc_start_main +
    245

    6    tmpxipe4rdl                        0x000055ba3b6b84b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e4e03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e4afa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7e4afa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7e4afa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7e4af9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7e48f97ec <unavailable> + 186348

    6    tmpuat6jmm8                        0x0000558fb2cc0bfe <unavailable> + 7166

    7    tmpuat6jmm8                        0x0000558fb2cc059c <unavailable> + 5532

    8    libc.so.6                          0x00002ac7e4fef460 __libc_start_main +
    245

    9    tmpuat6jmm8                        0x0000558fb2cc0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       result.append(n)\n            evenDigitCount += 1\n        }\n    }\n\
    \    if evenDigitCount == 0 {\n        return result\n    }\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjc071l53/tmpjc071l53.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5359f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5359c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5359c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5359c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjc071l53                        0x000055ff5eb5f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b535a169460 __libc_start_main +
    245

    6    tmpjc071l53                        0x000055ff5eb5f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpn96b9d7a/tmpn96b9d7a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0832732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0832429b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0832429988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08324287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn96b9d7a                        0x000055b5cec5a67c <unavailable> + 5756

    5    libc.so.6                          0x00002b083291e460 __libc_start_main +
    245

    6    tmpn96b9d7a                        0x000055b5cec5a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: [Int] = []\n    var evenDigitCount = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \            evenDigitCount += 1\n        }\n    }\n    for element in evenDigit\
    \ {\n        if evenDigitCount > 0 {\n            for element in x {\n       \
    \         if element % 2 == 0 {\n                    evenDigit.remove(element)\n\
    \                    evenDigitCount -= 1\n                    break\n        \
    \        }\n            }\n        }\n    }\n    for element in evenDigit {\n\
    \        if evenDigitCount > 0 {\n            for element in x {\n           \
    \     if element % 2 != 0 {\n                    evenDigit.remove(element)\n \
    \                   evenDigitCount -= 1\n                    break\n         \
    \       }\n            }\n        }\n    }\n    for element in evenDigit {\n \
    \       if evenDigitCount > 0 {\n            for element in x {\n            \
    \    if element % 2 == 0 {\n                    evenDigit.remove(element)\n  \
    \                  evenDigitCount -= 1\n                    break\n          \
    \      }\n            }\n        }\n    }\n    for element in evenDigit {\n  \
    \      if evenDigitCount > 0 {\n            for element in x {\n             \
    \   if element % 2 != 0 {\n                    evenDigit.remove(element)\n   \
    \                 evenDigitCount -= 1\n                    break\n           \
    \     }\n            }\n        }\n    }\n    for element in evenDigit {\n   \
    \     if evenDigitCount > 0 {\n            for element in x {\n              \
    \  if element % 2 == 0 {\n                    evenDigit.remove(element)\n    \
    \                evenDigitCount -= 1\n                    break\n            \
    \    }\n            }\n        }\n    }\n    for element in evenDigit {\n    \
    \    if evenDigitCount > 0 {\n            for element in x {\n               \
    \ if element % 2 != 0 {\n                    evenDigit.remove(element)\n     \
    \               evenDigitCount -= 1\n                    break\n             \
    \   }\n            }\n        }\n    }\n    for element in evenDigit {\n     \
    \   if evenDigitCount > 0 {\n            for element in x {\n                if\
    \ element % 2 == 0 {\n                    evenDigit.remove(element)\n        \
    \            evenDigitCount -= 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    for element in evenDigit {\n        if evenDigitCount\
    \ > 0 {\n            for element in x {\n                if element % 2 != 0 {\n\
    \                    evenDigit.remove(element)\n                    evenDigitCount\
    \ -= 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    for element in evenDigit {\n        if evenDigitCount > 0 {\n    \
    \        for element in x {\n                if element % 2 == 0 {\n         \
    \           evenDigit.remove(element)\n                    evenDigitCount -= 1\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for element in evenDigit {\n        if evenDigitCount > 0 {\n           \
    \ for element in x {\n                if element % 2 != 0 {\n                \
    \    evenDigit.remove(element)\n                    evenDigitCount -= 1\n    \
    \                break\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplae53jgg.swift:144:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmplae53jgg.swift:121:30: note: to match\
    \ this opening '{'\n            for element in x {\n                         \
    \    ^\n/tmp/tmplae53jgg.swift:144:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmplae53jgg.swift:120:31: note: to match\
    \ this opening '{'\n        if evenDigitCount > 0 {\n                        \
    \      ^\n/tmp/tmplae53jgg.swift:144:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmplae53jgg.swift:119:30: note: to match\
    \ this opening '{'\n    for element in evenDigit {\n                         \
    \    ^\n/tmp/tmplae53jgg.swift:144:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmplae53jgg.swift:10:39: note: to match\
    \ this opening '{'\nfunc unique_digits(x: [Int]) -> [Int] {\n                \
    \                      ^\n/tmp/tmplae53jgg.swift:24:31: error: no exact matches\
    \ in call to instance method 'remove'\n                    evenDigit.remove(element)\n\
    \                              ^\nSwift.Array:10:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at index: Int) -> Element\n                                    ^\n\
    Swift.RangeReplaceableCollection:9:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at position:\
    \ Self.Index) -> Self.Element\n                                    ^\n/tmp/tmplae53jgg.swift:35:31:\
    \ error: no exact matches in call to instance method 'remove'\n              \
    \      evenDigit.remove(element)\n                              ^\nSwift.Array:10:37:\
    \ n"
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd  = [Int]()\n    \n    for n in x {\n    \
    \    if n % 2 == 0 {\n            even.append(n)\n        } else {\n         \
    \   odd.append(n)\n        }\n    }\n    \n    for n in even {\n        if result.contains(n)\
    \ {\n            continue\n        }\n        result.append(n)\n    }\n    \n\
    \    for n in odd {\n        if result.contains(n) {\n            continue\n \
    \       }\n        result.append(n)\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpuupdd_2h/tmpuupdd_2h.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5ae95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c5ab8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c5ab8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c5ab8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuupdd_2h                        0x000055d4d85956ec <unavailable> + 5868

    5    libc.so.6                          0x00002b5c5b081460 __libc_start_main +
    245

    6    tmpuupdd_2h                        0x000055d4d85952e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0cqfz7qm/tmp0cqfz7qm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7452d60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7452a57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7452a57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7452a567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cqfz7qm                        0x000055ff8fe7876c <unavailable> + 5996

    5    libc.so.6                          0x00002b7452f4c460 __libc_start_main +
    245

    6    tmp0cqfz7qm                        0x000055ff8fe78369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if result.contains(n) {\n  \
    \              continue\n            }\n            result.append(n)\n       \
    \ }\n    }\n    return even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpy9ut6rma/tmpy9ut6rma.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1312ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1312bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1312beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1312bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9ut6rma                        0x0000556e3e6ae78c <unavailable> + 6028

    5    libc.so.6                          0x00002b13130e0460 __libc_start_main +
    245

    6    tmpy9ut6rma                        0x0000556e3e6ae389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeElement(element)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpu6eu6vr8.swift:20:20: error: value of type '[Int]' has no member\
    \ 'removeElement'\n            result.removeElement(element)\n            ~~~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        if result.contains(n) {\n            result.remove(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprljmhrj8.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeAll(where: { $0 == element\
    \ })\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmponjv7j7w/tmponjv7j7w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8498b86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849887db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849887d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849887c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponjv7j7w                        0x000055fafd7af77c <unavailable> + 6012

    5    libc.so.6                          0x00002b8498d72460 __libc_start_main +
    245

    6    tmponjv7j7w                        0x000055fafd7af379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0cqfz7qm/tmp0cqfz7qm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7452d60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7452a57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7452a57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7452a567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cqfz7qm                        0x000055ff8fe7876c <unavailable> + 5996

    5    libc.so.6                          0x00002b7452f4c460 __libc_start_main +
    245

    6    tmp0cqfz7qm                        0x000055ff8fe78369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    for element in x {\n        if element % 2\
    \ == 0 {\n            result.append(element)\n            i += 1\n        } else\
    \ {\n            if j == i {\n                result.append(element)\n       \
    \         j += 1\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmporjvpakn/tmporjvpakn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2b4b15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2b480cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2b480c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2b480b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmporjvpakn                        0x00005564bc8a667c <unavailable> + 5756

    5    libc.so.6                          0x00002ac2b4d01460 __libc_start_main +
    245

    6    tmporjvpakn                        0x00005564bc8a6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n        if index == x.count {\n            break\n        }\n    \
    \    if n % 10 != 0 {\n            result.append(n)\n        }\n        index++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpu6ffc2vd.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponjq2c50.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for i in x {\n        if i\
    \ % 2 == 0 {\n            even.append(i)\n        } else {\n            odd.append(i)\n\
    \        }\n    }\n    for i in even {\n        if !contains(odd, i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8qv9xam8.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgokekj2a/tmpgokekj2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35d6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35d3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35d3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35d3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgokekj2a                        0x0000558c7bdb279c <unavailable> + 6044

    5    libc.so.6                          0x00002ac35d8a9460 __libc_start_main +
    245

    6    tmpgokekj2a                        0x0000558c7bdb2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    \n    for element in\
    \ result {\n        if element % 2 != 0 {\n            result.insert(element,\
    \ at: index)\n        }\n        index += 1\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpth01owmz/tmpth01owmz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3fc105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3fbdfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3fbdfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3fbdfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth01owmz                        0x0000558600d326dc <unavailable> + 5852

    5    libc.so.6                          0x00002ad3fc2f1460 __libc_start_main +
    245

    6    tmpth01owmz                        0x0000558600d322d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigitCount += 1\n        } else {\n            if\
    \ evenDigitCount > 0 {\n                result.append(element)\n            }\n\
    \            evenDigitCount = 0\n        }\n    }\n    if evenDigitCount > 0 {\n\
    \        result.append(element)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpn0_9209h.swift:24:23: error: cannot find 'element' in scope\n \
    \       result.append(element)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpcy_gmw8x/tmpcy_gmw8x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38adadbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38ad7d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38ad7d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38ad7d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy_gmw8x                        0x0000557b2096376c <unavailable> + 5996

    5    libc.so.6                          0x00002b38adcc7460 __libc_start_main +
    245

    6    tmpcy_gmw8x                        0x0000557b20963369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgokekj2a/tmpgokekj2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35d6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35d3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35d3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35d3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgokekj2a                        0x0000558c7bdb279c <unavailable> + 6044

    5    libc.so.6                          0x00002ac35d8a9460 __libc_start_main +
    245

    6    tmpgokekj2a                        0x0000558c7bdb2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e4e03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e4afa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7e4afa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7e4afa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7e4af9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7e48f97ec <unavailable> + 186348

    6    tmpuat6jmm8                        0x0000558fb2cc0bfe <unavailable> + 7166

    7    tmpuat6jmm8                        0x0000558fb2cc059c <unavailable> + 5532

    8    libc.so.6                          0x00002ac7e4fef460 __libc_start_main +
    245

    9    tmpuat6jmm8                        0x0000558fb2cc0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element\
    \ in x {\n        if element % 2 != 0 && evenDigitCount > 0 {\n            result.append(element)\n\
    \            evenDigitCount -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwcnp_17h/tmpwcnp_17h.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9d2bbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9d28b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9d28b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9d28b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcnp_17h                        0x000055e71075362c <unavailable> + 5676

    5    libc.so.6                          0x00002ba9d2dab460 __libc_start_main +
    245

    6    tmpwcnp_17h                        0x000055e710753229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(evenDigits,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpd1737v2t.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  return evenDigits.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpow2jgbmf.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    for num in x {\n        if num % 2 == 0 {\n      \
    \      last = num\n        } else {\n            if last != 0 {\n            \
    \    result.append(last)\n            }\n            last = 0\n        }\n   \
    \ }\n    if last != 0 {\n        result.append(last)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqrlc3pbx/tmpqrlc3pbx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaf4563c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaf425ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaf425a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaf42597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrlc3pbx                        0x000056024b74d67c <unavailable> + 5756

    5    libc.so.6                          0x00002afaf474f460 __libc_start_main +
    245

    6    tmpqrlc3pbx                        0x000056024b74d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponjq2c50.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd  = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    for n in odd\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfd3wy0ij/tmpfd3wy0ij.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b082dd3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b082da33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b082da33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b082da327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfd3wy0ij                        0x000055f6603f56ec <unavailable> + 5868

    5    libc.so.6                          0x00002b082df28460 __libc_start_main +
    245

    6    tmpfd3wy0ij                        0x000055f6603f52e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if !contains(result, n) {\n\
    \                result.append(n)\n            }\n        }\n    }\n    return\
    \ even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovdrijwx.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(evenDigits,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpd1737v2t.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if result.contains(n) {\n  \
    \              continue\n            }\n            result.append(n)\n       \
    \ }\n    }\n    for n in even {\n        if result.contains(n) {\n           \
    \ continue\n        }\n        result.append(n)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp5kn248yj/tmp5kn248yj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3c5b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3c2a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf3c2a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf3c2a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kn248yj                        0x00005600f2a3c6ec <unavailable> + 5868

    5    libc.so.6                          0x00002aaf3c79e460 __libc_start_main +
    245

    6    tmp5kn248yj                        0x00005600f2a3c2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element in x\
    \ {\n        if element % 2 != 0 && evenDigitCount > 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6nugwbde/tmp6nugwbde.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9363608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93632ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93632ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93632fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6nugwbde                        0x000055911337b67c <unavailable> + 5756

    5    libc.so.6                          0x00002b93637f4460 __libc_start_main +
    245

    6    tmp6nugwbde                        0x000055911337b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    \n    for element in result\
    \ {\n        if element % 2 != 0 {\n            i += 1\n        }\n    }\n   \
    \ \n    return result.sorted(by: { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpetp67atp/tmpetp67atp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcb7fb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcb7ca8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcb7ca8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcb7ca77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetp67atp                        0x000055cb0f3d26ec <unavailable> + 5868

    5    libc.so.6                          0x00002abcb819d460 __libc_start_main +
    245

    6    tmpetp67atp                        0x000055cb0f3d22e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        if result.contains(n) {\n            result.remove(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpur5pro_c.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for ev in evenDigits {\n                if element == ev {\n             \
    \       break\n                }\n            }\n            if !result.contains(element)\
    \ {\n                result.append(element)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwag6e24g/tmpwag6e24g.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac57f70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac57f405b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac57f405988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac57f4047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwag6e24g                        0x000055674a48c6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac57f8fa460 __libc_start_main +
    245

    6    tmpwag6e24g                        0x000055674a48c2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbkrjqy1c/tmpbkrjqy1c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ad103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69acdfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69acdfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69acdf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkrjqy1c                        0x00005601bf4ad79c <unavailable> + 6044

    5    libc.so.6                          0x00002b69ad2ef460 __libc_start_main +
    245

    6    tmpbkrjqy1c                        0x00005601bf4ad399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var i = 0\n    for element in x {\n        if i % 2 == 0 {\n     \
    \       result.append(element)\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8shzhxx9/tmp8shzhxx9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b017ceedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b017cbe4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b017cbe4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b017cbe37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8shzhxx9                        0x000055be2a19462c <unavailable> + 5676

    5    libc.so.6                          0x00002b017d0d9460 __libc_start_main +
    245

    6    tmp8shzhxx9                        0x000055be2a194229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: Bool = false\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigit = true\n        } else {\n            if evenDigit\
    \ {\n                result.append(element)\n            }\n            evenDigit\
    \ = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmps0wfb2re/tmps0wfb2re.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b1260cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b12303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b12303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b123027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0wfb2re                        0x000055fe3015562c <unavailable> + 5676

    5    libc.so.6                          0x00002b5b127f8460 __libc_start_main +
    245

    6    tmps0wfb2re                        0x000055fe30155229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        if result.contains(n) {\n            result.remove(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpur5pro_c.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp917v504l.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for evenDigit in evenDigits {\n                if element == evenDigit {\n\
    \                    break\n                }\n            }\n            if !result.contains(element)\
    \ && !evenDigits.contains(element) {\n                result.append(element)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyrvs_xr3/tmpyrvs_xr3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae62769c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae62460b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae62460988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae6245f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrvs_xr3                        0x000055ff1398a6ec <unavailable> + 5868

    5    libc.so.6                          0x00002aae62955460 __libc_start_main +
    245

    6    tmpyrvs_xr3                        0x000055ff1398a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for element in x {\n     \
    \   if element % 2 == 0 {\n            even.append(element)\n        } else {\n\
    \            odd.append(element)\n        }\n    }\n    for element in even {\n\
    \        if !contains(result, element) {\n            result.append(element)\n\
    \        }\n    }\n    for element in odd {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvr5bidxm.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpvr5bidxm.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, element)\
    \ {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            even.append(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in even {\n        result.removeAll(where: { $0\
    \ == num })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_xwxmokl/tmp_xwxmokl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a92df0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a92ae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a92ae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a92ae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xwxmokl                        0x00005576d47bf77c <unavailable> + 6012

    5    libc.so.6                          0x00002b8a92fdc460 __libc_start_main +
    245

    6    tmp_xwxmokl                        0x00005576d47bf379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for element in x {\n        if element % 2 == 0 {\n\
    \            even.append(element)\n        } else {\n            result.append(element)\n\
    \        }\n    }\n    for element in even {\n        result.remove(at: result.index(of:\
    \ element))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8u2uudwl.swift:21:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmp8u2uudwl.swift:21:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmp8u2uudwl.swift:21:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponjq2c50.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgokekj2a/tmpgokekj2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35d6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35d3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35d3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35d3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgokekj2a                        0x0000558c7bdb279c <unavailable> + 6044

    5    libc.so.6                          0x00002ac35d8a9460 __libc_start_main +
    245

    6    tmpgokekj2a                        0x0000558c7bdb2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if !contains(result, n) {\n\
    \                result.append(n)\n            }\n        }\n    }\n    for n\
    \ in even {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdxxbjf1c.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmpdxxbjf1c.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in evenDigits {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9atgmb4g.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp9atgmb4g.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       result.append(n)\n            evenDigitCount += 1\n        }\n    }\n\
    \    if evenDigitCount == 0 {\n        return result\n    }\n    var evenDigits\
    \ = [0]\n    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        }\n    }\n    evenDigits.sortInPlace()\n    var result2 = [Int]()\n \
    \   for n in evenDigits {\n        if !result.contains(n) {\n            result2.append(n)\n\
    \        }\n    }\n    return result2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4d9x8uss.swift:28:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    evenDigits.sortInPlace()\n    ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n  \
    \          last = last * 10 + n % 10\n        } else {\n            if last >\
    \ 0 {\n                result.append(last)\n            }\n            last =\
    \ n % 10\n        }\n    }\n    if last > 0 {\n        result.append(last)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2rckylxc/tmp2rckylxc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91f94d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91f91ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91f91cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91f91cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rckylxc                        0x0000563aca1a162c <unavailable> + 5676

    5    libc.so.6                          0x00002b91f96c1460 __libc_start_main +
    245

    6    tmp2rckylxc                        0x0000563aca1a1229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n   \
    \         even.append(n)\n        } else {\n            if !contains(result, n)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    \n\
    \    for n in even {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpaik343rj.swift:18:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmpaik343rj.swift:25:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpg2sskzhz/tmpg2sskzhz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a49bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a46b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a46b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a46b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2sskzhz                        0x000056155bb8867c <unavailable> + 5756

    5    libc.so.6                          0x00002b81a4ba9460 __libc_start_main +
    245

    6    tmpg2sskzhz                        0x000056155bb88279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var i = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            evenDigit.append(element)\n        } else {\n\
    \            result.append(element)\n        }\n    }\n    for element in evenDigit\
    \ {\n        result.remove(at: i)\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpx4r7bl_x/tmpx4r7bl_x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17af282c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17aef79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17aef79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17aef787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4r7bl_x                        0x000055a75d90d6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b17af46e460 __libc_start_main +
    245

    6    tmpx4r7bl_x                        0x000055a75d90d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponjq2c50.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for element in x {\n     \
    \   if element % 2 == 0 {\n            even.append(element)\n        } else {\n\
    \            odd.append(element)\n        }\n    }\n    for element in even {\n\
    \        if !contains(result, element) {\n            result.append(element)\n\
    \        }\n    }\n    for element in odd {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvr5bidxm.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpvr5bidxm.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, element)\
    \ {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for element in\
    \ x {\n        if element % 2 == 0 {\n            evenDigits.append(element)\n\
    \            evenDigitsCount += 1\n        } else {\n            if evenDigitsCount\
    \ == 0 {\n                result.append(element)\n            } else {\n     \
    \           if evenDigitsCount > result.count {\n                    result =\
    \ evenDigits\n                }\n            }\n            evenDigits = [Int]()\n\
    \            evenDigitsCount = 0\n        }\n    }\n    if evenDigitsCount > result.count\
    \ {\n        result = evenDigits\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7i6d379d/tmp7i6d379d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8966ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a89365b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a89365988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a893647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i6d379d                        0x0000561178ad06dc <unavailable> + 5852

    5    libc.so.6                          0x00002b6a8985a460 __libc_start_main +
    245

    6    tmp7i6d379d                        0x0000561178ad02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0cqfz7qm/tmp0cqfz7qm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7452d60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7452a57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7452a57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7452a567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cqfz7qm                        0x000055ff8fe7876c <unavailable> + 5996

    5    libc.so.6                          0x00002b7452f4c460 __libc_start_main +
    245

    6    tmp0cqfz7qm                        0x000055ff8fe78369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        if result.contains(n) {\n            continue\n\
    \        }\n        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpiutpvxt5/tmpiutpvxt5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6d65ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6d62d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6d62d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6d62d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiutpvxt5                        0x000055648300e6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ab6d67c9460 __libc_start_main +
    245

    6    tmpiutpvxt5                        0x000055648300e2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if even.contains(n) == false\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzfo0dffd/tmpzfo0dffd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107a02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51076f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51076f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51076f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfo0dffd                        0x000055a6727d06ec <unavailable> + 5868

    5    libc.so.6                          0x00002b5107bee460 __libc_start_main +
    245

    6    tmpzfo0dffd                        0x000055a6727d02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = n / 10\n        } else {\n            if last != 0 {\n            \
    \    result.append(last)\n            }\n            last = n\n        }\n   \
    \ }\n    if last != 0 {\n        result.append(last)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpoagviol1/tmpoagviol1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef0b9cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef0b6c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef0b6c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef0b6c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoagviol1                        0x000055be0265367c <unavailable> + 5756

    5    libc.so.6                          0x00002aef0bbb9460 __libc_start_main +
    245

    6    tmpoagviol1                        0x000055be02653279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var evenDigitsCount = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n            evenDigitsCount\
    \ += 1\n        } else {\n            if evenDigitsCount == 0 {\n            \
    \    result.append(n)\n            } else {\n                for i in 0..<evenDigitsCount\
    \ {\n                    if evenDigits[i] != n {\n                        result.append(n)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n            evenDigits = [Int]()\n            evenDigitsCount = 0\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmphxqc8hed/tmphxqc8hed.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0328fafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0328ca6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0328ca6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0328ca57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphxqc8hed                        0x000055dfd2e897cc <unavailable> + 6092

    5    libc.so.6                          0x00002b032919b460 __libc_start_main +
    245

    6    tmphxqc8hed                        0x000055dfd2e893c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var i = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            evenDigit.append(element)\n        } else {\n\
    \            result.append(element)\n        }\n    }\n    for element in evenDigit\
    \ {\n        if result.contains(element) {\n            result.remove(at: result.index(of:\
    \ element))\n        } else {\n            result.append(element)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvcet_ybl.swift:23:38: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: element))\n    \
    \                                 ^\n/tmp/tmpvcet_ybl.swift:23:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: element))\n                     \
    \                ^\n                                                        ??\
    \ <#default value#>\n/tmp/tmpvcet_ybl.swift:23:38: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: element))\n                                     ^\n       \
    \                                                !\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            even.append(element)\n        } else {\n           \
    \ result.append(element)\n        }\n    }\n    for element in even {\n      \
    \  result.remove(at: i)\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpily40wvy/tmpily40wvy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1214bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12148d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12148d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12148d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpily40wvy                        0x000055ae739fe6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b1214dc9460 __libc_start_main +
    245

    6    tmpily40wvy                        0x000055ae739fe2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: Int = 0\n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigit += 1\n        }\n        if evenDigit == 0 {\n        \
    \    result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnwue1trg/tmpnwue1trg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab42ef5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab42becb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab42bec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab42beb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwue1trg                        0x000055e20335d62c <unavailable> + 5676

    5    libc.so.6                          0x00002aab430e1460 __libc_start_main +
    245

    6    tmpnwue1trg                        0x000055e20335d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if i % 2 == 0 {\n            result.append(num)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp5muwxr_7/tmp5muwxr_7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7dfb50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7df847b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7df847988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7df8467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5muwxr_7                        0x000055fbf627a67c <unavailable> + 5756

    5    libc.so.6                          0x00002ab7dfd3c460 __libc_start_main +
    245

    6    tmp5muwxr_7                        0x000055fbf627a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigits.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    \n    for n in evenDigits {\n        result.remove(n)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1olaniwm.swift:23:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e4e03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e4afa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7e4afa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7e4afa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7e4af9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7e48f97ec <unavailable> + 186348

    6    tmpuat6jmm8                        0x0000558fb2cc0bfe <unavailable> + 7166

    7    tmpuat6jmm8                        0x0000558fb2cc059c <unavailable> + 5532

    8    libc.so.6                          0x00002ac7e4fef460 __libc_start_main +
    245

    9    tmpuat6jmm8                        0x0000558fb2cc0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgokekj2a/tmpgokekj2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35d6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35d3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35d3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35d3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgokekj2a                        0x0000558c7bdb279c <unavailable> + 6044

    5    libc.so.6                          0x00002ac35d8a9460 __libc_start_main +
    245

    6    tmpgokekj2a                        0x0000558c7bdb2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var evenDigitCount = 0\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n  \
    \          evenDigitCount += 1\n        }\n    }\n    for element in evenDigit\
    \ {\n        if evenDigitCount > 0 {\n            for element in result {\n  \
    \              if element == element / 2 {\n                    break\n      \
    \          }\n            }\n        }\n        result.append(element)\n     \
    \   evenDigitCount -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpej_7f33i/tmpej_7f33i.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b701e23bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b701df32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b701df32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b701df317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej_7f33i                        0x000056088e5eb67c <unavailable> + 5756

    5    libc.so.6                          0x00002b701e427460 __libc_start_main +
    245

    6    tmpej_7f33i                        0x000056088e5eb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            index = result.index(of: n)\n            if index\
    \ != nil {\n                result.remove(at: index!)\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpe8bz3yg6.swift:17:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            index = result.index(of: n)\n                     \
    \      ^\n/tmp/tmpe8bz3yg6.swift:17:28: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n            index = result.index(of:\
    \ n)\n                           ^\n                                        ??\
    \ <#default value#>\n/tmp/tmpe8bz3yg6.swift:17:28: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            index =\
    \ result.index(of: n)\n                           ^\n                        \
    \               !\n/tmp/tmpe8bz3yg6.swift:18:22: warning: comparing non-optional\
    \ value of type 'Int' to 'nil' always returns true\n            if index != nil\
    \ {\n               ~~~~~ ^  ~~~\n/tmp/tmpe8bz3yg6.swift:19:40: error: cannot\
    \ force unwrap value of non-optional type 'Int'\n                result.remove(at:\
    \ index!)\n                                  ~~~~~^\n                        \
    \               \n"
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            result = result.filter\
    \ { $0 != n }\n        }\n    }\n    result = result.filter { $0.isMultiple(of:\
    \ 2) }\n    result = result.filter { $0.isMultiple(of: 3) }\n    result = result.filter\
    \ { $0.isMultiple(of: 4) }\n    result = result.filter { $0.isMultiple(of: 5)\
    \ }\n    result = result.filter { $0.isMultiple(of: 6) }\n    result = result.filter\
    \ { $0.isMultiple(of: 7) }\n    result = result.filter { $0.isMultiple(of: 8)\
    \ }\n    result = result.filter { $0.isMultiple(of: 9) }\n    result = result.filter\
    \ { $0.isMultiple(of: 10) }\n    result = result.filter { $0.isMultiple(of: 11)\
    \ }\n    result = result.filter { $0.isMultiple(of: 12) }\n    result = result.filter\
    \ { $0.isMultiple(of: 13) }\n    result = result.filter { $0.isMultiple(of: 14)\
    \ }\n    result = result.filter { $0.isMultiple(of: 15) }\n    result = result.filter\
    \ { $0.isMultiple(of: 16) }\n    result = result.filter { $0.isMultiple(of: 17)\
    \ }\n    result = result.filter { $0.isMultiple(of: 18) }\n    result = result.filter\
    \ { $0.isMultiple(of: 19) }\n    result = result.filter { $0.isMultiple(of: 20)\
    \ }\n    result = result.filter { $0.isMultiple(of: 21) }\n    result = result.filter\
    \ { $0.isMultiple(of: 22) }\n    result = result.filter { $0.isMultiple(of: 23)\
    \ }\n    result = result.filter { $0.isMultiple(of: 24) }\n    result = result.filter\
    \ { $0.isMultiple(of: 25) }\n    result = result.filter { $0.isMultiple(of: 26)\
    \ }\n    result = result.filter { $0.isMultiple(of: 27) }\n    result = result.filter\
    \ { $0.isMultiple(of: 28) }\n    result = result.filter { $0.isMultiple(of: 29)\
    \ }\n    result = result.filter { $0.isMultiple(of: 30) }\n    result = result.filter\
    \ { $0.isMultiple(of: 31) }\n    result = result.filter { $0.isMultiple(of: 32)\
    \ }\n    result = result.filter { $0.isMultiple\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2vzkp8g8.swift:70:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmp2vzkp8g8.swift:10:39: note: to match\
    \ this opening '{'\nfunc unique_digits(x: [Int]) -> [Int] {\n                \
    \                      ^\n/tmp/tmp2vzkp8g8.swift:51:33: error: cannot convert\
    \ value of type '()' to closure result type 'Bool'\n    result = result.filter\
    \ { $0.isMultiple\n                             ~~~^~~~~~~~~~\n/tmp/tmp2vzkp8g8.swift:55:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    for element in x {\n        if element % 2\
    \ == 0 {\n            result.append(element)\n        }\n    }\n    for element\
    \ in result {\n        if element % 2 == 0 {\n            j = j + 1\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   i = i + 1\n        }\n    }\n    if i == j {\n        return result\n    }\n\
    \    else {\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpa7u43zxv/tmpa7u43zxv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad551073c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad550d6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad550d6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad550d697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7u43zxv                        0x000055b66462267c <unavailable> + 5756

    5    libc.so.6                          0x00002ad55125f460 __libc_start_main +
    245

    6    tmpa7u43zxv                        0x000055b664622279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    \n    for n in result {\n        if n % 2 == 0 {\n    \
    \        result.remove(at: index)\n        }\n        index++\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_7wo49kv.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpewrx8atp/tmpewrx8atp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2531aa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25317a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25317a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b253179f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewrx8atp                        0x00005576b260a79c <unavailable> + 6044

    5    libc.so.6                          0x00002b2531c95460 __libc_start_main +
    245

    6    tmpewrx8atp                        0x00005576b260a399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit = x[x.count - 1]\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            lastDigit = element\n        } else {\n            if\
    \ lastDigit % 2 == 0 {\n                result.append(lastDigit)\n           \
    \ }\n            lastDigit = element\n        }\n    }\n    if lastDigit % 2 ==\
    \ 0 {\n        result.append(lastDigit)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnjoiv2xq/tmpnjoiv2xq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b316e2b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b316dfa9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b316dfa9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b316dfa87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjoiv2xq                        0x000056044bfa372c <unavailable> + 5932

    5    libc.so.6                          0x00002b316e49e460 __libc_start_main +
    245

    6    tmpnjoiv2xq                        0x000056044bfa3329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6cd17fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6cce76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab6cce76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab6cce7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab6cce75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab6ccc757ec <unavailable> + 186348

    6    tmppnyf1bxh                        0x000055c1d9650bfe <unavailable> + 7166

    7    tmppnyf1bxh                        0x000055c1d965059c <unavailable> + 5532

    8    libc.so.6                          0x00002ab6cd36b460 __libc_start_main +
    245

    9    tmppnyf1bxh                        0x000055c1d9650279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqrax7t.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeAll(where: { $0 == element\
    \ })\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmponjv7j7w/tmponjv7j7w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8498b86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849887db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849887d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849887c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponjv7j7w                        0x000055fafd7af77c <unavailable> + 6012

    5    libc.so.6                          0x00002b8498d72460 __libc_start_main +
    245

    6    tmponjv7j7w                        0x000055fafd7af379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: [Int] = []\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            evenDigit.append(element)\n      \
    \  } else {\n            result.append(element)\n        }\n    }\n    for element\
    \ in evenDigit {\n        if result.contains(element) {\n            result.remove(at:\
    \ result.index(of: element))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj6relc1f.swift:23:38: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: element))\n    \
    \                                 ^\n/tmp/tmpj6relc1f.swift:23:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: element))\n                     \
    \                ^\n                                                        ??\
    \ <#default value#>\n/tmp/tmpj6relc1f.swift:23:38: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: element))\n                                     ^\n       \
    \                                                !\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in evenDigits {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9atgmb4g.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp9atgmb4g.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824397
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if even.contains(n) == false\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzfo0dffd/tmpzfo0dffd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107a02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51076f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51076f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51076f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfo0dffd                        0x000055a6727d06ec <unavailable> + 5868

    5    libc.so.6                          0x00002b5107bee460 __libc_start_main +
    245

    6    tmpzfo0dffd                        0x000055a6727d02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var i = 0\n    for element in x {\n       \
    \ if element % 2 == 0 {\n            evenDigits.append(element)\n        }\n \
    \   }\n    for element in evenDigits {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpfzp70t0b.swift:20:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e4e03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e4afa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7e4afa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7e4afa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7e4af9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7e48f97ec <unavailable> + 186348

    6    tmpuat6jmm8                        0x0000558fb2cc0bfe <unavailable> + 7166

    7    tmpuat6jmm8                        0x0000558fb2cc059c <unavailable> + 5532

    8    libc.so.6                          0x00002ac7e4fef460 __libc_start_main +
    245

    9    tmpuat6jmm8                        0x0000558fb2cc0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpubwwn_1l/tmpubwwn_1l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d9c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d992bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d992b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d992a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubwwn_1l                        0x000055f9ea8e171c <unavailable> + 5916

    5    libc.so.6                          0x00002b61d9e20460 __libc_start_main +
    245

    6    tmpubwwn_1l                        0x000055f9ea8e1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in evenDigits {\n        if contains(result, n) {\n            continue\n\
    \        }\n        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphb8xz4ij.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmphb8xz4ij.swift:23:12:\
    \ error: cannot find 'contains' in scope\n        if contains(result, n) {\n \
    \          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgokekj2a/tmpgokekj2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35d6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35d3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35d3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35d3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgokekj2a                        0x0000558c7bdb279c <unavailable> + 6044

    5    libc.so.6                          0x00002ac35d8a9460 __libc_start_main +
    245

    6    tmpgokekj2a                        0x0000558c7bdb2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbkrjqy1c/tmpbkrjqy1c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ad103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69acdfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69acdfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69acdf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkrjqy1c                        0x00005601bf4ad79c <unavailable> + 6044

    5    libc.so.6                          0x00002b69ad2ef460 __libc_start_main +
    245

    6    tmpbkrjqy1c                        0x00005601bf4ad399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824398
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n\
    \            result.append(element)\n        }\n    }\n    for element in result\
    \ {\n        if element % 2 == 0 {\n            result.removeAll(where: { $0 ==\
    \ element })\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbyg3_g5l/tmpbyg3_g5l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a64094c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a63d8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a63d8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a63d8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyg3_g5l                        0x000055c1d073b71c <unavailable> + 5916

    5    libc.so.6                          0x00002b9a64280460 __libc_start_main +
    245

    6    tmpbyg3_g5l                        0x000055c1d073b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       result.append(n)\n            evenDigitCount += 1\n        }\n    }\n\
    \    if evenDigitCount == 0 {\n        return result\n    }\n    for n in x {\n\
    \        if n % 2 != 0 {\n            result.append(n)\n        }\n    }\n   \
    \ result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpccxnp637/tmpccxnp637.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b947d80fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b947d506b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b947d506988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b947d5057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpccxnp637                        0x0000562fca52e79c <unavailable> + 6044

    5    libc.so.6                          0x00002b947d9fb460 __libc_start_main +
    245

    6    tmpccxnp637                        0x0000562fca52e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824399
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpximj0lie/tmpximj0lie.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab761c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab761996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab761996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7619957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpximj0lie                        0x000056024950976c <unavailable> + 5996

    5    libc.so.6                          0x00002ab761e8b460 __libc_start_main +
    245

    6    tmpximj0lie                        0x0000560249509369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824397
