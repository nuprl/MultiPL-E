language: swift
name: HumanEval_128_prod_signs
results:
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp6ulfccim/tmp6ulfccim.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27e981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27e678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27e678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27e6777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ulfccim                        0x000055b593cf6549 <unavailable> + 5449

    5    libc.so.6                          0x00002ae27eb6d460 __libc_start_main +
    245

    6    tmp6ulfccim                        0x000055b593cf60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var sum =\
    \ 0\n    var product = 1\n    for x in arr {\n        sum += abs(x)\n        product\
    \ *= sign(x)\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzeynx109.swift:19:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpjmp_y2z1/tmpjmp_y2z1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8707f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8704e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8704e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8704e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmp_y2z1                        0x0000564e88c46599 <unavailable> + 5529

    5    libc.so.6                          0x00002ab8709de460 __libc_start_main +
    245

    6    tmpjmp_y2z1                        0x0000564e88c46129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp6ulfccim/tmp6ulfccim.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27e981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27e678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27e678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27e6777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ulfccim                        0x000055b593cf6549 <unavailable> + 5449

    5    libc.so.6                          0x00002ae27eb6d460 __libc_start_main +
    245

    6    tmp6ulfccim                        0x000055b593cf60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var sum: Int\
    \ = 0\n    var sign: Int = 0\n    for num in arr {\n        sum += num * sign\n\
    \        sign *= num < 0 ? -1 : 1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp753bxbj2/tmp753bxbj2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fb85abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fb82a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fb82a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fb82a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753bxbj2                        0x00005623a2ca1599 <unavailable> + 5529

    5    libc.so.6                          0x00002b5fb8797460 __libc_start_main +
    245

    6    tmp753bxbj2                        0x00005623a2ca1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var result\
    \ = 0\n    for i in arr {\n        result *= i\n        result += (i & 1)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp89078odv/tmp89078odv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adecb973c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adecb66ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adecb66a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adecb6697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89078odv                        0x00005580d1de2599 <unavailable> + 5529

    5    libc.so.6                          0x00002adecbb5f460 __libc_start_main +
    245

    6    tmp89078odv                        0x00005580d1de2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpnpdrb615/tmpnpdrb615.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc91f45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc91c3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc91c3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc91c3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpdrb615                        0x000055fc356d3599 <unavailable> + 5529

    5    libc.so.6                          0x00002acc92131460 __libc_start_main +
    245

    6    tmpnpdrb615                        0x000055fc356d3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var result\
    \ = 0\n    for x in arr {\n        result *= sign(x)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp13bajt0.swift:19:19: error: cannot find 'sign' in scope\n    \
    \    result *= sign(x)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var result\
    \ = 0\n    for x in arr {\n        switch x {\n        case 1:\n            result\
    \ += 1\n        case -1:\n            result -= 1\n        default:\n        \
    \    result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp7vp7h25_/tmp7vp7h25_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930284fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9302546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9302546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93025457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7vp7h25_                        0x0000560f74711599 <unavailable> + 5529

    5    libc.so.6                          0x00002b9302a3b460 __libc_start_main +
    245

    6    tmp7vp7h25_                        0x0000560f74711129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpnpdrb615/tmpnpdrb615.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc91f45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc91c3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc91c3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc91c3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpdrb615                        0x000055fc356d3599 <unavailable> + 5529

    5    libc.so.6                          0x00002acc92131460 __libc_start_main +
    245

    6    tmpnpdrb615                        0x000055fc356d3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_s2aj9gc/tmp_s2aj9gc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7564adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7561a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7561a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7561a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s2aj9gc                        0x000055668ef38599 <unavailable> + 5529

    5    libc.so.6                          0x00002ae756699460 __libc_start_main +
    245

    6    tmp_s2aj9gc                        0x000055668ef38129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_s2aj9gc/tmp_s2aj9gc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7564adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7561a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7561a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7561a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s2aj9gc                        0x000055668ef38599 <unavailable> + 5529

    5    libc.so.6                          0x00002ae756699460 __libc_start_main +
    245

    6    tmp_s2aj9gc                        0x000055668ef38129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpjmp_y2z1/tmpjmp_y2z1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8707f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8704e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8704e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8704e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmp_y2z1                        0x0000564e88c46599 <unavailable> + 5529

    5    libc.so.6                          0x00002ab8709de460 __libc_start_main +
    245

    6    tmpjmp_y2z1                        0x0000564e88c46129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var result\
    \ = 0\n    for x in arr {\n        switch x {\n        case 1:\n            result\
    \ += 1\n        case -1:\n            result -= 1\n        default:\n        \
    \    result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpgzi12ge6/tmpgzi12ge6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b319c565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b319c25cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b319c25c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b319c25b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzi12ge6                        0x000055768b228599 <unavailable> + 5529

    5    libc.so.6                          0x00002b319c751460 __libc_start_main +
    245

    6    tmpgzi12ge6                        0x000055768b228129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    var sign = 1\n    for x in arr {\n\
    \        product *= sign\n        sign *= x\n    }\n    return product\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmponnaz06p/tmponnaz06p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33fa9dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33fa6d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33fa6d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33fa6d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponnaz06p                        0x000055d17b701549 <unavailable> + 5449

    5    libc.so.6                          0x00002b33fabcb460 __libc_start_main +
    245

    6    tmponnaz06p                        0x000055d17b7010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for num in arr {\n\
    \        sum += num\n        product *= num\n    }\n    if product == 0 {\n  \
    \      return nil\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmposdf4jwn/tmposdf4jwn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfd577dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfd5474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfd5474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfd54737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposdf4jwn                        0x0000560a85918549 <unavailable> + 5449

    5    libc.so.6                          0x00002acfd5969460 __libc_start_main +
    245

    6    tmposdf4jwn                        0x0000560a859180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpjmp_y2z1/tmpjmp_y2z1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8707f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8704e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8704e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8704e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmp_y2z1                        0x0000564e88c46599 <unavailable> + 5529

    5    libc.so.6                          0x00002ab8709de460 __libc_start_main +
    245

    6    tmpjmp_y2z1                        0x0000564e88c46129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n\n    var\
    \ product = 1\n    var sign = 1\n\n    for value in arr {\n        product *=\
    \ sign\n        sign *= value\n    }\n\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpkaabc1q5/tmpkaabc1q5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f6d8ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f6d5d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f6d5d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f6d5d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkaabc1q5                        0x00005587ea1b2599 <unavailable> + 5529

    5    libc.so.6                          0x00002b0f6dac9460 __libc_start_main +
    245

    6    tmpkaabc1q5                        0x00005587ea1b2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var res\
    \ = 1\n    for x in arr {\n        if x < 0 {\n            res = -res\n      \
    \  }\n        res *= x\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpp42sbuzc/tmpp42sbuzc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4c0a90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4c0787b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4c0787988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4c07867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp42sbuzc                        0x00005589087aa599 <unavailable> + 5529

    5    libc.so.6                          0x00002ba4c0c7c460 __libc_start_main +
    245

    6    tmpp42sbuzc                        0x00005589087aa129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var sign =\
    \ 1\n    var sum = 0\n    for x in arr {\n        sum += sign * x\n        sign\
    \ *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpuc03shq5/tmpuc03shq5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8bef25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8bec1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8bec1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8bec1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc03shq5                        0x000055c334a63599 <unavailable> + 5529

    5    libc.so.6                          0x00002af8bf111460 __libc_start_main +
    245

    6    tmpuc03shq5                        0x000055c334a63129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for num in arr {\n        product\
    \ *= signOfInt(num)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4ep190nn.swift:16:20: error: cannot find 'signOfInt' in scope\n\
    \        product *= signOfInt(num)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var result\
    \ = 0\n    for x in arr {\n        switch x {\n        case 1:\n            result\
    \ += 1\n        case -1:\n            result -= 1\n        default:\n        \
    \    result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpgzi12ge6/tmpgzi12ge6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b319c565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b319c25cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b319c25c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b319c25b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzi12ge6                        0x000055768b228599 <unavailable> + 5529

    5    libc.so.6                          0x00002b319c751460 __libc_start_main +
    245

    6    tmpgzi12ge6                        0x000055768b228129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sum =\
    \ 0\n    for x in arr {\n        sum += x * sign(x)\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpi52v8ntu.swift:17:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_s2aj9gc/tmp_s2aj9gc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7564adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7561a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7561a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7561a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s2aj9gc                        0x000055668ef38599 <unavailable> + 5529

    5    libc.so.6                          0x00002ae756699460 __libc_start_main +
    245

    6    tmp_s2aj9gc                        0x000055668ef38129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_s2aj9gc/tmp_s2aj9gc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7564adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7561a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7561a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7561a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s2aj9gc                        0x000055668ef38599 <unavailable> + 5529

    5    libc.so.6                          0x00002ae756699460 __libc_start_main +
    245

    6    tmp_s2aj9gc                        0x000055668ef38129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty() {\n        return nil\n    }\n    var\
    \ product = 1\n    for x in arr {\n        product *= sign(x)\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfv9zse6b.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpfv9zse6b.swift:19:20: error: cannot find 'sign' in scope\n      \
    \  product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sign\
    \ = 1\n    var product = 1\n    for i in 0..<arr.count {\n        product *= sign\n\
    \        sign *= arr[i]\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpm2okq2rc/tmpm2okq2rc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fdebe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fde8dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fde8df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fde8de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2okq2rc                        0x0000558c86127619 <unavailable> + 5657

    5    libc.so.6                          0x00002b7fdedd4460 __libc_start_main +
    245

    6    tmpm2okq2rc                        0x0000558c861271a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n\n    var\
    \ sum = 0\n    var product = 1\n    for x in arr {\n        sum += abs(x)\n  \
    \      product *= sign(x)\n    }\n    return sum * product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5p1_0v2e.swift:22:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sign = 1\n    var product = 1\n    for x in arr {\n\
    \        product *= sign\n        sign *= x\n    }\n    return product\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp48fq2bv0/tmp48fq2bv0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b207a084c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2079d7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2079d7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2079d7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48fq2bv0                        0x000056410b162549 <unavailable> + 5449

    5    libc.so.6                          0x00002b207a270460 __libc_start_main +
    245

    6    tmp48fq2bv0                        0x000056410b1620d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp6ulfccim/tmp6ulfccim.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27e981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27e678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27e678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27e6777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ulfccim                        0x000055b593cf6549 <unavailable> + 5449

    5    libc.so.6                          0x00002ae27eb6d460 __libc_start_main +
    245

    6    tmp6ulfccim                        0x000055b593cf60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    var sign = 1\n    for x in arr {\n\
    \        product *= sign\n        sign *= x\n    }\n    return product\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmponnaz06p/tmponnaz06p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33fa9dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33fa6d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33fa6d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33fa6d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponnaz06p                        0x000055d17b701549 <unavailable> + 5449

    5    libc.so.6                          0x00002b33fabcb460 __libc_start_main +
    245

    6    tmponnaz06p                        0x000055d17b7010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var result\
    \ = 0\n    for num in arr {\n        switch num {\n        case 1:\n         \
    \   result += 1\n        case -1:\n            result -= 1\n        default:\n\
    \            result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpyfceuqoz/tmpyfceuqoz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0702e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0702b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0702b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0702b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfceuqoz                        0x00005633b9a5c599 <unavailable> + 5529

    5    libc.so.6                          0x00002b0703051460 __libc_start_main +
    245

    6    tmpyfceuqoz                        0x00005633b9a5c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj1ydxgah.swift:25:19: error: cannot convert return expression of\
    \ type 'Bool' to return type 'Int?'\n    return result != 0\n           ~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var sign =\
    \ 1\n    var sum = 0\n    for x in arr {\n        sum += sign * x\n        sign\
    \ *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpuc03shq5/tmpuc03shq5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8bef25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8bec1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8bec1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8bec1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc03shq5                        0x000055c334a63599 <unavailable> + 5529

    5    libc.so.6                          0x00002af8bf111460 __libc_start_main +
    245

    6    tmpuc03shq5                        0x000055c334a63129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        sign *= x\n        product\
    \ *= sign\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpck3nk5bk/tmpck3nk5bk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c78e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c75dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c75dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c75db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpck3nk5bk                        0x0000560fc82f3599 <unavailable> + 5529

    5    libc.so.6                          0x00002b23c7ad1460 __libc_start_main +
    245

    6    tmpck3nk5bk                        0x0000560fc82f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for num in arr {\n        product *= sign\n  \
    \      sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmplhek68gk/tmplhek68gk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c52da0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c52a97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c52a97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c52a967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhek68gk                        0x000055729075d599 <unavailable> + 5529

    5    libc.so.6                          0x00002b1c52f8c460 __libc_start_main +
    245

    6    tmplhek68gk                        0x000055729075d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var product = 1\n    for num in arr {\n        sum += num\n       \
    \ product *= num\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpibaiv6cg/tmpibaiv6cg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8175412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8175109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8175109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81751087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibaiv6cg                        0x00005616eb93b599 <unavailable> + 5529

    5    libc.so.6                          0x00002b81755fe460 __libc_start_main +
    245

    6    tmpibaiv6cg                        0x00005616eb93b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result == 0 ? nil : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_bwoab01/tmp_bwoab01.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c7c29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c7920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c7920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c791f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bwoab01                        0x0000555fe3f2c549 <unavailable> + 5449

    5    libc.so.6                          0x00002b23c7e15460 __libc_start_main +
    245

    6    tmp_bwoab01                        0x0000555fe3f2c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result == 0 ? nil : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_bwoab01/tmp_bwoab01.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c7c29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c7920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c7920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c791f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bwoab01                        0x0000555fe3f2c549 <unavailable> + 5449

    5    libc.so.6                          0x00002b23c7e15460 __libc_start_main +
    245

    6    tmp_bwoab01                        0x0000555fe3f2c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty() {\n        return nil\n    }\n    var\
    \ sign = 1\n    var sum = 0\n    for x in arr {\n        sum += sign * x\n   \
    \     sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8q92ye69.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var result\
    \ = 0\n    for num in arr {\n        switch num {\n        case 1:\n         \
    \   result += 1\n        case -1:\n            result -= 1\n        default:\n\
    \            result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpyfceuqoz/tmpyfceuqoz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0702e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0702b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0702b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0702b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfceuqoz                        0x00005633b9a5c599 <unavailable> + 5529

    5    libc.so.6                          0x00002b0703051460 __libc_start_main +
    245

    6    tmpyfceuqoz                        0x00005633b9a5c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var product\
    \ = 1\n    var sign = 1\n    for n in arr {\n        product *= sign\n       \
    \ sign *= n\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpm3m17dgd/tmpm3m17dgd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b913b9e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b913b6e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b913b6e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b913b6df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm3m17dgd                        0x000056006a252599 <unavailable> + 5529

    5    libc.so.6                          0x00002b913bbd5460 __libc_start_main +
    245

    6    tmpm3m17dgd                        0x000056006a252129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var product\
    \ = 1\n    for x in arr {\n        product *= sign(x)\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfvv7k_xp.swift:17:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var product = 1\n    for x in arr {\n        sum += x * product\n \
    \       product *= sign(x)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwiup95uy.swift:21:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        if x < 0 {\n\
    \            result *= -1\n        } else {\n            result *= 1\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp1a33eint/tmp1a33eint.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e1e830c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e1e527b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e1e527988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e1e5267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1a33eint                        0x000055a830d38549 <unavailable> + 5449

    5    libc.so.6                          0x00002b8e1ea1c460 __libc_start_main +
    245

    6    tmp1a33eint                        0x000055a830d380d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for i in arr {\n        product *= sign\n    \
    \    sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmppez84b09/tmppez84b09.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24c9d0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24c9a02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24c9a02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24c9a017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppez84b09                        0x000055734e9e7599 <unavailable> + 5529

    5    libc.so.6                          0x00002b24c9ef7460 __libc_start_main +
    245

    6    tmppez84b09                        0x000055734e9e7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result == 0 ? nil : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_bwoab01/tmp_bwoab01.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c7c29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c7920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c7920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c791f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bwoab01                        0x0000555fe3f2c549 <unavailable> + 5449

    5    libc.so.6                          0x00002b23c7e15460 __libc_start_main +
    245

    6    tmp_bwoab01                        0x0000555fe3f2c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    var sum = 0\n    for x in arr {\n        sum +=\
    \ sign * x\n        product *= sign\n        sign *= -1\n    }\n    return sum\
    \ * product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp5ov4emwq/tmp5ov4emwq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6697dd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6697acfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6697acf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6697ace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ov4emwq                        0x000055d7b2f25599 <unavailable> + 5529

    5    libc.so.6                          0x00002b6697fc4460 __libc_start_main +
    245

    6    tmp5ov4emwq                        0x000055d7b2f25129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \    var sum = 0\n    var sign = 1\n    for x in arr {\n        sum += sign *\
    \ x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpzvkwvbx5/tmpzvkwvbx5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a61193c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a60e8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a60e8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a60e897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvkwvbx5                        0x0000563e56613599 <unavailable> + 5529

    5    libc.so.6                          0x00002b0a6137f460 __libc_start_main +
    245

    6    tmpzvkwvbx5                        0x0000563e56613129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_s2aj9gc/tmp_s2aj9gc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7564adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7561a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7561a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7561a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s2aj9gc                        0x000055668ef38599 <unavailable> + 5529

    5    libc.so.6                          0x00002ae756699460 __libc_start_main +
    245

    6    tmp_s2aj9gc                        0x000055668ef38129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty() {\n        return nil\n    }\n    var\
    \ sign = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n\
    \        sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprdhufx58.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n\n    var\
    \ sign = 1\n    var product = 1\n    var result = 0\n\n    for x in arr {\n  \
    \      product *= sign\n        sign *= x\n        result += sign * product\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpwlrk2psk/tmpwlrk2psk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9285bf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92858edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92858ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92858ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwlrk2psk                        0x0000558513e37599 <unavailable> + 5529

    5    libc.so.6                          0x00002b9285de2460 __libc_start_main +
    245

    6    tmpwlrk2psk                        0x0000558513e37129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var result\
    \ = 0\n    for num in arr {\n        switch num {\n        case 1:\n         \
    \   result += 1\n        case -1:\n            result -= 1\n        default:\n\
    \            result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpyfceuqoz/tmpyfceuqoz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0702e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0702b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0702b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0702b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfceuqoz                        0x00005633b9a5c599 <unavailable> + 5529

    5    libc.so.6                          0x00002b0703051460 __libc_start_main +
    245

    6    tmpyfceuqoz                        0x00005633b9a5c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n\n    var\
    \ sum = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n   \
    \     sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpwsumeeed/tmpwsumeeed.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3c6969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3c6660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3c6660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3c665f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsumeeed                        0x000055d2c20e7599 <unavailable> + 5529

    5    libc.so.6                          0x00002ac3c6b55460 __libc_start_main +
    245

    6    tmpwsumeeed                        0x000055d2c20e7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var product\
    \ = 1\n    var sign = 1\n    for x in arr {\n        product *= sign\n       \
    \ sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptesneud8/tmptesneud8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b194f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b191eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b191ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b191e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptesneud8                        0x000056423c29f599 <unavailable> + 5529

    5    libc.so.6                          0x00002b0b196df460 __libc_start_main +
    245

    6    tmptesneud8                        0x000056423c29f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        sign *= x\n        product\
    \ *= sign\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp7cx6vyk_/tmp7cx6vyk_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c32b1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c32816b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c32816988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c328157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cx6vyk_                        0x00005562b9be5599 <unavailable> + 5529

    5    libc.so.6                          0x00002b7c32d0b460 __libc_start_main +
    245

    6    tmp7cx6vyk_                        0x00005562b9be5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \    var sign = 1\n    var product = 1\n    for x in arr {\n        sign *= x\n\
    \        product *= sign\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpegojkqsr/tmpegojkqsr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b07ba8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b0789fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b0789f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b0789e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegojkqsr                        0x0000558fa9bab599 <unavailable> + 5529

    5    libc.so.6                          0x00002b8b07d94460 __libc_start_main +
    245

    6    tmpegojkqsr                        0x0000558fa9bab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var result\
    \ = 0\n    var sign = 1\n    for x in arr {\n        result += (sign * x)\n  \
    \      sign *= -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpwy1t07_b/tmpwy1t07_b.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a69a71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a69768b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a69768988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a697677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwy1t07_b                        0x000056422694d599 <unavailable> + 5529

    5    libc.so.6                          0x00002b6a69c5d460 __libc_start_main +
    245

    6    tmpwy1t07_b                        0x000056422694d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \n    var result = 0\n    var sign = 1\n    for element in arr {\n        result\
    \ += (element * sign)\n        sign *= -1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp57hf6cyh/tmp57hf6cyh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89e085ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89e0555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89e0555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89e05547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57hf6cyh                        0x000055c48e69c599 <unavailable> + 5529

    5    libc.so.6                          0x00002b89e0a4a460 __libc_start_main +
    245

    6    tmp57hf6cyh                        0x000055c48e69c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty() {\n        return nil\n    }\n    var\
    \ result = 0\n    for x in arr {\n        switch x {\n        case 1:\n      \
    \      result += 1\n        case -1:\n            result -= 1\n        default:\n\
    \            result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7hiewdx6.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for v in arr {\n        sum += sign * v\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpbgt1u4fd/tmpbgt1u4fd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b5b8cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b5b5c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b5b5c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b5b5c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgt1u4fd                        0x000055d62ba90599 <unavailable> + 5529

    5    libc.so.6                          0x00002b5b5bab7460 __libc_start_main +
    245

    6    tmpbgt1u4fd                        0x000055d62ba90129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var product = 1\n    for i in arr {\n        sum += abs(i)\n      \
    \  product *= sign(i)\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpseh3woph.swift:21:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(i)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var product = 1\n    for x in arr {\n        sum += abs(x)\n      \
    \  product *= sign(x)\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8k3ks6rl.swift:21:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \n    var sign = 1\n    var product = 1\n    var result = 0\n\n    for num in\
    \ arr {\n        product *= sign\n        sign *= -1\n        result += num *\
    \ product\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpgm4df4tc/tmpgm4df4tc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5544256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5543f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5543f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5543f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgm4df4tc                        0x0000562d4fc56599 <unavailable> + 5529

    5    libc.so.6                          0x00002b5544442460 __libc_start_main +
    245

    6    tmpgm4df4tc                        0x0000562d4fc56129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for num in arr {\n\
    \        sum += num\n        product *= sign(num) // sign is 1 if num > 0, -1\
    \ if num < 0\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprn18ngb5.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(num) // sign is 1 if num > 0, -1 if num < 0\n           \
    \        ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        product *= sign\n    \
    \    sign *= -1\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpjmp_y2z1/tmpjmp_y2z1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8707f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8704e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8704e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8704e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmp_y2z1                        0x0000564e88c46599 <unavailable> + 5529

    5    libc.so.6                          0x00002ab8709de460 __libc_start_main +
    245

    6    tmpjmp_y2z1                        0x0000564e88c46129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var result\
    \ = 0\n    for x in arr {\n        switch x {\n        case 1:\n            result\
    \ += 1\n        case -1:\n            result -= 1\n        default:\n        \
    \    result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpgzi12ge6/tmpgzi12ge6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b319c565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b319c25cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b319c25c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b319c25b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzi12ge6                        0x000055768b228599 <unavailable> + 5529

    5    libc.so.6                          0x00002b319c751460 __libc_start_main +
    245

    6    tmpgzi12ge6                        0x000055768b228129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \    var result = 0\n    for x in arr {\n        switch x {\n        case 1:\n\
    \            result += 1\n        case -1:\n            result -= 1\n        default:\n\
    \            result *= -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp4wbypqaw/tmp4wbypqaw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affd90c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affd8dc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affd8dc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affd8dbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wbypqaw                        0x00005559e0271599 <unavailable> + 5529

    5    libc.so.6                          0x00002affd92b5460 __libc_start_main +
    245

    6    tmp4wbypqaw                        0x00005559e0271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1,\
    \ 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp6ulfccim/tmp6ulfccim.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27e981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27e678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27e678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27e6777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ulfccim                        0x000055b593cf6549 <unavailable> + 5449

    5    libc.so.6                          0x00002ae27eb6d460 __libc_start_main +
    245

    6    tmp6ulfccim                        0x000055b593cf60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var sign =\
    \ 1\n    var product = 1\n    for x in arr {\n        sign *= x\n        product\
    \ *= sign\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpywuxb7es/tmpywuxb7es.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab560c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5608fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5608fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5608fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywuxb7es                        0x00005581549f7599 <unavailable> + 5529

    5    libc.so.6                          0x00002ab560df1460 __libc_start_main +
    245

    6    tmpywuxb7es                        0x00005581549f7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sum =\
    \ 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n        sign\
    \ *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp4ai10vmi/tmp4ai10vmi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f62332c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f62029b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f62029988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f620287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ai10vmi                        0x000055734eaff599 <unavailable> + 5529

    5    libc.so.6                          0x00002b8f6251e460 __libc_start_main +
    245

    6    tmp4ai10vmi                        0x000055734eaff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result != 0 ? result : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmptlmeq1b5/tmptlmeq1b5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac165e53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac165b4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac165b4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac165b497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlmeq1b5                        0x00005614c2222549 <unavailable> + 5449

    5    libc.so.6                          0x00002ac16603f460 __libc_start_main +
    245

    6    tmptlmeq1b5                        0x00005614c22220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sign\
    \ = 1\n    var product = 1\n    for x in arr {\n        sign *= x\n        product\
    \ *= sign\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpck3nk5bk/tmpck3nk5bk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c78e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c75dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c75dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c75db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpck3nk5bk                        0x0000560fc82f3599 <unavailable> + 5529

    5    libc.so.6                          0x00002b23c7ad1460 __libc_start_main +
    245

    6    tmpck3nk5bk                        0x0000560fc82f3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else { return nil }\n    var sum =\
    \ 0\n    var product = 1\n    for i in arr {\n        sum += abs(i)\n        product\
    \ *= sign(i)\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqtjlj6k1.swift:19:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(i)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n\n    var\
    \ sign = 1\n    var product = 1\n    var sum = 0\n\n    for x in arr {\n     \
    \   sum += sign * x\n        product *= sign\n        sign *= -1\n    }\n\n  \
    \  return sum * product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpvorib30l/tmpvorib30l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68571dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6856ed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6856ed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6856ed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvorib30l                        0x0000556f540e7599 <unavailable> + 5529

    5    libc.so.6                          0x00002b68573c7460 __libc_start_main +
    245

    6    tmpvorib30l                        0x0000556f540e7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \n    var product = 1\n    var sign = 1\n\n    for element in arr {\n        product\
    \ *= sign\n        sign *= element\n    }\n\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp2tf0gxfj/tmp2tf0gxfj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbabacfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbab7c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbab7c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbab7c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2tf0gxfj                        0x00005631c7dcb599 <unavailable> + 5529

    5    libc.so.6                          0x00002abbabcbb460 __libc_start_main +
    245

    6    tmp2tf0gxfj                        0x00005631c7dcb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n\n    var\
    \ sum = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n   \
    \     sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpwsumeeed/tmpwsumeeed.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3c6969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3c6660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3c6660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3c665f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsumeeed                        0x000055d2c20e7599 <unavailable> + 5529

    5    libc.so.6                          0x00002ac3c6b55460 __libc_start_main +
    245

    6    tmpwsumeeed                        0x000055d2c20e7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= x\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpc7orf2ih/tmpc7orf2ih.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8063430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8063127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8063127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80631267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7orf2ih                        0x000055d7e3fa0889 <unavailable> + 6281

    5    libc.so.6                          0x00002b806361c460 __libc_start_main +
    245

    6    tmpc7orf2ih                        0x000055d7e3fa00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var sum =\
    \ 0\n    for x in arr {\n        sum += x * sign(x)\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpckpr7vtx.swift:17:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var product = 1\n    for x in arr {\n        sum += x * product\n \
    \       product *= x\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpiept7zq9/tmpiept7zq9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab208907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2085feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2085fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2085fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiept7zq9                        0x000055ca5a92c8d9 <unavailable> + 6361

    5    libc.so.6                          0x00002ab208af3460 __libc_start_main +
    245

    6    tmpiept7zq9                        0x000055ca5a92c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var result = 0\n    for x in arr {\n        switch x {\n\
    \        case 1:\n            result += 1\n        case -1:\n            result\
    \ -= 1\n        default:\n            result *= -1\n        }\n    }\n    return\
    \ result == 0 ? nil : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp_bwoab01/tmp_bwoab01.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c7c29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c7920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c7920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c791f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bwoab01                        0x0000555fe3f2c549 <unavailable> + 5449

    5    libc.so.6                          0x00002b23c7e15460 __libc_start_main +
    245

    6    tmp_bwoab01                        0x0000555fe3f2c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += abs(x)\n        product *= sign(x)\n    }\n    return sum * product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1paw7sfd.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    for x in arr {\n        sum += x * sign(x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr:\
    \ [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr:\
    \ [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\n\
    assert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr:\
    \ [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr:\
    \ [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo_eh159j.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    sum += x * sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    var product\
    \ = 1\n    var sign = 1\n    for x in arr {\n        product *= sign\n       \
    \ sign *= x\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp437flyb1/tmp437flyb1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acba43a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acba409db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acba409d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acba409c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp437flyb1                        0x0000555a09024599 <unavailable> + 5529

    5    libc.so.6                          0x00002acba4592460 __libc_start_main +
    245

    6    tmp437flyb1                        0x0000555a09024129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var product = 1\n    for x in arr {\n        product *=\
    \ sign(x)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplkmeh6ti.swift:16:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var sign = 1\n    for x in arr {\n  \
    \      sum += sign * x\n        sign *= -1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmp8wymu8sv/tmp8wymu8sv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3feac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fe7b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fe7b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fe7b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wymu8sv                        0x000055718b446549 <unavailable> + 5449

    5    libc.so.6                          0x00002ab3fecac460 __libc_start_main +
    245

    6    tmp8wymu8sv                        0x000055718b4460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824771
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var sign = 1\n    for x in arr {\n        sum += sign * x\n       \
    \ sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) ==\
    \ 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpxos3nq_s/tmpxos3nq_s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f1698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f138fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f138f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f138e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxos3nq_s                        0x0000558670872599 <unavailable> + 5529

    5    libc.so.6                          0x00002b51f1884460 __libc_start_main +
    245

    6    tmpxos3nq_s                        0x0000558670872129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: -4
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    guard arr.count > 0 else {\n        return nil\n    }\n\
    \    var sum = 0\n    var sign = 1\n    for x in arr {\n        sum += x * sign\n\
    \        sign *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0,\
    \ 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: Exception
  stderr: 'tmpwtfj4b_0/tmpwtfj4b_0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba439519c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba439210b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba439210988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba43920f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtfj4b_0                        0x00005570d5975599 <unavailable> + 5529

    5    libc.so.6                          0x00002ba439705460 __libc_start_main +
    245

    6    tmpwtfj4b_0                        0x00005570d5975129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var product = 1\n    for i in arr {\n        sum += abs(i)\n      \
    \  product *= sign(i)\n    }\n    return sum * product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpseh3woph.swift:21:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(i)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// You are given an array arr of integers and you need to return\n\
    /// sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
    \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
    \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
    \ [Int]) -> Int? {\n    var sum = 0\n    var product = 1\n    for x in arr {\n\
    \        sum += x * product\n        product *= sign(x)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr:\
    \ [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr:\
    \ [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\n\
    assert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1,\
    \ 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphn0iv4hs.swift:18:20: error: cannot find 'sign' in scope\n    \
    \    product *= sign(x)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824771
