name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double)\
  \ -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ['    return floor(number * 10) / 10', '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let\
    \ (integer, decimal) = Double(trunc(number)).asInt()\n    return Double(integer)\
    \ / Double(decimal)", "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    return trunc(number)", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number)\n    return integerPart + decimalPart", "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number).rounded(.towardZero)\n\
    \    return integerPart.truncatingRemainder(dividingBy: 1) + decimalPart", " \
    \   let fraction = number % 1\n    return number - fraction", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number)\n    return integerPart\
    \ + decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number)\n    return integerPart + decimalPart", " \
    \   if number < 0 {\n        return -truncate_number(-number)\n    }\n    return\
    \ trunc(number)", "    let fraction = number % 1\n    return number - fraction",
  '    return Double(trunc(number))', "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number - decimalPart)\n    return integerPart + decimalPart", "    if\
    \ number < 0 {\n        return -truncate_number(-number)\n    }\n    return trunc(number)",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    var decimalPart\
    \ = number\n    var integerPart = number\n    var decimalsCount = 0\n    while\
    \ decimalPart > 1.0 {\n        decimalPart /= 10\n        decimalsCount += 1\n\
    \    }\n    if decimalsCount > 0 {\n        integerPart *= 10\n        integerPart\
    \ /= decimalsCount\n    }\n    return integerPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let fraction = number % 1\n    return number - fraction", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let result = Double(trunc(number))\n\
    \    if result < number {\n        return result + 1.0\n    }\n    return result",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let fraction = number % 1\n    return number\
    \ - fraction", "    let decimalPart = floor(log10(number))\n    let integerPart\
    \ = trunc(number)\n    return Double(integerPart) / pow(10.0, Double(decimalPart))",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n  \
    \  let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1.0)', "    let fraction\
    \ = number % 1\n    let whole = number - fraction\n    return whole < 0.5 ? whole\
    \ : whole - 1 + fraction", '    return Double(trunc(number))', '    return Double(trunc(number))',
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number - decimalPart)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = Double(trunc(number))\n \
    \   return number - decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(trunc(number))', "    let decimalPart = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(number) - decimalPart", "    if number < 1.0 {\n     \
    \   return number\n    }\n    let decimalPart = number % 1\n    return number\
    \ - decimalPart", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n\
    \    return Double(integer) + decimal", "    let fraction = number - truncate_number(Double(number))\n\
    \    return fraction", '    return Double(number).truncatingRemainder(dividingBy:
    1.0)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let fraction = number % 1\n    return\
    \ number - fraction", "    let fraction = number % 1\n    return number - fraction",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n  \
    \  let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n    return\
    \ Double(integerPart) * pow(10.0, Double(decimalPart))", '    return truncate_number(number:
    number, scale: 0)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart * pow(10, Double(log10(Double(number)))) + decimalPart",
  "    let fraction = number % 1\n    return number - fraction", "    if number <\
    \ 0 {\n        return -truncate_number(-number)\n    }\n    return truncate_number(number)",
  "    let decimalPart = number % 1\n    let integerPart = floor(number - decimalPart)\n\
    \    return integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number).rounded(.towardZero)\n    return integerPart + decimalPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + (decimalPart < 0.5 ? 0 : 1)", "    let (integer, decimals) = truncate_number_with_precision(number:\
    \ number)\n    return Double(integer) + Double(decimals)", "    let fraction =\
    \ number % 1\n    return number - fraction", "    let decimalPart = Double(number).truncatingRemainder(dividingBy:\
    \ 1.0)\n    let integerPart = Double(number).truncatingRemainder(dividingBy: 1.0)\n\
    \    return Double(integerPart) / Double(decimalPart)", '    return Double(trunc(number))',
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let fraction\
    \ = number % 1\n    return number - fraction", "    let fraction = number % 1\n\
    \    return number - fraction", '    return Double(trunc(number))', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let integerPart = Int(round(number))\n\
    \    let decimalPart = number - Double(integerPart)\n    return Double(integerPart)\
    \ / Double(10) + decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + (decimalPart > 0 ? 1 : 0)", "    let\
    \ decimalPart = floor(log10(number))\n    let integerPart = number / pow(10.0,\
    \ Double(decimalPart))\n    return integerPart", "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart * pow(10, Double(log10(abs(number))))\
    \ + decimalPart", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1.0)\n    return Double(integer) + decimal", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let fraction = number % 1\n    let\
    \ integerPart = floor(number)\n    return integerPart + fraction", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let fraction = number % 1\n    return number - fraction",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n  \
    \  let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n    return\
    \ pow(10.0, Double(decimalPart)) * Double(integerPart)", "    let fraction = number\
    \ % 1\n    return number - fraction", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number - decimalPart)\n    return integerPart + decimalPart",
  "    let decimalPart = Double(trunc(number))\n    return Double(number) - decimalPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    return\
    \ trunc(number)", "    let decimalPart = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(number) - decimalPart", '    return Double(trunc(number))',
  "    let decimalPart = Double(number).truncatingRemainder(dividingBy: 1)\n    return\
    \ Double(number) - decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let decimalPart\
    \ = floor(log10(number))\n    let integerPart = number / pow(10.0, Double(decimalPart))\n\
    \    return integerPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let (integer, decimal)\
    \ = Double(number).truncatingRemainder(dividingBy: 1.0)\n    return Double(integer)\
    \ + decimal", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n\
    \    return Double(integer) + decimal", "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    if number < 0 {\n        return\
    \ -truncate_number(-number)\n    }\n    return trunc(number)", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ (decimalPart < 0.5 ? 0 : 1)", '    return truncate_number(number: number, digits:
    1)', '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let\
    \ decimalPart = Double(number).truncatingRemainder(dividingBy: 1)\n    return\
    \ Double(number) - decimalPart", '    return floor(number * 10) / 10', '    return
    truncate_number(number: number, digits: 0)', "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", "    let decimalPart = number % 1\n\
    \    let integerPart = floor(number / 1)\n    return integerPart * 1 + decimalPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ (decimalPart < 0.5 ? 0 : 1)", "    let decimalPart = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(number) - decimalPart", "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart * pow(10, Double(log10(Double(abs(decimalPart))) + 1))", "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number).rounded(.towardZero)\n\
    \    return integerPart + decimalPart", '    return truncate_number(number: number,
    scale: 0)', '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return
    Double(trunc(number))', "    let decimalPart = floor(log10(number))\n    let integerPart\
    \ = number / pow(10.0, Double(decimalPart))\n    return integerPart", '    return
    Double(trunc(number))', "    let fraction = number - truncate_number(Double(number))\n\
    \    return Double(fraction)", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return truncate_number(number: number, scale: 0)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number - decimalPart)\n    return\
    \ integerPart + decimalPart", "    let (integer, decimals) = truncate_number_with_precision(number:\
    \ number)\n    return Double(integer) + Double(decimals)", "    let decimalPart\
    \ = Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(number)\
    \ - decimalPart", "    let result = Double(trunc(number))\n    if result < number\
    \ {\n        return result + 1.0\n    }\n    return result", "    let (integer,\
    \ decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(integer)\
    \ + decimal", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", '    return truncate_number(number: number,
    digits: 0)', '    return Double(number).truncatingRemainder(dividingBy: 1)', " \
    \   let (integer, decimal) = Double.trunc(number)\n    return Double(integer)\
    \ + Double(decimal)", "    let decimalPart = number % 1\n    let integerPart =\
    \ floor(number * 10).rounded(.towardZero)\n    return integerPart + decimalPart",
  '    return Double(trunc(number))', '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let fraction = number - truncate_number(Double(number))\n    return\
    \ fraction", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number)\n    return integerPart + decimalPart", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number).rounded(.towardZero)\n    return integerPart.rounded(.towardZero)\
    \ + decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", '    return truncate_number(number: number,
    scale: 0)', '    return Double(trunc(number))', "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number - decimalPart)\n\
    \    return integerPart + decimalPart", '    return Double(trunc(number))', '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number - decimalPart)\n    return integerPart\
    \ + decimalPart", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let decimalPart = Double(number).truncatingRemainder(dividingBy: 1)\n    return\
    \ Double(number) - decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = floor(log10(number))\n    let integerPart = number\
    \ / pow(10.0, Double(decimalPart))\n    return integerPart", "    let fraction\
    \ = number % 1\n    return number - fraction", '    return Double(trunc(number))',
  '    return truncate_number(number: number, scale: 0)', "    let decimalPart = floor(log10(number)\
    \ + 1)\n    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n\
    \    return Double(integerPart) / pow(10.0, Double(decimalPart))", '    return
    Double(trunc(number))', '    return Double(trunc(number))', "    let decimalPart\
    \ = Double(number).truncatingRemainder(dividingBy: 1)\n    let integerPart = Double(number).truncatingRemainder(dividingBy:\
    \ Double(10).pow(Double(10)))\n    return Double(integerPart) / Double(10).pow(Double(10)\
    \ - Double(decimalPart))", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number) - 1\n    return integerPart + decimalPart", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    if number == 0 {\n        return 0.0\n    }\n    var decimalPart =\
    \ number % 1\n    if decimalPart < 0.5 {\n        return number\n    }\n    return\
    \ number - decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + (decimalPart < 0.5 ? 0 : 1)", "  \
    \  let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n  \
    \  let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  '    return floor(number * pow(10, Double(trunc(log10(number)))))', '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(number) - decimalPart", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart *\
    \ pow(10, Double(log10(Double(abs(number))))) + decimalPart", "    let (integer,\
    \ decimals) = truncate_number_helper(number)\n    return Double(integer) + Double(decimals)",
  '    return truncate_number(number: number, scale: 0)', "    let fraction = number\
    \ % 1\n    return number - fraction", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number).rounded(.towardZero)\n    return integerPart\
    \ + decimalPart", "    let decimalPart = Double(trunc(number))\n    return number\
    \ - decimalPart", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let integerPart = floor(number)\n    let decimalPart = number - integerPart\n\
    \    return decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + (decimalPart < 0.5 ? 0 : 1)", "  \
    \  let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n  \
    \  let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  "    let fraction = number % 1\n    return Double(number) - fraction", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  '    return Double(trunc(number))', '    return Double(trunc(number))', "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number)\n    return integerPart\
    \ + decimalPart", "    let decimalPart = number % 1\n    return Double(number)\
    \ - decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number - decimalPart)\n    return integerPart + decimalPart",
  "    let decimalPart = number % 1\n    return number - decimalPart", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let (integer, decimals) = truncate_number_with_precision(number:\
    \ number)\n    return Double(integer) + Double(decimals)", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart"]
stop_tokens:
- "\n}"
