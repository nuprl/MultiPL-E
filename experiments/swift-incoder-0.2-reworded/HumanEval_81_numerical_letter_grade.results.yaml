language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    for grade in grades {\n        gpa = grade * 4.0\n        gradesArray.append(String(format:\
    \ \"%.1f\", gpa))\n    }\n    if gpa > 3.0 {\n        gradesArray.removeFirst()\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvbzgmv83.swift:29:28: error: no exact matches in call to initializer\
    \ \n        gradesArray.append(String(format: \"%.1f\", gpa))\n              \
    \             ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmpvbzgmv83.swift:29:28:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        gradesArray.append(String(format: \"%.1f\", gpa))\n          \
    \                 ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj3vr85q.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpbj3vr85q.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpbj3vr85q.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpbj3vr85q.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfSquareOfSumOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfSquareOfSumOfSquareOfSum = grades.reduce(0, combine: +)\n\
    \    var gpaSumOfSquareOfSumOfSquareOfSumOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOf\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpicl5shrh.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpicl5shrh.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpicl5shrh.swift:28:40: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumOfSquares = grades.reduce(0, combine: +)\n\
    \                                       ^   ~~~~~~~~~\n                      \
    \                     \n/tmp/tmpicl5shrh.swift:29:44: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumOfSquareOfSum = grades.reduce(0, combine:\
    \ +)\n                                           ^   ~~~~~~~~~\n             \
    \                                  \n/tmp/tmpicl5shrh.swift:30:53: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumOfSquareOfSumOfSquares = grades.reduce(0,\
    \ combine: +)\n                                                    ^   ~~~~~~~~~\n\
    \                                                        \n/tmp/tmpicl5shrh.swift:31:57:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n                                           \
    \             ^   ~~~~~~~~~\n                                                \
    \            \n/tmp/tmpicl5shrh.swift:32:66: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquares = grades.reduce(0,\
    \ combine: +)\n                                                              \
    \   ^   ~~~~~~~~~\n                                                          \
    \           \n/tmp/tmpicl5shrh.swift:33:70: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = grades.reduce(0,\
    \ combine: +)\n                                                              \
    \       ^   ~~~~~~~~~\n                                           "
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSum2 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff2 = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff3 = grades.reduce(0, combine: +)\n    var gpaSum4\
    \ = grades.reduce(0, combine: +)\n    var gpaDiff4 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum5 = grades.reduce(0, combine: +)\n    var gpaDiff5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaDiff6\
    \ = grades.reduce(0, combine: +)\n    var gpaSum7 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff7 = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff8 = grades.reduce(0, combine: +)\n    var gpaSum9\
    \ = grades.reduce(0, combine: +)\n    var gpaDiff9 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum10 = grades.reduce(0, combine: +)\n    var gpaDiff10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaDiff11\
    \ = grades.reduce(0, combine: +)\n    var gpaSum12 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff12 = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff13 = grades.reduce(0, combine: +)\n    var gpaSum14\
    \ = grades.reduce(0, combine: +)\n    var gpaDiff14 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum15 = grades.reduce(0, combine: +)\n    var gpaDiff15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaDiff16\
    \ = grades.reduce(0, combine: +)\n    var gpaSum17 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff17 = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff18 = grades.reduce(0, combine: +)\n    var gpaSum19\
    \ = grades.reduce(0, combine\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsxybq2mh.swift:64:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpsxybq2mh.swift:63:33: note: to match this opening '('\n    var gpaSum19\
    \ = grades.reduce(0, combine\n                                ^\n/tmp/tmpsxybq2mh.swift:26:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmpsxybq2mh.swift:27:31: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum = grades.reduce(0, combine: +)\n                   \
    \           ^   ~~~~~~~~~\n                                  \n/tmp/tmpsxybq2mh.swift:28:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiff = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpsxybq2mh.swift:29:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpsxybq2mh.swift:30:33: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaDiff2 = grades.reduce(0, combine: +)\n                 \
    \               ^   ~~~~~~~~~\n                                    \n/tmp/tmpsxybq2mh.swift:31:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum3 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpsxybq2mh.swift:32:33: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiff3 = grades.reduce(0, combine: +)\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n/tmp/tmpsxybq2mh.swift:33:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum4 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpsxybq2mh.swift:34:33:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiff4 = grades.reduce(0,\
    \ combine: +)\n                                ^  "
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \        \n        if gpa > 3.7 {\n            letterGrade = letterGrade + \"\
    +\"\n        }\n        else if gpa > 3.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else if gpa > 2.7 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 2.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else if gpa > 1.7 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 1.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else if gpa > 1.0 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 0.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else {\n            letterGrade = letterGrade +\
    \ \"-\"\n        }\n    }\n    \n    gradesArray.append(letterGrade)\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3xnhbwzu/tmp3xnhbwzu.swift:79: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4497214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4496f0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4496f0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4496f0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xnhbwzu                        0x000055ed3133b8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b4497400460 __libc_start_main +
    245

    6    tmp3xnhbwzu                        0x000055ed3133b3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    var letterGradeIndex = 0\n    \n    for index\
    \ in 0..<grades.count {\n        if gpa > grades[index] {\n            letterGradeIndex\
    \ += 1\n            letterGrade = letterGrades[letterGradeIndex]\n        } else\
    \ {\n            letterGradeIndex -= 1\n            letterGrade = letterGrades[letterGradeIndex]\n\
    \        }\n        gpa -= grades[index]\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptnsbkqim.swift:33:27: error: cannot find 'letterGrades' in scope\n\
    \            letterGrade = letterGrades[letterGradeIndex]\n                  \
    \        ^~~~~~~~~~~~\n/tmp/tmptnsbkqim.swift:36:27: error: cannot find 'letterGrades'\
    \ in scope\n            letterGrade = letterGrades[letterGradeIndex]\n       \
    \                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n     \
    \   if gpa > 3.7 {\n            letterGrade = letterGrade + \"+\"\n        }\n\
    \        if gpa > 3.3 {\n            letterGrade = letterGrade + \"-\"\n     \
    \   }\n        if gpa > 3.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        }\n        if gpa > 2.7 {\n            letterGrade = letterGrade + \"\
    +\"\n        }\n        if gpa > 2.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa > 2.0 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        if gpa > 1.7 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        if gpa > 1.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa > 1.0 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        if gpa > 0.7 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        if gpa > 0.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 0.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 0.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 1.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 1.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 1.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 2.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 2.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 2.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 3.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 3.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 3.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        if gpa < 4.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsxbr7azr.swift:119:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpsxbr7azr.swift:28:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpsxbr7azr.swift:119:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpsxbr7azr.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpsxbr7azr.swift:102:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpsxbr7azr.swift:25:9: warning: variable 'gradesArray'\
    \ was never used; consider replacing with '_' or removing it\n    var gradesArray:\
    \ [String] = []\n        ^~~~~~~~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n       \
    \ } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n        } else\
    \ if grade > 0.7 {\n            gradesArray.append(\"C\")\n        } else if grade\
    \ > 0.3 {\n            gradesArray.append(\"C-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"D+\")\n        } else if grade > 0.0 {\n\
    \            gradesArray.append(\"D\")\n        } else if grade > 0.0 {\n    \
    \        gradesArray.append(\"D-\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpa58c13y5/tmpa58c13y5.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ebb00fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ebad06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ebad06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ebad057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa58c13y5                        0x0000561ca008f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5ebb1fb460 __libc_start_main +
    245

    6    tmpa58c13y5                        0x0000561ca008f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    for grade in grades {\n        if grade > gpa\
    \ {\n            letterGrade = \"D-\"\n        } else if grade > 3.0 {\n     \
    \       letterGrade = \"C+\"\n        } else if grade > 2.7 {\n            letterGrade\
    \ = \"B+\"\n        } else if grade > 2.3 {\n            letterGrade = \"B\"\n\
    \        } else if grade > 2.0 {\n            letterGrade = \"A-\"\n        }\
    \ else if grade > 1.7 {\n            letterGrade = \"A+\"\n        } else if grade\
    \ > 1.3 {\n            letterGrade = \"A\"\n        } else if grade > 1.0 {\n\
    \            letterGrade = \"A-\"\n        } else if grade > 0.7 {\n         \
    \   letterGrade = \"D+\"\n        } else if grade > 0.3 {\n            letterGrade\
    \ = \"D\"\n        } else if grade > 0.0 {\n            letterGrade = \"D-\"\n\
    \        } else {\n            letterGrade = \"E\"\n        }\n        gradesArray.append(letterGrade)\n\
    \        gpa = grade\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpln7cwmne/tmpln7cwmne.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f920a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f91da0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f91da0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f91d9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln7cwmne                        0x0000556e61258856 <unavailable> + 6230

    5    libc.so.6                          0x00002b7f92295460 __libc_start_main +
    245

    6    tmpln7cwmne                        0x0000556e61258379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Your\
    \ code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5a17vin_/tmp5a17vin_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0b6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0b3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0b3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0b3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a17vin_                        0x0000563bb1ee0636 <unavailable> + 5686

    5    libc.so.6                          0x00002aab0b8e6460 __libc_start_main +
    245

    6    tmp5a17vin_                        0x0000563bb1ee0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n       \
    \ } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n        } else\
    \ if grade > 0.7 {\n            gradesArray.append(\"C\")\n        } else if grade\
    \ > 0.3 {\n            gradesArray.append(\"C-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"D+\")\n        } else if grade > -0.3 {\n\
    \            gradesArray.append(\"D\")\n        } else if grade > -0.7 {\n   \
    \         gradesArray.append(\"D-\")\n        } else if grade > -1.0 {\n     \
    \       gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    F\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp68wkkyi8/tmp68wkkyi8.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd2ddcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd2ad3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd2ad3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd2ad27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68wkkyi8                        0x000055caad4ba7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abdd2fc8460 __libc_start_main +
    245

    6    tmp68wkkyi8                        0x000055caad4ba2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gpa = grades[0]\n    var letterGrade = \"\"\n    \n    for grade\
    \ in grades {\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n    \
    \    } else if gpa > 2.7 {\n            letterGrade = \"B+\"\n        } else if\
    \ gpa > 2.3 {\n            letterGrade = \"B\"\n        } else if gpa > 1.7 {\n\
    \            letterGrade = \"B-\"\n        } else if gpa > 1.0 {\n           \
    \ letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > -0.3 {\n            letterGrade = \"D\"\n        } else if gpa > -0.7\
    \ {\n            letterGrade = \"D-\"\n        } else if gpa > -1.0 {\n      \
    \      letterGrade = \"E\"\n        } else {\n            letterGrade = \"F\"\n\
    \        }\n        gradesArray[gradesArrayIndex] = letterGrade\n        gradesArrayIndex\
    \ += 1\n        gpa -= grade\n    }\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b32d6520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32d6217561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b32d6217286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b32d621713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b32d6216bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b32d60169a0 specialized Array.subscript.modify
    + 0

    6    tmprmihnb9h                        0x000055a8af6e34f8 <unavailable> + 9464

    7    tmprmihnb9h                        0x000055a8af6e26ad <unavailable> + 5805

    8    libc.so.6                          0x00002b32d670c460 __libc_start_main +
    245

    9    tmprmihnb9h                        0x000055a8af6e2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.1:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"E\")\n        }\n  \
    \  }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpaxh5be6h/tmpaxh5be6h.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9364fddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9364cd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9364cd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9364cd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxh5be6h                        0x00005588188e27f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b93651c9460 __libc_start_main +
    245

    6    tmpaxh5be6h                        0x00005588188e2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj3vr85q.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpbj3vr85q.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpbj3vr85q.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpbj3vr85q.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if gpa > 1.3 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if gpa > 0.0\
    \ {\n            letterGrades.append(\"D\")\n        } else if gpa > 0.0 {\n \
    \           letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpocl7_gp0/tmpocl7_gp0.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc04a67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc0475eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc0475e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc0475d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocl7_gp0                        0x0000562b4a720856 <unavailable> + 6230

    5    libc.so.6                          0x00002acc04c53460 __libc_start_main +
    245

    6    tmpocl7_gp0                        0x0000562b4a720379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 2 {\n        return letterGrades\n    }\n    \n    let gradesSum = grades.reduce(0,\
    \ combine: +)\n    \n    if gradesSum < 4.0 {\n        letterGrades.append(\"\
    A+\")\n    }\n    else if gradesSum < 3.7 {\n        letterGrades.append(\"A\"\
    )\n    }\n    else if gradesSum < 3.3 {\n        letterGrades.append(\"A-\")\n\
    \    }\n    else if gradesSum < 3.0 {\n        letterGrades.append(\"B+\")\n \
    \   }\n    else if gradesSum < 2.7 {\n        letterGrades.append(\"B\")\n   \
    \ }\n    else if gradesSum < 2.3 {\n        letterGrades.append(\"B-\")\n    }\n\
    \    else if gradesSum < 2.0 {\n        letterGrades.append(\"C+\")\n    }\n \
    \   else if gradesSum < 1.7 {\n        letterGrades.append(\"C\")\n    }\n   \
    \ else if gradesSum < 1.3 {\n        letterGrades.append(\"C-\")\n    }\n    else\
    \ if gradesSum < 1.0 {\n        letterGrades.append(\"D+\")\n    }\n    else if\
    \ gradesSum < 0.7 {\n        letterGrades.append(\"D\")\n    }\n    else if gradesSum\
    \ < 0.0 {\n        letterGrades.append(\"D-\")\n    }\n    else {\n        letterGrades.append(\"\
    E\")\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9q4uuqt6.swift:31:34: error: extraneous argument label 'combine:'\
    \ in call\n    let gradesSum = grades.reduce(0, combine: +)\n                \
    \                 ^   ~~~~~~~~~\n                                     \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    var gradeIndex = 0\n    var letterIndex\
    \ = 0\n    while gpa > 0 {\n        letterGrade = letterGrade.uppercased()\n \
    \       if gpa >= 3.0 {\n            letterGrade = \"\\(letterGrade)+\"\n    \
    \        letterIndex += 1\n        }\n        if gpa >= 2.7 {\n            letterGrade\
    \ = \"\\(letterGrade)+\"\n            letterIndex += 1\n        }\n        if\
    \ gpa >= 2.3 {\n            letterGrade = \"\\(letterGrade)-\"\n            letterIndex\
    \ += 1\n        }\n        if gpa >= 1.7 {\n            letterGrade = \"\\(letterGrade)+\"\
    \n            letterIndex += 1\n        }\n        if gpa >= 1.3 {\n         \
    \   letterGrade = \"\\(letterGrade)-\"\n            letterIndex += 1\n       \
    \ }\n        if gpa >= 0.7 {\n            letterGrade = \"\\(letterGrade)+\"\n\
    \            letterIndex += 1\n        }\n        if gpa >= 0.3 {\n          \
    \  letterGrade = \"\\(letterGrade)-\"\n            letterIndex += 1\n        }\n\
    \        if gpa >= 0.0 {\n            letterGrade = \"\\(letterGrade)+\"\n   \
    \         letterIndex += 1\n        }\n        if gpa < 0.0 {\n            letterGrade\
    \ = \"\\(letterGrade)-\"\n            letterIndex += 1\n        }\n        if\
    \ letterIndex == 2 {\n            letterGrade = \"\\(letterGrade)\"\n        \
    \    letterIndex = 0\n        }\n        gpa -= letterGrade\n        gradeIndex\
    \ += 1\n    }\n    gradesArray = grades.map { \"\\($0)\" }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaonb5c6b.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpaonb5c6b.swift:72:13:\
    \ error: binary operator '-=' cannot be applied to operands of type 'Duration'\
    \ and 'String'\n        gpa -= letterGrade\n        ~~~ ^  ~~~~~~~~~~~\n/tmp/tmpaonb5c6b.swift:72:13:\
    \ note: overloads for '-=' exist with these partially matching parameter lists:\
    \ (inout ContinuousClock.Instant, Duration), (inout Double, Double), (inout Duration,\
    \ Duration), (inout Float, Float), (inout Float16, Float16), (inout Float80, Float80),\
    \ (inout Int, Int), (inout Int16, Int16), (inout Int32, Int32), (inout Int64,\
    \ Int64), (inout Int8, Int8), (inout SuspendingClock.Instant, Duration), (inout\
    \ UInt, UInt), (inout UInt16, UInt16), (inout UInt32, UInt32), (inout UInt64,\
    \ UInt64), (inout UInt8, UInt8)\n        gpa -= letterGrade\n            ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    var letterGradeIndex = 0\n    while gpa\
    \ > 0 {\n        let gpaIndex = grades.firstIndex(where: { $0 >= gpa })!\n   \
    \     let letterGrade = grades[gpaIndex].description\n        letterGrades.append(letterGrade)\n\
    \        gpa -= grades[gpaIndex]\n    }\n    return letterGrades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp54nkya0v.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum = grades.reduce(0, combine: +)\n    var gpaSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiff = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSum = grades.reduce(0, combine: +)\n \
    \   var gpaSumDiffSumDiffSumDiff = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine: +)\n\
    \    var gpaSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine: +)\n \
    \   var gpaSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0, combine: +)\n\
    \    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff =\
    \ grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiff\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk7lqanzs.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpk7lqanzs.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpk7lqanzs.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiff = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpk7lqanzs.swift:29:35: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumDiff = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmpk7lqanzs.swift:30:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSum = grades.reduce(0,\
    \ combine: +)\n                                  ^   ~~~~~~~~~\n             \
    \                         \n/tmp/tmpk7lqanzs.swift:31:38: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumDiffSum = grades.reduce(0, combine:\
    \ +)\n                                     ^   ~~~~~~~~~\n                   \
    \                      \n/tmp/tmpk7lqanzs.swift:32:39: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n                                      ^   ~~~~~~~~~\n                  \
    \                        \n/tmp/tmpk7lqanzs.swift:33:42: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n                                         ^   ~~~~~~~~~\n               \
    \                              \n/tmp/tmpk7lqanzs.swift:34:42: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n                                         ^   ~~~~~~~~~\n      \
    \                                       \n/tmp/tmpk7lqanzs.swift:35:45: error:\
    \ extraneous argument"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B+\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade =\
    \ \"A\"\n    } else if gpa < 1.0 {\n        letterGrade = \"C\"\n    } else if\
    \ gpa < 0.7 {\n        letterGrade = \"C+\"\n    } else if gpa < 0.3 {\n     \
    \   letterGrade = \"B-\"\n    } else if gpa < 0.0 {\n        letterGrade = \"\
    D+\"\n    } else {\n        letterGrade = \"D\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9gmxqnw1.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ 3.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.0 {\n   \
    \         letterGrade = \"B\"\n        } else if gpa > 1.7 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.0 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > -0.3 {\n      \
    \      letterGrade = \"D\"\n        } else if gpa > -0.7 {\n            letterGrade\
    \ = \"D-\"\n        } else if gpa > -1.0 {\n            letterGrade = \"E\"\n\
    \        } else {\n            letterGrade = \"F\"\n        }\n        \n    \
    \    gpa -= grade\n        gradesArray.append(letterGrade)\n    }\n    \n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpor7xnar6/tmpor7xnar6.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0c12ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0c0fc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0c0fc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0c0fc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpor7xnar6                        0x0000556e67df3856 <unavailable> + 6230

    5    libc.so.6                          0x00002ab0c14b8460 __libc_start_main +
    245

    6    tmpor7xnar6                        0x0000556e67df3379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2fndym9s/tmp2fndym9s.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ae3834c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ae352bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ae352b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ae352a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fndym9s                        0x0000556ffffac7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b4ae3a20460 __libc_start_main +
    245

    6    tmp2fndym9s                        0x0000556ffffac319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGrade\
    \ = grades.first!\n    var currentLetterGrade = \"\"\n    \n    for grade in grades\
    \ {\n        if grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        \n        if grade == currentGrade {\n            currentLetterGrade\
    \ += String(grade - currentGrade)\n        }\n    }\n    \n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp79qakvjj/tmp79qakvjj.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0caaf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ca7e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ca7e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ca7e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79qakvjj                        0x0000557f28272a06 <unavailable> + 6662

    5    libc.so.6                          0x00002af0cacde460 __libc_start_main +
    245

    6    tmp79qakvjj                        0x0000557f28272529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    var currentLetterGrade = \"\"\n    \n    for grade in grades {\n        if\
    \ gpa > grade {\n            letterGrades.append(currentLetterGrade)\n       \
    \     gpa = grade\n            currentLetterGrade = \"\"\n        } else {\n \
    \           currentLetterGrade = \"\\(grade)\" + currentLetterGrade\n        }\n\
    \    }\n    letterGrades.append(currentLetterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpltq19yfa/tmpltq19yfa.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8305b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8302abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8302ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8302aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltq19yfa                        0x000055918fc3ab76 <unavailable> + 7030

    5    libc.so.6                          0x00002ac8307a0460 __libc_start_main +
    245

    6    tmpltq19yfa                        0x000055918fc3a699 <unavailable> + 5785

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = gpa * 4\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 3.7\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 3.3\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 3.0\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 2.7\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 2.3\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 2.0\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 1.7\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 1.3\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 1.0\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 0.7\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    gpa = grades.reduce(0, combine: +)\n    letterGrade = gpa * 0.0\n    letterGrades.append(letterGrade.description.uppercased())\n\
    \    letterGrades.append(letterGrade.description.uppercased())\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps2ieohoa.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmps2ieohoa.swift:29:24:\
    \ error: extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0,\
    \ combine: +)\n                       ^   ~~~~~~~~~\n                        \
    \   \n/tmp/tmps2ieohoa.swift:32:24: error: extraneous argument label 'combine:'\
    \ in call\n    gpa = grades.reduce(0, combine: +)\n                       ^  \
    \ ~~~~~~~~~\n                           \n/tmp/tmps2ieohoa.swift:35:24: error:\
    \ extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0, combine:\
    \ +)\n                       ^   ~~~~~~~~~\n                           \n/tmp/tmps2ieohoa.swift:38:24:\
    \ error: extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0,\
    \ combine: +)\n                       ^   ~~~~~~~~~\n                        \
    \   \n/tmp/tmps2ieohoa.swift:41:24: error: extraneous argument label 'combine:'\
    \ in call\n    gpa = grades.reduce(0, combine: +)\n                       ^  \
    \ ~~~~~~~~~\n                           \n/tmp/tmps2ieohoa.swift:44:24: error:\
    \ extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0, combine:\
    \ +)\n                       ^   ~~~~~~~~~\n                           \n/tmp/tmps2ieohoa.swift:47:24:\
    \ error: extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0,\
    \ combine: +)\n                       ^   ~~~~~~~~~\n                        \
    \   \n/tmp/tmps2ieohoa.swift:50:24: error: extraneous argument label 'combine:'\
    \ in call\n    gpa = grades.reduce(0, combine: +)\n                       ^  \
    \ ~~~~~~~~~\n                           \n/tmp/tmps2ieohoa.swift:53:24: error:\
    \ extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0, combine:\
    \ +)\n                       ^   ~~~~~~~~~\n                           \n/tmp/tmps2ieohoa.swift:56:24:\
    \ error: extraneous argument label 'combine:' in call\n    gpa = grades.reduce(0,\
    \ combine: +)\n                       ^   ~~~~~~~~~\n                  "
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var gradesArrayLength = gradesArray.count\n    var letterGrades = [String]()\n\
    \    var letterGrade = \"\"\n    var gpa = gradesArray[0]\n    var letterGradeIndex\
    \ = 0\n    var letterGradeIndex2 = 0\n    var letterGradeIndex3 = 0\n    var letterGradeIndex4\
    \ = 0\n    var letterGradeIndex5 = 0\n    var letterGradeIndex6 = 0\n    var letterGradeIndex7\
    \ = 0\n    var letterGradeIndex8 = 0\n    var letterGradeIndex9 = 0\n    var letterGradeIndex10\
    \ = 0\n    var letterGradeIndex11 = 0\n    var letterGradeIndex12 = 0\n    var\
    \ letterGradeIndex13 = 0\n    var letterGradeIndex14 = 0\n    var letterGradeIndex15\
    \ = 0\n    var letterGradeIndex16 = 0\n    var letterGradeIndex17 = 0\n    var\
    \ letterGradeIndex18 = 0\n    var letterGradeIndex19 = 0\n    var letterGradeIndex20\
    \ = 0\n    var letterGradeIndex21 = 0\n    var letterGradeIndex22 = 0\n    var\
    \ letterGradeIndex23 = 0\n    var letterGradeIndex24 = 0\n    var letterGradeIndex25\
    \ = 0\n    var letterGradeIndex26 = 0\n    var letterGradeIndex27 = 0\n    var\
    \ letterGradeIndex28 = 0\n    var letterGradeIndex29 = 0\n    var letterGradeIndex30\
    \ = 0\n    var letterGradeIndex31 = 0\n    var letterGradeIndex32 = 0\n    var\
    \ letterGradeIndex33 = 0\n    var letterGradeIndex34 = 0\n    var letterGradeIndex35\
    \ = 0\n    var letterGradeIndex36 = 0\n    var letterGradeIndex37 = 0\n    var\
    \ letterGradeIndex38 = 0\n    var letterGradeIndex39 = 0\n    var letterGradeIndex40\
    \ = 0\n    var letterGradeIndex41 = 0\n    var letterGradeIndex42 = 0\n    var\
    \ letterGradeIndex43 = 0\n    var letterGradeIndex44 = 0\n    var letterGradeIndex45\
    \ = 0\n    var letterGradeIndex46 = 0\n    var letterGradeIndex47 = 0\n    var\
    \ letterGradeIndex48 = 0\n    var letterGradeIndex49 = 0\n    var letterGradeIndex50\
    \ = 0\n    var letterGradeIndex51 = 0\n    var letterGradeIndex52 = 0\n    var\
    \ letterGradeIndex53 = 0\n    var letterGradeIndex54 = 0\n    var letterGradeIndex55\
    \ = 0\n    var letterGradeIndex56 = 0\n    var letterGradeIndex57 = 0\n    var\
    \ letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjh4hoo77.swift:88:9: error: type annotation missing in pattern\n\
    \    var letterGrade\n        ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz384oy2d.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmbqzuho2.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = -1\n    var letterGradeIndex = -1\n    var letterGrade\
    \ = \"\"\n    \n    for _ in grades {\n        gpaIndex += 1\n        if gpa >=\
    \ grades[gpaIndex] {\n            letterGradeIndex += 1\n            letterGrade\
    \ = letterGrades[letterGradeIndex]\n        }\n        gpa -= grades[gpaIndex]\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8txnkebv.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 3.0:\n            gradesArray.append(\"\
    A+\")\n        case 2.7:\n            gradesArray.append(\"B\")\n        case\
    \ 2.3:\n            gradesArray.append(\"B-\")\n        case 2.0:\n          \
    \  gradesArray.append(\"C+\")\n        case 1.7:\n            gradesArray.append(\"\
    C\")\n        case 1.3:\n            gradesArray.append(\"C-\")\n        case\
    \ 1.0:\n            gradesArray.append(\"D+\")\n        case 0.7:\n          \
    \  gradesArray.append(\"D\")\n        case 0.0:\n            gradesArray.append(\"\
    D-\")\n        case 0.3:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0vm4bdyu/tmp0vm4bdyu.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc7a4d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc7a1ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc7a1ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc7a1cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vm4bdyu                        0x000055e0015987f6 <unavailable> + 6134

    5    libc.so.6                          0x00002afc7a6c3460 __libc_start_main +
    245

    6    tmp0vm4bdyu                        0x000055e001598319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8xhlyss3/tmp8xhlyss3.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae88e1f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae88dee9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae88dee9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae88dee87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xhlyss3                        0x000055748a18b7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae88e3de460 __libc_start_main +
    245

    6    tmp8xhlyss3                        0x000055748a18b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSum2 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff2 = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff3 = grades.reduce(0, combine: +)\n    var gpaSum4\
    \ = grades.reduce(0, combine: +)\n    var gpaDiff4 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum5 = grades.reduce(0, combine: +)\n    var gpaDiff5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaDiff6\
    \ = grades.reduce(0, combine: +)\n    var gpaSum7 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff7 = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff8 = grades.reduce(0, combine: +)\n    var gpaSum9\
    \ = grades.reduce(0, combine: +)\n    var gpaDiff9 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum10 = grades.reduce(0, combine: +)\n    var gpaDiff10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaDiff11\
    \ = grades.reduce(0, combine: +)\n    var gpaSum12 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff12 = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff13 = grades.reduce(0, combine: +)\n    var gpaSum14\
    \ = grades.reduce(0, combine: +)\n    var gpaDiff14 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum15 = grades.reduce(0, combine: +)\n    var gpaDiff15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaDiff16\
    \ = grades.reduce(0, combine: +)\n    var gpaSum17 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiff17 = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0,\
    \ combine: +)\n    var gpaDiff18 = grades.reduce(0, combine: +)\n    var gpaSum19\
    \ = grades.reduce(0, combine\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsxybq2mh.swift:64:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpsxybq2mh.swift:63:33: note: to match this opening '('\n    var gpaSum19\
    \ = grades.reduce(0, combine\n                                ^\n/tmp/tmpsxybq2mh.swift:26:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmpsxybq2mh.swift:27:31: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum = grades.reduce(0, combine: +)\n                   \
    \           ^   ~~~~~~~~~\n                                  \n/tmp/tmpsxybq2mh.swift:28:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiff = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpsxybq2mh.swift:29:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpsxybq2mh.swift:30:33: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaDiff2 = grades.reduce(0, combine: +)\n                 \
    \               ^   ~~~~~~~~~\n                                    \n/tmp/tmpsxybq2mh.swift:31:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum3 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpsxybq2mh.swift:32:33: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiff3 = grades.reduce(0, combine: +)\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n/tmp/tmpsxybq2mh.swift:33:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum4 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpsxybq2mh.swift:34:33:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiff4 = grades.reduce(0,\
    \ combine: +)\n                                ^  "
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopyCount = gradesArray.count\n    var gradesArrayCopyIndex\
    \ = 0\n    var gradesArrayCopyIndexCount = 0\n    var gradesArrayCopyIndexCountMax\
    \ = gradesArrayCopyIndexCount\n    var gradesArrayCopyIndexCountMin = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyIndexCount\n    var\
    \ gradesArrayCopyIndexCountMaxMin = gradesArrayCopyIndexCount\n    var gradesArrayCopyIndexCountMinMaxMax\
    \ = gradesArrayCopyIndexCount\n    var gradesArrayCopyIndexCountMaxMinMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMax = gradesArrayCopyIndexCount\n \
    \   var gradesArrayCopyIndexCountMinMaxMaxMax = gradesArrayCopyIndexCount\n  \
    \  var gradesArrayCopyIndexCountMinMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax =\
    \ gradesArrayCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp27r8xs5d.swift:37:9: error: invalid redeclaration of 'gradesArrayCopyIndexCountMinMaxMaxMax'\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMax = gradesArrayCopyIndexCount\n \
    \       ^\n/tmp/tmp27r8xs5d.swift:36:9: note: 'gradesArrayCopyIndexCountMinMaxMaxMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMaxMaxMax = gradesArrayCopyIndexCount\n\
    \        ^\n/tmp/tmp27r8xs5d.swift:45:9: error: invalid redeclaration of 'gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \        ^\n/tmp/tmp27r8xs5d.swift:44:9: note: 'gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = gradesArrayCopyIndexCount\n        ^\n/tmp/tmp27r8xs5d.swift:48:9: error:\
    \ invalid redeclaration of 'gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \        ^\n/tmp/tmp27r8xs5d.swift:47:9: note: 'gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = gradesArrayCopyIndexCount\n        ^\n/tmp/tmp27r8xs5d.swift:49:9: error:\
    \ invalid redeclaration of 'gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\n\
    \    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayCopyIndexCount\n\
    \        ^\n/tmp/tmp27r8xs5d.swift:47:9: note: 'gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = gradesArrayCopyIndexCount\n        ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGPA\
    \ = grades[0]\n    var currentLetterGrade = \"E\"\n    for grade in grades {\n\
    \        if grade > currentGPA {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentLetterGrade = \"E\"\n            currentGPA = grade\n    \
    \    } else if grade == currentGPA {\n            currentLetterGrade = \"D+\"\n\
    \        } else if grade < currentGPA {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentLetterGrade = \"E\"\n            currentGPA = grade\n    \
    \    } else {\n            currentLetterGrade = \"D-\"\n        }\n    }\n   \
    \ letterGrades.append(currentLetterGrade)\n    return letterGrades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdgpd5hwr/tmpdgpd5hwr.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa8dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa8dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdgpd5hwr                        0x000055ec85c65856 <unavailable> + 6230

    5    libc.so.6                          0x00002afa8dff2460 __libc_start_main +
    245

    6    tmpdgpd5hwr                        0x000055ec85c65379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters: [String] = []\n    for grade\
    \ in grades {\n        let letterGrade = gradeToLetterGrade(grade)\n        gradeLetters.append(letterGrade)\n\
    \    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphnl3rmo6.swift:27:27: error: cannot find 'gradeToLetterGrade' in\
    \ scope\n        let letterGrade = gradeToLetterGrade(grade)\n               \
    \           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpierc9gr2/tmpierc9gr2.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54c4dffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54c4af6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54c4af6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54c4af57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpierc9gr2                        0x00005599137117f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b54c4feb460 __libc_start_main +
    245

    6    tmpierc9gr2                        0x0000559913711319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 2 {\n        return letterGrades\n    }\n    \n    let gpa = grades.reduce(0,\
    \ combine: {$0 + $1})\n    let gpaRange = GPARange(gpa: gpa, min: GPARange.minGPA,\
    \ max: GPARange.maxGPA)\n    \n    if gpaRange.min == gpaRange.max {\n       \
    \ letterGrades.append(\"E\")\n        return letterGrades\n    }\n    \n    let\
    \ gpaRangeCount = gpaRange.max - gpaRange.min + 1\n    \n    if gpaRangeCount\
    \ > 0 {\n        let gpaRangeSum = grades.reduce(0.0, combine: {$0 + $1})\n  \
    \      let gpaRangeSumCount = gpaRangeSum / gpaRangeCount\n        \n        if\
    \ gpaRangeSumCount < 0.5 {\n            letterGrades.append(\"D+\")\n        }\
    \ else if gpaRangeSumCount < 0.75 {\n            letterGrades.append(\"D\")\n\
    \        } else if gpaRangeSumCount < 0.9 {\n            letterGrades.append(\"\
    C-\")\n        } else if gpaRangeSumCount < 1.1 {\n            letterGrades.append(\"\
    C\")\n        } else if gpaRangeSumCount < 1.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if gpaRangeSumCount < 1.5 {\n            letterGrades.append(\"\
    B\")\n        } else if gpaRangeSumCount < 1.7 {\n            letterGrades.append(\"\
    A-\")\n        } else if gpaRangeSumCount < 1.9 {\n            letterGrades.append(\"\
    A\")\n        } else if gpaRangeSumCount < 2.1 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpaRangeSumCount < 2.3 {\n            letterGrades.append(\"\
    A\")\n        } else {\n            letterGrades.append(\"A\")\n        }\n  \
    \  }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1wu85maj.swift:31:28: error: extraneous argument label 'combine:'\
    \ in call\n    let gpa = grades.reduce(0, combine: {$0 + $1})\n              \
    \             ^   ~~~~~~~~~\n                               \n/tmp/tmp1wu85maj.swift:32:20:\
    \ error: cannot find 'GPARange' in scope\n    let gpaRange = GPARange(gpa: gpa,\
    \ min: GPARange.minGPA, max: GPARange.maxGPA)\n                   ^~~~~~~~\n/tmp/tmp1wu85maj.swift:32:44:\
    \ error: cannot find 'GPARange' in scope\n    let gpaRange = GPARange(gpa: gpa,\
    \ min: GPARange.minGPA, max: GPARange.maxGPA)\n                              \
    \             ^~~~~~~~\n/tmp/tmp1wu85maj.swift:32:66: error: cannot find 'GPARange'\
    \ in scope\n    let gpaRange = GPARange(gpa: gpa, min: GPARange.minGPA, max: GPARange.maxGPA)\n\
    \                                                                 ^~~~~~~~\n/tmp/tmp1wu85maj.swift:42:40:\
    \ error: extraneous argument label 'combine:' in call\n        let gpaRangeSum\
    \ = grades.reduce(0.0, combine: {$0 + $1})\n                                 \
    \      ^     ~~~~~~~~~\n                                             \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            gradesArray.append(\"A+\"\
    )\n        } else if grade < 3.3 {\n            gradesArray.append(\"A\")\n  \
    \      } else if grade < 3.7 {\n            gradesArray.append(\"A-\")\n     \
    \   } else if grade < 4.0 {\n            gradesArray.append(\"B+\")\n        }\
    \ else if grade < 4.3 {\n            gradesArray.append(\"B\")\n        } else\
    \ if grade < 4.7 {\n            gradesArray.append(\"B-\")\n        } else if\
    \ grade < 5.0 {\n            gradesArray.append(\"C+\")\n        } else if grade\
    \ < 5.3 {\n            gradesArray.append(\"C\")\n        } else if grade < 5.7\
    \ {\n            gradesArray.append(\"C-\")\n        } else if grade < 6.0 {\n\
    \            gradesArray.append(\"D+\")\n        } else if grade < 6.3 {\n   \
    \         gradesArray.append(\"D\")\n        } else if grade < 6.7 {\n       \
    \     gradesArray.append(\"D-\")\n        } else if grade < 7.0 {\n          \
    \  gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    D-\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvb6_e3k6/tmpvb6_e3k6.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1cd1b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ccea8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ccea8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ccea77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvb6_e3k6                        0x000055c9da86a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af1cd39d460 __libc_start_main +
    245

    6    tmpvb6_e3k6                        0x000055c9da86a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 2.0 {\n            gradesArray.append(\"A\")\n    \
    \    } else if grade > 1.0 {\n            gradesArray.append(\"B+\")\n       \
    \ } else if grade > 0.7 {\n            gradesArray.append(\"B\")\n        } else\
    \ if grade > 0.3 {\n            gradesArray.append(\"B-\")\n        } else if\
    \ grade > 0.0 {\n            gradesArray.append(\"C+\")\n        } else if grade\
    \ > -0.3 {\n            gradesArray.append(\"C\")\n        } else if grade > -0.7\
    \ {\n            gradesArray.append(\"C-\")\n        } else if grade > -1.0 {\n\
    \            gradesArray.append(\"D+\")\n        } else if grade > -1.7 {\n  \
    \          gradesArray.append(\"D\")\n        } else if grade > -2.0 {\n     \
    \       gradesArray.append(\"D-\")\n        } else if grade > -3.0 {\n       \
    \     gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpjl3okyvk/tmpjl3okyvk.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4bba22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4bb719b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4bb719988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4bb7187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjl3okyvk                        0x000055b274c437a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af4bbc0e460 __libc_start_main +
    245

    6    tmpjl3okyvk                        0x000055b274c432c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"A-\")\n    \
    \    } else if gpa > 1.3 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if gpa > 1.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if gpa > 1.0 {\n            letterGrades.append(\"B-\")\n        } else if gpa\
    \ > 0.7 {\n            letterGrades.append(\"C+\")\n        } else if gpa > 0.3\
    \ {\n            letterGrades.append(\"C\")\n        } else if gpa > 0.0 {\n \
    \           letterGrades.append(\"C-\")\n        } else if gpa > 0.0 {\n     \
    \       letterGrades.append(\"D+\")\n        } else if gpa > 0.0 {\n         \
    \   letterGrades.append(\"D\")\n        } else if gpa > 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \       gpa -= grade\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2xdprsta/tmp2xdprsta.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b449a91ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b449a611b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b449a611988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b449a6107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xdprsta                        0x000055e9bc5ed856 <unavailable> + 6230

    5    libc.so.6                          0x00002b449ab06460 __libc_start_main +
    245

    6    tmp2xdprsta                        0x000055e9bc5ed379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + letterGradeMap[gpa]\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuqk42shb.swift:31:37: error: cannot find 'letterGradeMap' in scope\n\
    \        letterGrade = letterGrade + letterGradeMap[gpa]\n                   \
    \                 ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if gpa > 1.3 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if gpa > 0.0\
    \ {\n            letterGrades.append(\"D\")\n        } else if gpa > 0.0 {\n \
    \           letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpocl7_gp0/tmpocl7_gp0.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc04a67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc0475eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc0475e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc0475d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocl7_gp0                        0x0000562b4a720856 <unavailable> + 6230

    5    libc.so.6                          0x00002acc04c53460 __libc_start_main +
    245

    6    tmpocl7_gp0                        0x0000562b4a720379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        \n        if grade > 3.0 {\n            gpa = grade * 4.0\n         \
    \   letterGrade = \"A+\"\n        }\n        else if grade > 2.7 {\n         \
    \   gpa = grade * 3.7\n            letterGrade = \"A\"\n        }\n        else\
    \ if grade > 2.3 {\n            gpa = grade * 3.3\n            letterGrade = \"\
    A-\"\n        }\n        else if grade > 2.0 {\n            gpa = grade * 3.0\n\
    \            letterGrade = \"B+\"\n        }\n        else if grade > 1.7 {\n\
    \            gpa = grade * 2.7\n            letterGrade = \"B\"\n        }\n \
    \       else if grade > 1.3 {\n            gpa = grade * 2.3\n            letterGrade\
    \ = \"B-\"\n        }\n        else if grade > 1.0 {\n            gpa = grade\
    \ * 2.0\n            letterGrade = \"C+\"\n        }\n        else if grade >\
    \ 0.7 {\n            gpa = grade * 1.7\n            letterGrade = \"C\"\n    \
    \    }\n        else if grade > 0.0 {\n            gpa = grade * 1.0\n       \
    \     letterGrade = \"D+\"\n        }\n        else {\n            gpa = grade\
    \ * 0.7\n            letterGrade = \"D\"\n        }\n        \n        gradesArray.append(String(format:\
    \ \"%.2f\", gpa))\n        gradesArray.append(letterGrade)\n    }\n    \n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_h9x816.swift:72:28: error: no exact matches in call to initializer\
    \ \n        gradesArray.append(String(format: \"%.2f\", gpa))\n              \
    \             ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmp6_h9x816.swift:72:28:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        gradesArray.append(String(format: \"%.2f\", gpa))\n          \
    \                 ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1bcgqv13/tmp1bcgqv13.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2e921ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2e8f15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2e8f15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2e8f147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bcgqv13                        0x000055b6d14317a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af2e940a460 __libc_start_main +
    245

    6    tmp1bcgqv13                        0x000055b6d14312c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gpa = grades[0]\n    var letterGrade = \"\"\n    \n    for _ in\
    \ grades {\n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n       \
    \ } else if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa\
    \ > 2.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 1.3 {\n \
    \           letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"D\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D-\"\n        } else {\n            letterGrade\
    \ = \"E\"\n        }\n        gradesArray.append(letterGrade)\n        gradesArrayIndex\
    \ += 1\n        gpa -= grades[gradesArrayIndex]\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d50504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d501fb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2d501fb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2d501fb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2d501fabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2d4fffaf44 <unavailable> + 188228

    6    tmpxyh2o305                        0x000055a4f145b473 <unavailable> + 9331

    7    tmpxyh2o305                        0x000055a4f145a6bd <unavailable> + 5821

    8    libc.so.6                          0x00002b2d506f0460 __libc_start_main +
    245

    9    tmpxyh2o305                        0x000055a4f145a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex2\
    \ = gpaIndex % 5\n        let gpaIndex3 = gpaIndex % 4\n        let gpaIndex4\
    \ = gpaIndex % 3\n        let gpaIndex5 = gpaIndex % 2\n        let gpaIndex6\
    \ = gpaIndex % 1\n        letterGrades.append(letterGrade(gpaIndex2, gpaIndex3,\
    \ gpaIndex4, gpaIndex5, gpaIndex6))\n        gpa -= 1\n        gpaIndex += 1\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6zcg0780.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp6zcg0780.swift:34:29:\
    \ error: cannot find 'letterGrade' in scope\n        letterGrades.append(letterGrade(gpaIndex2,\
    \ gpaIndex3, gpaIndex4, gpaIndex5, gpaIndex6))\n                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = grades.count - 1\n    var letterGradeIndex =\
    \ 0\n    while (gpa > 0 && gpaIndex >= 0) {\n        if gpa >= grades[gpaIndex]\
    \ {\n            letterGrades.append(letterGrades[letterGradeIndex])\n       \
    \     letterGradeIndex += 1\n            gpaIndex -= 1\n        } else {\n   \
    \         letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n            gpaIndex -= 1\n        }\n        gpa -= grades[gpaIndex]\n\
    \    }\n    letterGrades.append(letterGrades[letterGradeIndex])\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdpohkd4_.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrz3gdhr.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpsrz3gdhr.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"A+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"A\"\n    } else if gpa < 1.3 {\n        letterGrade = \"A-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"C\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"C+\"\n    } else if gpa < 0.3 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa < 0.0 {\n        letterGrade = \"B+\"\n    } else\
    \ {\n        letterGrade = \"A\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8pvm43jl.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 / 3.0\n    let gpaRange2 = gpaRange * 2.0\n\
    \    let gpaRange3 = gpaRange * 3.0\n    let gpaRange4 = gpaRange * 4.0\n    let\
    \ gpaRange5 = gpaRange * 5.0\n    let gpaRange6 = gpaRange * 6.0\n    let gpaRange7\
    \ = gpaRange * 7.0\n    let gpaRange8 = gpaRange * 8.0\n    let gpaRange9 = gpaRange\
    \ * 9.0\n    let gpaRange10 = gpaRange * 10.0\n    let gpaRange11 = gpaRange *\
    \ 11.0\n    let gpaRange12 = gpaRange * 12.0\n    let gpaRange13 = gpaRange *\
    \ 13.0\n    let gpaRange14 = gpaRange * 14.0\n    let gpaRange15 = gpaRange *\
    \ 15.0\n    let gpaRange16 = gpaRange * 16.0\n    let gpaRange17 = gpaRange *\
    \ 17.0\n    let gpaRange18 = gpaRange * 18.0\n    let gpaRange19 = gpaRange *\
    \ 19.0\n    let gpaRange20 = gpaRange * 20.0\n    let gpaRange21 = gpaRange *\
    \ 21.0\n    let gpaRange22 = gpaRange * 22.0\n    let gpaRange23 = gpaRange *\
    \ 23.0\n    let gpaRange24 = gpaRange * 24.0\n    let gpaRange25 = gpaRange *\
    \ 25.0\n    let gpaRange26 = gpaRange * 26.0\n    let gpaRange27 = gpaRange *\
    \ 27.0\n    let gpaRange28 = gpaRange * 28.0\n    let gpaRange29 = gpaRange *\
    \ 29.0\n    let gpaRange30 = gpaRange * 30.0\n    let gpaRange31 = gpaRange *\
    \ 31.0\n    let gpaRange32 = gpaRange * 32.0\n    let gpaRange33 = gpaRange *\
    \ 33.0\n    let gpaRange34 = gpaRange * 34.0\n    let gpaRange35 = gpaRange *\
    \ 35.0\n    let gpaRange36 = gpaRange * 36.0\n    let gpaRange37 = gpaRange *\
    \ 37.0\n    let gpaRange38 = gpaRange * 38.0\n    let gpaRange39 = gpaRange *\
    \ 39.0\n    let gpaRange40 = gpaRange * 40.0\n    let gpaRange41 = gpaRange *\
    \ 41.0\n    let gpaRange42 = g\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8fdg50wd.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp8fdg50wd.swift:68:22:\
    \ error: cannot find 'g' in scope\n    let gpaRange42 = g\n                  \
    \   ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var grade = totalGrade / Double(grades.count)\n\
    \    var letterGrade = \"\"\n    for grade in grades {\n        letterGrade =\
    \ letterGrade + String(grade) + \"+\" \n    }\n    letterGrades.append(letterGrade)\n\
    \    for grade in grades {\n        if grade > 0 {\n            letterGrade =\
    \ letterGrade + String(grade) + \"-\"\n        }\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5gjd4ykw.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    var letterGradeIndex = 0\n    while\
    \ gpa > 0 {\n        gpa -= 1\n        letterGrade = letterGrades[letterGradeIndex]\n\
    \        letterGradeIndex += 1\n        if gpa > 3.0 {\n            letterGrade\
    \ = \"\\(letterGrade)+\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 2.7 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 2.3 {\n            letterGrade\
    \ = \"\\(letterGrade)-\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 1.7 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 1.0 {\n            letterGrade\
    \ = \"\\(letterGrade)-\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 0.7 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n            letterGrade\
    \ = \"\\(letterGrade)-\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 0.0 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n            letterGrade\
    \ = \"\\(letterGrade)+\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 0.0 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n            letterGrade\
    \ = \"\\(letterGrade)+\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 0.0 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n            letterGrade\
    \ = \"\\(letterGrade)+\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 0.0 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n            letterGrade\
    \ = \"\\(letterGrade)+\"\n            letterGradeIndex += 1\n        }\n     \
    \   if gpa > 0.0 {\n            letterGrade = \"\\(letterGrade)+\"\n         \
    \   letterGradeIndex += 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppojtc966.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmppojtc966.swift:29:19:\
    \ note: to match this opening '{'\n    while gpa > 0 {\n                  ^\n\
    /tmp/tmppojtc966.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmppojtc966.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmppojtc966.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmppojtc966.swift:99:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 2 {\n        return letterGrades\n    }\n    \n    if grades.count == 2 {\n\
    \        letterGrades.append(\"A\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 3 {\n        letterGrades.append(\"A-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 4 {\n        letterGrades.append(\"\
    B+\")\n        return letterGrades\n    }\n    \n    if grades.count == 5 {\n\
    \        letterGrades.append(\"B\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 6 {\n        letterGrades.append(\"B-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 7 {\n        letterGrades.append(\"\
    C+\")\n        return letterGrades\n    }\n    \n    if grades.count == 8 {\n\
    \        letterGrades.append(\"C\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 9 {\n        letterGrades.append(\"C-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 10 {\n        letterGrades.append(\"\
    D+\")\n        return letterGrades\n    }\n    \n    if grades.count == 11 {\n\
    \        letterGrades.append(\"D\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 12 {\n        letterGrades.append(\"D-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 13 {\n        letterGrades.append(\"\
    E\")\n        return letterGrades\n    }\n    \n    return letterGrades\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprnwzs1hb/tmprnwzs1hb.swift:107: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9e7c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9e7902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9e7902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9e79017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnwzs1hb                        0x0000557e8fc4a6e6 <unavailable> + 5862

    5    libc.so.6                          0x00002ad9e7df7460 __libc_start_main +
    245

    6    tmprnwzs1hb                        0x0000557e8fc4a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Your\
    \ code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5a17vin_/tmp5a17vin_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0b6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0b3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0b3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0b3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a17vin_                        0x0000563bb1ee0636 <unavailable> + 5686

    5    libc.so.6                          0x00002aab0b8e6460 __libc_start_main +
    245

    6    tmp5a17vin_                        0x0000563bb1ee0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    for grade in grades {\n        gpa += grade\n        if gpa > 3.0\
    \ {\n            gradesArray.append(\"A+\")\n            gpa = gpa - 3.0\n   \
    \     } else if gpa > 2.7 {\n            gradesArray.append(\"B\")\n         \
    \   gpa = gpa - 2.7\n        } else if gpa > 2.3 {\n            gradesArray.append(\"\
    B-\")\n            gpa = gpa - 2.3\n        } else if gpa > 1.7 {\n          \
    \  gradesArray.append(\"C+\")\n            gpa = gpa - 1.7\n        } else if\
    \ gpa > 1.0 {\n            gradesArray.append(\"C\")\n            gpa = gpa -\
    \ 1.0\n        } else if gpa > 0.7 {\n            gradesArray.append(\"D+\")\n\
    \            gpa = gpa - 0.7\n        } else if gpa > 0.3 {\n            gradesArray.append(\"\
    D\")\n            gpa = gpa - 0.3\n        } else if gpa > 0.0 {\n           \
    \ gradesArray.append(\"D-\")\n            gpa = gpa - 0.0\n        } else {\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpo0kz1hlx/tmpo0kz1hlx.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e9ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e6c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e6c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e6c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0kz1hlx                        0x000056320298e7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af57ebb8460 __libc_start_main +
    245

    6    tmpo0kz1hlx                        0x000056320298e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaLetter = String(format: \"%.1f\", gpa)\n    gradeLetters.append(gpaLetter)\n\
    \    if gpa > 3.0 {\n        gpaLetter = String(format: \"%.1f\", gpa - 3.0)\n\
    \        gradeLetters.append(gpaLetter)\n    }\n    if gpa > 2.0 {\n        gpaLetter\
    \ = String(format: \"%.1f\", gpa - 2.0)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa > 1.7 {\n        gpaLetter = String(format: \"%.1f\", gpa -\
    \ 1.7)\n        gradeLetters.append(gpaLetter)\n    }\n    if gpa > 1.0 {\n  \
    \      gpaLetter = String(format: \"%.1f\", gpa - 1.0)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa > 0.7 {\n        gpaLetter = String(format: \"%.1f\", gpa -\
    \ 0.7)\n        gradeLetters.append(gpaLetter)\n    }\n    if gpa > 0.0 {\n  \
    \      gpaLetter = String(format: \"%.1f\", gpa - 0.0)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa < 0.0 {\n        gpaLetter = String(format: \"%.1f\", gpa +\
    \ 0.0)\n        gradeLetters.append(gpaLetter)\n    }\n    if gpa < 0.7 {\n  \
    \      gpaLetter = String(format: \"%.1f\", gpa + 0.7)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa < 1.0 {\n        gpaLetter = String(format: \"%.1f\", gpa +\
    \ 1.0)\n        gradeLetters.append(gpaLetter)\n    }\n    if gpa < 1.7 {\n  \
    \      gpaLetter = String(format: \"%.1f\", gpa + 1.7)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa < 2.0 {\n        gpaLetter = String(format: \"%.1f\", gpa +\
    \ 2.0)\n        gradeLetters.append(gpaLetter)\n    }\n    if gpa < 3.0 {\n  \
    \      gpaLetter = String(format: \"%.1f\", gpa + 3.0)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa < 4.0 {\n        gpaLetter = String(format: \"%.1f\", gpa +\
    \ 4.0)\n        gradeLetters.append(gpaLetter)\n    }\n    if gpa < 5.0 {\n  \
    \      gpaLetter = String(format: \"%.1f\", gpa + 5.0)\n        gradeLetters.append(gpaLetter)\n\
    \    }\n    if gpa < 6.0 {\n        gpaLetter = String(\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4dxbb80n.swift:87:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp4dxbb80n.swift:107:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp4dxbb80n.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp4dxbb80n.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmp4dxbb80n.swift:27:27: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  var gpaLetter = String(format: \"%.1f\", gpa)\n                          ^~~~~~~\n\
    \                           repeating       count: \n/tmp/tmp4dxbb80n.swift:30:50:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        gpaLetter = String(format: \"%.1f\", gpa - 3.0)\n                   \
    \                              ^\n                                           \
    \      Int( )\n/tmp/tmp4dxbb80n.swift:30:21: error: no exact matches in call to\
    \ initializer \n        gpaLetter = String(format: \"%.1f\", gpa - 3.0)\n    \
    \                ^\n/tmp/tmp4dxbb80n.swift:30:21: note: found candidate with type\
    \ '(String, Int) -> String'\n        gpaLetter = String(format: \"%.1f\", gpa\
    \ - 3.0)\n                    ^\n/tmp/tmp4dxbb80n.swift:30:21: note: found candidate\
    \ with type '(String) -> String'\n        gpaLetter = String(format: \"%.1f\"\
    , gpa - 3.0)\n                    ^\n/tmp/tmp4dxbb80n.swift:34:21: error: no exact\
    \ matches in call to initializer \n        gpaLetter = String(format: \"%.1f\"\
    , gpa - 2.0)\n                    ^\n/tmp/tmp4dxbb80n.swift:34:21: note: found\
    \ candidate with type '(String, Int) -> String'\n        gpaLetter = String(format:\
    \ \"%.1f\", gpa - 2.0)\n                    ^\n/tmp/tmp4dxbb80n.swift:34:21: note:\
    \ found candidate with typ"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for i\
    \ in grades {\n        let gpa = Double(i)\n        let letterGrade: String\n\
    \        \n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n        }\
    \ else if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa\
    \ > 2.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 1.3 {\n \
    \           letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"D\"\n        } else if gpa < 0.0\
    \ {\n            letterGrade = \"D-\"\n        } else {\n            letterGrade\
    \ = \"E\"\n        }\n        \n        gradesArray.append(letterGrade)\n    }\n\
    \    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9dtz3dbg/tmp9dtz3dbg.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4919064c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4918d5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4918d5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4918d5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dtz3dbg                        0x0000560d4ded47f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b4919250460 __libc_start_main +
    245

    6    tmp9dtz3dbg                        0x0000560d4ded4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrades\
    \ = grades.reduce(0, combine: +)\n    var gpa = totalGrades / Double(grades.count)\n\
    \    var letterGrade = letterGradeForGPA(gpa)\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmgod821w.swift:26:36: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrades = grades.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n\
    /tmp/tmpmgod821w.swift:28:23: error: cannot find 'letterGradeForGPA' in scope\n\
    \    var letterGrade = letterGradeForGPA(gpa)\n                      ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm5segf6r.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpm5segf6r.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \        \n        if gpa > 3.7 {\n            letterGrade = letterGrade + \"\
    +\"\n        } else if gpa > 3.3 {\n            letterGrade = letterGrade + \"\
    -\"\n        } else if gpa > 2.7 {\n            letterGrade = letterGrade + \"\
    +\"\n        } else if gpa > 2.3 {\n            letterGrade = letterGrade + \"\
    -\"\n        } else if gpa > 1.7 {\n            letterGrade = letterGrade + \"\
    +\"\n        } else if gpa > 1.3 {\n            letterGrade = letterGrade + \"\
    -\"\n        } else if gpa > 1.0 {\n            letterGrade = letterGrade + \"\
    +\"\n        } else if gpa > 0.7 {\n            letterGrade = letterGrade + \"\
    +\"\n        } else {\n            letterGrade = letterGrade + \"-\"\n       \
    \ }\n    }\n    \n    gradesArray.append(letterGrade)\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp05yc0sfw/tmp05yc0sfw.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb093b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb090acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb090ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb090ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp05yc0sfw                        0x000055597640c8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002afb095a1460 __libc_start_main +
    245

    6    tmp05yc0sfw                        0x000055597640c3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Your\
    \ code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5a17vin_/tmp5a17vin_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0b6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0b3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0b3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0b3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a17vin_                        0x0000563bb1ee0636 <unavailable> + 5686

    5    libc.so.6                          0x00002aab0b8e6460 __libc_start_main +
    245

    6    tmp5a17vin_                        0x0000563bb1ee0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for i\
    \ in grades {\n        if i > 3.0 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i))\n        }\n        else if i > 2.0 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 2.0))\n        }\n        else if i > 1.0 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 1.0))\n        }\n        else if i > 0.7 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 0.7))\n        }\n        else if i > 0.3 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 0.3))\n        }\n        else if i > 0.1 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 0.1))\n        }\n        else if i > 0.0 {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 0.0))\n        }\n        else {\n            gradesArray.append(String(format:\
    \ \"%.2f\", i))\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgat5z6ka.swift:29:32: error: no exact matches in call to initializer\
    \ \n            gradesArray.append(String(format: \"%.2f\", i))\n            \
    \                   ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpgat5z6ka.swift:29:32:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n            gradesArray.append(String(format: \"%.2f\", i))\n        \
    \                       ^\nSwift.String:3:12: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    public init<S>(_ characters: S) where S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpgat5z6ka.swift:32:32: error:\
    \ no exact matches in call to initializer \n            gradesArray.append(String(format:\
    \ \"%.2f\", i - 2.0))\n                               ^\n/tmp/tmpgat5z6ka.swift:32:32:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n            gradesArray.append(String(format: \"%.2f\", i - 2.0))\n  \
    \                             ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\nSwift.String:3:12:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.String:4:12: note: candidate "
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ grade {\n            letterGrade = \"A+\"\n            gpa = grade - gpa\n \
    \       } else if gpa < grade {\n            letterGrade = \"A\"\n           \
    \ gpa = grade - gpa\n        } else if gpa == grade {\n            letterGrade\
    \ = \"A\"\n        }\n        \n        letterGrades.append(letterGrade)\n   \
    \ }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpcxe3dtz9/tmpcxe3dtz9.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d3925c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d361cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0d361c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0d361b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxe3dtz9                        0x0000555ef0147856 <unavailable> + 6230

    5    libc.so.6                          0x00002ac0d3b11460 __libc_start_main +
    245

    6    tmpcxe3dtz9                        0x0000555ef0147379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa < 3.0 {\n            letterGrades.append(\"\
    E\")\n            break\n        }\n        if gpa < 3.3 {\n            letterGrades.append(\"\
    D-\")\n            break\n        }\n        if gpa < 3.7 {\n            letterGrades.append(\"\
    C-\")\n            break\n        }\n        if gpa < 4.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 4.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 4.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 5.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 5.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 5.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 6.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 6.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 6.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 7.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 7.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 7.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 8.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 8.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 8.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 9.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 9.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 9.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 10.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 10.3 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 10.7 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 11.0 {\n            letterGrades.append(\"\
    B-\")\n            break\n        }\n        if gpa < 11.3 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp122shwcm.swift:149:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp122shwcm.swift:27:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp122shwcm.swift:149:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp122shwcm.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp122shwcm.swift:132:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmp122shwcm.swift:26:9: warning: variable 'gpa' was never\
    \ mutated; consider changing to 'let' constant\n    var gpa = grades[0]\n    ~~~\
    \ ^\n    let\n/tmp/tmp122shwcm.swift:27:9: warning: immutable value 'grade' was\
    \ never used; consider replacing with '_' or removing it\n    for grade in grades\
    \ {\n        ^~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        if gpa > 3.7 {\n            letterGrade = \"A+\"\
    \n        } else if gpa > 3.3 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.7\
    \ {\n            letterGrade = \"B\"\n        } else if gpa > 2.3 {\n        \
    \    letterGrade = \"B-\"\n        } else if gpa > 2.0 {\n            letterGrade\
    \ = \"C+\"\n        } else if gpa > 1.7 {\n            letterGrade = \"C\"\n \
    \       } else if gpa > 1.3 {\n            letterGrade = \"C-\"\n        } else\
    \ if gpa > 1.0 {\n            letterGrade = \"D+\"\n        } else if gpa > 0.7\
    \ {\n            letterGrade = \"D\"\n        } else if gpa > 0.0 {\n        \
    \    letterGrade = \"D-\"\n        } else {\n            letterGrade = \"E\"\n\
    \        }\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmps4q52f_a/tmps4q52f_a.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b073b627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b073b31eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b073b31e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b073b31d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4q52f_a                        0x000055782527c7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b073b813460 __libc_start_main +
    245

    6    tmps4q52f_a                        0x000055782527c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for i\
    \ in grades {\n        if i > 3.0 {\n            letterGrades.append(\"A+\")\n\
    \        } else if i > 2.7 {\n            letterGrades.append(\"B\")\n       \
    \ } else if i > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if i > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if i >\
    \ 1.7 {\n            letterGrades.append(\"C\")\n        } else if i > 1.3 {\n\
    \            letterGrades.append(\"C-\")\n        } else if i > 1.0 {\n      \
    \      letterGrades.append(\"D+\")\n        } else if i > 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if i > 0.0 {\n            letterGrades.append(\"D-\")\n \
    \       } else {\n            letterGrades.append(\"E\")\n        }\n    }\n \
    \   \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbo7oritc/tmpbo7oritc.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab065603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0652fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0652fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0652f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbo7oritc                        0x000055879671d7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab0657ef460 __libc_start_main +
    245

    6    tmpbo7oritc                        0x000055879671d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"E\")\n        }\n  \
    \  }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqfyc0mkn/tmpqfyc0mkn.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adedfeefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adedfbe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adedfbe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adedfbe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfyc0mkn                        0x000056011df8a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002adee00db460 __libc_start_main +
    245

    6    tmpqfyc0mkn                        0x000056011df8a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    for grade in grades {\n       \
    \ gpa = grade * 4\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n\
    \        } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.7\
    \ && gpa < 2.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 1.3\
    \ && gpa < 1.7 {\n            letterGrade = \"B\"\n        } else if gpa > 1.0\
    \ && gpa < 1.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 0.7\
    \ && gpa < 1.0 {\n            letterGrade = \"C+\"\n        } else if gpa > 0.3\
    \ && gpa < 0.7 {\n            letterGrade = \"C\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"C-\"\n        } else {\n            letterGrade\
    \ = \"D+\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdbo_6gvk/tmpdbo_6gvk.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae87c730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae87c427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae87c427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae87c4267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbo_6gvk                        0x0000558663c377a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae87c91c460 __libc_start_main +
    245

    6    tmpdbo_6gvk                        0x0000558663c372c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaLetter = String(format: \"%.1f\", gpa)\n    var gpaLetterIndex\
    \ = gpaLetter.index(of: gpaLetter)\n    gradeLetters.append(gpaLetter)\n    if\
    \ gpaLetterIndex == 0 {\n        gradeLetters.append(gpaLetter)\n    } else {\n\
    \        gradeLetters.append(gpaLetter[..(gpaLetterIndex - 1)])\n    }\n    if\
    \ gpaLetterIndex < gpaLetters.count - 1 {\n        gradeLetters.append(gpaLetter[gpaLetterIndex..])\n\
    \    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf_8dq2tj.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpf_8dq2tj.swift:27:27:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    var gpaLetter = String(format: \"%.1f\", gpa)\n                         \
    \ ^~~~~~~\n                           repeating       count: \n/tmp/tmpf_8dq2tj.swift:33:39:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        gradeLetters.append(gpaLetter[..(gpaLetterIndex\
    \ - 1)])\n                                      ^~\n                         \
    \             ...\n/tmp/tmpf_8dq2tj.swift:35:25: error: cannot find 'gpaLetters'\
    \ in scope\n    if gpaLetterIndex < gpaLetters.count - 1 {\n                 \
    \       ^~~~~~~~~~\n/tmp/tmpf_8dq2tj.swift:36:53: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n        gradeLetters.append(gpaLetter[gpaLetterIndex..])\n\
    \                                                    ^~\n                    \
    \                                ...\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksypmnj7.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade = \"\
    A\"\n    } else if gpa < 1.0 {\n        letterGrade = \"C\"\n    } else if gpa\
    \ < 0.7 {\n        letterGrade = \"C+\"\n    } else {\n        letterGrade = \"\
    D\"\n    }\n    \n    letterGrades.append(letterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbpk6_zur.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\"\
    )\n        } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n  \
    \      } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n     \
    \   } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n        }\
    \ else if grade > 0.7 {\n            gradesArray.append(\"C\")\n        } else\
    \ if grade > 0.3 {\n            gradesArray.append(\"C-\")\n        } else if\
    \ grade > 0.0 {\n            gradesArray.append(\"D+\")\n        } else if grade\
    \ > -0.3 {\n            gradesArray.append(\"D\")\n        } else if grade > -0.7\
    \ {\n            gradesArray.append(\"D-\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmph0dg3jzj/tmph0dg3jzj.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8dccf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8dc9ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8dc9ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8dc9eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0dg3jzj                        0x000055e4d35e17a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba8dcee1460 __libc_start_main +
    245

    6    tmph0dg3jzj                        0x000055e4d35e12c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpw4zw3pae.swift:98:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        if grade < 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade < 3.3 {\n            gradesArray.append(\"A\")\n    \
    \    } else if grade < 3.7 {\n            gradesArray.append(\"A-\")\n       \
    \ } else if grade < 4.0 {\n            gradesArray.append(\"B+\")\n        } else\
    \ if grade < 4.3 {\n            gradesArray.append(\"B\")\n        } else if grade\
    \ < 4.7 {\n            gradesArray.append(\"B-\")\n        } else if grade < 5.0\
    \ {\n            gradesArray.append(\"C+\")\n        } else if grade < 5.3 {\n\
    \            gradesArray.append(\"C\")\n        } else if grade < 5.7 {\n    \
    \        gradesArray.append(\"C-\")\n        } else if grade < 6.0 {\n       \
    \     gradesArray.append(\"D+\")\n        } else if grade < 6.3 {\n          \
    \  gradesArray.append(\"D\")\n        } else if grade < 6.7 {\n            gradesArray.append(\"\
    D-\")\n        } else if grade < 7.0 {\n            gradesArray.append(\"E\")\n\
    \        } else {\n            gradesArray.append(\"D-\")\n        }\n    }\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp18wlgcox/tmp18wlgcox.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecfb900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecfb5f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecfb5f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecfb5f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18wlgcox                        0x00005643a63637f6 <unavailable> + 6134

    5    libc.so.6                          0x00002aecfbaec460 __libc_start_main +
    245

    6    tmp18wlgcox                        0x00005643a6363319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\
    \n        } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.7\
    \ && gpa < 2.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 1.3\
    \ && gpa < 1.7 {\n            letterGrade = \"B\"\n        } else if gpa > 1.0\
    \ && gpa < 1.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 0.7\
    \ && gpa < 1.0 {\n            letterGrade = \"C+\"\n        } else if gpa > 0.0\
    \ && gpa < 0.7 {\n            letterGrade = \"C\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"C-\"\n        } else {\n            letterGrade\
    \ = \"D+\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpwckm6rnx/tmpwckm6rnx.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaaa0fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaa9df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaa9df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaa9df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwckm6rnx                        0x0000556792cb17a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abaaa2ea460 __libc_start_main +
    245

    6    tmpwckm6rnx                        0x0000556792cb12c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    \n    // Write\
    \ your code here\n    \n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpuitod7bj/tmpuitod7bj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9afccec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9af9c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9af9c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9af9c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuitod7bj                        0x0000561b1d9cf636 <unavailable> + 5686

    5    libc.so.6                          0x00002ab9afeba460 __libc_start_main +
    245

    6    tmpuitod7bj                        0x0000561b1d9cf159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj3vr85q.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpbj3vr85q.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpbj3vr85q.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpbj3vr85q.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm5segf6r.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpm5segf6r.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 ... gpa\n    let letterGradeRange = \"A+\"\
    \ ... \"D-\"\n    for i in gpaRange {\n        let letter = letterGradeRange.firstIndex(of:\
    \ String(format: \"%.1f\", i))!\n        letterGrades.append(letterGradeRange[letter])\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmenq4g65.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpmenq4g65.swift:30:22:\
    \ error: referencing instance method 'firstIndex(of:)' on 'ClosedRange' requires\
    \ that 'String' conform to 'Strideable'\n        let letter = letterGradeRange.firstIndex(of:\
    \ String(format: \"%.1f\", i))!\n                     ^\nSwift.ClosedRange:1:11:\
    \ note: requirement from conditional conformance of 'ClosedRange<String>' to 'Collection'\n\
    extension ClosedRange : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpmenq4g65.swift:30:60:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        let letter = letterGradeRange.firstIndex(of: String(format: \"%.1f\"\
    , i))!\n                                                           ^~~~~~~\n \
    \                                                           repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    for grade in grades {\n       \
    \ gpa += grade\n        if gpa >= 4.0 {\n            letterGrade = \"A+\"\n  \
    \          gpa = gpa - 4.0\n        } else if gpa >= 3.7 {\n            letterGrade\
    \ = \"A\"\n            gpa = gpa - 3.7\n        } else if gpa >= 3.3 {\n     \
    \       letterGrade = \"A-\"\n            gpa = gpa - 3.3\n        } else if gpa\
    \ >= 3.0 {\n            letterGrade = \"B+\"\n            gpa = gpa - 3.0\n  \
    \      } else if gpa >= 2.7 {\n            letterGrade = \"B\"\n            gpa\
    \ = gpa - 2.7\n        } else if gpa >= 2.3 {\n            letterGrade = \"B-\"\
    \n            gpa = gpa - 2.3\n        } else if gpa >= 2.0 {\n            letterGrade\
    \ = \"C+\"\n            gpa = gpa - 2.0\n        } else if gpa >= 1.7 {\n    \
    \        letterGrade = \"C\"\n            gpa = gpa - 1.7\n        } else if gpa\
    \ >= 1.3 {\n            letterGrade = \"C-\"\n            gpa = gpa - 1.3\n  \
    \      } else if gpa >= 1.0 {\n            letterGrade = \"D+\"\n            gpa\
    \ = gpa - 1.0\n        } else if gpa >= 0.7 {\n            letterGrade = \"D\"\
    \n            gpa = gpa - 0.7\n        } else if gpa >= 0.0 {\n            letterGrade\
    \ = \"D-\"\n            gpa = gpa - 0.0\n        } else {\n            letterGrade\
    \ = \"E\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfoll7jqc/tmpfoll7jqc.swift:87: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe2a5e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe2a2d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe2a2d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe2a2d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoll7jqc                        0x000055d3b75247a6 <unavailable> + 6054

    5    libc.so.6                          0x00002abe2a7ce460 __libc_start_main +
    245

    6    tmpfoll7jqc                        0x000055d3b75242c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters: [String] = []\n    \n    // Loop\
    \ through each grade and find the letter grade for that grade\n    for grade in\
    \ grades {\n        \n        // If the grade is less than 3.0 then it is a letter\
    \ grade\n        if grade < 3.0 {\n            \n            // If the grade is\
    \ less than 3.7 then it is a letter grade\n            if grade < 3.7 {\n    \
    \            gradeLetters.append(\"A+\")\n            } else if grade < 3.3 {\n\
    \                gradeLetters.append(\"A\")\n            } else if grade < 3.0\
    \ {\n                gradeLetters.append(\"B+\")\n            } else if grade\
    \ < 2.7 {\n                gradeLetters.append(\"B\")\n            } else if grade\
    \ < 2.3 {\n                gradeLetters.append(\"B-\")\n            } else if\
    \ grade < 2.0 {\n                gradeLetters.append(\"C+\")\n            } else\
    \ if grade < 1.7 {\n                gradeLetters.append(\"C\")\n            }\
    \ else if grade < 1.3 {\n                gradeLetters.append(\"C-\")\n       \
    \     } else if grade < 1.0 {\n                gradeLetters.append(\"D+\")\n \
    \           } else if grade < 0.7 {\n                gradeLetters.append(\"D\"\
    )\n            } else if grade < 0.0 {\n                gradeLetters.append(\"\
    D-\")\n            } else {\n                gradeLetters.append(\"E\")\n    \
    \        }\n            \n        } else {\n            gradeLetters.append(\"\
    E\")\n        }\n    }\n    \n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptjiy3klp/tmptjiy3klp.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba10dbcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba10d8c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba10d8c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba10d8c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjiy3klp                        0x00005645384ce7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba10ddba460 __libc_start_main +
    245

    6    tmptjiy3klp                        0x00005645384ce2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for i\
    \ in grades {\n        if i > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if i > 2.0 {\n            gradesArray.append(\"A\")\n        }\
    \ else if i > 1.0 {\n            gradesArray.append(\"B+\")\n        } else if\
    \ i > 0.7 {\n            gradesArray.append(\"B\")\n        } else if i > 0.3\
    \ {\n            gradesArray.append(\"B-\")\n        } else if i > 0.0 {\n   \
    \         gradesArray.append(\"C+\")\n        } else if i > -0.3 {\n         \
    \   gradesArray.append(\"C\")\n        } else if i > -0.7 {\n            gradesArray.append(\"\
    C-\")\n        } else if i > -1.0 {\n            gradesArray.append(\"D+\")\n\
    \        } else if i > -2.0 {\n            gradesArray.append(\"D\")\n       \
    \ } else if i > -3.0 {\n            gradesArray.append(\"D-\")\n        } else\
    \ if i > -4.0 {\n            gradesArray.append(\"E\")\n        } else {\n   \
    \         gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbjn7bwcd/tmpbjn7bwcd.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac7ddddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac7dad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac7dad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac7dad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjn7bwcd                        0x000056222b3147a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aac7dfc9460 __libc_start_main +
    245

    6    tmpbjn7bwcd                        0x000056222b3142c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 2 {\n        return letterGrades\n    }\n    \n    var gpa = grades.first!\n\
    \    \n    for grade in grades.dropFirst() {\n        if gpa < grade {\n     \
    \       letterGrades.append(\"E\")\n            break\n        }\n        \n \
    \       if gpa > grade {\n            letterGrades.append(\"D\")\n           \
    \ break\n        }\n        \n        if gpa == grade {\n            letterGrades.append(letterGrade(grade))\n\
    \        }\n        \n        gpa -= grade\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjir9o7k3.swift:45:33: error: cannot find 'letterGrade' in scope\n\
    \            letterGrades.append(letterGrade(grade))\n                       \
    \         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Your\
    \ code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5a17vin_/tmp5a17vin_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab0b6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab0b3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab0b3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab0b3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a17vin_                        0x0000563bb1ee0636 <unavailable> + 5686

    5    libc.so.6                          0x00002aab0b8e6460 __libc_start_main +
    245

    6    tmp5a17vin_                        0x0000563bb1ee0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        letterGrade = \"E\"\n    }\n   \
    \ gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_423jzo.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 0...0.1:\n            letterGrades.append(\"\
    E\")\n        case 0.1:\n            letterGrades.append(\"D-\")\n        case\
    \ 0.2:\n            letterGrades.append(\"B-\")\n        case 0.3:\n         \
    \   letterGrades.append(\"B-\")\n        case 0.4:\n            letterGrades.append(\"\
    B-\")\n        case 0.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 0.6:\n            letterGrades.append(\"B-\")\n        case 0.7:\n         \
    \   letterGrades.append(\"B-\")\n        case 0.8:\n            letterGrades.append(\"\
    B-\")\n        case 0.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.0:\n            letterGrades.append(\"B-\")\n        case 1.1:\n         \
    \   letterGrades.append(\"B-\")\n        case 1.2:\n            letterGrades.append(\"\
    B-\")\n        case 1.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.4:\n            letterGrades.append(\"B-\")\n        case 1.5:\n         \
    \   letterGrades.append(\"B-\")\n        case 1.6:\n            letterGrades.append(\"\
    B-\")\n        case 1.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.8:\n            letterGrades.append(\"B-\")\n        case 1.9:\n         \
    \   letterGrades.append(\"B-\")\n        case 2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.1:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.2:\n            letterGrades.append(\"B-\")\n        case 2.3:\n         \
    \   letterGrades.append(\"B-\")\n        case 2.4:\n            letterGrades.append(\"\
    B-\")\n        case 2.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.6:\n            letterGrades.append(\"B-\")\n        case 2.7:\n         \
    \   letterGrades.append(\"B-\")\n        case 2.8:\n            letterGrades.append(\"\
    B-\")\n        case 2.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.0:\n            letterGrades.append(\"B-\")\n        case 3.1:\n         \
    \   letterGrades.append(\"B-\")\n        case 3.2:\n            letterGrades.append(\"\
    B-\")\n        case 3.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.4:\n            letterGrades.append(\"B-\")\n        case 3.5:\n         \
    \   letterGrades.append(\"B-\")\n        case 3.6:\n            letterGrades.append(\"\
    B-\")\n        case 3.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.8:\n            letterGrades.append(\"B-\")\n        case 3.9:\n         \
    \   letterGrades.append(\"B-\")\n        case 4.0:\n            letter\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2ajl5t5p.swift:131:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp2ajl5t5p.swift:27:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp2ajl5t5p.swift:131:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp2ajl5t5p.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp2ajl5t5p.swift:110:13: error: cannot find 'letter' in scope\n        \
    \    letter\n            ^~~~~~\n/tmp/tmp2ajl5t5p.swift:28:9: error: switch must\
    \ be exhaustive\n        switch grade {\n        ^\n/tmp/tmp2ajl5t5p.swift:28:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmp2ajl5t5p.swift:114:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj3vr85q.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpbj3vr85q.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpbj3vr85q.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpbj3vr85q.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0z1w7uab.swift:48:86: error: unary operator cannot be separated\
    \ from its operand\n    var gpaSumAverageAverageAverageAverageAverageAverage =\
    \ grades.reduce(0, combine: +\n                                              \
    \                                       ^\n                                  \
    \                                                    \n/tmp/tmp0z1w7uab.swift:49:1:\
    \ error: expected expression in list of expressions\n}\n^\n/tmp/tmp0z1w7uab.swift:26:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmp0z1w7uab.swift:27:31: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum = grades.reduce(0, combine: +)\n                   \
    \           ^   ~~~~~~~~~\n                                  \n/tmp/tmp0z1w7uab.swift:28:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaAverage = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n                                  ^   ~~~~~~~~~\n\
    \                                      \n/tmp/tmp0z1w7uab.swift:29:38: error:\
    \ extraneous argument label 'combine:' in call\n    var gpaSumAverage = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n                                     ^ \
    \  ~~~~~~~~~\n                                         \n/tmp/tmp0z1w7uab.swift:30:38:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaAverageSum =\
    \ grades.reduce(0, combine: +) / Double(grades.count)\n                      \
    \               ^   ~~~~~~~~~\n                                         \n/tmp/tmp0z1w7uab.swift:31:41:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n                    \
    \                    ^   ~~~~~~~~~\n                                         \
    \   \n/tmp/tmp0z1w7uab.swift:32:45: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSumAverageAverage = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                         "
  stdout: ''
  timestamp: 1660014300
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        let letterGrade = letterGradeForGPA(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphnauz9g2.swift:28:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(grade)\n                \
    \          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + letterGradeTable[gpa]\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8f228vu_.swift:31:37: error: cannot find 'letterGradeTable' in\
    \ scope\n        letterGrade = letterGrade + letterGradeTable[gpa]\n         \
    \                           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    if letterGrade == \"4.0\" {\n        gradesArray.append(\"A+\"\
    )\n    } else if letterGrade == \"3.7\" {\n        gradesArray.append(\"A\")\n\
    \    } else if letterGrade == \"3.3\" {\n        gradesArray.append(\"A-\")\n\
    \    } else if letterGrade == \"3.0\" {\n        gradesArray.append(\"B+\")\n\
    \    } else if letterGrade == \"2.7\" {\n        gradesArray.append(\"B\")\n \
    \   } else if letterGrade == \"2.3\" {\n        gradesArray.append(\"B-\")\n \
    \   } else if letterGrade == \"2.0\" {\n        gradesArray.append(\"C+\")\n \
    \   } else if letterGrade == \"1.7\" {\n        gradesArray.append(\"C\")\n  \
    \  } else if letterGrade == \"1.3\" {\n        gradesArray.append(\"C-\")\n  \
    \  } else if letterGrade == \"1.0\" {\n        gradesArray.append(\"D+\")\n  \
    \  } else if letterGrade == \"0.7\" {\n        gradesArray.append(\"D\")\n   \
    \ } else if letterGrade == \"0.0\" {\n        gradesArray.append(\"D-\")\n   \
    \ } else {\n        gradesArray.append(\"E\")\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnbf1lecr/tmpnbf1lecr.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7f75b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7f72adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7f72ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7f72ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbf1lecr                        0x0000560cf5577916 <unavailable> + 6422

    5    libc.so.6                          0x00002ac7f77a2460 __libc_start_main +
    245

    6    tmpnbf1lecr                        0x0000560cf5577439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gradeIndex\
    \ = 0\n    var grade = grades[gradeIndex]\n    while grade > 0.0 {\n        if\
    \ grade >= 3.0 {\n            gradeLetters.append(letterGrade(grade))\n      \
    \      gradeIndex += 1\n            grade = grades[gradeIndex]\n        } else\
    \ {\n            gradeLetters.append(letterGrade(grade))\n            gradeIndex\
    \ += 1\n            grade = grades[gradeIndex]\n        }\n    }\n    return gradeLetters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7al3drue.swift:30:33: error: cannot find 'letterGrade' in scope\n\
    \            gradeLetters.append(letterGrade(grade))\n                       \
    \         ^~~~~~~~~~~\n/tmp/tmp7al3drue.swift:34:33: error: cannot find 'letterGrade'\
    \ in scope\n            gradeLetters.append(letterGrade(grade))\n            \
    \                    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    \n    if gpa > 3.0 {\n        letterGrade = \"\
    A+\"\n    }\n    else if gpa > 2.7 {\n        letterGrade = \"A\"\n    }\n   \
    \ else if gpa > 2.3 {\n        letterGrade = \"A-\"\n    }\n    else if gpa >\
    \ 1.3 {\n        letterGrade = \"B+\"\n    }\n    else if gpa > 1.7 {\n      \
    \  letterGrade = \"B\"\n    }\n    else if gpa > 1.0 {\n        letterGrade =\
    \ \"B-\"\n    }\n    else if gpa > 0.7 {\n        letterGrade = \"C+\"\n    }\n\
    \    else if gpa > 0.3 {\n        letterGrade = \"C\"\n    }\n    else if gpa\
    \ > 0.0 {\n        letterGrade = \"C-\"\n    }\n    else if gpa > 0.0 {\n    \
    \    letterGrade = \"D+\"\n    }\n    else if gpa > 0.0 {\n        letterGrade\
    \ = \"D\"\n    }\n    else if gpa > 0.0 {\n        letterGrade = \"D-\"\n    }\n\
    \    else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm3pj35fd/tmpm3pj35fd.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac041d99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac041a90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac041a90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac041a8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm3pj35fd                        0x000055c10fdf36e6 <unavailable> + 5862

    5    libc.so.6                          0x00002ac041f85460 __libc_start_main +
    245

    6    tmpm3pj35fd                        0x000055c10fdf3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(for: grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc7zt9etx.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(for: grade)\n\
    \                          ^\n/tmp/tmpc7zt9etx.swift:27:13: note: 'letterGrade'\
    \ declared here\n        let letterGrade = letterGrade(for: grade)\n         \
    \   ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGrade\
    \ = grades[0]\n    var currentLetterGrade = \"\"\n    for grade in grades {\n\
    \        if grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        currentLetterGrade += String(grade - currentGrade)\n    }\n \
    \   letterGrades.append(currentLetterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgq4qe3rp/tmpgq4qe3rp.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad65242c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad64f39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad64f39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad64f387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq4qe3rp                        0x000055ef42d2d966 <unavailable> + 6502

    5    libc.so.6                          0x00002aad6542e460 __libc_start_main +
    245

    6    tmpgq4qe3rp                        0x000055ef42d2d489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = String()\n    var letterGradeIndex = -1\n\
    \    var gpaIndex = -1\n    while gpa > 0 {\n        gpaIndex += 1\n        if\
    \ gpa > 3.0 {\n            letterGradeIndex += 1\n            letterGrade = \"\
    A\" + letterGrade\n            gpaIndex += 1\n        }\n        if gpa > 2.7\
    \ {\n            letterGradeIndex += 1\n            letterGrade = \"B\" + letterGrade\n\
    \            gpaIndex += 1\n        }\n        if gpa > 2.3 {\n            letterGradeIndex\
    \ += 1\n            letterGrade = \"B-\" + letterGrade\n            gpaIndex +=\
    \ 1\n        }\n        if gpa > 1.7 {\n            letterGradeIndex += 1\n  \
    \          letterGrade = \"C\" + letterGrade\n            gpaIndex += 1\n    \
    \    }\n        if gpa > 1.3 {\n            letterGradeIndex += 1\n          \
    \  letterGrade = \"C-\" + letterGrade\n            gpaIndex += 1\n        }\n\
    \        if gpa > 1.0 {\n            letterGradeIndex += 1\n            letterGrade\
    \ = \"D\" + letterGrade\n            gpaIndex += 1\n        }\n        if gpa\
    \ > 0.7 {\n            letterGradeIndex += 1\n            letterGrade = \"D\"\
    \ + letterGrade\n            gpaIndex += 1\n        }\n        if gpa > 0.0 {\n\
    \            letterGradeIndex += 1\n            letterGrade = \"D\" + letterGrade\n\
    \            gpaIndex += 1\n        }\n        if gpa < 0.0 {\n            letterGradeIndex\
    \ += 1\n            letterGrade = \"E\" + letterGrade\n            gpaIndex +=\
    \ 1\n        }\n        gpa -= gpaIndex\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfsr_u2kj.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n       \
    \ } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n        } else\
    \ if grade > 0.7 {\n            gradesArray.append(\"C\")\n        } else if grade\
    \ > 0.3 {\n            gradesArray.append(\"C-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"D+\")\n        } else if grade > -0.7 {\n\
    \            gradesArray.append(\"D\")\n        } else if grade > -0.3 {\n   \
    \         gradesArray.append(\"D-\")\n        } else if grade > -1.0 {\n     \
    \       gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    F\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpo0c1njr4/tmpo0c1njr4.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6a4943c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6a463ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6a463a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6a46397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0c1njr4                        0x0000555dd9e5d7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ab6a4b2f460 __libc_start_main +
    245

    6    tmpo0c1njr4                        0x0000555dd9e5d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    if gpa > 3.0 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa > 2.7 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa > 2.3 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa > 1.7 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa > 1.0 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa > 0.7 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa > 0.0 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 0.0 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 0.7 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 1.0 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 1.7 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 2.0 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 2.3 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 3.0 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 3.7 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 4.0 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 4.3 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 4.7 {\n        letterGrade = letterGrade + \"-\"\n\
    \    }\n    \n    if gpa < 5.0 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 5.3 {\n        letterGrade = letterGrade + \"+\"\n\
    \    }\n    \n    if gpa < 5.7 {\n        letterGrade\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_xxog81r.swift:136:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp_xxog81r.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp_xxog81r.swift:115:9: warning: variable is unused\n        letterGrade\n\
    \        ^~~~~~~~~~~\n/tmp/tmp_xxog81r.swift:119:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp_xxog81r.swift:25:9: warning:\
    \ variable 'gradesArray' was never used; consider replacing with '_' or removing\
    \ it\n    var gradesArray: [String] = []\n        ^~~~~~~~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\
    \n        } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.7\
    \ && gpa < 2.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 1.3\
    \ && gpa < 1.7 {\n            letterGrade = \"B\"\n        } else if gpa > 1.0\
    \ && gpa < 1.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 0.7\
    \ && gpa < 1.0 {\n            letterGrade = \"C+\"\n        } else if gpa > 0.3\
    \ && gpa < 0.7 {\n            letterGrade = \"C\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"C-\"\n        } else {\n            letterGrade\
    \ = \"D+\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8x9fo7be/tmp8x9fo7be.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae527bd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5278c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5278c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5278c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8x9fo7be                        0x000055b3593087a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae527dbd460 __libc_start_main +
    245

    6    tmp8x9fo7be                        0x000055b3593082c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gpa = grades[0]\n    var letterGrade = \"\"\n    \n    for _ in\
    \ grades {\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n       \
    \ } else if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa\
    \ > 2.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 1.3 {\n \
    \           letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > -0.3 {\n            letterGrade = \"D\"\n        } else if gpa > -0.7\
    \ {\n            letterGrade = \"D-\"\n        } else if gpa > -1.0 {\n      \
    \      letterGrade = \"E\"\n        } else {\n            letterGrade = \"F\"\n\
    \        }\n        gradesArray.append(letterGrade)\n        gpa -= 1.0\n    \
    \    gradesArrayIndex += 1\n    }\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpx0pxb0e2/tmpx0pxb0e2.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892e7dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b892e4d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b892e4d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b892e4d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0pxb0e2                        0x0000561ff1b6a856 <unavailable> + 6230

    5    libc.so.6                          0x00002b892e9c7460 __libc_start_main +
    245

    6    tmpx0pxb0e2                        0x0000561ff1b6a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for i in\
    \ 0..<grades.count {\n        let grade = grades[i]\n        \n        switch\
    \ grade {\n        case 0...3.0:\n            gradesArray.append(\"A+\")\n   \
    \     case 3.0...6.0:\n            gradesArray.append(\"A\")\n        case 6.0...9.0:\n\
    \            gradesArray.append(\"A-\")\n        case 9.0...12.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 12.0...15.0:\n            gradesArray.append(\"\
    B\")\n        case 15.0...18.0:\n            gradesArray.append(\"B-\")\n    \
    \    case 18.0...21.0:\n            gradesArray.append(\"C+\")\n        case 21.0...24.0:\n\
    \            gradesArray.append(\"C\")\n        case 24.0...27.0:\n          \
    \  gradesArray.append(\"C-\")\n        case 27.0...30.0:\n            gradesArray.append(\"\
    D+\")\n        case 30.0...33.0:\n            gradesArray.append(\"D\")\n    \
    \    case 33.0...36.0:\n            gradesArray.append(\"D-\")\n        case 36.0...39.0:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpden7xsg6/tmpden7xsg6.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66239d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66236cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66236cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66236ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpden7xsg6                        0x000055ec84a76956 <unavailable> + 6486

    5    libc.so.6                          0x00002b6623bc4460 __libc_start_main +
    245

    6    tmpden7xsg6                        0x000055ec84a76479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnx3emwzd.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArraySum = grades.reduce(0, +)\n    var gradesArraySumMax\
    \ = gradesArraySum\n    var gradesArraySumMin = gradesArraySum\n    var gradesArraySumMinIndex\
    \ = 0\n    var gradesArraySumMaxIndex = 0\n    var gradesArraySumMaxIndexMin =\
    \ 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var gradesArraySumMaxIndexMin\
    \ = 0\n    var gradesArraySumMinIndexMax = 0\n    var grade\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqqi8_c3v.swift:36:9: error: invalid redeclaration of 'gradesArraySumMaxIndexMin'\n\
    \    var gradesArraySumMaxIndexMin = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:34:9:\
    \ note: 'gradesArraySumMaxIndexMin' previously declared here\n    var gradesArraySumMaxIndexMin\
    \ = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:37:9: error: invalid redeclaration of\
    \ 'gradesArraySumMinIndexMax'\n    var gradesArraySumMinIndexMax = 0\n       \
    \ ^\n/tmp/tmpqqi8_c3v.swift:35:9: note: 'gradesArraySumMinIndexMax' previously\
    \ declared here\n    var gradesArraySumMinIndexMax = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:38:9:\
    \ error: invalid redeclaration of 'gradesArraySumMaxIndexMin'\n    var gradesArraySumMaxIndexMin\
    \ = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:34:9: note: 'gradesArraySumMaxIndexMin'\
    \ previously declared here\n    var gradesArraySumMaxIndexMin = 0\n        ^\n\
    /tmp/tmpqqi8_c3v.swift:39:9: error: invalid redeclaration of 'gradesArraySumMinIndexMax'\n\
    \    var gradesArraySumMinIndexMax = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:35:9:\
    \ note: 'gradesArraySumMinIndexMax' previously declared here\n    var gradesArraySumMinIndexMax\
    \ = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:40:9: error: invalid redeclaration of\
    \ 'gradesArraySumMaxIndexMin'\n    var gradesArraySumMaxIndexMin = 0\n       \
    \ ^\n/tmp/tmpqqi8_c3v.swift:34:9: note: 'gradesArraySumMaxIndexMin' previously\
    \ declared here\n    var gradesArraySumMaxIndexMin = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:41:9:\
    \ error: invalid redeclaration of 'gradesArraySumMinIndexMax'\n    var gradesArraySumMinIndexMax\
    \ = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:35:9: note: 'gradesArraySumMinIndexMax'\
    \ previously declared here\n    var gradesArraySumMinIndexMax = 0\n        ^\n\
    /tmp/tmpqqi8_c3v.swift:42:9: error: invalid redeclaration of 'gradesArraySumMaxIndexMin'\n\
    \    var gradesArraySumMaxIndexMin = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:34:9:\
    \ note: 'gradesArraySumMaxIndexMin' previously declared here\n    var gradesArraySumMaxIndexMin\
    \ = 0\n        ^\n/tmp/tmpqqi8_c3v.swift:43:9: error: invalid redeclaration of\
    \ 'gradesArraySumMinIndexMax'\n    var gradesArraySumMinIndexMax = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksypmnj7.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if gpa > 1.3 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if gpa > 0.0\
    \ {\n            letterGrades.append(\"D\")\n        } else if gpa > 0.0 {\n \
    \           letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpocl7_gp0/tmpocl7_gp0.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc04a67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc0475eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc0475e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc0475d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocl7_gp0                        0x0000562b4a720856 <unavailable> + 6230

    5    libc.so.6                          0x00002acc04c53460 __libc_start_main +
    245

    6    tmpocl7_gp0                        0x0000562b4a720379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaLetter = String(gpa)\n    var gpaLetterIndex = gpaLetters.indexOf(gpaLetter)\n\
    \    if gpaLetterIndex == -1 {\n        gpaLetters.append(gpaLetter)\n       \
    \ gpaLetterIndex = gpaLetters.indexOf(gpaLetter)\n    }\n    if gpaLetterIndex\
    \ == gpaLetters.count - 1 {\n        gradeLetters.append(gpaLetter)\n    } else\
    \ {\n        gradeLetters.append(gpaLetters[gpaLetterIndex + 1])\n    }\n    return\
    \ gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcmmb6d08.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpcmmb6d08.swift:28:26:\
    \ error: cannot find 'gpaLetters' in scope\n    var gpaLetterIndex = gpaLetters.indexOf(gpaLetter)\n\
    \                         ^~~~~~~~~~\n/tmp/tmpcmmb6d08.swift:30:9: error: cannot\
    \ find 'gpaLetters' in scope\n        gpaLetters.append(gpaLetter)\n        ^~~~~~~~~~\n\
    /tmp/tmpcmmb6d08.swift:31:26: error: cannot find 'gpaLetters' in scope\n     \
    \   gpaLetterIndex = gpaLetters.indexOf(gpaLetter)\n                         ^~~~~~~~~~\n\
    /tmp/tmpcmmb6d08.swift:33:26: error: cannot find 'gpaLetters' in scope\n    if\
    \ gpaLetterIndex == gpaLetters.count - 1 {\n                         ^~~~~~~~~~\n\
    /tmp/tmpcmmb6d08.swift:36:29: error: cannot find 'gpaLetters' in scope\n     \
    \   gradeLetters.append(gpaLetters[gpaLetterIndex + 1])\n                    \
    \        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 1 {\n        return letterGrades\n    }\n    \n    if grades.count == 1 {\n\
    \        letterGrades.append(\"E\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 2 {\n        letterGrades.append(\"D+\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 3 {\n        letterGrades.append(\"\
    D-\")\n        return letterGrades\n    }\n    \n    if grades.count == 4 {\n\
    \        letterGrades.append(\"C+\")\n        return letterGrades\n    }\n   \
    \ \n    if grades.count == 5 {\n        letterGrades.append(\"C\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 6 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if grades.count == 7 {\n\
    \        letterGrades.append(\"B\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 8 {\n        letterGrades.append(\"B-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 9 {\n        letterGrades.append(\"\
    B\")\n        return letterGrades\n    }\n    \n    if grades.count == 10 {\n\
    \        letterGrades.append(\"B-\")\n        return letterGrades\n    }\n   \
    \ \n    if grades.count == 11 {\n        letterGrades.append(\"B\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 12 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if grades.count == 13 {\n\
    \        letterGrades.append(\"B\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 14 {\n        letterGrades.append(\"B-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 15 {\n        letterGrades.append(\"\
    B\")\n        return letterGrades\n    }\n    \n    if grades.count == 16 {\n\
    \        letterGrades.append(\"B-\")\n        return letterGrades\n    }\n   \
    \ \n    if grades.count == 17 {\n        letterGrades.append(\"B\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 18 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if grades.count == 19 {\n\
    \        letterGrades.append(\"B\")\n        return letterGrades\n    }\n    \n\
    \    if grades.count == 20 {\n        letterGrades.append(\"B-\")\n        return\
    \ letterGrades\n    }\n    \n    if grades.count == 21 {\n        letter\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaf069o6j.swift:153:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpaf069o6j.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpaf069o6j.swift:132:9: error: cannot find 'letter' in scope\n        letter\n\
    \        ^~~~~~\n/tmp/tmpaf069o6j.swift:136:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n \
    \       gpa = grade * 4\n        if gpa > 3.7 { \n            letterGrade = \"\
    A+\"\n        } else if gpa > 3.3 { \n            letterGrade = \"A\"\n      \
    \  } else if gpa > 3 { \n            letterGrade = \"A-\"\n        } else if gpa\
    \ > 2.7 { \n            letterGrade = \"B+\"\n        } else if gpa > 2.3 { \n\
    \            letterGrade = \"B\"\n        } else if gpa > 2 { \n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.7 { \n            letterGrade = \"C+\"\n\
    \        } else if gpa > 1.3 { \n            letterGrade = \"C\"\n        } else\
    \ if gpa > 1 { \n            letterGrade = \"C-\"\n        } else if gpa > 0.7\
    \ { \n            letterGrade = \"D+\"\n        } else if gpa > 0 { \n       \
    \     letterGrade = \"D\"\n        } else { \n            letterGrade = \"D-\"\
    \n        }\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpr4m_1747/tmpr4m_1747.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b357f351c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b357f048b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b357f048988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b357f0477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4m_1747                        0x000055f5134977a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b357f53d460 __libc_start_main +
    245

    6    tmpr4m_1747                        0x000055f5134972c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"E\"\n    var currentLetterGradeIndex = 0\n    for\
    \ index in 0..<gradesArray.count {\n        let grade = gradesArray[index]\n \
    \       if grade > currentGrade {\n            currentGrade = grade\n        \
    \    currentLetterGrade = \"E\"\n            currentLetterGradeIndex = 0\n   \
    \     } else if grade == currentGrade {\n            currentLetterGradeIndex +=\
    \ 1\n            if currentLetterGradeIndex == 2 {\n                currentLetterGrade\
    \ = \"A+\"\n            } else if currentLetterGradeIndex == 3 {\n           \
    \     currentLetterGrade = \"A\"\n            } else if currentLetterGradeIndex\
    \ == 4 {\n                currentLetterGrade = \"A-\"\n            } else if currentLetterGradeIndex\
    \ == 5 {\n                currentLetterGrade = \"B+\"\n            } else if currentLetterGradeIndex\
    \ == 6 {\n                currentLetterGrade = \"B\"\n            } else if currentLetterGradeIndex\
    \ == 7 {\n                currentLetterGrade = \"B-\"\n            } else if currentLetterGradeIndex\
    \ == 8 {\n                currentLetterGrade = \"C+\"\n            } else if currentLetterGradeIndex\
    \ == 9 {\n                currentLetterGrade = \"C\"\n            } else if currentLetterGradeIndex\
    \ == 10 {\n                currentLetterGrade = \"C-\"\n            } else if\
    \ currentLetterGradeIndex == 11 {\n                currentLetterGrade = \"D+\"\
    \n            } else if currentLetterGradeIndex == 12 {\n                currentLetterGrade\
    \ = \"D\"\n            } else if currentLetterGradeIndex == 13 {\n           \
    \     currentLetterGrade = \"D-\"\n            } else if currentLetterGradeIndex\
    \ == 14 {\n                currentLetterGrade = \"E\"\n            }\n       \
    \ }\n        letterGrades.append(currentLetterGrade)\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpeswtw9eb/tmpeswtw9eb.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcc927c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcc61eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dcc61e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dcc61d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeswtw9eb                        0x00005605647e0926 <unavailable> + 6438

    5    libc.so.6                          0x00002b8dccb13460 __libc_start_main +
    245

    6    tmpeswtw9eb                        0x00005605647e0449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = String()\n    \n    if gpa < 4.0 {\n    \
    \    letterGrade = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"\
    D-\"\n    } else if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa\
    \ < 3.0 {\n        letterGrade = \"B-\"\n    } else if gpa < 2.7 {\n        letterGrade\
    \ = \"B+\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade =\
    \ \"A-\"\n    } else if gpa < 1.0 {\n        letterGrade = \"A+\"\n    } else\
    \ if gpa < 0.7 {\n        letterGrade = \"D+\"\n    } else if gpa < 0.0 {\n  \
    \      letterGrade = \"D-\"\n    } else {\n        letterGrade = \"C\"\n    }\n\
    \    \n    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7sczd496.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        if gpa > 3.7 { letterGrade = \"A+\" }\n  \
    \      else if gpa > 3.3 { letterGrade = \"A-\" }\n        else if gpa > 3.0 {\
    \ letterGrade = \"B+\" }\n        else if gpa > 2.7 { letterGrade = \"B\" }\n\
    \        else if gpa > 2.3 { letterGrade = \"B-\" }\n        else if gpa > 2.0\
    \ { letterGrade = \"C+\" }\n        else if gpa > 1.7 { letterGrade = \"C\" }\n\
    \        else if gpa > 1.3 { letterGrade = \"C-\" }\n        else if gpa > 1.0\
    \ { letterGrade = \"D+\" }\n        else if gpa > 0.7 { letterGrade = \"D\" }\n\
    \        else if gpa > 0.0 { letterGrade = \"D-\" }\n        else { letterGrade\
    \ = \"E\" }\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvhuts13x/tmpvhuts13x.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6827b1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6827816b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6827816988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68278157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhuts13x                        0x000055f88462c7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b6827d0b460 __libc_start_main +
    245

    6    tmpvhuts13x                        0x000055f88462c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = letterGrades[Int(gpa)]\n    if letterGrade\
    \ == nil {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade!)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr3t7b4xn.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade: String = \"\"\n    var gradeIndex: Int = 0\n\
    \    var grade: Double = 0\n    var gradeLetter: String = \"\"\n    \n    while\
    \ gpa > 0 {\n        grade = gpa % 10\n        gpa = gpa / 10\n        gradeIndex\
    \ = gradeIndex + 1\n        \n        if grade < 3 {\n            letterGrade\
    \ = \"A+\"\n        } else if grade < 6 {\n            letterGrade = \"A\"\n \
    \       } else if grade < 9 {\n            letterGrade = \"A-\"\n        } else\
    \ {\n            letterGrade = \"B+\"\n        }\n        \n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfa13sp6k.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 3.0 {\n        letterGrade\
    \ = \"D-\"\n    } else if gpa < 3.3 {\n        letterGrade = \"C-\"\n    } else\
    \ if gpa < 3.7 {\n        letterGrade = \"B-\"\n    } else if gpa < 4.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 4.3 {\n        letterGrade =\
    \ \"B+\"\n    } else if gpa < 4.7 {\n        letterGrade = \"A+\"\n    } else\
    \ if gpa < 5.0 {\n        letterGrade = \"A+\"\n    } else if gpa < 5.3 {\n  \
    \      letterGrade = \"A\"\n    } else if gpa < 5.7 {\n        letterGrade = \"\
    A\"\n    } else if gpa < 6.0 {\n        letterGrade = \"A-\"\n    } else if gpa\
    \ < 6.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 6.7 {\n        letterGrade\
    \ = \"A\"\n    } else if gpa < 7.0 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 7.3 {\n        letterGrade = \"A+\"\n    } else if gpa < 7.7 {\n  \
    \      letterGrade = \"A+\"\n    } else if gpa < 8.0 {\n        letterGrade =\
    \ \"A+\"\n    } else if gpa < 8.3 {\n        letterGrade = \"A+\"\n    } else\
    \ if gpa < 8.7 {\n        letterGrade = \"A+\"\n    } else if gpa < 9.0 {\n  \
    \      letterGrade = \"A+\"\n    } else {\n        letterGrade = \"E\"\n    }\n\
    \    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbka8c11b.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    for grade in grades {\n       \
    \ gpa = grade * 4\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n\
    \        } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.3\
    \ {\n            letterGrade = \"B+\"\n        } else if gpa > 1.7 {\n       \
    \     letterGrade = \"B\"\n        } else if gpa > 1.0 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 0.7 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 0.3 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0.0 {\n       \
    \     letterGrade = \"D\"\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D-\"\n        } else if gpa > 0.0 {\n            letterGrade = \"E\"\n \
    \       } else {\n            letterGrade = \"F\"\n        }\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz0kkfcz1/tmpz0kkfcz1.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8044739c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8044430b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8044430988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b804442f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0kkfcz1                        0x00005636f5d3d7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8044925460 __libc_start_main +
    245

    6    tmpz0kkfcz1                        0x00005636f5d3d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffOfSquares = grades.reduce(0, combine: +)\n    var gpaSumOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffOfSquaresOfSquares = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfSquaresOfSquaresOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffOfSquaresOfSquaresOfSquares = grades.reduce(0, combine: +)\n\
    \    var gpaSumOfSquaresOfSquaresOfSquaresOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffOfSquaresOfSquaresOfSquaresOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = grades.reduce(0,\
    \ combine: +)\n    var gpaDiffOfSquaresOfSquaresOfSquaresOfSquaresOfSquares =\
    \ grades.reduce(0, combine: +)\n    var gpaSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffOfSquaresOfSquaresOfSquaresOfSquaresOfSqu\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkwzmqp2w.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpkwzmqp2w.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpkwzmqp2w.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiff = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpkwzmqp2w.swift:29:40: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumOfSquares = grades.reduce(0, combine: +)\n                    \
    \                   ^   ~~~~~~~~~\n                                          \
    \ \n/tmp/tmpkwzmqp2w.swift:30:41: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaDiffOfSquares = grades.reduce(0, combine: +)\n         \
    \                               ^   ~~~~~~~~~\n                              \
    \              \n/tmp/tmpkwzmqp2w.swift:31:49: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumOfSquaresOfSquares = grades.reduce(0, combine:\
    \ +)\n                                                ^   ~~~~~~~~~\n        \
    \                                            \n/tmp/tmpkwzmqp2w.swift:32:50: error:\
    \ extraneous argument label 'combine:' in call\n    var gpaDiffOfSquaresOfSquares\
    \ = grades.reduce(0, combine: +)\n                                           \
    \      ^   ~~~~~~~~~\n                                                     \n\
    /tmp/tmpkwzmqp2w.swift:33:58: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumOfSquaresOfSquaresOfSquares = grades.reduce(0, combine: +)\n  \
    \                                                       ^   ~~~~~~~~~\n      \
    \                                                       \n/tmp/tmpkwzmqp2w.swift:34:59:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffOfSquaresOfSquaresOfSquares\
    \ = grades.reduce(0, combi"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \        \n        if gpa > 3.7 {\n            letterGrade = letterGrade + \"\
    +\"\n            gpa = gpa - 3.7\n        } else if gpa > 3.3 {\n            letterGrade\
    \ = letterGrade + \"-\"\n            gpa = gpa - 3.3\n        } else if gpa >\
    \ 2.7 {\n            letterGrade = letterGrade + \"+\"\n            gpa = gpa\
    \ - 2.7\n        } else if gpa > 2.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n            gpa = gpa - 2.3\n        } else if gpa > 1.7 {\n      \
    \      letterGrade = letterGrade + \"+\"\n            gpa = gpa - 1.7\n      \
    \  } else if gpa > 1.3 {\n            letterGrade = letterGrade + \"-\"\n    \
    \        gpa = gpa - 1.3\n        } else if gpa > 1.0 {\n            letterGrade\
    \ = letterGrade + \"+\"\n            gpa = gpa - 1.0\n        } else if gpa >\
    \ 0.7 {\n            letterGrade = letterGrade + \"-\"\n            gpa = gpa\
    \ - 0.7\n        } else {\n            letterGrade = letterGrade + \"-\"\n   \
    \         gpa = gpa - 0.0\n        }\n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpwdig9n0j/tmpwdig9n0j.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0f959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0f650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0f650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0f64f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdig9n0j                        0x00005566d3be58b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b1b0fb45460 __libc_start_main +
    245

    6    tmpwdig9n0j                        0x00005566d3be53d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B+\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade =\
    \ \"A\"\n    } else if gpa < 1.0 {\n        letterGrade = \"C+\"\n    } else if\
    \ gpa < 0.7 {\n        letterGrade = \"C\"\n    } else if gpa < 0.3 {\n      \
    \  letterGrade = \"B\"\n    } else if gpa < 0.0 {\n        letterGrade = \"A\"\
    \n    } else {\n        letterGrade = \"A+\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6uv5mde2.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // TODO:\
    \ Write your code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1dd3iy6x/tmp1dd3iy6x.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a381c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a37ebfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a37ebf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a37ebe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1dd3iy6x                        0x000055bedfc70636 <unavailable> + 5686

    5    libc.so.6                          0x00002b3a383b4460 __libc_start_main +
    245

    6    tmp1dd3iy6x                        0x000055bedfc70159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    for grade in grades {\n        gpa = grade * 4.0\n        if gpa\
    \ > 3.0 {\n            gradesArray.append(String(format: \"%.2f\", gpa))\n   \
    \     } else {\n            if gpa > 2.7 {\n                gradesArray.append(String(format:\
    \ \"%.2f\", gpa))\n            } else {\n                if gpa > 2.3 {\n    \
    \                gradesArray.append(String(format: \"%.2f\", gpa))\n         \
    \       } else {\n                    if gpa > 1.7 && gpa < 2.0 {\n          \
    \              gradesArray.append(String(format: \"%.2f\", gpa))\n           \
    \         } else {\n                        if gpa > 1.0 {\n                 \
    \           gradesArray.append(String(format: \"%.2f\", gpa))\n              \
    \          } else {\n                            if gpa > 0.7 {\n            \
    \                    gradesArray.append(String(format: \"%.2f\", gpa))\n     \
    \                       } else {\n                                if gpa > 0.0\
    \ {\n                                    gradesArray.append(String(format: \"\
    %.2f\", gpa))\n                                } else {\n                    \
    \                gradesArray.append(String(format: \"%.2f\", gpa))\n         \
    \                       }\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe53vlvbj.swift:30:32: error: no exact matches in call to initializer\
    \ \n            gradesArray.append(String(format: \"%.2f\", gpa))\n          \
    \                     ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpe53vlvbj.swift:30:32:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n            gradesArray.append(String(format: \"%.2f\", gpa))\n      \
    \                         ^\nSwift.String:3:12: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    public init<S>(_ characters: S) where S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpe53vlvbj.swift:33:36: error:\
    \ no exact matches in call to initializer \n                gradesArray.append(String(format:\
    \ \"%.2f\", gpa))\n                                   ^\nSwift.String:4:23: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmpe53vlvbj.swift:33:36: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n                gradesArray.append(String(format:\
    \ \"%.2f\", gpa))\n                                   ^\nSwift.String:3:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.String:4:12: note"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // The\
    \ first letter grade is always A+\n    letterGrades.append(\"A+\")\n    \n   \
    \ // The second letter grade is always B\n    if grades.contains(3.7) {\n    \
    \    letterGrades.append(\"B\")\n    }\n    \n    // The third letter grade is\
    \ always C- \n    if grades.contains(3.3) {\n        letterGrades.append(\"C-\"\
    )\n    }\n    \n    // The fourth letter grade is always C\n    if grades.contains(3.0)\
    \ {\n        letterGrades.append(\"C\")\n    }\n    \n    // The fifth letter\
    \ grade is always A-\n    if grades.contains(2.7) {\n        letterGrades.append(\"\
    A-\")\n    }\n    \n    // The sixth letter grade is always B\n    if grades.contains(2.3)\
    \ {\n        letterGrades.append(\"B\")\n    }\n    \n    // The seventh letter\
    \ grade is always B-\n    if grades.contains(2.0) {\n        letterGrades.append(\"\
    B-\")\n    }\n    \n    // The eighth letter grade is always C+\n    if grades.contains(1.7)\
    \ {\n        letterGrades.append(\"C+\")\n    }\n    \n    // The ninth letter\
    \ grade is always C\n    if grades.contains(1.2) {\n        letterGrades.append(\"\
    C\")\n    }\n    \n    // The tenth letter grade is always D+\n    if grades.contains(0.7)\
    \ {\n        letterGrades.append(\"D+\")\n    }\n    \n    // The eleventh letter\
    \ grade is always D\n    if grades.contains(0.2) {\n        letterGrades.append(\"\
    D\")\n    }\n    \n    // The twelfth letter grade is always D-\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"D-\")\n    }\n    \n    // The letter grade\
    \ is always E\n    if grades.contains(0.0) {\n        letterGrades.append(\"E\"\
    )\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzzdndlni/tmpzzdndlni.swift:106: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba51b63ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba51b335b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba51b335988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba51b3347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzdndlni                        0x0000564ad6f1d736 <unavailable> + 5942

    5    libc.so.6                          0x00002ba51b82a460 __libc_start_main +
    245

    6    tmpzzdndlni                        0x0000564ad6f1d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + letterGradeTable[gpa]\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphr4ca_yr.swift:31:37: error: cannot find 'letterGradeTable' in\
    \ scope\n        letterGrade = letterGrade + letterGradeTable[gpa]\n         \
    \                           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if gpa > 2.0 {\n            letterGrades.append(\"D\")\n\
    \        } else if gpa > 1.7 {\n            letterGrades.append(\"C\")\n     \
    \   } else if gpa > 1.0 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"B-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"B+\")\n        } else if gpa > -0.3\
    \ {\n            letterGrades.append(\"A-\")\n        } else if gpa > -0.7 {\n\
    \            letterGrades.append(\"A+\")\n        } else {\n            letterGrades.append(\"\
    A\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5tydxd6v/tmp5tydxd6v.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba780dd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba780acbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba780acb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba780aca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tydxd6v                        0x0000562c0fec6856 <unavailable> + 6230

    5    libc.so.6                          0x00002ba780fc0460 __libc_start_main +
    245

    6    tmp5tydxd6v                        0x0000562c0fec6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Write\
    \ your code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprelm_t5g/tmprelm_t5g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf4868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf455fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf455f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf455e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprelm_t5g                        0x0000557dfc648636 <unavailable> + 5686

    5    libc.so.6                          0x00002aedf4a54460 __libc_start_main +
    245

    6    tmprelm_t5g                        0x0000557dfc648159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex\
    \ = (gpa - grades[gpaIndex])/grades[gpaIndex]\n        letterGrades.append(letterGrade(gpaIndex))\n\
    \        gpa -= gpaIndex*grades[gpaIndex]\n        gpaIndex += 1\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf33u1i07.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpf33u1i07.swift:30:29:\
    \ error: cannot find 'letterGrade' in scope\n        letterGrades.append(letterGrade(gpaIndex))\n\
    \                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaDouble = Double(gpa)\n    var gpaInt = (gpaDouble *\
    \ 100).rounded(.down)\n    var gpaString = String(gpaInt)\n    var gpaIndex =\
    \ gpaString.index(gpaString)\n    var gpaLetter = String(gpaString.suffix(gpaIndex))\n\
    \    \n    if gpaDouble < 3.0 {\n        letterGrades.append(\"E\")\n    } else\
    \ {\n        letterGrades.append(\"D\")\n    }\n    \n    if gpaDouble < 3.3 {\n\
    \        letterGrades.append(\"B-\")\n    } else if gpaDouble < 3.7 {\n      \
    \  letterGrades.append(\"B-\")\n    } else if gpaDouble < 4.0 {\n        letterGrades.append(\"\
    B-\")\n    } else if gpaDouble < 4.3 {\n        letterGrades.append(\"B-\")\n\
    \    } else if gpaDouble < 4.7 {\n        letterGrades.append(\"B-\")\n    } else\
    \ if gpaDouble < 5.0 {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble\
    \ < 5.3 {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble < 5.7\
    \ {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble < 6.0 {\n  \
    \      letterGrades.append(\"B-\")\n    } else if gpaDouble < 6.3 {\n        letterGrades.append(\"\
    B-\")\n    } else if gpaDouble < 6.7 {\n        letterGrades.append(\"B-\")\n\
    \    } else if gpaDouble < 7.0 {\n        letterGrades.append(\"B-\")\n    } else\
    \ if gpaDouble < 7.3 {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble\
    \ < 7.7 {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble < 8.0\
    \ {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble < 8.3 {\n  \
    \      letterGrades.append(\"B-\")\n    } else if gpaDouble < 8.7 {\n        letterGrades.append(\"\
    B-\")\n    } else if gpaDouble < 9.0 {\n        letterGrades.append(\"B-\")\n\
    \    } else if gpaDouble < 9.3 {\n        letterGrades.append(\"B-\")\n    } else\
    \ if gpaDouble < 9.7 {\n        letterGrades.append(\"B-\")\n    } else if gpaDouble\
    \ < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1c66ewi2.swift:80:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp1c66ewi2.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.0 {\n            letterGrades.append(\"A\")\n\
    \        } else if gpa > 1.7 {\n            letterGrades.append(\"A-\")\n    \
    \    } else if gpa > 1.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"B-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"C+\")\n        } else if gpa > -0.3\
    \ {\n            letterGrades.append(\"C\")\n        } else if gpa > -0.7 {\n\
    \            letterGrades.append(\"C-\")\n        } else if gpa > -1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if gpa > -1.7 {\n      \
    \      letterGrades.append(\"D\")\n        } else if gpa > -2.0 {\n          \
    \  letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5qe8w42x/tmp5qe8w42x.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae022c8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae022985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae022985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0229847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qe8w42x                        0x000055cb718c8856 <unavailable> + 6230

    5    libc.so.6                          0x00002ae022e7a460 __libc_start_main +
    245

    6    tmp5qe8w42x                        0x000055cb718c8379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = -1\n    var gpaIndex2 = -1\n    var gpaIndex3\
    \ = -1\n    var gpaIndex4 = -1\n    var gpaIndex5 = -1\n    var gpaIndex6 = -1\n\
    \    var gpaIndex7 = -1\n    var gpaIndex8 = -1\n    var gpaIndex9 = -1\n    var\
    \ gpaIndex10 = -1\n    var gpaIndex11 = -1\n    var gpaIndex12 = -1\n    var gpaIndex13\
    \ = -1\n    var gpaIndex14 = -1\n    var gpaIndex15 = -1\n    var gpaIndex16 =\
    \ -1\n    var gpaIndex17 = -1\n    var gpaIndex18 = -1\n    var gpaIndex19 = -1\n\
    \    var gpaIndex20 = -1\n    var gpaIndex21 = -1\n    var gpaIndex22 = -1\n \
    \   var gpaIndex23 = -1\n    var gpaIndex24 = -1\n    var gpaIndex25 = -1\n  \
    \  var gpaIndex26 = -1\n    var gpaIndex27 = -1\n    var gpaIndex28 = -1\n   \
    \ var gpaIndex29 = -1\n    var gpaIndex30 = -1\n    var gpaIndex31 = -1\n    var\
    \ gpaIndex32 = -1\n    var gpaIndex33 = -1\n    var gpaIndex34 = -1\n    var gpaIndex35\
    \ = -1\n    var gpaIndex36 = -1\n    var gpaIndex37 = -1\n    var gpaIndex38 =\
    \ -1\n    var gpaIndex39 = -1\n    var gpaIndex40 = -1\n    var gpaIndex41 = -1\n\
    \    var gpaIndex42 = -1\n    var gpaIndex43 = -1\n    var gpaIndex44 = -1\n \
    \   var gpaIndex45 = -1\n    var gpaIndex46 = -1\n    var gpaIndex47 = -1\n  \
    \  var gpaIndex48 = -1\n    var gpaIndex49 = -1\n    var gpaIndex50 = -1\n   \
    \ var gpaIndex51 = -1\n    var gpaIndex52 = -1\n    var gpaIndex53 = -1\n    var\
    \ gpaIndex54 = -1\n    var gpaIndex55 = -1\n    var gpaIndex56 = -1\n    var gpaIndex57\
    \ = -1\n    var gpaIndex58 = -1\n    var gpaIndex59 = -1\n    var gpaIndex60 =\
    \ -1\n    var gpaIndex61 = -1\n    var gpaIndex62 = -1\n    var gpaIndex63 = -1\n\
    \    var gpaIndex64 = -1\n    var gpaIndex65 = -1\n    var gpaIndex66 = -1\n \
    \   var gpaIndex67 = -1\n    var gpaIndex68 = -1\n    var gpa\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr4y9f2px.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpr4y9f2px.swift:95:9:\
    \ error: type annotation missing in pattern\n    var gpa\n        ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGrade\
    \ = grades.last!\n    var currentLetterGrade = \"\"\n    for grade in grades {\n\
    \        if grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        currentLetterGrade += String(grade - currentGrade)\n    }\n \
    \   letterGrades.append(currentLetterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3abpdt39/tmp3abpdt39.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ca558bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ca5282b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ca5282988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ca52817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3abpdt39                        0x00005652bf60fa46 <unavailable> + 6726

    5    libc.so.6                          0x00002b7ca5777460 __libc_start_main +
    245

    6    tmp3abpdt39                        0x00005652bf60f569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaLetter = String(gpa)\n    var gpaLetterArray = [String]()\n\
    \    if gpa < 3.0 {\n        gpaLetterArray = [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"]\n    } else if gpa < 3.3 {\n        gpaLetterArray = [\"A+\", \"B\", \"\
    C\", \"C-\", \"C\"]\n    } else if gpa < 3.7 {\n        gpaLetterArray = [\"A+\"\
    , \"B\", \"C\", \"C\", \"A-\", \"A\"]\n    } else if gpa < 4.0 {\n        gpaLetterArray\
    \ = [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\"]\n    } else if gpa < 4.3 {\n\
    \        gpaLetterArray = [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\", \"A-\"\
    ]\n    } else if gpa < 4.7 {\n        gpaLetterArray = [\"A+\", \"B\", \"C\",\
    \ \"C\", \"A-\", \"B\", \"B-\"]\n    } else if gpa < 5.0 {\n        gpaLetterArray\
    \ = [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\", \"B-\", \"A-\"]\n    } else if\
    \ gpa < 5.3 {\n        gpaLetterArray = [\"A+\", \"B\", \"C\", \"C\", \"A-\",\
    \ \"B\", \"B-\", \"B-\"]\n    } else if gpa < 5.7 {\n        gpaLetterArray =\
    \ [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\", \"B-\", \"B-\", \"A-\"]\n    }\
    \ else if gpa < 6.0 {\n        gpaLetterArray = [\"A+\", \"B\", \"C\", \"C\",\
    \ \"A-\", \"B\", \"B-\", \"B-\", \"B-\"]\n    } else if gpa < 6.3 {\n        gpaLetterArray\
    \ = [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\", \"B-\", \"B-\", \"B-\", \"A-\"\
    ]\n    } else if gpa < 6.7 {\n        gpaLetterArray = [\"A+\", \"B\", \"C\",\
    \ \"C\", \"A-\", \"B\", \"B-\", \"B-\", \"B-\", \"B-\"]\n    } else if gpa < 7.0\
    \ {\n        gpaLetterArray = [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\", \"\
    B-\", \"B-\", \"B-\", \"B-\", \"A-\"]\n    } else if gpa < 7.3 {\n        gpaLetterArray\
    \ = [\"A+\", \"B\", \"C\", \"C\", \"A-\", \"B\", \"B-\", \"B-\", \"B-\", \"B-\"\
    , \"B-\"]\n    } else if gpa < 7.7 {\n        gpaLetterArray = [\"A+\", \"B\"\
    , \"C\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpas69pvgz.swift:58:38: error: unterminated string literal\n    \
    \    gpaLetterArray = [\"A+\", \"B\", \"C\n                                  \
    \   ^\n/tmp/tmpas69pvgz.swift:79:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpas69pvgz.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpas69pvgz.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmpas69pvgz.swift:62:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var letterGrade = \"\"\
    \n    var gradeIndex = 0\n    var gradeIndex2 = 0\n    var gradeIndex3 = 0\n \
    \   var gradeIndex4 = 0\n    var gradeIndex5 = 0\n    var gradeIndex6 = 0\n  \
    \  var gradeIndex7 = 0\n    var gradeIndex8 = 0\n    var gradeIndex9 = 0\n   \
    \ var gradeIndex10 = 0\n    var gradeIndex11 = 0\n    var gradeIndex12 = 0\n \
    \   var gradeIndex13 = 0\n    var gradeIndex14 = 0\n    var gradeIndex15 = 0\n\
    \    var gradeIndex16 = 0\n    var gradeIndex17 = 0\n    var gradeIndex18 = 0\n\
    \    var gradeIndex19 = 0\n    var gradeIndex20 = 0\n    var gradeIndex21 = 0\n\
    \    var gradeIndex22 = 0\n    var gradeIndex23 = 0\n    var gradeIndex24 = 0\n\
    \    var gradeIndex25 = 0\n    var gradeIndex26 = 0\n    var gradeIndex27 = 0\n\
    \    var gradeIndex28 = 0\n    var gradeIndex29 = 0\n    var gradeIndex30 = 0\n\
    \    var gradeIndex31 = 0\n    var gradeIndex32 = 0\n    var gradeIndex33 = 0\n\
    \    var gradeIndex34 = 0\n    var gradeIndex35 = 0\n    var gradeIndex36 = 0\n\
    \    var gradeIndex37 = 0\n    var gradeIndex38 = 0\n    var gradeIndex39 = 0\n\
    \    var gradeIndex40 = 0\n    var gradeIndex41 = 0\n    var gradeIndex42 = 0\n\
    \    var gradeIndex43 = 0\n    var gradeIndex44 = 0\n    var gradeIndex45 = 0\n\
    \    var gradeIndex46 = 0\n    var gradeIndex47 = 0\n    var gradeIndex48 = 0\n\
    \    var gradeIndex49 = 0\n    var gradeIndex50 = 0\n    var gradeIndex51 = 0\n\
    \    var gradeIndex52 = 0\n    var gradeIndex53 = 0\n    var gradeIndex54 = 0\n\
    \    var gradeIndex55 = 0\n    var gradeIndex56 = 0\n    var gradeIndex57 = 0\n\
    \    var gradeIndex58 = 0\n    var gradeIndex59 = 0\n    var gradeIndex60 = 0\n\
    \    var gradeIndex61 = 0\n    var gradeIndex62 = 0\n    var gradeIndex63 = 0\n\
    \    var gradeIndex64 = 0\n    var gradeIndex65 = 0\n    var gradeIndex66 = 0\n\
    \    var gradeIndex67 = 0\n    var gradeIndex68 = 0\n    var gradeIndex69 = 0\n\
    \    var gradeIndex70 = 0\n    var gradeIndex71 = 0\n    var gradeIndex72 = 0\n\
    \    var gradeIndex73 = 0\n    var gradeIndex74 = 0\n    var gradeIndex75 = 0\n\
    \    var gradeIndex76 = 0\n    var gradeIndex77 = 0\n    var gradeIndex78 = 0\n\
    \    var gradeIndex79 = 0\n    var gradeIndex80 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpux1oy2rb.swift:25:9: warning: initialization of variable 'gradesArray'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArray = grades.sorted()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpux1oy2rb.swift:26:9:\
    \ warning: initialization of variable 'gradesArrayCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCount =\
    \ grades.count\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpux1oy2rb.swift:27:9:\
    \ warning: initialization of variable 'letterGrades' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var letterGrades = [String]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpux1oy2rb.swift:28:9: warning: initialization\
    \ of variable 'letterGrade' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var letterGrade = \"\"\n    ~~~~^~~~~~~~~~~\n   \
    \ _\n/tmp/tmpux1oy2rb.swift:29:9: warning: initialization of variable 'gradeIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradeIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpux1oy2rb.swift:30:9:\
    \ warning: initialization of variable 'gradeIndex2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradeIndex2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpux1oy2rb.swift:31:9: warning: initialization of variable 'gradeIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradeIndex3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpux1oy2rb.swift:32:9:\
    \ warning: initialization of variable 'gradeIndex4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradeIndex4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpux1oy2rb.swift:33:9: warning: initialization of variable 'gradeIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradeIndex5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpux1oy2rb.swift:34:9:\
    \ warning: initialization of variable 'gradeIndex6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradeIndex6 = 0\n    "
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        letterGrade = \"E\"\n    }\n   \
    \ gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_423jzo.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGrade\
    \ = grades.first!\n    var currentLetterGrade = \"\"\n    \n    for grade in grades\
    \ {\n        if grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        \n        if grade == currentGrade {\n            currentLetterGrade\
    \ += \"+\"\n        }\n        \n        if grade < currentGrade {\n         \
    \   currentLetterGrade += \"-\"\n        }\n    }\n    \n    letterGrades.append(currentLetterGrade)\n\
    \    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdhagca1q/tmpdhagca1q.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ed3dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ed3af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ed3af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ed3af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhagca1q                        0x0000560ce38bb946 <unavailable> + 6470

    5    libc.so.6                          0x00002b6ed3fea460 __libc_start_main +
    245

    6    tmpdhagca1q                        0x0000560ce38bb469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if gpa > 1.3 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if gpa > 0.0\
    \ {\n            letterGrades.append(\"D\")\n        } else if gpa > 0.0 {\n \
    \           letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpocl7_gp0/tmpocl7_gp0.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc04a67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc0475eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc0475e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc0475d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocl7_gp0                        0x0000562b4a720856 <unavailable> + 6230

    5    libc.so.6                          0x00002acc04c53460 __libc_start_main +
    245

    6    tmpocl7_gp0                        0x0000562b4a720379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade:\
    \ Double = 0.0\n    var totalLetterGrade: String = \"\"\n    \n    for i in grades\
    \ {\n        totalGrade += i\n    }\n    \n    for i in grades {\n        totalLetterGrade\
    \ = String(format: \"%.1f\", totalGrade / Double(grades.count))\n        \n  \
    \      if totalGrade >= 3.0 {\n            gradesArray.append(String(format: \"\
    %.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade / Double(grades.count)))\n            gradesArray.append(String(format:\
    \ \"%.1f\", totalGrade - totalGrade / Double(grades.count)))\n            grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6zgmm7g3.swift:76:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp6zgmm7g3.swift:33:21:\
    \ note: to match this opening '{'\n    for i in grades {\n                   \
    \ ^\n/tmp/tmp6zgmm7g3.swift:76:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp6zgmm7g3.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp6zgmm7g3.swift:34:28: error: no exact matches in call to initializer \n\
    \        totalLetterGrade = String(format: \"%.1f\", totalGrade / Double(grades.count))\n\
    \                           ^\nSwift.String:4:23: note: candidate '(String) ->\
    \ String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmp6zgmm7g3.swift:34:28:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        totalLetterGrade = String(format: \"%.1f\", totalGrade / Double(grades.count))\n\
    \                           ^\nSwift.String:3:12: note: candidate '(String) ->\
    \ String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmp6zgmm7g3.swift:37:32: error:\
    \ no exact matches in call to initializer \n       "
  stdout: ''
  timestamp: 1660014615
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        let letterGrade = letterGradeForGPA(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphnauz9g2.swift:28:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(grade)\n                \
    \          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqmvgcaux/tmpqmvgcaux.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7a44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e773bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e773b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e773a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmvgcaux                        0x000055aeaffbb7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b43e7c30460 __libc_start_main +
    245

    6    tmpqmvgcaux                        0x000055aeaffbb319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksypmnj7.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        \n        if gpa > 3.7 {\n            letterGrade\
    \ = \"A+\"\n        } else if gpa > 3.3 {\n            letterGrade = \"A\"\n \
    \       } else if gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else\
    \ if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa > 2.3\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa > 2.0 {\n       \
    \     letterGrade = \"C+\"\n        } else if gpa > 1.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 1.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 1.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.7 {\n            letterGrade = \"D\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D-\"\n        } else {\n            letterGrade\
    \ = \"E\"\n        }\n        \n        gradesArray.append(letterGrade)\n    }\n\
    \    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0ft5873o/tmp0ft5873o.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bd1c37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bd192eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bd192e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bd192d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ft5873o                        0x000055712dba67a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5bd1e23460 __libc_start_main +
    245

    6    tmp0ft5873o                        0x000055712dba62c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex\
    \ = (gpa - grades[gpaIndex])/grades[gpaIndex]\n        letterGrades.append(letterGrade(index:\
    \ gpaIndex, grade: grades[gpaIndex]))\n        gpa -= grades[gpaIndex]\n     \
    \   gpaIndex += 1\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_dbc2lmt.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp_dbc2lmt.swift:30:29:\
    \ error: cannot find 'letterGrade' in scope\n        letterGrades.append(letterGrade(index:\
    \ gpaIndex, grade: grades[gpaIndex]))\n                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters: [String] = []\n    \n    for\
    \ i in grades.indices {\n        let gpa = grades[i]\n        \n        if gpa\
    \ > 3.0 {\n            gradeLetters.append(\"A+\")\n        } else if gpa > 2.0\
    \ {\n            gradeLetters.append(\"B+\")\n        } else if gpa > 1.7 {\n\
    \            gradeLetters.append(\"C+\")\n        } else if gpa > 1.0 {\n    \
    \        gradeLetters.append(\"D+\")\n        } else if gpa > 0.7 {\n        \
    \    gradeLetters.append(\"D\")\n        } else if gpa > 0.3 {\n            gradeLetters.append(\"\
    D-\")\n        } else if gpa > 0.0 {\n            gradeLetters.append(\"E\")\n\
    \        } else {\n            gradeLetters.append(\"E\")\n        }\n    }\n\
    \    \n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfre3fq6b/tmpfre3fq6b.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2d9bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2d98aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2d98ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2d98ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfre3fq6b                        0x00005598a210a806 <unavailable> + 6150

    5    libc.so.6                          0x00002ba2d9da3460 __libc_start_main +
    245

    6    tmpfre3fq6b                        0x00005598a210a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj3vr85q.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpbj3vr85q.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpbj3vr85q.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpbj3vr85q.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            letterGrades.append(\"A+\")\n\
    \        } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade > 1.3 {\n            letterGrades.append(\"C+\")\n       \
    \ } else if grade > 1.0 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade > 0.7 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade > 0.3 {\n            letterGrades.append(\"D+\")\n        } else if grade\
    \ > 0.0 {\n            letterGrades.append(\"D\")\n        } else {\n        \
    \    letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpipqq19tm/tmpipqq19tm.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fd93fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fd90f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fd90f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fd90f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipqq19tm                        0x0000564a0cc6c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8fd95ea460 __libc_start_main +
    245

    6    tmpipqq19tm                        0x0000564a0cc6c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = -1\n    var letterGrade = \"\"\n    while gpa\
    \ > 0 {\n        gpaIndex += 1\n        gpa -= grades[gpaIndex]\n        if gpa\
    \ > 0 {\n            letterGrade = \"\\(letterGrade)\\(grades[gpaIndex])\"\n \
    \       } else {\n            letterGrade = \"\\(letterGrade)\\(grades[gpaIndex])-\"\
    \n        }\n    }\n    letterGrades.append(letterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxmy7ceu1.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var letterGrades\
    \ = [String]()\n    var gradesArrayCopy = gradesArray\n    var gpa = gradesArray[0]\n\
    \    var letterGrade = \"\"\n    \n    for _ in gradesArrayCopy.dropFirst() {\n\
    \        if gpa > 3.0 {\n            letterGrade = \"B+\"\n            letterGrades.append(letterGrade)\n\
    \            gradesArray.removeFirst()\n            gradesArrayCopy.removeFirst()\n\
    \            gpa = gradesArray[0]\n        } else if gpa > 2.7 {\n           \
    \ letterGrade = \"B\"\n            letterGrades.append(letterGrade)\n        \
    \    gradesArray.removeFirst()\n            gradesArrayCopy.removeFirst()\n  \
    \          gpa = gradesArray[0]\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"B-\"\n            letterGrades.append(letterGrade)\n            gradesArray.removeFirst()\n\
    \            gradesArrayCopy.removeFirst()\n            gpa = gradesArray[0]\n\
    \        } else if gpa > 1.3 {\n            letterGrade = \"C+\"\n           \
    \ letterGrades.append(letterGrade)\n            gradesArray.removeFirst()\n  \
    \          gradesArrayCopy.removeFirst()\n            gpa = gradesArray[0]\n \
    \       } else if gpa > 0.7 {\n            letterGrade = \"C\"\n            letterGrades.append(letterGrade)\n\
    \            gradesArray.removeFirst()\n            gradesArrayCopy.removeFirst()\n\
    \            gpa = gradesArray[0]\n        } else if gpa > 0.3 {\n           \
    \ letterGrade = \"C-\"\n            letterGrades.append(letterGrade)\n       \
    \     gradesArray.removeFirst()\n            gradesArrayCopy.removeFirst()\n \
    \           gpa = gradesArray[0]\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D+\"\n            letterGrades.append(letterGrade)\n            gradesArray.removeFirst()\n\
    \            gradesArrayCopy.removeFirst()\n            gpa = gradesArray[0]\n\
    \        } else if gpa > 0.0 {\n            letterGrade = \"D\"\n            letterGrades.append(letterGrade)\n\
    \            gradesArray.removeFirst()\n            gradesArrayCopy.removeFirst()\n\
    \            gpa = gradesArray[0]\n        } else if gpa > 0.0 {\n           \
    \ letterGrade = \"D-\"\n            letterGrades.append(letterGrade)\n       \
    \     gradesArray.removeFirst()\n            gradesArrayCopy.removeFirst\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptxc1az_n.swift:105:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmptxc1az_n.swift:31:42:\
    \ note: to match this opening '{'\n    for _ in gradesArrayCopy.dropFirst() {\n\
    \                                         ^\n/tmp/tmptxc1az_n.swift:105:66: error:\
    \ expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmptxc1az_n.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmptxc1az_n.swift:84:29:\
    \ error: type of expression is ambiguous without more context\n            gradesArrayCopy.removeFirst\n\
    \            ~~~~~~~~~~~~~~~~^~~~~~~~~~~\n/tmp/tmptxc1az_n.swift:88:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for i in\
    \ grades {\n        if i > 3.0 {\n            gradesArray.append(\"A+\")\n   \
    \     } else if i > 2.0 {\n            gradesArray.append(\"A\")\n        } else\
    \ if i > 1.0 {\n            gradesArray.append(\"B+\")\n        } else if i >\
    \ 0.7 {\n            gradesArray.append(\"B\")\n        } else if i > 0.3 {\n\
    \            gradesArray.append(\"B-\")\n        } else if i > 0.0 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if i > -0.3 {\n            gradesArray.append(\"\
    C\")\n        } else if i > -0.7 {\n            gradesArray.append(\"C-\")\n \
    \       } else if i > -1.0 {\n            gradesArray.append(\"D+\")\n       \
    \ } else if i > -1.7 {\n            gradesArray.append(\"D\")\n        } else\
    \ if i > -2.0 {\n            gradesArray.append(\"D-\")\n        } else if i >\
    \ -3.0 {\n            gradesArray.append(\"E\")\n        } else {\n          \
    \  gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphhhttu29/tmphhhttu29.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae37dd00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae37d9f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae37d9f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae37d9f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhhttu29                        0x000055b97492c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae37deec460 __libc_start_main +
    245

    6    tmphhhttu29                        0x000055b97492c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArraySum = 0\n    var gradesArraySumMax = grades.reduce(0)\
    \ { $0 + $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var\
    \ gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n    var gradesArraySumMin\
    \ = grades.reduce(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjsrjys9w.swift:58:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpjsrjys9w.swift:32:9: error: invalid redeclaration of 'gradesArraySumMin'\n\
    \    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9:\
    \ note: 'gradesArraySumMin' previously declared here\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:33:9: error:\
    \ invalid redeclaration of 'gradesArraySumMin'\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9: note: 'gradesArraySumMin'\
    \ previously declared here\n    var gradesArraySumMin = grades.reduce(0) { $0\
    \ - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:34:9: error: invalid redeclaration\
    \ of 'gradesArraySumMin'\n    var gradesArraySumMin = grades.reduce(0) { $0 -\
    \ $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9: note: 'gradesArraySumMin' previously\
    \ declared here\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n  \
    \      ^\n/tmp/tmpjsrjys9w.swift:35:9: error: invalid redeclaration of 'gradesArraySumMin'\n\
    \    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9:\
    \ note: 'gradesArraySumMin' previously declared here\n    var gradesArraySumMin\
    \ = grades.reduce(0) { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:36:9: error:\
    \ invalid redeclaration of 'gradesArraySumMin'\n    var gradesArraySumMin = grades.reduce(0)\
    \ { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9: note: 'gradesArraySumMin'\
    \ previously declared here\n    var gradesArraySumMin = grades.reduce(0) { $0\
    \ - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:37:9: error: invalid redeclaration\
    \ of 'gradesArraySumMin'\n    var gradesArraySumMin = grades.reduce(0) { $0 -\
    \ $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9: note: 'gradesArraySumMin' previously\
    \ declared here\n    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n  \
    \      ^\n/tmp/tmpjsrjys9w.swift:38:9: error: invalid redeclaration of 'gradesArraySumMin'\n\
    \    var gradesArraySumMin = grades.reduce(0) { $0 - $1 }\n        ^\n/tmp/tmpjsrjys9w.swift:31:9:\
    \ note: 'gradesArray"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGrade = totalGrade / 4.0\n\
    \    \n    for i in 0..<grades.count {\n        let grade = grades[i]\n      \
    \  let letterGrade = letterGradeForGrade(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvk8fh4yd.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmpvk8fh4yd.swift:31:27:\
    \ error: cannot find 'letterGradeForGrade' in scope\n        let letterGrade =\
    \ letterGradeForGrade(grade)\n                          ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj3vr85q.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpbj3vr85q.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpbj3vr85q.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpbj3vr85q.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpbj3vr85q.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpbj3vr85q.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpbj3vr85q.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 ... gpa\n    for i in gpaRange {\n     \
    \   let letterGrade = letterGradeForGPA(gpa: gpa, gpaRange: gpaRange)\n      \
    \  letterGrades.append(letterGrade)\n        gpa -= i\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfr2xu97c.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpfr2xu97c.swift:29:27:\
    \ error: cannot find 'letterGradeForGPA' in scope\n        let letterGrade = letterGradeForGPA(gpa:\
    \ gpa, gpaRange: gpaRange)\n                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayLength = gradesArray.count\n    var letterGrades = [String]()\n\
    \    var currentGrade = gradesArray[0]\n    var currentLetterGrade = \"\"\n  \
    \  var currentLetterGradeIndex = 0\n    \n    for _ in 0..<gradesArrayLength {\n\
    \        if currentGrade < gradesArray[gradesArrayLength-1] {\n            currentGrade\
    \ = gradesArray[gradesArrayLength-1]\n            currentLetterGrade = \"D-\"\n\
    \            currentLetterGradeIndex = gradesArrayLength-1\n        } else {\n\
    \            currentGrade = gradesArray[gradesArrayLength-1]\n            currentLetterGrade\
    \ = \"D+\"\n            currentLetterGradeIndex = 0\n        }\n        \n   \
    \     if currentGrade >= currentLetterGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            gradesArray.remove(at: currentLetterGradeIndex)\n        } else {\n\
    \            letterGrades.append(currentLetterGrade)\n            gradesArray.remove(at:\
    \ currentLetterGradeIndex)\n            letterGrades.append(currentLetterGrade)\n\
    \            gradesArray.remove(at: currentLetterGradeIndex)\n        }\n    }\n\
    \    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmnt0u7tk.swift:44:25: error: binary operator '>=' cannot be applied\
    \ to operands of type 'Double' and 'String'\n        if currentGrade >= currentLetterGrade\
    \ {\n           ~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8xhlyss3/tmp8xhlyss3.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae88e1f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae88dee9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae88dee9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae88dee87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xhlyss3                        0x000055748a18b7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae88e3de460 __libc_start_main +
    245

    6    tmp8xhlyss3                        0x000055748a18b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014297
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"F\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppuq_6jpc/tmppuq_6jpc.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b841ba04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b841b6fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b841b6fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b841b6fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuq_6jpc                        0x0000563360ac27f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b841bbf0460 __libc_start_main +
    245

    6    tmppuq_6jpc                        0x0000563360ac2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    }\n    else if gpa < 3.7 {\n        letterGrade = \"A\"\n    }\n\
    \    else if gpa < 3.3 {\n        letterGrade = \"A-\"\n    }\n    else if gpa\
    \ < 3.0 {\n        letterGrade = \"B+\"\n    }\n    else if gpa < 2.7 {\n    \
    \    letterGrade = \"B\"\n    }\n    else if gpa < 2.3 {\n        letterGrade\
    \ = \"B-\"\n    }\n    else if gpa < 2.0 {\n        letterGrade = \"C+\"\n   \
    \ }\n    else if gpa < 1.7 {\n        letterGrade = \"C\"\n    }\n    else if\
    \ gpa < 1.3 {\n        letterGrade = \"C-\"\n    }\n    else if gpa < 1.0 {\n\
    \        letterGrade = \"D+\"\n    }\n    else if gpa < 0.7 {\n        letterGrade\
    \ = \"D\"\n    }\n    else if gpa < 0.0 {\n        letterGrade = \"D-\"\n    }\n\
    \    else {\n        letterGrade = \"E\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzltox514.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbsiu_bc3/tmpbsiu_bc3.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae90a771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae90a468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae90a468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae90a4677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbsiu_bc3                        0x0000558493ca07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae90a95d460 __libc_start_main +
    245

    6    tmpbsiu_bc3                        0x0000558493ca02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = gpa * 4\n    letterGrades.append(letterGrade)\n\
    \    if gpa > 3.0 {\n        letterGrade = gpa * 3 - 2\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 2.0 {\n        letterGrade = gpa * 3 - 2\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 1.0 {\n        letterGrade = gpa * 3 - 2\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 0.7 {\n        letterGrade = gpa * 3 - 2\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 0.0 {\n        letterGrade = gpa * 3 - 2\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 0.0 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 0.7 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 1.0 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 2.0 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 3.0 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 3.7 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 4.0 {\n        letterGrade = gpa * 3\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_1qy6gs6.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    for grade in grades {\n        gpa += grade\n        if gpa > 3.0\
    \ {\n            gradesArray.append(\"A+\")\n            gpa = gpa - 3.0\n   \
    \     } else if gpa > 2.7 {\n            gradesArray.append(\"B\")\n         \
    \   gpa = gpa - 2.7\n        } else if gpa > 2.3 {\n            gradesArray.append(\"\
    B-\")\n            gpa = gpa - 2.3\n        } else if gpa > 1.7 && gpa < 3.0 {\n\
    \            gradesArray.append(\"C+\")\n            gpa = gpa - 1.7\n       \
    \ } else if gpa > 1.3 && gpa < 2.7 {\n            gradesArray.append(\"C\")\n\
    \            gpa = gpa - 1.3\n        } else if gpa > 1.0 && gpa < 2.3 {\n   \
    \         gradesArray.append(\"C-\")\n            gpa = gpa - 1.0\n        } else\
    \ if gpa > 0.7 && gpa < 1.3 {\n            gradesArray.append(\"D+\")\n      \
    \      gpa = gpa - 0.7\n        } else if gpa > 0.0 && gpa < 1.0 {\n         \
    \   gradesArray.append(\"D\")\n            gpa = gpa - 0.0\n        } else {\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpy4_2g_1r/tmpy4_2g_1r.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b847c0bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b847bdb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b847bdb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b847bdb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4_2g_1r                        0x000055e7bb0e27a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b847c2aa460 __libc_start_main +
    245

    6    tmpy4_2g_1r                        0x000055e7bb0e22c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGrade = totalGrade / 4.0\n\
    \    \n    for grade in grades {\n        let letterGrade = totalLetterGrade >=\
    \ grade ? \"A+\" : totalLetterGrade >= grade - 0.7 ? \"A\" : totalLetterGrade\
    \ >= grade - 0.3 ? \"A-\" : totalLetterGrade >= grade - 0.1 ? \"B+\" : totalLetterGrade\
    \ >= grade - 0.7 ? \"B\" : totalLetterGrade >= grade - 0.3 ? \"B-\" : totalLetterGrade\
    \ >= grade - 0.1 ? \"C+\" : totalLetterGrade >= grade - 0.7 ? \"C\" : totalLetterGrade\
    \ >= grade - 0.3 ? \"C-\" : totalLetterGrade >= grade - 0.1 ? \"D+\" : totalLetterGrade\
    \ >= grade - 0.7 ? \"D\" : totalLetterGrade >= grade - 0.3 ? \"D-\" : totalLetterGrade\
    \ >= grade ? \"E\" : \"D\"\n        letterGrades.append(letterGrade)\n       \
    \ totalLetterGrade -= grade\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbnjaicxz.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        if gpa > 3.0 {\n            letterGrade =\
    \ \"A+\"\n        } else if gpa > 2.7 {\n            letterGrade = \"B+\"\n  \
    \      } else if gpa > 2.3 {\n            letterGrade = \"B\"\n        } else\
    \ if gpa > 1.7 {\n            letterGrade = \"B-\"\n        } else if gpa > 1.0\
    \ {\n            letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n       \
    \     letterGrade = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade\
    \ = \"C-\"\n        } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n\
    \        } else if gpa > -0.3 {\n            letterGrade = \"D\"\n        } else\
    \ if gpa > -0.7 {\n            letterGrade = \"D-\"\n        } else if gpa > -1.0\
    \ {\n            letterGrade = \"E\"\n        } else {\n            letterGrade\
    \ = \"F\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpata4j795/tmpata4j795.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade18d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade18a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade18a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade18a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpata4j795                        0x0000556e2b0777a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ade18f7f460 __libc_start_main +
    245

    6    tmpata4j795                        0x0000556e2b0772c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa > 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa > 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa > 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa > 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa > 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa > 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa > 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa > 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa > 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa > 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa >\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa > 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1c_5c91p.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.0 {\n            letterGrades.append(\"A\")\n\
    \        } else if gpa > 1.7 {\n            letterGrades.append(\"A-\")\n    \
    \    } else if gpa > 1.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"B-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"C+\")\n        } else if gpa > -0.3\
    \ {\n            letterGrades.append(\"C\")\n        } else if gpa > -0.7 {\n\
    \            letterGrades.append(\"C-\")\n        } else if gpa > -1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if gpa > -1.7 {\n      \
    \      letterGrades.append(\"D\")\n        } else if gpa > -2.0 {\n          \
    \  letterGrades.append(\"D-\")\n        } else if gpa > -3.0 {\n            letterGrades.append(\"\
    E\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n  \
    \      gpa -= grade\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphtay3m0a/tmphtay3m0a.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85ee836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85ee52db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85ee52d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85ee52c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtay3m0a                        0x0000558b9e5f7856 <unavailable> + 6230

    5    libc.so.6                          0x00002b85eea22460 __libc_start_main +
    245

    6    tmphtay3m0a                        0x0000558b9e5f7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0.0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquares = grades.reduce(0.0,\
    \ combine: +)\n    var gpaDiffOfSquares = grades.reduce(0.0, combine: +)\n   \
    \ var gpaSumOfSquareOfDifferences = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaDiffOfSquareOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSumOfSquareOfSquaresOfSquaresOf\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3tiub69s.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp3tiub69s.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0.0,\
    \ combine: +)\n                              ^     ~~~~~~~~~\n               \
    \                     \n/tmp/tmp3tiub69s.swift:28:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiff = grades.reduce(0.0, combine: +)\n\
    \                               ^     ~~~~~~~~~\n                            \
    \         \n/tmp/tmp3tiub69s.swift:29:40: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSumOfSquares = grades.reduce(0.0, combine: +)\n        \
    \                               ^     ~~~~~~~~~\n                            \
    \                 \n/tmp/tmp3tiub69s.swift:30:41: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiffOfSquares = grades.reduce(0.0, combine: +)\n\
    \                                        ^     ~~~~~~~~~\n                   \
    \                           \n/tmp/tmp3tiub69s.swift:31:52: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumOfSquareOfDifferences = grades.reduce(0.0,\
    \ combine: +)\n                                                   ^     ~~~~~~~~~\n\
    \                                                         \n/tmp/tmp3tiub69s.swift:32:53:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffOfSquareOfDifferences\
    \ = grades.reduce(0.0, combine: +)\n                                         \
    \           ^     ~~~~~~~~~\n                                                \
    \          \n/tmp/tmp3tiub69s.swift:33:61: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSumOfSquareOfSquaresOfDifferences = grades.reduce(0.0, combine:\
    \ +)\n                                                            ^     ~~~~~~~~~\n\
    \                                                                  \n/tmp/tmp3tiub69s.swift:34:62:\
    \ error: extraneous argument label 'combine:' in cal"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex\
    \ = (gpa - grades[gpaIndex])\n        letterGrades.append(letterGrades[gpaIndex])\n\
    \        gpa -= grades[gpaIndex]\n    }\n    return letterGrades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgbj0jhtx.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters: [String] = []\n    var gpa: Double\
    \ = 0.0\n    for grade in grades {\n        gpa += grade\n        if gpa > 4.0\
    \ {\n            gradeLetters.append(\"A+\")\n            gpa = 4.0\n        }\
    \ else if gpa > 3.7 {\n            gradeLetters.append(\"A\")\n            gpa\
    \ = 3.7\n        } else if gpa > 3.3 {\n            gradeLetters.append(\"A-\"\
    )\n            gpa = 3.3\n        } else if gpa > 3.0 {\n            gradeLetters.append(\"\
    B+\")\n            gpa = 3.0\n        } else if gpa > 2.7 {\n            gradeLetters.append(\"\
    B\")\n            gpa = 2.7\n        } else if gpa > 2.3 {\n            gradeLetters.append(\"\
    B-\")\n            gpa = 2.3\n        } else if gpa > 2.0 {\n            gradeLetters.append(\"\
    C+\")\n            gpa = 2.0\n        } else if gpa > 1.7 {\n            gradeLetters.append(\"\
    C\")\n            gpa = 1.7\n        } else if gpa > 1.3 {\n            gradeLetters.append(\"\
    C-\")\n            gpa = 1.3\n        } else if gpa > 1.0 {\n            gradeLetters.append(\"\
    D+\")\n            gpa = 1.0\n        } else if gpa > 0.7 {\n            gradeLetters.append(\"\
    D\")\n            gpa = 0.7\n        } else if gpa > 0.0 {\n            gradeLetters.append(\"\
    D-\")\n            gpa = 0.0\n        } else {\n            gradeLetters.append(\"\
    E\")\n        }\n    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpe6zyec3t/tmpe6zyec3t.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c13f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c13c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c13c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c13c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6zyec3t                        0x000055a7ad11d7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5c1412c460 __libc_start_main +
    245

    6    tmpe6zyec3t                        0x000055a7ad11d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 1 {\n        return letterGrades\n    }\n    \n    if grades.count > 5 {\n\
    \        return letterGrades\n    }\n    \n    let gpa = grades.first!\n    \n\
    \    if gpa < 4.0 {\n        letterGrades.append(\"A+\")\n    } else if gpa <\
    \ 3.7 {\n        letterGrades.append(\"A\")\n    } else if gpa < 3.3 {\n     \
    \   letterGrades.append(\"A-\")\n    } else if gpa < 3.0 {\n        letterGrades.append(\"\
    B+\")\n    } else if gpa < 2.7 {\n        letterGrades.append(\"B\")\n    } else\
    \ if gpa < 2.3 {\n        letterGrades.append(\"B-\")\n    } else if gpa < 2.0\
    \ {\n        letterGrades.append(\"C+\")\n    } else if gpa < 1.7 {\n        letterGrades.append(\"\
    C\")\n    } else if gpa < 1.3 {\n        letterGrades.append(\"C-\")\n    } else\
    \ if gpa < 1.0 {\n        letterGrades.append(\"D+\")\n    } else if gpa < 0.7\
    \ {\n        letterGrades.append(\"D\")\n    } else if gpa < 0.0 {\n        letterGrades.append(\"\
    D-\")\n    } else {\n        letterGrades.append(\"E\")\n    }\n    \n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkciwka3x/tmpkciwka3x.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b768dc28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b768d91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b768d91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b768d91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkciwka3x                        0x000055de90467816 <unavailable> + 6166

    5    libc.so.6                          0x00002b768de14460 __libc_start_main +
    245

    6    tmpkciwka3x                        0x000055de90467339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade < 3.0 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade < 4.0 {\n            letterGrades.append(\"A-\")\n  \
    \      } else if grade < 5.0 {\n            letterGrades.append(\"B+\")\n    \
    \    } else if grade < 6.0 {\n            letterGrades.append(\"B\")\n       \
    \ } else if grade < 7.0 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade < 8.0 {\n            letterGrades.append(\"C+\")\n        } else\
    \ if grade < 9.0 {\n            letterGrades.append(\"C\")\n        } else if\
    \ grade < 10.0 {\n            letterGrades.append(\"C-\")\n        } else if grade\
    \ < 11.0 {\n            letterGrades.append(\"D+\")\n        } else if grade <\
    \ 12.0 {\n            letterGrades.append(\"D\")\n        } else if grade < 13.0\
    \ {\n            letterGrades.append(\"D-\")\n        } else if grade < 14.0 {\n\
    \            letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnx8uk6qs/tmpnx8uk6qs.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5b0175c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5afe6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5afe6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5afe6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx8uk6qs                        0x0000556c1f3727f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab5b0361460 __libc_start_main +
    245

    6    tmpnx8uk6qs                        0x0000556c1f372319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGrade\
    \ = grades[0]\n    var currentLetterGrade = \"\"\n    for grade in grades {\n\
    \        if grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        currentLetterGrade += String(grade - currentGrade)\n    }\n \
    \   letterGrades.append(currentLetterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgq4qe3rp/tmpgq4qe3rp.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad65242c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad64f39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad64f39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad64f387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgq4qe3rp                        0x000055ef42d2d966 <unavailable> + 6502

    5    libc.so.6                          0x00002aad6542e460 __libc_start_main +
    245

    6    tmpgq4qe3rp                        0x000055ef42d2d489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        if gpa > 3.7 { letterGrade = \"A+\" }\n       \
    \ else if gpa > 3.3 { letterGrade = \"A-\" }\n        else if gpa > 3.0 { letterGrade\
    \ = \"B+\" }\n        else if gpa > 2.7 { letterGrade = \"B\" }\n        else\
    \ if gpa > 2.3 { letterGrade = \"B-\" }\n        else if gpa > 2.0 { letterGrade\
    \ = \"C+\" }\n        else if gpa > 1.7 { letterGrade = \"C\" }\n        else\
    \ if gpa > 1.3 { letterGrade = \"C-\" }\n        else if gpa > 1.0 { letterGrade\
    \ = \"D+\" }\n        else if gpa > 0.7 { letterGrade = \"D\" }\n        else\
    \ { letterGrade = \"D-\" }\n        gradesArray.append(letterGrade)\n    }\n \
    \   return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptouiti49/tmptouiti49.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad017f7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad017c71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad017c71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad017c707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptouiti49                        0x000055c4236c47a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad018166460 __libc_start_main +
    245

    6    tmptouiti49                        0x000055c4236c42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpykid3bkf.swift:25:9: warning: initialization of variable 'gradesArray'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArray = [String]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpykid3bkf.swift:26:9:\
    \ warning: initialization of variable 'gradesArrayIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpykid3bkf.swift:27:9: warning: initialization\
    \ of variable 'gradesArrayIndex2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpykid3bkf.swift:28:9: warning: initialization of variable 'gradesArrayIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpykid3bkf.swift:29:9:\
    \ warning: initialization of variable 'gradesArrayIndex4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpykid3bkf.swift:30:9: warning: initialization\
    \ of variable 'gradesArrayIndex5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpykid3bkf.swift:31:9: warning: initialization of variable 'gradesArrayIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex6 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpykid3bkf.swift:32:9:\
    \ warning: initialization of variable 'gradesArrayIndex7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex7 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpykid3bkf.swift:33:9: warning: initialization\
    \ of variable 'gradesArrayIndex8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpykid3bkf.swift:34:9: warning: initialization of variable 'gradesArrayInd"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 ..< gpa\n    for gpa in gpaRange {\n   \
    \     let letterGrade = letterGradeForGPA(gpa)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3_0b9lu5.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp3_0b9lu5.swift:29:27:\
    \ error: cannot find 'letterGradeForGPA' in scope\n        let letterGrade = letterGradeForGPA(gpa)\n\
    \                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum = grades.reduce(0, combine: +)\n    var gpaSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiff = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaDiffSumDiffSumDiff = grades.reduce(0, combine: +)\n\
    \    var gpaSumDiffSumDiffSumDiff = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaDiffSumDiffSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiffSumDiffSumDiff = grades.reduce(0, combine: +)\n\
    \    var gpaDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine: +)\n    var\
    \ gpaSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSumDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var g\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp0afj3ql.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpp0afj3ql.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpp0afj3ql.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiff = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpp0afj3ql.swift:29:35: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumDiff = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmpp0afj3ql.swift:30:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSum = grades.reduce(0,\
    \ combine: +)\n                                  ^   ~~~~~~~~~\n             \
    \                         \n/tmp/tmpp0afj3ql.swift:31:38: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumDiffSum = grades.reduce(0, combine:\
    \ +)\n                                     ^   ~~~~~~~~~\n                   \
    \                      \n/tmp/tmpp0afj3ql.swift:32:39: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n                                      ^   ~~~~~~~~~\n                  \
    \                        \n/tmp/tmpp0afj3ql.swift:33:42: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n                                         ^   ~~~~~~~~~\n               \
    \                              \n/tmp/tmpp0afj3ql.swift:34:42: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n                                         ^   ~~~~~~~~~\n      \
    \                                       \n/tmp/tmpp0afj3ql.swift:35:45: error:\
    \ extraneous argument"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum = grades.reduce(0, combine: +)\n    var gpaDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfDiffSumOfDiff = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOf\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0qeycagh.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp0qeycagh.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp0qeycagh.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiff = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp0qeycagh.swift:29:37: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumOfDiff = grades.reduce(0, combine: +)\n                       \
    \             ^   ~~~~~~~~~\n                                        \n/tmp/tmp0qeycagh.swift:30:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSum = grades.reduce(0,\
    \ combine: +)\n                                  ^   ~~~~~~~~~\n             \
    \                         \n/tmp/tmp0qeycagh.swift:31:41: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSumOfDiff = grades.reduce(0, combine:\
    \ +)\n                                        ^   ~~~~~~~~~\n                \
    \                            \n/tmp/tmp0qeycagh.swift:32:40: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumOfDiffSum = grades.reduce(0,\
    \ combine: +)\n                                       ^   ~~~~~~~~~\n        \
    \                                   \n/tmp/tmp0qeycagh.swift:33:46: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumOfDiffSumOfDiff = grades.reduce(0,\
    \ combine: +)\n                                             ^   ~~~~~~~~~\n  \
    \                                               \n/tmp/tmp0qeycagh.swift:34:49:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumOfDiffSumOfDiffSum\
    \ = grades.reduce(0, combine: +)\n                                           \
    \     ^   ~~~~~~~~~\n                                                    \n/tmp/"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGrade = totalGrade / 4.0\n\
    \    var letterGrade = totalLetterGrade < 3.0 ? \"A+\" : totalLetterGrade < 3.7\
    \ ? \"A\" : totalLetterGrade < 3.3 ? \"A-\" : totalLetterGrade < 3.0 ? \"B+\"\
    \ : totalLetterGrade < 2.7 ? \"B\" : totalLetterGrade < 2.3 ? \"B-\" : totalLetterGrade\
    \ < 2.0 ? \"C+\" : totalLetterGrade < 1.7 ? \"C\" : totalLetterGrade < 1.3 ? \"\
    C-\" : totalLetterGrade < 1.0 ? \"D+\" : totalLetterGrade < 0.7 ? \"D\" : totalLetterGrade\
    \ < 0.0 ? \"D-\" : \"E\"\n    letterGrades.append(letterGrade)\n    for grade\
    \ in grades {\n        totalGrade -= grade\n        totalLetterGrade = totalGrade\
    \ / 4.0\n        letterGrade = totalLetterGrade < 3.0 ? \"A+\" : totalLetterGrade\
    \ < 3.7 ? \"A\" : totalLetterGrade < 3.3 ? \"A-\" : totalLetterGrade < 3.0 ? \"\
    B+\" : totalLetterGrade < 2.7 ? \"B\" : totalLetterGrade < 2.3 ? \"B-\" : totalLetterGrade\
    \ < 2.0 ? \"C+\" : totalLetterGrade < 1.7 ? \"C\" : totalLetterGrade < 1.3 ? \"\
    C-\" : totalLetterGrade < 1.0 ? \"D+\" : totalLetterGrade < 0.7 ? \"D\" : totalLetterGrade\
    \ < 0.0 ? \"D-\" : \"E\"\n        letterGrades.append(letterGrade)\n    }\n  \
    \  return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zqzd0f5.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade:\
    \ Double = 0\n    var totalGradeIndex: Int = 0\n    var gradeIndex: Int = 0\n\
    \    \n    for grade in grades {\n        totalGrade += grade\n        gradeIndex\
    \ += 1\n        \n        if totalGrade >= 3.0 {\n            totalGradeIndex\
    \ += 1\n            totalGrade = 0\n        }\n        \n        if totalGradeIndex\
    \ == gradeIndex {\n            gradesArray.append(letterGrade(grade))\n      \
    \  }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmponzfdn2w.swift:40:32: error: cannot find 'letterGrade' in scope\n\
    \            gradesArray.append(letterGrade(grade))\n                        \
    \       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        break\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0rmgu4c4.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    \n    for index in\
    \ 0..<grades.count {\n        let grade = grades[index]\n        \n        if\
    \ grade > 3.0 {\n            gradesArray[gradesArrayIndex] = \"B-\"\n        \
    \    gradesArrayIndex += 1\n        } else if grade > 2.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.3 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 2.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 1.7 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 1.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.3 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppaahfzii.swift:101:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmppaahfzii.swift:29:35:\
    \ note: to match this opening '{'\n    for index in 0..<grades.count {\n     \
    \                             ^\n/tmp/tmppaahfzii.swift:101:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmppaahfzii.swift:24:59: note: to match this opening '{'\n\
    func numerical_letter_grade(grades: [Double]) -> [String] {\n                \
    \                                          ^\n/tmp/tmppaahfzii.swift:84:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmppaahfzii.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayIndexMax' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndexMax\
    \ = grades.count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n \
    \       } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n   \
    \     } else if grade > 1.3 {\n            letterGrades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade > 1.0 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade > 0.7 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade > 0.3 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n       \
    \     letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpppunep1y/tmpppunep1y.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b4b77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b486eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b486e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b486d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppunep1y                        0x0000560b73f1f7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b34b4d63460 __libc_start_main +
    245

    6    tmpppunep1y                        0x0000560b73f1f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayCount = grades.count\n    var gradesArraySum = grades.reduce(0,\
    \ combine: +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n\
    \    var gradesArrayMax = grades.max()\n    var gradesArrayMin = grades.min()\n\
    \    var gradesArraySumOfSquares = grades.reduce(0, combine: +)\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares.max()\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.min()\n\
    \    var gradesArraySumOfSquaresSumOfSquares = grades.reduce(0, combine: +)\n\
    \    var gradesArraySumOfSquaresSumOfSquaresAverage = gradesArraySumOfSquaresSumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumOfSquaresMax = gradesArraySumOfSquaresSumOfSquares.max()\n\
    \    var gradesArraySumOfSquaresSumOfSquaresMin = gradesArraySumOfSquaresSumOfSquares.min()\n\
    \    var gradesArraySumOfSquaresSumOfSquaresSumOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesArraySumOfSquaresSumOfSquaresSumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresMax\
    \ = gradesArraySumOfSquaresSumOfSquaresSumOfSquares.max()\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresMin\
    \ = gradesArraySumOfSquaresSumOfSquaresSumOfSquares.min()\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresAverage\
    \ = gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMax = gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.max()\n\
    \    var gradesArraySumOfSquares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_ytupyv9.swift:28:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySum = grades.reduce(0, combine: +)\n           \
    \                           ^   ~~~~~~~~~\n                                  \
    \        \n/tmp/tmp_ytupyv9.swift:32:48: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySumOfSquares = grades.reduce(0, combine: +)\n  \
    \                                             ^   ~~~~~~~~~\n                \
    \                                   \n/tmp/tmp_ytupyv9.swift:36:60: error: extraneous\
    \ argument label 'combine:' in call\n    var gradesArraySumOfSquaresSumOfSquares\
    \ = grades.reduce(0, combine: +)\n                                           \
    \                ^   ~~~~~~~~~\n                                             \
    \                  \n/tmp/tmp_ytupyv9.swift:40:72: error: extraneous argument\
    \ label 'combine:' in call\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquares\
    \ = grades.reduce(0, combine: +)\n                                           \
    \                            ^   ~~~~~~~~~\n                                 \
    \                                          \n/tmp/tmp_ytupyv9.swift:44:84: error:\
    \ extraneous argument label 'combine:' in call\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = grades.reduce(0, combine: +)\n                                           \
    \                                        ^   ~~~~~~~~~\n                     \
    \                                                                  \n/tmp/tmp_ytupyv9.swift:47:9:\
    \ error: type annotation missing in pattern\n    var gradesArraySumOfSquares\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 3.7 {\n            gradesArray.append(\"A\")\n    \
    \    } else if grade > 3.3 {\n            gradesArray.append(\"A-\")\n       \
    \ } else if grade > 3.0 {\n            gradesArray.append(\"B+\")\n        } else\
    \ if grade > 2.7 {\n            gradesArray.append(\"B\")\n        } else if grade\
    \ > 2.3 {\n            gradesArray.append(\"B-\")\n        } else if grade > 2.0\
    \ {\n            gradesArray.append(\"C+\")\n        } else if grade > 1.7 {\n\
    \            gradesArray.append(\"C\")\n        } else if grade > 1.3 {\n    \
    \        gradesArray.append(\"C-\")\n        } else if grade > 1.0 {\n       \
    \     gradesArray.append(\"D+\")\n        } else if grade > 0.7 {\n          \
    \  gradesArray.append(\"D\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"\
    D-\")\n        } else {\n            gradesArray.append(\"E\")\n        }\n  \
    \  }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var totalGrade = grades.reduce(0, combine: +)\n    var totalGradeIndex\
    \ = 0\n    var totalGradeIndex2 = 0\n    var totalGradeIndex3 = 0\n    var totalGradeIndex4\
    \ = 0\n    var totalGradeIndex5 = 0\n    var totalGradeIndex6 = 0\n    var totalGradeIndex7\
    \ = 0\n    var totalGradeIndex8 = 0\n    var totalGradeIndex9 = 0\n    var totalGradeIndex10\
    \ = 0\n    var totalGradeIndex11 = 0\n    var totalGradeIndex12 = 0\n    var totalGradeIndex13\
    \ = 0\n    var totalGradeIndex14 = 0\n    var totalGradeIndex15 = 0\n    var totalGradeIndex16\
    \ = 0\n    var totalGradeIndex17 = 0\n    var totalGradeIndex18 = 0\n    var totalGradeIndex19\
    \ = 0\n    var totalGradeIndex20 = 0\n    var totalGradeIndex21 = 0\n    var totalGradeIndex22\
    \ = 0\n    var totalGradeIndex23 = 0\n    var totalGradeIndex24 = 0\n    var totalGradeIndex25\
    \ = 0\n    var totalGradeIndex26 = 0\n    var totalGradeIndex27 = 0\n    var totalGradeIndex28\
    \ = 0\n    var totalGradeIndex29 = 0\n    var totalGradeIndex30 = 0\n    var totalGradeIndex31\
    \ = 0\n    var totalGradeIndex32 = 0\n    var totalGradeIndex33 = 0\n    var totalGradeIndex34\
    \ = 0\n    var totalGradeIndex35 = 0\n    var totalGradeIndex36 = 0\n    var totalGradeIndex37\
    \ = 0\n    var totalGradeIndex38 = 0\n    var totalGradeIndex39 = 0\n    var totalGradeIndex40\
    \ = 0\n    var totalGradeIndex41 = 0\n    var totalGradeIndex42 = 0\n    var totalGradeIndex43\
    \ = 0\n    var totalGradeIndex44 = 0\n    var totalGradeIndex45 = 0\n    var totalGradeIndex46\
    \ = 0\n    var totalGradeIndex47 = 0\n    var totalGradeIndex48 = 0\n    var totalGradeIndex49\
    \ = 0\n    var totalGradeIndex50 = 0\n    var totalGradeIndex51 = 0\n    var totalGradeIndex52\
    \ = 0\n    var totalGradeIndex53 = 0\n    var totalGradeIndex54 = 0\n    var totalGradeIndex55\
    \ = 0\n    var totalGradeIndex56 = 0\n    var totalGradeIndex57 = 0\n    var totalGradeIndex58\
    \ = 0\n    var totalGradeIndex59 = 0\n    var totalGradeIndex60 = 0\n    var totalGrade\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzm29aq_9.swift:27:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmpzm29aq_9.swift:88:9:\
    \ error: type annotation missing in pattern\n    var totalGrade\n        ^\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa >= 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa >= 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa >= 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa >= 3.0 {\n\
    \        letterGrade = \"B+\"\n    } else if gpa >= 2.7 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa >= 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa >= 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa >= 1.7 {\n\
    \        letterGrade = \"C\"\n    } else if gpa >= 1.3 {\n        letterGrade\
    \ = \"C-\"\n    } else if gpa >= 1.0 {\n        letterGrade = \"D+\"\n    } else\
    \ if gpa >= 0.7 {\n        letterGrade = \"D\"\n    } else if gpa >= 0.0 {\n \
    \       letterGrade = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n\
    \    gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd9dgccdy.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade < 3.0 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade < 3.3 {\n            letterGrades.append(\"A-\")\n  \
    \      } else if grade < 3.7 {\n            letterGrades.append(\"B+\")\n    \
    \    } else if grade < 4.0 {\n            letterGrades.append(\"B\")\n       \
    \ } else if grade < 4.3 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade < 4.7 {\n            letterGrades.append(\"C+\")\n        } else\
    \ if grade < 5.0 {\n            letterGrades.append(\"C\")\n        } else if\
    \ grade < 5.3 {\n            letterGrades.append(\"C-\")\n        } else if grade\
    \ < 5.7 {\n            letterGrades.append(\"D+\")\n        } else if grade <\
    \ 6.0 {\n            letterGrades.append(\"D\")\n        } else if grade < 6.3\
    \ {\n            letterGrades.append(\"D-\")\n        } else if grade < 6.7 {\n\
    \            letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    D\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsf6jix82/tmpsf6jix82.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd0a661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd0a358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd0a358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd0a3577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsf6jix82                        0x000055ac23baa7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002afd0a84d460 __libc_start_main +
    245

    6    tmpsf6jix82                        0x000055ac23baa319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz384oy2d.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + letterGradeMap[gpa]\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    return gradesArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7od_cbzb.swift:31:37: error: cannot find 'letterGradeMap' in scope\n\
    \        letterGrade = letterGrade + letterGradeMap[gpa]\n                   \
    \                 ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Write\
    \ your code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprelm_t5g/tmprelm_t5g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf4868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf455fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf455f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf455e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprelm_t5g                        0x0000557dfc648636 <unavailable> + 5686

    5    libc.so.6                          0x00002aedf4a54460 __libc_start_main +
    245

    6    tmprelm_t5g                        0x0000557dfc648159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014298
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrz3gdhr.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpsrz3gdhr.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade: String = \"\"\n    \n    if gpa < 4.0 {\n\
    \        letterGrade = \"A+\"\n    }\n    else if gpa < 3.7 {\n        letterGrade\
    \ = \"A\"\n    }\n    else if gpa < 3.3 {\n        letterGrade = \"A-\"\n    }\n\
    \    else if gpa < 3.0 {\n        letterGrade = \"B+\"\n    }\n    else if gpa\
    \ < 2.7 {\n        letterGrade = \"B\"\n    }\n    else if gpa < 2.3 {\n     \
    \   letterGrade = \"B-\"\n    }\n    else if gpa < 2.0 {\n        letterGrade\
    \ = \"C+\"\n    }\n    else if gpa < 1.7 {\n        letterGrade = \"C\"\n    }\n\
    \    else if gpa < 1.3 {\n        letterGrade = \"C-\"\n    }\n    else if gpa\
    \ < 1.0 {\n        letterGrade = \"D+\"\n    }\n    else if gpa < 0.7 {\n    \
    \    letterGrade = \"D\"\n    }\n    else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    }\n    else {\n        letterGrade = \"E\"\n    }\n    \n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0v6tte23.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = \"A+\" \n        if gpa > 3.7\
    \ { \n            letterGrade = \"A\" \n            if gpa > 3.3 { \n        \
    \        letterGrade = \"A-\" \n                if gpa > 3.0 { \n            \
    \        letterGrade = \"B+\" \n                    if gpa > 2.7 { \n        \
    \                letterGrade = \"B\" \n                        if gpa > 2.3 {\
    \ \n                            letterGrade = \"B-\" \n                      \
    \      if gpa > 2.0 { \n                                letterGrade = \"C+\" \n\
    \                                if gpa > 1.7 { \n                           \
    \         letterGrade = \"C\" \n                                    if gpa > 1.3\
    \ { \n                                        letterGrade = \"C-\" \n        \
    \                                if gpa > 1.0 { \n                           \
    \                 letterGrade = \"D+\" \n                                    \
    \        if gpa > 0.7 { \n                                                letterGrade\
    \ = \"D\" \n                                                if gpa > 0.0 { \n\
    \                                                    letterGrade = \"D-\" \n \
    \                                                   if gpa > 0.0 { \n        \
    \                                                letterGrade = \"E\" \n      \
    \                                              }\n                           \
    \                     }\n                                            }\n     \
    \                                   }\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppwh5pgsr/tmppwh5pgsr.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50ae938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ae62fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ae62f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ae62e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwh5pgsr                        0x000055d91f2907a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b50aeb24460 __libc_start_main +
    245

    6    tmppwh5pgsr                        0x000055d91f2902c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaIndex = 0\n\
    \    var gpaSumIndex = 0\n    var gpaAverageIndex = 0\n    var gpaIndexMax = grades.count\
    \ - 1\n    \n    while gpaIndex < gpaIndexMax {\n        if gpa >= grades[gpaIndex]\
    \ {\n            letterGrades.append(letterGrades[gpaIndex])\n            gpaSumIndex\
    \ += 1\n            gpaIndex += 1\n        } else {\n            if gpaSum > gpaSumIndex\
    \ {\n                letterGrades.append(letterGrades[gpaIndex])\n           \
    \     gpaSumIndex += 1\n                gpaIndex += 1\n            } else {\n\
    \                if gpaAverage > gpaAverageIndex {\n                    letterGrades.append(letterGrades[gpaIndex])\n\
    \                    gpaAverageIndex += 1\n                    gpaIndex += 1\n\
    \                } else {\n                    letterGrades.append(letterGrades[gpaIndex])\n\
    \                    gpaIndex += 1\n                }\n            }\n       \
    \ }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn1brh0d2.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpn1brh0d2.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpn1brh0d2.swift:28:35: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                  ^   ~~~~~~~~~\n                           \
    \           \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ 3.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.7 {\n   \
    \         letterGrade = \"B\"\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.3 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0.0 {\n       \
    \     letterGrade = \"D\"\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D-\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     gradesArray.append(letterGrade)\n        gpa -= grade\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpowzp5giq/tmpowzp5giq.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2dbcbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2db9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2db9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2db9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowzp5giq                        0x0000561e856cb856 <unavailable> + 6230

    5    libc.so.6                          0x00002ae2dbea9460 __libc_start_main +
    245

    6    tmpowzp5giq                        0x0000561e856cb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa >= 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa >= 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa >= 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa >= 3.0 {\n\
    \        letterGrade = \"B+\"\n    } else if gpa >= 2.7 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa >= 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa >= 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa >= 1.7 {\n\
    \        letterGrade = \"C\"\n    } else if gpa >= 1.3 {\n        letterGrade\
    \ = \"C-\"\n    } else if gpa >= 1.0 {\n        letterGrade = \"D+\"\n    } else\
    \ if gpa >= 0.7 {\n        letterGrade = \"D\"\n    } else if gpa >= 0.0 {\n \
    \       letterGrade = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n\
    \    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpehe70dd3.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B+\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade =\
    \ \"A-\"\n    } else if gpa < 1.0 {\n        letterGrade = \"A+\"\n    } else\
    \ if gpa < 0.7 {\n        letterGrade = \"D+\"\n    } else if gpa < 0.0 {\n  \
    \      letterGrade = \"D-\"\n    } else {\n        letterGrade = \"C\"\n    }\n\
    \    \n    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6j5vp0xx.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ 3.0 {\n            letterGrade = \"A+\"\n        } else if gpa > 2.7 {\n   \
    \         letterGrade = \"B\"\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.3 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0.0 {\n       \
    \     letterGrade = \"D\"\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D-\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     \n        gradesArray.append(letterGrade)\n        gpa -= grade\n    }\n\
    \    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4iyhg8e4/tmp4iyhg8e4.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af625d6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af625a63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af625a63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af625a627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4iyhg8e4                        0x0000561a62cab856 <unavailable> + 6230

    5    libc.so.6                          0x00002af625f58460 __libc_start_main +
    245

    6    tmp4iyhg8e4                        0x0000561a62cab379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMaxMin = gradesArrayIndexMax\n    var gradesArrayIndexMinMax\
    \ = gradesArrayIndexMin\n    var gradesArrayIndexMaxMinMin = gradesArrayIndexMaxMin\n\
    \    var gradesArrayIndexMinMaxMin = gradesArrayIndexMinMaxMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpciyjtu9_.swift:55:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpciyjtu9_.swift:32:37: error: use of local variable 'gradesArrayIndexMinMaxMin'\
    \ before its declaration\n    var gradesArrayIndexMinMaxMin = gradesArrayIndexMinMaxMin\n\
    \                                    ^\n/tmp/tmpciyjtu9_.swift:32:9: note: 'gradesArrayIndexMinMaxMin'\
    \ declared here\n    var gradesArrayIndexMinMaxMin = gradesArrayIndexMinMaxMin\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMaxMin = gradesArrayIndexMax\n    var gradesArrayIndexMinMax\
    \ = gradesArrayIndexMin\n    var gradesArrayIndexMaxMinMin = gradesArrayIndexMaxMin\n\
    \    var gradesArrayIndexMinMaxMin = gradesArrayIndexMinMaxMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    \    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var\
    \ gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin\
    \ = gradesArrayIndexMinMaxMinMin\n    var gradesArrayIndexMinMaxMinMin = gradesArrayIndexMinMaxMinMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0cw0s3xw.swift:32:37: error: use of local variable 'gradesArrayIndexMinMaxMin'\
    \ before its declaration\n    var gradesArrayIndexMinMaxMin = gradesArrayIndexMinMaxMin\n\
    \                                    ^\n/tmp/tmp0cw0s3xw.swift:32:9: note: 'gradesArrayIndexMinMaxMin'\
    \ declared here\n    var gradesArrayIndexMinMaxMin = gradesArrayIndexMinMaxMin\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        letterGrade = \"E\"\n    }\n   \
    \ gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_423jzo.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaLetterGrade: String = \"\"\n    if gpa < 4.0 {\n   \
    \     gpaLetterGrade = \"A+\"\n    } else if gpa < 3.7 {\n        gpaLetterGrade\
    \ = \"A\"\n    } else if gpa < 3.3 {\n        gpaLetterGrade = \"A-\"\n    } else\
    \ if gpa < 3.0 {\n        gpaLetterGrade = \"B+\"\n    } else if gpa < 2.7 {\n\
    \        gpaLetterGrade = \"B\"\n    } else if gpa < 2.3 {\n        gpaLetterGrade\
    \ = \"B-\"\n    } else if gpa < 2.0 {\n        gpaLetterGrade = \"C+\"\n    }\
    \ else if gpa < 1.7 {\n        gpaLetterGrade = \"C\"\n    } else if gpa < 1.3\
    \ {\n        gpaLetterGrade = \"C-\"\n    } else if gpa < 1.0 {\n        gpaLetterGrade\
    \ = \"D+\"\n    } else if gpa < 0.7 {\n        gpaLetterGrade = \"D\"\n    } else\
    \ if gpa < 0.0 {\n        gpaLetterGrade = \"D-\"\n    } else {\n        gpaLetterGrade\
    \ = \"E\"\n    }\n    letterGrades.append(gpaLetterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoiwunl24.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var currentGrade\
    \ = grades[0]\n    var currentLetterGrade = \"\"\n    var currentLetterGradeIndex\
    \ = 0\n    var currentLetterGradeIndex2 = 0\n    var currentLetterGradeIndex3\
    \ = 0\n    var currentLetterGradeIndex4 = 0\n    var currentLetterGradeIndex5\
    \ = 0\n    var currentLetterGradeIndex6 = 0\n    var currentLetterGradeIndex7\
    \ = 0\n    var currentLetterGradeIndex8 = 0\n    var currentLetterGradeIndex9\
    \ = 0\n    var currentLetterGradeIndex10 = 0\n    var currentLetterGradeIndex11\
    \ = 0\n    var currentLetterGradeIndex12 = 0\n    var currentLetterGradeIndex13\
    \ = 0\n    var currentLetterGradeIndex14 = 0\n    var currentLetterGradeIndex15\
    \ = 0\n    var currentLetterGradeIndex16 = 0\n    var currentLetterGradeIndex17\
    \ = 0\n    var currentLetterGradeIndex18 = 0\n    var currentLetterGradeIndex19\
    \ = 0\n    var currentLetterGradeIndex20 = 0\n    var currentLetterGradeIndex21\
    \ = 0\n    var currentLetterGradeIndex22 = 0\n    var currentLetterGradeIndex23\
    \ = 0\n    var currentLetterGradeIndex24 = 0\n    var currentLetterGradeIndex25\
    \ = 0\n    var currentLetterGradeIndex26 = 0\n    var currentLetterGradeIndex27\
    \ = 0\n    var currentLetterGradeIndex28 = 0\n    var currentLetterGradeIndex29\
    \ = 0\n    var currentLetterGradeIndex30 = 0\n    var currentLetterGradeIndex31\
    \ = 0\n    var currentLetterGradeIndex32 = 0\n    var currentLetterGradeIndex33\
    \ = 0\n    var currentLetterGradeIndex34 = 0\n    var currentLetterGradeIndex35\
    \ = 0\n    var currentLetterGradeIndex36 = 0\n    var currentLetterGradeIndex37\
    \ = 0\n    var currentLetterGradeIndex38 = 0\n    var currentLetterGradeIndex39\
    \ = 0\n    var currentLetterGradeIndex40 = 0\n    var currentLetterGradeIndex41\
    \ = 0\n    var currentLetterGradeIndex42 = 0\n    var currentLetterGradeIndex43\
    \ = 0\n    var currentLetterGradeIndex44 = 0\n    var currentLetterGradeIndex45\
    \ = 0\n    var currentLetterGradeIndex46 = 0\n    var currentLetterGradeIndex47\
    \ = 0\n    var currentLetterGradeIndex48 = 0\n    var currentLetterGradeIndex49\
    \ = 0\n    var currentLetterGradeIndex50 = 0\n    var currentLetterGradeIndex51\
    \ = 0\n    var currentLetterGradeIndex52 = 0\n    var currentLetterGradeIndex53\
    \ = 0\n    var currentLetterGradeIndex54 = 0\n    var currentLetter\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7lgezw5y.swift:82:9: error: type annotation missing in pattern\n\
    \    var currentLetter\n        ^\n"
  stdout: ''
  timestamp: 1660014299
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Your\
    \ code goes here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpcm09rjtf/tmpcm09rjtf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5943c29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5943920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5943920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b594391f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcm09rjtf                        0x0000558416246636 <unavailable> + 5686

    5    libc.so.6                          0x00002b5943e15460 __libc_start_main +
    245

    6    tmpcm09rjtf                        0x0000558416246159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014299
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquares = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverage = grades.reduce(0,\
    \ combine: +)\n    var gpaAverageOfSquareOfAverage = grades.reduce(0, combine:\
    \ +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquares = grades.reduce(0,\
    \ combine: +)\n    var gpaAverageOfSquareOfAverageOfSquares = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquareOfAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquareOfAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy7ayt56u.swift:47:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpy7ayt56u.swift:46:112: note: to match this opening '('\n    var gpaAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquareOfAverageOfSquares\
    \ = grades.reduce(0, combine\n                                               \
    \                                                                ^\n/tmp/tmpy7ayt56u.swift:26:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmpy7ayt56u.swift:27:31: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum = grades.reduce(0, combine: +)\n                   \
    \           ^   ~~~~~~~~~\n                                  \n/tmp/tmpy7ayt56u.swift:28:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaAverage = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n                                  ^   ~~~~~~~~~\n\
    \                                      \n/tmp/tmpy7ayt56u.swift:29:40: error:\
    \ extraneous argument label 'combine:' in call\n    var gpaSumOfSquares = grades.reduce(0,\
    \ combine: +)\n                                       ^   ~~~~~~~~~\n        \
    \                                   \n/tmp/tmpy7ayt56u.swift:30:44: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaAverageOfSquares = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n                                       \
    \    ^   ~~~~~~~~~\n                                               \n/tmp/tmpy7ayt56u.swift:31:48:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumOfSquareOfAverage\
    \ = grades.reduce(0, combine: +)\n                                           \
    \    ^   ~~~~~~~~~\n                                                   \n/tmp/tmpy7ayt56u.swift:32:52:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaAverageOfSquareOfAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n                    \
    \                               ^   ~~~~~~~~~\n                              \
    \  "
  stdout: ''
  timestamp: 1660014300
